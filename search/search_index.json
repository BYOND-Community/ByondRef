{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"DM/","title":"DM","text":""},{"location":"DM/#dm-language-details","title":"DM language details","text":"<p>The DM (Dream Maker) language uses a syntax similar to C/C++ to build networked multi-user worlds. This reference and the accompanying guide discuss the structure and function of DM.</p> <p>This reference is arranged in sections:</p> <ul> <li>The DM language:   The majority of the reference; items in this section can have top-level entries.</li> <li>Special notes:   Articles describing advanced features or concepts in more depth.</li> <li>User interface skins:   Anything related to creating custom UIs for your world.</li> <li> <p>Appendix:   Additional reference informtation that might apply to multiple topics, e.g. regarding colors or HTML.</p> </li> <li> <p>The DM language:   The majority of the reference; items in this section can have top-level entries.</p> </li> </ul> <p>The DM language: - Special notes:   Articles describing advanced features or concepts in more depth.</p> <p>Special notes: - User interface skins:   Anything related to creating custom UIs for your world.</p> <p>User interface skins: - Appendix:   Additional reference informtation that might apply to multiple topics, e.g. regarding colors or HTML.</p> <p>Appendix:</p> <p>You can filter the reference content by subject, which helps narrow down anything you might be looking for.</p> <p>In various articles you may see notes or sidebar content:</p> <p>|   \u26a0\ufe0f   |   Important note   | |   \ud83d\udd12\ufe0f   |   Security concerns   | |   \ud83c\udfc3\ufe0f   |   Performance tip   | |   \ud83d\udc4d\ufe0f   |   Rule of thumb   | |   \ud83c\udfdb\ufe0f   |   Compatibility   | |   \ud83d\udca1\ufe0f   |   Did you know?   | |   \ud83d\udd27\ufe0f   |   Under the hood   | |   \ud83c\udfb3\ufe0f   |   Play area   |</p> <p>|   \u26a0\ufe0f   |   Important note   |</p> <p>\u26a0\ufe0f  |</p> <p>Important note  | |   \ud83d\udd12\ufe0f   |   Security concerns   |</p> <p>\ud83d\udd12\ufe0f  |</p> <p>Security concerns  | |   \ud83c\udfc3\ufe0f   |   Performance tip   |</p> <p>\ud83c\udfc3\ufe0f  |</p> <p>Performance tip  | |   \ud83d\udc4d\ufe0f   |   Rule of thumb   |</p> <p>\ud83d\udc4d\ufe0f  |</p> <p>Rule of thumb  | |   \ud83c\udfdb\ufe0f   |   Compatibility   |</p> <p>\ud83c\udfdb\ufe0f  |</p> <p>Compatibility  | |   \ud83d\udca1\ufe0f   |   Did you know?   |</p> <p>\ud83d\udca1\ufe0f  |</p> <p>Did you know?  | |   \ud83d\udd27\ufe0f   |   Under the hood   |</p> <p>\ud83d\udd27\ufe0f  |</p> <p>Under the hood  | |   \ud83c\udfb3\ufe0f   |   Play area   |</p> <p>\ud83c\udfb3\ufe0f  |</p> <p>Play area  |</p>"},{"location":"area/","title":"Area","text":""},{"location":"area/#area","title":"area","text":"<p>See also: </p> <p>atom </p> <p>procs (area) </p> <p>rooms </p> <p>vars (area) </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>procs (area) </p> <p>rooms </p> <p>vars (area) </p> <p>atom</p> <p>procs (area) </p> <p>rooms </p> <p>vars (area) </p> <p>procs (area)</p> <p>rooms </p> <p>vars (area) </p> <p>rooms</p> <p>vars (area) </p> <p>vars (area)</p> <p>Areas are derived from</p> <p>/area</p> <p>, which derives from</p> <p>/atom</p> <p>. Regions on the map may be assigned to an area by painting it onto the map. Areas off the map serve as rooms that objects may enter and exit.</p> <p>/area</p> <p>/atom</p> <p>For each area type defined, one area object is created at runtime. So for areas on the map, all squares with the same area type belong to the same instance of the area.</p> <p>Additional instances of rooms may be created from the same type by explicitly creating them with null as the initial location. That is, the first argument to</p> <p>new()</p> <p>should either be</p> <p>null</p> <p>or left unspecified.</p> <p>new()</p> <p>null</p> <p>The following example defines the area prototype</p> <p>/area/outside</p> <p>. It also defines an action to be taken when somebody enters an area, namely to display its description.</p> <p>/area/outside</p>"},{"location":"area/#_1","title":"Area","text":"<p>Example:</p> <p>area  Entered(O)  if(desc) O &lt;&lt; desc  return ..()</p> <p>outside  desc = \"Ah! A breath of fresh air!\"</p>"},{"location":"atom/","title":"Atom","text":""},{"location":"atom/#atom","title":"atom","text":"<p>See also: </p> <p>area </p> <p>datum </p> <p>mob </p> <p>movable atoms </p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>See also: </p> <p>See also:</p> <p>area </p> <p>datum </p> <p>mob </p> <p>movable atoms </p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>area</p> <p>datum </p> <p>mob </p> <p>movable atoms </p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>datum</p> <p>mob </p> <p>movable atoms </p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>mob</p> <p>movable atoms </p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>movable atoms</p> <p>obj </p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>obj</p> <p>procs (atom) </p> <p>turf </p> <p>vars (atom) </p> <p>procs (atom)</p> <p>turf </p> <p>vars (atom) </p> <p>turf</p> <p>vars (atom) </p> <p>vars (atom)</p> <p>The /atom object type is the ancestor of all mappable objects in the game. The types /area, /turf, /obj, and /mob are all derived from /atom. You should not create instances of /atom directly but should use /area, /turf, /obj, and /mob for actual objects. The /atom object type exists for the purpose of defining variables or procedures that are shared by all of the other \"physical\" objects. These are also the only objects for which verbs may be accessible to the user.</p> <p>/atom is derived from /datum, so it inherits the basic properties that are shared by all DM objects.</p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#client","title":"client","text":"<p>See also: </p> <p>client var (mob) </p> <p>key var (mob) </p> <p>procs (client) </p> <p>vars (client) </p> <p>See also: </p> <p>See also:</p> <p>client var (mob) </p> <p>key var (mob) </p> <p>procs (client) </p> <p>vars (client) </p> <p>client var (mob)</p> <p>key var (mob) </p> <p>procs (client) </p> <p>vars (client) </p> <p>key var (mob)</p> <p>procs (client) </p> <p>vars (client) </p> <p>procs (client)</p> <p>vars (client) </p> <p>vars (client)</p> <p>Each connected player has a corresponding client object. It has variables and procedures which control aspects of player input/output. This object is also responsible for linking the player up to a mob.</p> <p>The client can be reassigned from its original mob M to a new mob N by setting N.client = M.client. This process disconnects the player from M (calling M.Logout()) and connects the player to N (calling N.Login()). Setting the mob's key has the same effect.</p> <p>Additional vars, procs, and verbs may be added to the client in order to give the player properties that are independent of the mob.</p>"},{"location":"database/","title":"Database","text":""},{"location":"database/#database-datum","title":"database datum","text":"<p>See also: </p> <p>database query datum </p> <p>procs (database) </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>database query datum </p> <p>procs (database) </p> <p>stddef.dm file </p> <p>database query datum</p> <p>procs (database) </p> <p>stddef.dm file </p> <p>procs (database)</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>A /database datum gives you the ability to create or access a database using SQLite, which allows you to run complex database queries on any platform.</p> <p>Creating a /database/query datum will let you put together a query, and once it's ready you can call its Execute() proc to run it.</p> <p>SQLite databases in BYOND support numerical values (such as INTEGER or FLOAT), text (TEXT), and cache files such as icons (BLOB). Null values are also allowed.</p>"},{"location":"database/#_1","title":"Database","text":"<p>Example:</p> <p>var/database/db = new(\"mydb.db\") var/database/query/q = new(\"SELECT * FROM my_table WHERE name=?\", usr.key)</p> <p>if(q.Execute(db) &amp;&amp; q.NextRow())  // returns a list such as list(name=\"MyName\", score=123)  return q.GetRowData() // no data found return null</p>"},{"location":"datum/","title":"Datum","text":""},{"location":"datum/#datum","title":"datum","text":"<p>See also: </p> <p>atom </p> <p>procs (datum) </p> <p>vars (datum) </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>procs (datum) </p> <p>vars (datum) </p> <p>atom</p> <p>procs (datum) </p> <p>vars (datum) </p> <p>procs (datum)</p> <p>vars (datum) </p> <p>vars (datum)</p> <p>The datum object is the ancestor of all other data types in DM. (The only exceptions are currently /world, /client, /list, and /savefile, but those will be brought into conformance soon.) That means that the variables and procedures of /datum are inherited by all other types of objects.</p> <p>When you define a new \"top level\" object, if you do not specify a parent_type, it defaults to /datum.</p>"},{"location":"datum/#_1","title":"Datum","text":"<p>Example:</p> <p>datum  //definitions to be shared by all object types  proc/DebugMe()  world.log &lt;&lt; \"/datum properties:\"  world.log &lt;&lt; \"type: [type]\"  world.log &lt;&lt; \"parent_type: [parent_type]\"  return ..()</p> <p>MyType  var  myvar = \"test\"  DebugMe()  world.log &lt;&lt; \"/MyType properties:\"  world.log &lt;&lt; \"myvar: [myvar]\"  return ..() //this calls /datum/proc/DebugMe()</p>"},{"location":"exception/","title":"Exception","text":""},{"location":"exception/#exception","title":"exception","text":"<p>See also: </p> <p>try and catch statements </p> <p>Error proc (world) </p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>try and catch statements </p> <p>Error proc (world) </p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>stddef.dm file </p> <p>try and catch statements</p> <p>Error proc (world) </p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>stddef.dm file </p> <p>Error proc (world)</p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>stddef.dm file </p> <p>throw statement</p> <p>EXCEPTION proc </p> <p>stddef.dm file </p> <p>EXCEPTION proc</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>Vars: </p> <p>name: A text string (such as an error message) or other value</p> <p>file: The filename where the error occurred, if debugging info is present</p> <p>line: The line where the error occurred, if debugging info is present</p> <p>desc: Detailed error info including call stack, only used when sent to world.Error()</p> <p>Vars: </p> <p>Vars:</p> <p>name: A text string (such as an error message) or other value</p> <p>file: The filename where the error occurred, if debugging info is present</p> <p>line: The line where the error occurred, if debugging info is present</p> <p>desc: Detailed error info including call stack, only used when sent to world.Error()</p> <p>file: The filename where the error occurred, if debugging info is present</p> <p>line: The line where the error occurred, if debugging info is present</p> <p>desc: Detailed error info including call stack, only used when sent to world.Error()</p> <p>line: The line where the error occurred, if debugging info is present</p> <p>desc: Detailed error info including call stack, only used when sent to world.Error()</p> <p>desc: Detailed error info including call stack, only used when sent to world.Error()</p> <p>This datum is created automatically when a runtime error is encountered,  if   it happens within a try/catch block or you have defined a global error handler with world.Error(). (The New() proc is not called when this happens.) This provides a convenient package for getting file and line number info associated with an error.</p> <p>if</p> <p>If you throw your own exceptions, you do not have to use this, but the EXCEPTION macro is provided to easily create one with the current file and line number.</p> <p>The desc value is only filled in when you have a world.Error() handler and there is no try/catch handling this error. Just like when no handler is present, less detail will be provided after multiple runtime errors have occurred. This only exists as a convenience feature for logging errors if you want to use something other than world.log.</p>"},{"location":"icon/","title":"Icon","text":""},{"location":"icon/#icon-object","title":"icon object","text":"<p>See also: </p> <p>procs (icon) </p> <p>icons </p> <p>image objects </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>procs (icon) </p> <p>icons </p> <p>image objects </p> <p>stddef.dm file </p> <p>procs (icon)</p> <p>icons </p> <p>image objects </p> <p>stddef.dm file </p> <p>icons</p> <p>image objects </p> <p>stddef.dm file </p> <p>image objects</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>An</p> <p>/icon</p> <p>object is created by loading an icon file into memory for direct access and manipulation. In order to be displayed, an</p> <p>/icon</p> <p>object always gets converted back into an icon file; this happens automatically when you assign atom.icon to an</p> <p>/icon</p> <p>object, since that variable may only refer to a static icon file, rather than a dynamic memory object.</p> <p>/icon</p> <p>/icon</p> <p>/icon</p> <p>To create an</p> <p>/icon</p> <p>object, simply use</p> <p>new/icon()</p> <p>, or the short-cut</p> <p>icon()</p> <p>proc. The following example loads an icon file, reddens it, and then assigns it back to the player's icon, which implicitly creates a new icon file.</p> <p>/icon</p> <p>new/icon()</p> <p>icon()</p>"},{"location":"icon/#_1","title":"Icon","text":"<p>Example:</p> <p>mob/verb/test()  var/icon/I = new('player.dmi')  I.Blend(rgb(40,0,0))  usr.icon = I</p> <p>Note that merely displaying different icon states or directions can generally be achieved without any icon manipulation, which saves quite a bit of overhead. For example, the variables</p> <p>atom.icon_state</p> <p>and</p> <p>atom.dir</p> <p>can be used to control how</p> <p>atom.icon</p> <p>is displayed, without any need for generating a new icon file.</p> <p>atom.icon_state</p> <p>atom.dir</p> <p>atom.icon</p> <p>Many things that used to require icon manipulation may not need you to do so anymore, as DM has evolved new capabilities.</p> <p>|   Operation   |   /icon</p> <p>proc   |   New method   | | --- | --- | --- | |   Multiplying by color   | Blend  or  SetIntensity   procs   | color   var   | |   Adding color   | Blend   proc   | color   var (using  color matrix   )   | |   Applying color matrix   | MapColors   proc   | |   Rotation   | Turn   proc   | transform   var   | |   Flipping horizontal/vertical   | Flip   proc   | |   Scaling   | Scale   proc   | |   Overlaying/underlaying another icon   | Blend   proc +</p> <p>ICON_OVERLAY   |   Overlay/underlay +  KEEP_TOGETHER </p> <p>Layering filter  |</p> <p>|   Operation   |   /icon</p> <p>proc   |   New method   |</p> <p>Operation  |</p> <p>/icon</p> <p>proc  |</p> <p>/icon</p> <p>New method  | |   Multiplying by color   | Blend  or  SetIntensity   procs   | color   var   |</p> <p>Multiplying by color  |  Blend  or  SetIntensity   procs  | Blend</p> <p>Blend</p> <p>SetIntensity color   var  | color |   Adding color   | Blend   proc   | color   var (using  color matrix   )   |</p> <p>Adding color  |  Blend   proc  | Blend color   var (using  color matrix   )  | color color matrix |   Applying color matrix   | MapColors   proc   |</p> <p>Applying color matrix  |  MapColors   proc  | MapColors |   Rotation   | Turn   proc   | transform   var   |</p> <p>Rotation  |  Turn   proc  | Turn transform   var  | transform |   Flipping horizontal/vertical   | Flip   proc   |</p> <p>Flipping horizontal/vertical  |  Flip   proc  | Flip |   Scaling   | Scale   proc   |</p> <p>Scaling  |  Scale   proc  | Scale |   Overlaying/underlaying another icon   | Blend   proc +</p> <p>ICON_OVERLAY   |   Overlay/underlay +  KEEP_TOGETHER </p> <p>Layering filter  |</p> <p>Overlaying/underlaying another icon  |  Blend   proc +</p> <p>ICON_OVERLAY   | Blend</p> <p>ICON_OVERLAY</p> <p>Overlay/underlay +  KEEP_TOGETHER </p> <p>Layering filter  | KEEP_TOGETHER</p> <p>Layering filter</p> <p>Note: Anything you can do with an atom var instead of using icon manipulation procs will usually perform much better. Games that use the new methods use fewer resources, use less memory, and also usually look better too.</p>"},{"location":"image/","title":"Image","text":""},{"location":"image/#image-objects","title":"image objects","text":"<p>See also: </p> <p>icon var (atom) </p> <p>image proc </p> <p>vars (image) </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>See also: </p> <p>See also:</p> <p>icon var (atom) </p> <p>image proc </p> <p>vars (image) </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>icon var (atom)</p> <p>image proc </p> <p>vars (image) </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>image proc</p> <p>vars (image) </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>vars (image)</p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>images var (client)</p> <p>overlays var (atom) </p> <p>override var (atom) </p> <p>overlays var (atom)</p> <p>override var (atom) </p> <p>override var (atom)</p> <p>The /image type contains data used to create a virtual image. Unlike other atomic objects, this object is a purely visual effect. It always appears attached to some other object and it behaves in every way as though it were part of that object (e.g. if the user clicks on it, this counts as a click on the atomic object, not the image).</p> <p>One reason for creating images is player-by-player control over visibility. Images only become visible when they are explicitly output to players:</p>"},{"location":"image/#_1","title":"Image","text":"<p>Example:</p> <p>var/image/I = image('icon.dmi',usr) //make an image attached to usr usr &lt;&lt; I //allow usr to see it</p> <p>Images are also useful in the creation of overlays. Overlays are like images, since they are always attached to another object, but overlays obey the normal rules of visibility, so they are more convenient when you do not want to hide the effect from anybody. An overlay can be created directly from an icon file (or icon state), but when one wishes to override some additional parameter, the image() instruction is a convenient way to do it.</p>"},{"location":"image/#_2","title":"Image","text":"<p>Example:</p> <p>usr.overlays += image('shirt.dmi',icon_state = \"red\")</p> <p>In the above example, the icon state of an overlay was set by creating the overlay from an image with the desired icon state. Note that after the creation of an overlay, no link remains between the overlay and the object that was used to create it. If you change the image after that time, it will not change the overlay, which is simply a \"snapshot\" of the original image.</p>"},{"location":"list/","title":"List","text":""},{"location":"list/#list","title":"list","text":"<p>See also: </p> <p>list associations </p> <p>list proc </p> <p>islist proc </p> <p>procs (list) </p> <p>vars (list) </p> <p>See also: </p> <p>See also:</p> <p>list associations </p> <p>list proc </p> <p>islist proc </p> <p>procs (list) </p> <p>vars (list) </p> <p>list associations</p> <p>list proc </p> <p>islist proc </p> <p>procs (list) </p> <p>vars (list) </p> <p>list proc</p> <p>islist proc </p> <p>procs (list) </p> <p>vars (list) </p> <p>islist proc</p> <p>procs (list) </p> <p>vars (list) </p> <p>procs (list)</p> <p>vars (list) </p> <p>vars (list)</p> <p>Lists are used to represent groups of objects. Like objects, they have vars and procs associated with them. In order to access these attributes, list vars must be declared of type /list. These may then be assigned to existing lists, or used to create new lists.</p>"},{"location":"list/#_1","title":"List","text":"<p>Example:</p> <p>var/list/L // list reference L = world.contents // assign to existing list L = new/list() // make a new list L = new() // make a new list (implicit type) L.Add(\"futz\") // L contains: \"futz\" del(L) // delete L</p> <p>Lists created with 'new()' have a default length of 0; this can be overridden by specifying the size; that is, new/list(size) creates a list with size (null) elements.</p> <p>The 'list()' proc may be used to more easily initialize list data.</p>"},{"location":"list/#_2","title":"List","text":"<p>Example:</p> <p>var/list/L L = list(\"futz\",3) // L contains: (\"futz\", 3)</p> <p>Alternatively, lists may be declared by using brackets, '[]'. Empty brackets indicate a list reference, exactly as /list does, so list/L is equivalent to L[]. Setting an initial size within the brackets, for instance, L[10], creates a list of that initial size.</p>"},{"location":"list/#_3","title":"List","text":"<p>Example:</p> <p>var/L[] // same as var/list/L: list reference var/M[10] // initially empty list of size 10 L = M // L is now an empty list of size 10</p> <p>Once a list L is declared, a specific item can be accessed by putting its index in the brackets: L[index].</p> <p>Indices range from 1 to len. If the length of the list is changed, existing elements in the list will be preserved if they are less than the new length. New elements in the list will be given the initial value of null.</p>"},{"location":"list/#_4","title":"List","text":"<p>Example:</p> <p>var/L[5] // initial length of 5 var/i</p> <p>for(i=1, i&lt;=L.len, i++)  L[i] = i // L contains: (1,2,3,4,5)</p> <p>L.len = 7 // expand list // L contains: (1,2,3,4,5,null,null)</p> <p>del(L) // destroy list</p> <p>Multi-dimensional lists may be created by making a list of lists.</p>"},{"location":"list/#_5","title":"List","text":"<p>Example:</p> <p>var/grid[10][5] grid[1][1] = 1 grid[1][2] = 2 ...</p> <p>Such a list may also be created by using new(). As in the previous example, the next one creates a list of 10 lists each having 5 elements.</p>"},{"location":"list/#_6","title":"List","text":"<p>Example:</p> <p>var/grid = new/list(10,5)</p>"},{"location":"map/","title":"Map","text":""},{"location":"map/#map","title":"map","text":"<p>See also: </p> <p>#include directive </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>turf var (world) </p> <p>See also: </p> <p>See also:</p> <p>#include directive </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>turf var (world) </p> <p>#include directive</p> <p>area var (world) </p> <p>maxx var (world) </p> <p>turf var (world) </p> <p>area var (world)</p> <p>maxx var (world) </p> <p>turf var (world) </p> <p>maxx var (world)</p> <p>turf var (world) </p> <p>turf var (world)</p> <p>Format: </p> <p>#include \"mapname.dmm\"</p> <p>Format: </p> <p>Format:</p> <p>#include \"mapname.dmm\"</p> <p>One or more map files may be loaded into the world's map. These are loaded into successive z-levels. If no map files are specified, the default project map file will be used. This file has the same name as the project but has the extension .dmm.</p> <p>If no map files are loaded, the world's map size is determined by the world variables maxx, maxy, and maxz. The default content of this map is determined by the world variables turf and area.</p>"},{"location":"map/#_1","title":"Map","text":"<p>Example:</p> <p>#include \"level1.dmm\"</p>"},{"location":"map/#include-level2dmm","title":"include \"level2.dmm\"","text":""},{"location":"map/#include-level3dmm","title":"include \"level3.dmm\"","text":""},{"location":"matrix/","title":"Matrix","text":""},{"location":"matrix/#matrix","title":"matrix","text":"<p>See also: </p> <p>matrix proc </p> <p>matrix operators </p> <p>matrix procs </p> <p>transform var (atom) </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>matrix proc </p> <p>matrix operators </p> <p>matrix procs </p> <p>transform var (atom) </p> <p>stddef.dm file </p> <p>matrix proc</p> <p>matrix operators </p> <p>matrix procs </p> <p>transform var (atom) </p> <p>stddef.dm file </p> <p>matrix operators</p> <p>matrix procs </p> <p>transform var (atom) </p> <p>stddef.dm file </p> <p>matrix procs</p> <p>transform var (atom) </p> <p>stddef.dm file </p> <p>transform var (atom)</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>To display rotation, scaling, and other transformations on atoms, DM uses 2D matrices. The /matrix datum is a convenient way of handling the numbers involved, as it can be easily manipulated. There are six vars, a through f, laid out like so:</p> <pre><code>          a d 0\nx y 1  *  b e 0  =  x' y' 1\n          c f 1\n</code></pre> <p>When an x,y point is multiplied by the matrix, it becomes the new point x',y'. This is equivalent to:</p> <pre><code>x' = a*x + b*y + c\ny' = d*x + e*y + f\n</code></pre> <p>The default matrix is:</p> <pre><code>1 0 0\n0 1 0\n0 0 1\n</code></pre> <p>Matrices are created with the matrix() proc, or by calling new/matrix(). (See the matrix() proc for examples.) They are also created as needed whenever you read from atom.transform or use certain operators.</p> <p>Manipulation of matrices can be done with operators, or with procs. You can do the following with them:</p> <ul> <li>Multiply:   Multiplying two matrices together will chain together the transformations they represent. For instance, a scaling matrix multiplied by a rotation matrix says: Scale, then rotate. Multiplication of two matrices is sensitive to the order you use.</li> <li>Scale:   A simple scale matrix uses only the a and e values, to scale x and y by a certain amount.</li> <li>Rotate:   A rotation matrix can rotate an atom by whatever amount you like.</li> <li>Translate:   Translation is like a pixel offset, changing the atom's position.</li> <li> <p>Interpolate:   You can calculate a matrix that lies somewhere between two other matrices, which can be helpful for animation.</p> </li> <li> <p>Multiply:   Multiplying two matrices together will chain together the transformations they represent. For instance, a scaling matrix multiplied by a rotation matrix says: Scale, then rotate. Multiplication of two matrices is sensitive to the order you use.</p> </li> </ul> <p>Multiply: - Scale:   A simple scale matrix uses only the a and e values, to scale x and y by a certain amount.</p> <p>Scale: - Rotate:   A rotation matrix can rotate an atom by whatever amount you like.</p> <p>Rotate: - Translate:   Translation is like a pixel offset, changing the atom's position.</p> <p>Translate: - Interpolate:   You can calculate a matrix that lies somewhere between two other matrices, which can be helpful for animation.</p> <p>Interpolate:</p> <p>When you've built your matrix, you can assign it to atom.transform to change the way that atom is displayed.</p> <p>The matrices supported by this datum are  not   the same kind used to transform colors, as in the atom.color var and icon.MapColors() proc. For color matrices, see  color matrix   .</p> <p>not color matrix</p>"},{"location":"mob/","title":"Mob","text":""},{"location":"mob/#mob","title":"mob","text":"<p>See also: </p> <p>atom </p> <p>movable atoms </p> <p>procs (mob) </p> <p>vars (mob) </p> <p>client </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>movable atoms </p> <p>procs (mob) </p> <p>vars (mob) </p> <p>client </p> <p>atom</p> <p>movable atoms </p> <p>procs (mob) </p> <p>vars (mob) </p> <p>client </p> <p>movable atoms</p> <p>procs (mob) </p> <p>vars (mob) </p> <p>client </p> <p>procs (mob)</p> <p>vars (mob) </p> <p>client </p> <p>vars (mob)</p> <p>client </p> <p>client</p> <p>Mobs are \"mobile objects\" derived from</p> <p>/mob</p> <p>, which derives from</p> <p>/atom/movable</p> <p>. Human players are associated with a mob when they log on. Mobs are typically used for other \"creature\" types as well such as NPCs. This type is slightly more complex than objs since it can be attached to a client.</p> <p>/mob</p> <p>/atom/movable</p> <p>This example defines the mob type</p> <p>/mob/guzzler</p> <p>.</p> <p>/mob/guzzler</p>"},{"location":"mob/#_1","title":"Mob","text":"<p>Example:</p> <p>mob  guzzler  desc = \"Mean, mad, and wicked bad.\"</p>"},{"location":"mutable_appearance/","title":"Mutable appearance","text":""},{"location":"mutable_appearance/#mutable-appearance","title":"mutable appearance","text":"<p>See also: </p> <p>appearance var (atom) </p> <p>image objects </p> <p>vars (mutable appearance) </p> <p>See also: </p> <p>See also:</p> <p>appearance var (atom) </p> <p>image objects </p> <p>vars (mutable appearance) </p> <p>appearance var (atom)</p> <p>image objects </p> <p>vars (mutable appearance) </p> <p>image objects</p> <p>vars (mutable appearance) </p> <p>vars (mutable appearance)</p> <p>All atoms and images have an appearance, which is an immutable object that can be shared by many atoms. Making changes to an object's appearance generates new appearances, many of which may be temporary. For high-performance games, this can be a drawback. The</p> <p>/mutable_appearance</p> <p>type exists so that you can make multiple changes to an appearance without creating all the temporary objects, then turn it into a regular immutable appearance when finished.</p> <p>/mutable_appearance</p> <p>A new mutable appearance is created via</p> <p>new/mutable_appearance</p> <p>, and giving it an atom, image, or appearance as a source object. Assigning it to an object's appearance var will create a new immutable appearance.</p> <p>new/mutable_appearance</p>"},{"location":"mutable_appearance/#_1","title":"Mutable appearance","text":"<p>Example:</p> <p>mob/proc/GetAngry()  var/mutable_appearance/ma = new(src)  ma.color = rgb(51,255,51) // green  ma.transform = matrix(2,0,0,0,2,0) // scale x2  appearance = ma</p> <p>Reading certain vars, such as</p> <p>overlays</p> <p>, will create a temporary list object that can be modified easily. With regular appearances, making many changes to the</p> <p>overlays</p> <p>list results in a lot of churn.</p> <p>overlays</p> <p>overlays</p> <p>The</p> <p>/mutable_appearance</p> <p>datum is technically a descendant of</p> <p>/image</p> <p>, but this is only for convenience, and should not be relied on for any other purpose as it is subject to change in future versions.</p> <p>/mutable_appearance</p> <p>/image</p>"},{"location":"obj/","title":"Obj","text":""},{"location":"obj/#obj","title":"obj","text":"<p>See also: </p> <p>atom </p> <p>movable atoms </p> <p>procs (obj) </p> <p>vars (obj) </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>movable atoms </p> <p>procs (obj) </p> <p>vars (obj) </p> <p>atom</p> <p>movable atoms </p> <p>procs (obj) </p> <p>vars (obj) </p> <p>movable atoms</p> <p>procs (obj) </p> <p>vars (obj) </p> <p>procs (obj)</p> <p>vars (obj) </p> <p>vars (obj)</p> <p>There are two types of movable atoms: objs and mobs. The difference between them is that a mob can be attached to a human player, and is also typically used for NPCs and creatures. The obj type is a little bit simpler and is typically used for objects in the environment, items in inventory, etc.</p> <p>Objects are derived from</p> <p>/obj</p> <p>, which derives from</p> <p>/atom/movable</p> <p>.</p> <p>/obj</p> <p>/atom/movable</p> <p>The following example defines the obj type</p> <p>/obj/scooper</p> <p>.</p> <p>/obj/scooper</p>"},{"location":"obj/#_1","title":"Obj","text":"<p>Example:</p> <p>obj  scooper  desc = \"Super pooper scooper.\"</p>"},{"location":"operator/","title":"Operator","text":""},{"location":"operator/#operators","title":"operators","text":"<p>See also: </p> <p>operator overloading </p> <p>See also: </p> <p>See also:</p> <p>operator overloading </p> <p>operator overloading</p> <p>Operators are used extensively in DM to compute numerical values.</p> <p>The DM operators are:</p> <pre><code>[()](#/operator/()) [.](#/operator/path/%2e) [:](#/operator/path/:) [/](#/operator/path//) [::](#/operator/::)     // here . : / are path operators\n[[]](#/operator/[]) [.](#/operator/%2e) [:](#/operator/:)\n[?[]](#/operator/%3f[]) [?.](#/operator/%3f%2e) [?:](#/operator/%3f:)\n[~](#/operator/~) [!](#/operator/!) [-](#/operator/-) [++](#/operator/++) [--](#/operator/--) [\\*](#/operator/*/pointer) [&amp;](#/operator/&amp;/pointer)     // unary operators (\\* and &amp; here are pointer operators)\n[\\*\\*](#/operator/**)\n[\\*](#/operator/*) [/](#/operator//) [%](#/operator/%) [%%](#/operator/%25%25)\n[+](#/operator/+) [-](#/operator/-)\n[&lt;](#/operator/%3c) [&lt;=](#/operator/%3c=) [&gt;](#/operator/%3e) [&gt;=](#/operator/%3e=)\n[&lt;&lt;](#/operator/%3c%3c) [&gt;&gt;](#/operator/%3e%3e)\n[==](#/operator/==) [!=](#/operator/!=) [&lt;&gt;](#/operator/%3c%3e) [~=](#/operator/~=) [~!](#/operator/~!)\n[&amp;](#/operator/&amp;)\n[^](#/operator/^)\n[|](#/operator/|)\n[&amp;&amp;](#/operator/&amp;&amp;)\n[||](#/operator/||)\n[?](#/operator/%3f)               // ternary a ? b : c\n[=](#/operator/=) [+=](#/operator/+=) [-=](#/operator/-=) [-=](#/operator/-=) [\\*=](#/operator/*=) [/=](#/operator//=) [%=](#/operator/%=) [%%=](#/operator/%25%25=) [&amp;=](#/operator/&amp;=) [|=](#/operator/|=) [^=](#/operator/^=) [&lt;&lt;=](#/operator/%3c%3c=) [&gt;&gt;=](#/operator/%3e%3e=) [:=](#/operator/:=) [&amp;&amp;=](#/operator/&amp;&amp;=) [||=](#/operator/||=)\n[in](#/operator/in)\n\n</code></pre> <p>() . : / ::</p> <p>// here . : / are path operators</p> <p>[] . : ?[] ?. ?: ~ ! - ++ -- * &amp;</p> <p>// unary operators (* and &amp; here are pointer operators)</p> <p>** * / % %% + - &lt; &lt;= &gt; &gt;= &lt;&lt; &gt;&gt; == != &lt;&gt; ~= ~! &amp; ^ | &amp;&amp; || ?</p> <p>// ternary a ? b : c</p> <p>= += -= -= *= /= %= %%= &amp;= |= ^= &lt;&lt;= &gt;&gt;= := &amp;&amp;= ||= in</p> <p>Each line has higher order of operations than the next. Operators within a line have equal precedence and therefore are processed from left to right as they occur in an expression. (Assignment, or operate-and-assign, are processed from right to left.)</p> <p>Expressions of the form</p> <p>A #= B</p> <p>are shorthand for</p> <p>A = A # B</p> <p>except for</p> <p>~=</p> <p>and</p> <p>:=</p> <p>.</p> <p>A #= B</p> <p>A = A # B</p> <p>~=</p> <p>:=</p>"},{"location":"operator/#_1","title":"Operator","text":"<p>Example:</p> <p>var/N N = 0 // 0 N += 1+1*2 // 3 if(1 + 1 == 2) N = 2 // 2 if(N==2 &amp;&amp; 1/2==0.5) N = 0.5 // 0.5</p>"},{"location":"proc/","title":"Proc","text":""},{"location":"proc/#procs","title":"procs","text":"<p>See also: </p> <p>vars (procs) </p> <p>arguments (proc) </p> <p>procs (area) </p> <p>procs (mob) </p> <p>procs (obj) </p> <p>procs (turf) </p> <p>See also: </p> <p>See also:</p> <p>vars (procs) </p> <p>arguments (proc) </p> <p>procs (area) </p> <p>procs (mob) </p> <p>procs (obj) </p> <p>procs (turf) </p> <p>vars (procs)</p> <p>arguments (proc) </p> <p>procs (area) </p> <p>procs (mob) </p> <p>procs (obj) </p> <p>procs (turf) </p> <p>arguments (proc)</p> <p>procs (area) </p> <p>procs (mob) </p> <p>procs (obj) </p> <p>procs (turf) </p> <p>procs (area)</p> <p>procs (mob) </p> <p>procs (obj) </p> <p>procs (turf) </p> <p>procs (mob)</p> <p>procs (obj) </p> <p>procs (turf) </p> <p>procs (obj)</p> <p>procs (turf) </p> <p>procs (turf)</p> <p>Procs may be derived from /proc. These procs are \"global\", in that they can be called anywhere in the code.</p>"},{"location":"proc/#_1","title":"Proc","text":"<p>Example:</p> <p>proc/poof()  world &lt;&lt; \"POOF!\"</p> <p>The proc</p> <p>poof()</p> <p>may now be called anywhere in the code.</p> <p>poof()</p> <p>Procs may also be attached to objects by defining them under the appropriate</p> <p>object/proc</p> <p>subnode. Currently DM allows procs to be defined or overridden for</p> <p>/mob</p> <p>,</p> <p>/obj</p> <p>,</p> <p>/turf</p> <p>,</p> <p>/area</p> <p>,</p> <p>world</p> <p>, and</p> <p>/client</p> <p>, as well as for  datum objects   derived from</p> <p>/</p> <p>. Predefined procs are discussed under the \"procs\" entry for the object type.</p> <p>object/proc</p> <p>/mob</p> <p>/obj</p> <p>/turf</p> <p>/area</p> <p>world</p> <p>/client</p> <p>datum objects</p> <p>/</p>"},{"location":"proc/#_2","title":"Proc","text":"<p>Example:</p> <p>mob/proc/poof()  world &lt;&lt; \"POOF!\"</p> <p>This can be called by a mob var M, using</p> <p>M.poof()</p> <p>.</p> <p>M.poof()</p>"},{"location":"proc/#_3","title":"Proc","text":"<p>Return types</p> <p>It is possible to define what type of value a proc is expected to return, by following its definition with an</p> <p>as</p> <p>clause. This can be a type path, such as</p> <p>as /mob/player</p> <p>, or a more intrinsic type like</p> <p>as num</p> <p>or</p> <p>as list</p> <p>.</p> <p>as</p> <p>as /mob/player</p> <p>as num</p> <p>as list</p>"},{"location":"proc/#_4","title":"Proc","text":"<p>Example:</p> <p>mob/monster  var/mob/player/target</p> <p>proc/GetTarget() as /mob/player  if(!target)  // find a /mob/player in view  target = locate() in view(src)  return target</p> <p>Currently the only purpose for using the</p> <p>as</p> <p>clause is for situations where the compiler needs to infer the type of an expression. Mainly this applies to the  .   and  ?.   operators in an expression such as</p> <p>GetTarget()?.Attack(src)</p> <p>. Giving</p> <p>GetTarget()</p> <p>a return type allows the compiler to check if</p> <p>Attack()</p> <p>is a valid proc for</p> <p>/mob/player</p> <p>. Otherwise, the</p> <p>.</p> <p>and</p> <p>?.</p> <p>operators act like</p> <p>:</p> <p>and</p> <p>?:</p> <p>, respectively; the compiler won't do any checking to see if</p> <p>Attack()</p> <p>is valid.</p> <p>as</p> <p>. ?.</p> <p>GetTarget()?.Attack(src)</p> <p>GetTarget()</p> <p>Attack()</p> <p>/mob/player</p> <p>.</p> <p>?.</p> <p>:</p> <p>?:</p> <p>Attack()</p>"},{"location":"regex/","title":"Regex","text":""},{"location":"regex/#regex-datum","title":"regex datum","text":"<p>See also: </p> <p>Regular expressions </p> <p>regex procs </p> <p>regex vars </p> <p>regex proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>Regular expressions </p> <p>regex procs </p> <p>regex vars </p> <p>regex proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>Regular expressions</p> <p>regex procs </p> <p>regex vars </p> <p>regex proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>regex procs</p> <p>regex vars </p> <p>regex proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>regex vars</p> <p>regex proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>regex proc</p> <p>REGEX_QUOTE proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>REGEX_QUOTE proc</p> <p>findtext proc </p> <p>splittext proc </p> <p>stddef.dm file </p> <p>findtext proc</p> <p>splittext proc </p> <p>stddef.dm file </p> <p>splittext proc</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>The /regex datum holds a regular expression that can be used for searching and/or replacing text. Rather than searching for a specific piece of text, a regular expression is a  pattern   to search for. This can include things like wildcards. See  Regular expressions   for more information.</p> <p>pattern Regular expressions</p> <p>A new regular expression can be created with regex() or new/regex().</p>"},{"location":"savefile/","title":"Savefile","text":""},{"location":"savefile/#savefile","title":"savefile","text":"<p>See also: </p> <p>&gt;&gt; operator (savefile) </p> <p>&lt;&lt; operator (savefile) </p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; operator (savefile) </p> <p>&lt;&lt; operator (savefile) </p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>&gt;&gt; operator (savefile)</p> <p>&lt;&lt; operator (savefile) </p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>&lt;&lt; operator (savefile)</p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>Export proc (client)</p> <p>New proc (client) </p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>New proc (client)</p> <p>procs (savefile) </p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>procs (savefile)</p> <p>vars (savefile) </p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>vars (savefile)</p> <p>tmp vars </p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>tmp vars</p> <p>issaved proc </p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>issaved proc</p> <p>Read proc (datum) </p> <p>Write proc (datum) </p> <p>Read proc (datum)</p> <p>Write proc (datum) </p> <p>Write proc (datum)</p> <p>Savefiles are easy to use, but you should always plan what you're going to save and what you don't want to save. Use</p> <p>/tmp</p> <p>to avoid saving anything you don't need, and you can avoid a lot of trouble.</p> <p>In particular you should be careful that if you're saving a player's mob, you don't accidentally save any other mobs. If you save a turf, you should avoid saving its contents unless you know there are no mobs standing on it (but usually it's better to save x,y,z coordinates than the turf itself). This is explained further in the  tmp vars   entry.</p> <p>Currently, overlays and underlays also save by combining each list into a single icon that saves its full icon data in the file. This may not be desired, so you can remove that data. Usually you'll want to rebuild any overlay/underlay lists during  Read()   .</p> <p>Savefiles are easy to use, but you should always plan what you're going to save and what you don't want to save. Use</p> <p>/tmp</p> <p>to avoid saving anything you don't need, and you can avoid a lot of trouble.</p> <p>/tmp</p> <p>In particular you should be careful that if you're saving a player's mob, you don't accidentally save any other mobs. If you save a turf, you should avoid saving its contents unless you know there are no mobs standing on it (but usually it's better to save x,y,z coordinates than the turf itself). This is explained further in the  tmp vars   entry.</p> <p>tmp vars</p> <p>Currently, overlays and underlays also save by combining each list into a single icon that saves its full icon data in the file. This may not be desired, so you can remove that data. Usually you'll want to rebuild any overlay/underlay lists during  Read()   .</p> <p>Read()</p> <p>A database file in DM is called a \"savefile\". All of the contents of a savefile reside in a single file. The contents of the file are stored in database directories. These should not be confused with real directories in the external file system. The database directories are all contained inside the one file.</p> <p>Each database directory contains a list of sub-directories and a buffer in which data may be written. The absolute path to a directory has the following format: \"/Dir1/Dir2/...\". The current directory may be set by assigning its absolute path name to  <code>savefile.cd</code>   . A relative path (one that doesn't begin with \"/\") may also be used, in which case the new path starts at the current directory. The path \".\" stands for the current directory, \"..\" for its parent, \"../..\" for its parent's parent, etc.</p> <p><code>savefile.cd</code></p> <p>A savefile may be created with  <code>new/savefile(name)</code>   . The optional name argument may be an external file name (existing or to be created) in double quotes or a file from the resource cache in single quotes. Of course, a variable containing either of these types of values may also be used. If no name is specified, a temporary file will be created, which will be destroyed when the savefile is no longer in use. If a resource cache is specified, a temporary file will be created and the contents of the cached file will be copied into it. Changes will therefore only be temporary.</p> <p><code>new/savefile(name)</code></p>"},{"location":"sound/","title":"Sound","text":""},{"location":"sound/#sound-datum","title":"sound datum","text":"<p>See also: </p> <p>vars (sound) </p> <p>sound proc </p> <p>stddef.dm file </p> <p>load_resource proc </p> <p>See also: </p> <p>See also:</p> <p>vars (sound) </p> <p>sound proc </p> <p>stddef.dm file </p> <p>load_resource proc </p> <p>vars (sound)</p> <p>sound proc </p> <p>stddef.dm file </p> <p>load_resource proc </p> <p>sound proc</p> <p>stddef.dm file </p> <p>load_resource proc </p> <p>stddef.dm file</p> <p>load_resource proc </p> <p>load_resource proc</p> <p>A</p> <p>/sound</p> <p>datum is created by the</p> <p>sound()</p> <p>proc or by</p> <p>new/sound()</p> <p>. It can be used to change the way a sound file will play. When you're ready to play the sound, just send it to a player like so:</p> <p>/sound</p> <p>sound()</p> <p>new/sound()</p> <p>var/sound/S = sound('bubbles.wav') usr &lt;&lt; S</p> <p>The sound file can be supplied as a list of choices, in which case the client will play the first compatible sound in the list.</p>"},{"location":"turf/","title":"Turf","text":""},{"location":"turf/#turf","title":"turf","text":"<p>See also: </p> <p>atom </p> <p>procs (turf) </p> <p>vars (turf) </p> <p>Map </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>procs (turf) </p> <p>vars (turf) </p> <p>Map </p> <p>atom</p> <p>procs (turf) </p> <p>vars (turf) </p> <p>Map </p> <p>procs (turf)</p> <p>vars (turf) </p> <p>Map </p> <p>vars (turf)</p> <p>Map </p> <p>Map</p> <p>Turfs cover the surface of the map. They are derived from</p> <p>/turf</p> <p>which derives from</p> <p>/atom</p> <p>.</p> <p>/turf</p> <p>/atom</p> <p>This example defines the turf prototype</p> <p>/turf/floor</p> <p>and</p> <p>/turf/wall</p> <p>.</p> <p>/turf/floor</p> <p>/turf/wall</p>"},{"location":"turf/#_1","title":"Turf","text":"<p>Example:</p> <p>turf  floor  desc = \"A wood plank floor.\"  wall  desc = \"A stone wall.\"  density = 1</p> <p>Turfs cannot be moved. They can only be created or destroyed by changing</p> <p>world.maxx</p> <p>,</p> <p>world.maxy</p> <p>, or</p> <p>world.maxz</p> <p>. When you create a new turf with</p> <p>new()</p> <p>, it always replaces the old one.</p> <p>world.maxx</p> <p>world.maxy</p> <p>world.maxz</p> <p>new()</p>"},{"location":"turf/#_2","title":"Turf","text":"<p>Example:</p> <p>// replace old_turf with a wall var/turf/wall/T = new(old_turf)</p>"},{"location":"var/","title":"Var","text":""},{"location":"var/#vars","title":"vars","text":"<p>See also: </p> <p>path operators </p> <p>vars (atom) </p> <p>vars (client) </p> <p>vars (datum) </p> <p>vars (mob) </p> <p>See also: </p> <p>See also:</p> <p>path operators </p> <p>vars (atom) </p> <p>vars (client) </p> <p>vars (datum) </p> <p>vars (mob) </p> <p>path operators</p> <p>vars (atom) </p> <p>vars (client) </p> <p>vars (datum) </p> <p>vars (mob) </p> <p>vars (atom)</p> <p>vars (client) </p> <p>vars (datum) </p> <p>vars (mob) </p> <p>vars (client)</p> <p>vars (datum) </p> <p>vars (mob) </p> <p>vars (datum)</p> <p>vars (mob) </p> <p>vars (mob)</p> <p>Variables are derived from var.</p> <p>Variable Declaration Format: </p> <p>var/Type/Name = Value</p> <p>var Type/Name = Value</p> <p>Variable Declaration Format: </p> <p>Variable Declaration Format:</p> <p>var/Type/Name = Value</p> <p>var Type/Name = Value</p> <p>var Type/Name = Value</p> <p>Value defaults to null.</p> <p>The hard-coded types are:</p> <p>datum   (ancestor of all objects)</p> <p>atom   (all mappable objects)</p> <p>atom/movable   (objs and mobs)</p> <p>obj </p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>The hard-coded types are:</p> <p>datum   (ancestor of all objects)</p> <p>atom   (all mappable objects)</p> <p>atom/movable   (objs and mobs)</p> <p>obj </p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>datum</p> <p>atom   (all mappable objects)</p> <p>atom/movable   (objs and mobs)</p> <p>obj </p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>atom</p> <p>atom/movable   (objs and mobs)</p> <p>obj </p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>atom/movable</p> <p>obj </p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>obj</p> <p>mob </p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>mob</p> <p>turf </p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>turf</p> <p>area </p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>area</p> <p>savefile </p> <p>client </p> <p>list </p> <p>world </p> <p>savefile</p> <p>client </p> <p>list </p> <p>world </p> <p>client</p> <p>list </p> <p>world </p> <p>list</p> <p>world </p> <p>world</p> <p>Type modifiers:</p> <p>global </p> <p>const </p> <p>tmp </p> <p>final </p> <p>Type modifiers:</p> <p>global </p> <p>const </p> <p>tmp </p> <p>final </p> <p>global</p> <p>const </p> <p>tmp </p> <p>final </p> <p>const</p> <p>tmp </p> <p>final </p> <p>tmp</p> <p>final </p> <p>final</p> <p>User types may be derived from anything except for</p> <p>/world</p> <p>,</p> <p>/list</p> <p>,</p> <p>/client</p> <p>, and</p> <p>/savefile</p> <p>.</p> <p>/world</p> <p>/list</p> <p>/client</p> <p>/savefile</p>"},{"location":"verb/","title":"Verb","text":""},{"location":"verb/#verbs","title":"verbs","text":"<p>See also: </p> <p>arguments (verb) </p> <p>settings (verb) </p> <p>vars (verbs) </p> <p>src var (proc) </p> <p>usr var (proc) </p> <p>See also: </p> <p>See also:</p> <p>arguments (verb) </p> <p>settings (verb) </p> <p>vars (verbs) </p> <p>src var (proc) </p> <p>usr var (proc) </p> <p>arguments (verb)</p> <p>settings (verb) </p> <p>vars (verbs) </p> <p>src var (proc) </p> <p>usr var (proc) </p> <p>settings (verb)</p> <p>vars (verbs) </p> <p>src var (proc) </p> <p>usr var (proc) </p> <p>vars (verbs)</p> <p>src var (proc) </p> <p>usr var (proc) </p> <p>src var (proc)</p> <p>usr var (proc) </p> <p>usr var (proc)</p> <p>Verbs may be attached to mobs, objs, turfs, and areas. Players can then use them as commands if they have access to the source.</p> <p>Verbs are fundamentally the same \"type\" as procs, so their vars are the same.</p>"},{"location":"verb/#_1","title":"Verb","text":"<p>Example:</p> <p>mob/verb/poof()  world &lt;&lt; \"POOF!\"</p> <p>Whenever a player in the world types the command \"poof\", this verb will be invoked.</p> <p>In addition to the normal access control (see the verb src setting) verbs can be dynamically added and removed from objects. One way to do this is to use new() with the following syntax:</p> <p>new verb_path(Destination,Name,Desc)</p> <p>The Destination specifies the object to receive the verb. Name and Desc optionally specify a new name and description for the verb.</p>"},{"location":"verb/#_2","title":"Verb","text":"<p>Example:</p> <p>mob/DM/verb/kill(mob/M)  del(M)</p> <p>mob/DM/verb/give_kill_verb(mob/M)  new/mob/DM/verb/kill(M)</p> <p>This example defines two verbs (accessible to mobs of type /mob/DM). One verb kills other mobs. The other adds the kill verb to another mob (giving the second mob the ability to kill).</p> <p>In some situations, the ability to dynamically change an object's verb list is quite useful, but most of the time it is far more convenient to do the same thing by manipulating objects rather than verbs directly. For example, the previous example can be handled by having an object with the kill verb attached it it. Then players have greater versatility in manipulating the verb by simply moving the object around.</p>"},{"location":"verb/#_3","title":"Verb","text":"<p>Example:</p> <p>obj/scroll/kill/verb/kill(mob/M)  set src = usr.contents //implicit src  del(M)</p> <p>The use of an implicit verb source in this example gives the user access to the kill verb without having to specify the source scroll as long as the scroll exists in the user's inventory. In other words, the player types \"kill rat\" rather than \"kill kill rat\".</p>"},{"location":"world/","title":"World","text":""},{"location":"world/#world","title":"world","text":"<p>See also: </p> <p>procs (world) </p> <p>vars (world) </p> <p>See also: </p> <p>See also:</p> <p>procs (world) </p> <p>vars (world) </p> <p>procs (world)</p> <p>vars (world) </p> <p>vars (world)</p> <p>The world node is used to define some global properties for the world. Like the other types, the world has overridable vars and procs. New vars and procs cannot be defined under world though; to make global vars and procs, use /var and /proc instead.</p>"},{"location":"%7Bnotes%7D/","title":"{notes}","text":""},{"location":"%7Bnotes%7D/#special-notes","title":"Special notes","text":"<p>This section of the reference should help explain some concepts that may be harder to understand or that can use more clarification.</p> <p>Language features </p> <p>Numbers </p> <p>Regular expressions </p> <p>Unicode </p> <p>Icons </p> <p>Big icons </p> <p>Tiled icons </p> <p>Map formats </p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Movement </p> <p>Gliding </p> <p>Pixel movement </p> <p>Display </p> <p>Understanding the renderer </p> <p>HUD / screen objects </p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Language features </p> <p>Language features </p> <p>Language features</p> <p>Numbers </p> <p>Regular expressions </p> <p>Unicode </p> <p>Numbers</p> <p>Regular expressions </p> <p>Unicode </p> <p>Regular expressions</p> <p>Unicode </p> <p>Unicode</p> <p>Icons </p> <p>Icons</p> <p>Big icons </p> <p>Tiled icons </p> <p>Big icons</p> <p>Tiled icons </p> <p>Tiled icons</p> <p>Map formats </p> <p>Map formats</p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Topdown maps</p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Isometric maps</p> <p>Side-view maps </p> <p>Side-view maps</p> <p>Movement </p> <p>Movement </p> <p>Movement</p> <p>Gliding </p> <p>Pixel movement </p> <p>Gliding</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Display </p> <p>Display </p> <p>Display</p> <p>Understanding the renderer </p> <p>HUD / screen objects </p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Understanding the renderer</p> <p>HUD / screen objects </p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>HUD / screen objects</p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Color matrix</p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Filter effects</p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Particle effects</p> <p>Color gradient </p> <p>Generators </p> <p>Color gradient </p> <p>Generators </p> <p>Color gradient</p> <p>Generators </p> <p>Generators</p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Projection matrix</p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>BACKGROUND_LAYER</p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER </p> <p>TOPDOWN_LAYER</p>"},{"location":"%7Bskin%7D/","title":"{skin}","text":""},{"location":"%7Bskin%7D/#user-interface-skins","title":"User interface skins","text":"<p>See also: </p> <p>winset proc </p> <p>winget proc </p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>See also: </p> <p>See also:</p> <p>winset proc </p> <p>winget proc </p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>winset proc</p> <p>winget proc </p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>winget proc</p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>output proc</p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>winclone proc</p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>winexists proc</p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>winshow proc</p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>controls</p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>parameters</p> <p>macros (skin) </p> <p>commands </p> <p>macros (skin)</p> <p>commands </p> <p>commands</p> <p>BYOND games used to have very limited interface options, all effectively sharing the same layout. In BYOND 4.0, skins were introduced, allowing developers more control over the layout.</p> <p>A skin consists of  macro sets   for keyboard/gamepad input, menus, and windows and/or panes. All of these are considered  controls   that a game can interact with via  winset()   ,  winget()   ,  output()   , and a few other procs.</p> <p>macro sets controls winset() winget() output()</p> <p>About the simplest possible skin is a single window with a single  map control   , and a single macro set.</p> <p>map control</p>"},{"location":"%7B%7Bappendix%7D%7D/","title":"{{appendix}}","text":""},{"location":"%7B%7Bappendix%7D%7D/#appendix","title":"Appendix","text":"<p>This section contains miscellaneous information that may apply to multiple vars or procs.</p> <p>CSS attributes </p> <p>HTML colors </p> <p>Color space </p> <p>stddef.dm file </p> <p>CSS attributes </p> <p>HTML colors </p> <p>Color space </p> <p>stddef.dm file </p> <p>CSS attributes</p> <p>HTML colors </p> <p>Color space </p> <p>stddef.dm file </p> <p>HTML colors</p> <p>Color space </p> <p>stddef.dm file </p> <p>Color space</p> <p>stddef.dm file </p> <p>stddef.dm file</p>"},{"location":"DM/cache/","title":"Cache","text":""},{"location":"DM/cache/#cache","title":"cache","text":"<p>See also: </p> <p>FILE_DIR definition </p> <p>cache_lifespan var (world) </p> <p>fcopy_rsc proc </p> <p>file proc </p> <p>icons </p> <p>sounds </p> <p>See also: </p> <p>See also:</p> <p>FILE_DIR definition </p> <p>cache_lifespan var (world) </p> <p>fcopy_rsc proc </p> <p>file proc </p> <p>icons </p> <p>sounds </p> <p>FILE_DIR definition</p> <p>cache_lifespan var (world) </p> <p>fcopy_rsc proc </p> <p>file proc </p> <p>icons </p> <p>sounds </p> <p>cache_lifespan var (world)</p> <p>fcopy_rsc proc </p> <p>file proc </p> <p>icons </p> <p>sounds </p> <p>fcopy_rsc proc</p> <p>file proc </p> <p>icons </p> <p>sounds </p> <p>file proc</p> <p>icons </p> <p>sounds </p> <p>icons</p> <p>sounds </p> <p>sounds</p> <p>Files specified in single quotes are loaded (at compile time) into the world cache file (ending in  <code>.rsc</code>   ). These are referred to as resource files. At runtime these files are downloaded by players into their  <code>byond.rsc</code>   file for future use. With the appropriate verbs or through savefiles, players may also upload files into the world cache.</p> <p><code>.rsc</code> <code>byond.rsc</code></p> <p>If a resource file is not used for a long time, it will be automatically removed from the cache file to save space. If a cache file gets too bulky, however, you may manually delete it and start from scratch.</p> <p>To make compilation faster and to make it easier to distribute code, the compiler will use an existing cache file if possible. That means you could compile up a world, and send people the  <code>.dm</code>   and  <code>.rsc</code>   files without any need to package all the individual resource files. It is also possible to include additional supplementary  <code>.rsc</code>   files by using the  <code>#include</code>   statement.</p> <p><code>.dm</code> <code>.rsc</code> <code>.rsc</code> <code>#include</code></p>"},{"location":"DM/comment/","title":"Comment","text":""},{"location":"DM/comment/#comment","title":"comment","text":"<p>Comments may be used to explain code. They can also be used to turn off a line or block of code. All text inside a comment is ignored by the compiler.</p> <p>The single line comment begins with  <code>//</code>   and runs to the end of the line.</p> <p><code>//</code></p> <p>The multi-line comment begins with  <code>/*</code>   and runs until  <code>*/</code>   .</p> <p><code>/*</code> <code>*/</code></p> <p>Multi-line comments may be nested.</p>"},{"location":"DM/comment/#_1","title":"Comment","text":"<p>Example:</p> <p>// single line comment  /*  multi-line comment  */</p>"},{"location":"DM/garbage/","title":"Garbage","text":""},{"location":"DM/garbage/#garbage-collection","title":"garbage collection","text":"<p>See also: </p> <p>del proc </p> <p>world </p> <p>refcount proc </p> <p>See also: </p> <p>See also:</p> <p>del proc </p> <p>world </p> <p>refcount proc </p> <p>del proc</p> <p>world </p> <p>refcount proc </p> <p>world</p> <p>refcount proc </p> <p>refcount proc</p> <p>At runtime, data objects are garbage collected. That means data which is no longer in use gets automatically deleted to free up system memory. This applies to text strings, lists, savefiles, datum objects, and so on.</p> <p>The garbage collector works by using an efficient reference counting system. Once an item is no longer referenced by any variable, it gets deleted. For the most part, that frees you from having to think about memory allocation, which is wonderful, especially in the case of text strings, which tend to be allocated on the fly all over the place.</p> <p>There are a couple provisos that you should note. One is that circular references will never be deleted by the garbage collector. By  circular reference   , I mean a pair of objects with variables that point to each other, or even an object with a variable that points to itself. In rare cases, you may even depend on this behavior. When you are done with such objects, you should either null out the circular reference, or you should forcibly destroy each object with the  <code>del</code>   instruction.</p> <p>circular reference <code>del</code></p> <p>This is a quick list of things that count as references to an object:</p> <ul> <li>Stored in a var</li> <li>An item in a  list   , or  associated   with a list item</li> <li>Has a  tag</li> <li>Is on the map (always true for  turfs   )</li> <li>Inside another atom's  contents</li> <li>Inside an atom's  vis_contents</li> <li>A temporary value in a still-running proc</li> <li>Is a  mob   with a  key</li> <li>Is an  image object   attached to an atom</li> </ul> <p>del()</p> <p>will try to clear out the most obvious possible references first, and bail out when it's done, but if there are still references it will search everywhere for any references that remain.</p> <p>This is a quick list of things that count as references to an object:</p> <ul> <li>Stored in a var</li> <li>An item in a  list   , or  associated   with a list item</li> <li>Has a  tag</li> <li>Is on the map (always true for  turfs   )</li> <li>Inside another atom's  contents</li> <li>Inside an atom's  vis_contents</li> <li>A temporary value in a still-running proc</li> <li>Is a  mob   with a  key</li> <li> <p>Is an  image object   attached to an atom</p> </li> <li> <p>Stored in a var</p> </li> <li> <p>An item in a  list   , or  associated   with a list item</p> </li> </ul> <p>list associated - Has a  tag</p> <p>tag - Is on the map (always true for  turfs   )</p> <p>turfs - Inside another atom's  contents</p> <p>contents - Inside an atom's  vis_contents</p> <p>vis_contents - A temporary value in a still-running proc</p> <ul> <li>Is a  mob   with a  key</li> </ul> <p>mob key - Is an  image object   attached to an atom</p> <p>image object</p> <p>del()</p> <p>will try to clear out the most obvious possible references first, and bail out when it's done, but if there are still references it will search everywhere for any references that remain.</p> <p>del()</p> <p>An object with running or sleeping procs is referenced by the  <code>src</code>   variable of those procs and will therefore not be thrown out.</p> <p><code>src</code></p> <p>Another note is that the  <code>world.contents</code>   list does not count as a reference. Otherwise,</p> <p>/mob</p> <p>and</p> <p>/obj</p> <p>objects would never be deleted, which is not the case. Note that objects which are contained by another object or which contain objects themselves  are   referenced and will not be deleted. That means an object must be at  <code>loc=null</code>   with no contents and, of course, no other references anywhere in order to get deleted by the garbage collector.</p> <p><code>world.contents</code></p> <p>/mob</p> <p>/obj</p> <p>are <code>loc=null</code></p> <p>Mobs with a non-empty</p> <p>key</p> <p>and all objects with non-empty</p> <p>tag</p> <p>are also immortal.</p> <p>key</p> <p>tag</p> <p>Turfs and areas do not currently get garbage collected.</p> <p>When the world shuts down, all objects are destroyed, whether they are referenced or not. You don't have to worry about system memory getting consumed by persistent objects. That doesn't happen.</p> <p>In general, people who do not like reference counting garbage collection should be happy that DM provides a  <code>del</code>   instruction, allowing you to take charge and delete things whether they are referenced or not. Another nicety is that this automatically nulls out any existing references to the object, so you don't end up with dangling references to a deleted object, which can otherwise be a great source of instability and mysterious bugs.</p> <p><code>del</code></p>"},{"location":"DM/icon/","title":"Icon","text":""},{"location":"DM/icon/#icons","title":"icons","text":"<p>See also: </p> <p>FILE_DIR definition </p> <p>cache </p> <p>flick proc </p> <p>icon </p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>See also: </p> <p>See also:</p> <p>FILE_DIR definition </p> <p>cache </p> <p>flick proc </p> <p>icon </p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>FILE_DIR definition</p> <p>cache </p> <p>flick proc </p> <p>icon </p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>cache</p> <p>flick proc </p> <p>icon </p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>flick proc</p> <p>icon </p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>icon</p> <p>icon var (atom) </p> <p>icon_state var (atom) </p> <p>image objects </p> <p>icon var (atom)</p> <p>icon_state var (atom) </p> <p>image objects </p> <p>icon_state var (atom)</p> <p>image objects </p> <p>image objects</p> <p>An icon file may be referenced by putting single quotes around the filename. The file extension determines the type of icon. Currently supported icon types are  <code>.dmi</code>   ,  <code>.bmp</code>   ,  <code>.png</code>   ,  <code>.jpg</code>   , and  <code>.gif</code>   . To create dmi icons, use the Dream Maker icon editor. This allows you to make animations, 4 or 8 directional icons, and icons with different states (such as \"live\" and \"dead\").</p> <p><code>.dmi</code> <code>.bmp</code> <code>.png</code> <code>.jpg</code> <code>.gif</code></p>"},{"location":"DM/icon/#_1","title":"Icon","text":"<p>Example:</p> <p>mob  icon = 'monster.dmi'</p> <p>You can also load icons into memory at run-time and manipulate the graphical data to produce new icons dynamically. This is done by creating an  /icon   object.</p> <p>/icon</p>"},{"location":"DM/mouse/","title":"Mouse","text":""},{"location":"DM/mouse/#mouse-handling","title":"mouse handling","text":"<p>Various mouse actions may be handled by defining procedures either on the client object or on the atomic object being manipulated. Any of the following procedures may be defined:</p> <ul> <li>MouseDown()</li> <li>MouseUp()</li> <li>MouseDrag()</li> <li>MouseDrop()</li> <li>MouseEntered()</li> <li>MouseExited()</li> <li>MouseMove</li> <li>MouseWheel</li> <li>Click()</li> <li> <p>DblClick()</p> </li> <li> <p>MouseDown()</p> </li> </ul> <p>MouseDown() - MouseUp()</p> <p>MouseUp() - MouseDrag()</p> <p>MouseDrag() - MouseDrop()</p> <p>MouseDrop() - MouseEntered()</p> <p>MouseEntered() - MouseExited()</p> <p>MouseExited() - MouseMove</p> <p>MouseMove - MouseWheel</p> <p>MouseWheel - Click()</p> <p>Click() - DblClick()</p> <p>DblClick()</p> <p>In general, define only the procedures you need, because extra communication overhead may be avoided when the compiler detects that you do not care about certain events.</p> <p>The arguments used in mouse procs generally follow one of these forms:</p> <p>For Click(), DblClick(), MouseDown(), MouseUp(), MouseEntered(), MouseExited(), and MouseMove():</p> <p>client/Click(object, location, control, params)</p> <p>atom/Click(location, control, params)</p> <p>For MouseDrag() and MouseDrop():</p> <p>client/MouseDrag(src_object, over_object, src_location, over_location, src_control, over_control, params)</p> <p>atom/MouseDrag(over_object, src_location, over_location, src_control, over_control, params)</p> <p>For MouseWheel():</p> <p>client/MouseWheel(object, delta_x, delta_y, location, control, params)</p> <p>atom/MouseWheel(delta_x, delta_y, location, control, params)</p> <p>For Click(), DblClick(), MouseDown(), MouseUp(), MouseEntered(), MouseExited(), and MouseMove():</p> <p>client/Click(object, location, control, params)</p> <p>atom/Click(location, control, params)</p> <p>For MouseDrag() and MouseDrop():</p> <p>client/MouseDrag(src_object, over_object, src_location, over_location, src_control, over_control, params)</p> <p>atom/MouseDrag(over_object, src_location, over_location, src_control, over_control, params)</p> <p>For MouseWheel():</p> <p>client/MouseWheel(object, delta_x, delta_y, location, control, params)</p> <p>atom/MouseWheel(delta_x, delta_y, location, control, params)</p> <p>The</p> <p>location</p> <p>argument varies with the type of control. For the map, it will be the turf where the mouse action happened. For info controls (statpanels), it will be the name of the statpanel where the action happened. For grid controls, it will be the cell where the action happened. For others controls it may vary, but most will leave this blank.</p> <p>location</p> <p>The</p> <p>control</p> <p>argument is the ID of the skin control where the action happened, such as</p> <p>\"mappane.map\"</p> <p>or</p> <p>\"mainwindow.banner\"</p> <p>.</p> <p>control</p> <p>\"mappane.map\"</p> <p>\"mainwindow.banner\"</p> <p>The</p> <p>params</p> <p>argument is text, and can be converted to a list using  params2list()   . It may contain any of the following properties, which will only be set if they are used:</p> <p>params</p> <p>params2list() * icon-x, icon-y: Pixel coordinates within the icon, in the icon's coordinate space * screen-loc: Pixel coordinates in screen_loc format (\"[tile_x]:[pixel_x],[tile_y]:[pixel_y]\") * left, middle, right: Mouse buttons pressed, held, or released in this action (see compatibility note below) * button: Mouse button pressed or released in this action (see compatibility note below) * ctrl, shift, alt: Keys held down during the mouse action * drag-cell, drop-cell: Cells involved if using a Grid control * drag: The button used for dragging (only sent for unrelated mouse up/down messages during a drag) * link: If the mouse is over a link in maptext, or this event is related to clicking such a link * vis-x, vis-y: Pixel coordinates relative to the icon's position on screen</p> <ul> <li> <p>icon-x, icon-y: Pixel coordinates within the icon, in the icon's coordinate space</p> </li> <li> <p>screen-loc: Pixel coordinates in screen_loc format (\"[tile_x]:[pixel_x],[tile_y]:[pixel_y]\")</p> </li> <li> <p>left, middle, right: Mouse buttons pressed, held, or released in this action (see compatibility note below)</p> </li> <li> <p>button: Mouse button pressed or released in this action (see compatibility note below)</p> </li> <li> <p>ctrl, shift, alt: Keys held down during the mouse action</p> </li> <li> <p>drag-cell, drop-cell: Cells involved if using a Grid control</p> </li> <li> <p>drag: The button used for dragging (only sent for unrelated mouse up/down messages during a drag)</p> </li> <li> <p>link: If the mouse is over a link in maptext, or this event is related to clicking such a link</p> </li> <li> <p>vis-x, vis-y: Pixel coordinates relative to the icon's position on screen</p> </li> </ul> <p>The icon-x/y coordinates are integers, and try to point to the actual pixel in the icon before any atom transforms are done; i.e. if the icon were scaled up to 3 times its size using the transform var, then a 3\u00d73 region of pixels would all have the same icon-x/y values. The lower left pixel of the icon is 1,1. The vis-x/y parameters are screen-based, and their origin (1,1) is wherever the lower left corner of the icon is rendered.</p> <p>Note: vis-x/y will not be included in the parameters if they are the same as icon-x/y.</p> <p>If the mouse is over an overlay, icon-x/y and vis-x/y are relative to the parent object, not the overlay icon itself, so it's possible to have value outside of the normal range of 1,1 to [width],[height].</p> <p>The mouse pointer may be customized as well. The following variables all deal with the appearance of the pointer. They do not control what actions may be taken by the user, but they provide hints to the user about what actions may work.</p> <ul> <li>mouse_pointer_icon</li> <li>mouse_over_pointer</li> <li>mouse_drag_pointer</li> <li>mouse_drop_pointer</li> <li>mouse_drop_zone</li> <li> <p>mouse_opacity</p> </li> <li> <p>mouse_pointer_icon</p> </li> </ul> <p>mouse_pointer_icon - mouse_over_pointer</p> <p>mouse_over_pointer - mouse_drag_pointer</p> <p>mouse_drag_pointer - mouse_drop_pointer</p> <p>mouse_drop_pointer - mouse_drop_zone</p> <p>mouse_drop_zone - mouse_opacity</p> <p>mouse_opacity</p> <p>When selecting a mouse pointer, you may provide your own custom icon or use one of the  built-in pointers   .</p> <p>built-in pointers</p> <p>Note: Older games compiled prior to BYOND 4.0 had a different format for the</p> <p>MouseDown()</p> <p>and</p> <p>MouseUp()</p> <p>procs. These used</p> <p>icon_x</p> <p>and</p> <p>icon_y</p> <p>as arguments, but</p> <p>control</p> <p>and</p> <p>params</p> <p>have replaced them.</p> <p>MouseDown()</p> <p>MouseUp()</p> <p>icon_x</p> <p>icon_y</p> <p>control</p> <p>params</p> <p>Note: Games compiled before version 514 did not have the</p> <p>button</p> <p>parameter, so they handled the</p> <p>left</p> <p>,</p> <p>middle</p> <p>, and</p> <p>right</p> <p>parameters differently. In old versions, only the button used in the action (left, middle, right) was included as a parameter; now all buttons being held or changed are included, and</p> <p>button</p> <p>is the mouse button that changed.</p> <p>button</p> <p>left</p> <p>middle</p> <p>right</p> <p>button</p>"},{"location":"DM/null/","title":"Null","text":""},{"location":"DM/null/#null","title":"null","text":"<p>Variables that are not initialized have the value null. This value is distinct from 0 and \"\". If you compare it to these, using the  <code>==</code>   operator, it is not equal. However, in a numeric context (like a mathematical operation), null evaluates to 0 and in a text context (like insertion into a text expression), null evaluates to \"\". In a logical expression, null, 0, and \"\" evaluate to false and all other values are true.</p> <p><code>==</code></p> <p>In an embedded text expression, null behaves like \"\". That means, if you are expecting a variable to display a 0, you should explicitly initialize it to 0 rather than leaving it as null.</p>"},{"location":"DM/preprocessor/","title":"Preprocessor","text":""},{"location":"DM/preprocessor/#preprocessor","title":"preprocessor","text":"<p>The preprocessor performs various transformations on source code as the DM compiler reads the file. It may be used to define macros\u2014that is words which are replaced by other fragments of code. It is also possible to insert other source code files and to conditionally compile or not compile sections of code.</p> <p>Preprocessor commands are called directives. They are placed on a line by themselves and always begin with a hash symbol  <code>#</code>   . The preprocessor directives recognized by DM are the same as standard C compilers:  ```` #define #if #elif #ifdef #ifndef #else #endif #include #error #warn</p> <pre><code>\n\n\n`#`\n</code></pre> <p>#define #if #elif #ifdef #ifndef #else #endif #include #error #warn</p> <p>````</p> <pre><code>[#define](#/DM/preprocessor/define)\n[#if](#/DM/preprocessor/if)\n[#elif](#/DM/preprocessor/elif)\n[#ifdef](#/DM/preprocessor/ifdef)\n[#ifndef](#/DM/preprocessor/ifndef)\n[#else](#/DM/preprocessor/else)\n[#endif](#/DM/preprocessor/endif)\n[#include](#/DM/preprocessor/include)\n[#error](#/DM/preprocessor/error)\n[#warn](#/DM/preprocessor/warn)\n\n</code></pre> <p>#define #if #elif #ifdef #ifndef #else #endif #include #error #warn</p>"},{"location":"DM/sound/","title":"Sound","text":""},{"location":"DM/sound/#sounds","title":"sounds","text":"<p>See also: </p> <p>FILE_DIR definition </p> <p>cache </p> <p>sound proc </p> <p>/sound datum </p> <p>load_resource proc </p> <p>See also: </p> <p>See also:</p> <p>FILE_DIR definition </p> <p>cache </p> <p>sound proc </p> <p>/sound datum </p> <p>load_resource proc </p> <p>FILE_DIR definition</p> <p>cache </p> <p>sound proc </p> <p>/sound datum </p> <p>load_resource proc </p> <p>cache</p> <p>sound proc </p> <p>/sound datum </p> <p>load_resource proc </p> <p>sound proc</p> <p>/sound datum </p> <p>load_resource proc </p> <p>/sound datum</p> <p>load_resource proc </p> <p>load_resource proc</p> <p>A sound stored in a file may be referenced by putting single quotes around the filename. The file extension determines the type of sound. Currently supported music types include MIDI (.mid or .midi), and module formats .mod, .it, .s3m, .xm, and .oxm. Supported sound effect formats include .wav, .ogg, .mp3, .raw, .wma, and .aiff.</p>"},{"location":"DM/sound/#_1","title":"Sound","text":"<p>Example:</p> <p>world &lt;&lt; sound('fugue.midi')</p> <p>This example plays the specified midi file to all players.</p>"},{"location":"DM/text/","title":"Text","text":""},{"location":"DM/text/#text","title":"text","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>entities (text) </p> <p>macros (text) </p> <p>tags (text) </p> <p>text proc </p> <p>Unicode </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>entities (text) </p> <p>macros (text) </p> <p>tags (text) </p> <p>text proc </p> <p>Unicode </p> <p>&lt;&lt; output operator</p> <p>entities (text) </p> <p>macros (text) </p> <p>tags (text) </p> <p>text proc </p> <p>Unicode </p> <p>entities (text)</p> <p>macros (text) </p> <p>tags (text) </p> <p>text proc </p> <p>Unicode </p> <p>macros (text)</p> <p>tags (text) </p> <p>text proc </p> <p>Unicode </p> <p>tags (text)</p> <p>text proc </p> <p>Unicode </p> <p>text proc</p> <p>Unicode </p> <p>Unicode</p> <p>Text consists of a string of characters enclosed in double quotes. To place a quote inside a string, escape it with a backslash  <code>\\</code>   character. You will also need to escape a backslash if you want to use one on purpose.</p> <p><code>\\</code></p>"},{"location":"DM/text/#_1","title":"Text","text":"<p>Example:</p> <p>usr &lt;&lt; \"He said, \\\"Hi.\\\"\"</p> <p>This example sends some text to the usr:  <code>He said, \"Hi.\"</code> </p> <p><code>He said, \"Hi.\"</code></p> <p>Backslashes are also used for special  macros   and to escape other characters that would normally be hard to include in a string. A backslash at the end of a line will ignore the line break, and continue the string on the next line after ignoring any leading spaces.</p> <p>macros</p> <p>To insert a variable expression into a string, enclose it in brackets  <code>[]</code>   . These are referred to as embedded text expressions. An object expression will display the object's name preceded by the text macro  <code>\\the</code>   or  <code>\\The</code>   if no other article has been specified. Capitalization of the article is inferred from context.</p> <p><code>[]</code> <code>\\the</code> <code>\\The</code></p>"},{"location":"DM/text/#_2","title":"Text","text":"<p>Example:</p> <p>mob/verb/shout(T as text)  world &lt;&lt; \"[usr]: [T]\"</p> <p>If this example is called by a mob named \"Bill\" with the text \"hi everybody!\", it will display \"Bill: hi everybody!\".</p> <p>On the other hand, if it is called by a mob named \"cat\", it would display \"The cat: hi everybody!\".</p> <p>Via  operator overloading   you can define an</p> <p>operator\"\"</p> <p>proc for an object to return different text when it's embedded in a string.</p> <p>operator overloading</p> <p>operator\"\"</p>"},{"location":"DM/text/#_3","title":"Text","text":"<p>Document strings</p> <p>For lengthy text strings, DM provides a special text  document   syntax. This begins with  <code>{\"</code>   and ends with  <code>\"}</code>   . It may include multiple lines and even un-escaped double quotes, but it still parses escape characters and embedded expressions.</p> <p>document <code>{\"</code> <code>\"}</code></p>"},{"location":"DM/text/#_4","title":"Text","text":"<p>Example:</p> <p>mob/verb/end()  usr &lt;&lt; {\" This is the way the world ends This is the way the world ends This is the way the world ends Not with a bang but a whimper.</p> <p>--T.S. Eliot \"Hollow Men\" \"}  del world //the end!</p>"},{"location":"DM/text/#_5","title":"Text","text":"<p>Raw strings</p> <p>DM also has a format for raw strings, which do not allow escape characters or embedded expressions. This can be useful for many situations, especially  regular expressions   which tend to use characters that need escaping. There are three ways to specify a raw string. All of them begin with the  <code>@</code>   character.</p> <p>regular expressions <code>@</code></p> <p>Simple raw strings follow  <code>@</code>   with a single-character delimiter, usually  <code>\"</code>   but it can be almost anything, and end when that delimiter is seen again. Line breaks are not allowed in simple raw strings.</p> <p><code>@</code> <code>\"</code></p>"},{"location":"DM/text/#_6","title":"Text","text":"<p>Examples:</p> <p>world &lt;&lt; @\"I can say \\ or [] without escaping anything!\" world &lt;&lt; @#Here I can use \"quotes\" but not the pound sign.#</p> <p>var/regex/R = new(@/(\\d+)/)</p> <p>// without raw strings world &lt;&lt; \"I can say \\ or [] without escaping anything!\" // lying world &lt;&lt; \"I have to escape \\\"quotes\\\" to use them.\"</p> <p>var/regex/R = new(\"(\\d+)\")</p> <p>Complex raw strings use more complicated delimiters, but they let you include line breaks. There are two ways to do this: One starts with  <code>@{\"</code>   and ends with  <code>\"}</code>   , so it looks like the familiar document string format. The other way starts with  <code>@(XYZ)</code>   , where  <code>XYZ</code>   is any arbitrary text you want it to be, and ends when that same text is encountered.</p> <p><code>@{\"</code> <code>\"}</code> <code>@(XYZ)</code> <code>XYZ</code></p> <p>With a complex raw string, a single leading and/or trailing line break will be ignored.</p>"},{"location":"DM/text/#_7","title":"Text","text":"<p>Examples:</p> <p>world &lt;&lt; @{\" Now I have absolute freedom to use \"quotes\" or [brackets] or line breaks, as long as I don't follow a quote with a closing brace. \"}</p> <p>world &lt;&lt; @(~~~) Until three tilde (~) characters are seen, this is a valid string. ~~~ // end of string</p> <p>world &lt;&lt; @(!!)You don't need a line break if you don't want one.!!</p>"},{"location":"DM/vars/","title":"Vars","text":""},{"location":"DM/vars/#vars-list-var-global","title":"vars list var (global)","text":"<p>See also: </p> <p>vars list var (datum) </p> <p>See also: </p> <p>See also:</p> <p>vars list var (datum) </p> <p>vars list var (datum)</p> <p>This is a list of all global variables. The items in the list are the variable names. If the variable name is used as an index into the list, the value of that variable is accessed.</p>"},{"location":"DM/vars/#_1","title":"Vars","text":"<p>Example:</p> <p>mob/verb/dumpglobal()  for(var/V in global.vars)  usr &lt;&lt; \"[V] = [global.vars[V]]\"</p> <p>This example displays all global variables. The  <code>global</code>   keyword is used here to distinguish it from  <code>src.vars</code>   , which in this example would be the mob's vars.</p> <p><code>global</code> <code>src.vars</code></p>"},{"location":"DM/icon/arithmetic/","title":"Arithmetic","text":""},{"location":"DM/icon/arithmetic/#icon-arithmetic","title":"icon arithmetic","text":"<p>See also: </p> <p>icon proc </p> <p>icon_states proc </p> <p>icons </p> <p>rgb proc </p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>See also: </p> <p>See also:</p> <p>icon proc </p> <p>icon_states proc </p> <p>icons </p> <p>rgb proc </p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>icon proc</p> <p>icon_states proc </p> <p>icons </p> <p>rgb proc </p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>icon_states proc</p> <p>icons </p> <p>rgb proc </p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>icons</p> <p>rgb proc </p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>rgb proc</p> <p>turn proc (applied to an icon) </p> <p>icon object </p> <p>turn proc (applied to an icon)</p> <p>icon object </p> <p>icon object</p> <p>Note: The following \"arithmetical\" methods of icon manipulation are being phased out in favor of the  /icon   object, which can be directly manipulated and which provides a wider variety of operations. Many of those in turn have been obviated by the  color   and  transform   vars.</p> <p>/icon color transform</p> <p>There are several ways in which icons can be manipulated at runtime. They can be rotated, added together, and the colors components may be altered.</p> <p>One purpose for such operations is to make players look different. Other interesting uses (and abuses) will undoubtedly follow.</p>"},{"location":"DM/icon/arithmetic/#_1","title":"Arithmetic","text":"<p>Addition and Subtraction</p> <p>The result of adding two icons is an arithmetic combination of the color components of each individual pixel. At positions where either icon is transparent, the result is also transparent. Subtraction, instead of increasing the intensity, decreases it by the amount in each pixel of the icon being subtracted.</p> <p>Suppose you wanted to add together different bodies and heads. You could do that by making a few of each type with black backgrounds. When these add together, the black contributes nothing but prevents pixels in the other icon from getting clipped.</p>"},{"location":"DM/icon/arithmetic/#_2","title":"Arithmetic","text":"<p>Example:</p> <p>mob/verb  addicon(I as icon)  icon += I  subicon(I as icon)  icon -= I</p> <p>If you need to add the same color to every pixel, you can do so using a color value. Color values have the same format as in HTML: \"#RRGGBB\" with two hexadecimal digits for each color component. That gives you a range in color from 0 to FF (which is 255 in decimal).</p> <p>You can also specify a color value as \"#RGB\". The single digit is automatically repeated, so \"#F00\" is the same as \"#FF0000\", which is bright red. For certain pre-defined color values, you can also specify a name, such as \"red\". See  HTML colors   for a list of color names.</p> <p>HTML colors</p> <p>If you prefer base 10, you can create color values with the rgb(R,G,B) instruction. Each parameter is in the range 0 to 255.</p>"},{"location":"DM/icon/arithmetic/#_3","title":"Arithmetic","text":"<p>Multiplication</p> <p>To increase (or decrease) the intensity of an icon multiplicatively, you can use the '  <code>*</code>   ' operator.</p> <p><code>*</code></p>"},{"location":"DM/icon/arithmetic/#_4","title":"Arithmetic","text":"<p>Example:</p> <p>mob/verb/multicon(factor as num)  icon *= factor</p>"},{"location":"DM/mouse/pointers/","title":"Pointers","text":""},{"location":"DM/mouse/pointers/#mouse-pointers","title":"mouse pointers","text":"<p>See also: </p> <p>mouse handling </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>See also: </p> <p>See also:</p> <p>mouse handling </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse handling</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_drop_zone var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>The following mouse pointers are built-in and may be assigned to any of the mouse pointer variables. Of course, you can also define your own custom mouse pointers using an icon file.</p> <p>MOUSE_INACTIVE_POINTER (0)</p> <p>MOUSE_ACTIVE_POINTER (1)</p> <p>MOUSE_DRAG_POINTER</p> <p>Same as mouse_drag_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_DROP_POINTER</p> <p>Same as mouse_drop_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_ARROW_POINTER</p> <p>Same as mouse_over_pointer = MOUSE_INACTIVE_POINTER.</p> <p>MOUSE_CROSSHAIRS_POINTER</p> <p>Same as mouse_over_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_HAND_POINTER</p> <p>MOUSE_INACTIVE_POINTER (0)</p> <p>MOUSE_ACTIVE_POINTER (1)</p> <p>MOUSE_DRAG_POINTER</p> <p>MOUSE_ACTIVE_POINTER (1)</p> <p>MOUSE_DRAG_POINTER</p> <p>MOUSE_DRAG_POINTER</p> <p>Same as mouse_drag_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_DROP_POINTER</p> <p>Same as mouse_drop_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_ARROW_POINTER</p> <p>Same as mouse_over_pointer = MOUSE_INACTIVE_POINTER.</p> <p>MOUSE_CROSSHAIRS_POINTER</p> <p>Same as mouse_over_pointer = MOUSE_ACTIVE_POINTER.</p> <p>MOUSE_HAND_POINTER</p>"},{"location":"DM/preprocessor/DM_BUILD/","title":"DM BUILD","text":""},{"location":"DM/preprocessor/DM_BUILD/#dm_build-macro","title":"DM_BUILD macro","text":"<p>See also: </p> <p>byond_build var (world) </p> <p>byond_build var (client) </p> <p>DM_VERSION macro </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>byond_build var (world) </p> <p>byond_build var (client) </p> <p>DM_VERSION macro </p> <p>preprocessor </p> <p>byond_build var (world)</p> <p>byond_build var (client) </p> <p>DM_VERSION macro </p> <p>preprocessor </p> <p>byond_build var (client)</p> <p>DM_VERSION macro </p> <p>preprocessor </p> <p>DM_VERSION macro</p> <p>preprocessor </p> <p>preprocessor</p> <p>This macro indicates the minor version of the compiler, which is useful during BYOND beta testing. More often, you will want to use the</p> <p>DM_VERSION</p> <p>macro instead, which is the major version.</p> <p>DM_VERSION</p>"},{"location":"DM/preprocessor/DM_VERSION/","title":"DM VERSION","text":""},{"location":"DM/preprocessor/DM_VERSION/#dm_version-macro","title":"DM_VERSION macro","text":"<p>See also: </p> <p>byond_version var (world) </p> <p>byond_version var (client) </p> <p>DM_BUILD macro </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>byond_version var (world) </p> <p>byond_version var (client) </p> <p>DM_BUILD macro </p> <p>preprocessor </p> <p>byond_version var (world)</p> <p>byond_version var (client) </p> <p>DM_BUILD macro </p> <p>preprocessor </p> <p>byond_version var (client)</p> <p>DM_BUILD macro </p> <p>preprocessor </p> <p>DM_BUILD macro</p> <p>preprocessor </p> <p>preprocessor</p> <p>This macro indicates the version of the compiler. This could be useful when distributing code that uses new language features that would not compile in older compilers.</p>"},{"location":"DM/preprocessor/DM_VERSION/#_1","title":"DM VERSION","text":"<p>Example:</p> <p>#if DM_VERSION &lt; 230</p>"},{"location":"DM/preprocessor/DM_VERSION/#error-this-compiler-is-too-far-out-of-date","title":"error This compiler is too far out of date!","text":""},{"location":"DM/preprocessor/DM_VERSION/#endif","title":"endif","text":""},{"location":"DM/preprocessor/__FILE__/","title":"FILE","text":""},{"location":"DM/preprocessor/__FILE__/#__file__-macro","title":"__FILE__ macro","text":"<p>See also: </p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>__LINE__ macro </p> <p>__MAIN__ macro </p> <p>See also: </p> <p>See also:</p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>__LINE__ macro </p> <p>__MAIN__ macro </p> <p>ASSERT proc</p> <p>DEBUG definition </p> <p>__LINE__ macro </p> <p>__MAIN__ macro </p> <p>DEBUG definition</p> <p>__LINE__ macro </p> <p>__MAIN__ macro </p> <p>__LINE__ macro</p> <p>__MAIN__ macro </p> <p>__MAIN__ macro</p> <p>The __FILE__ macro expands to a string containing the name of the current source file. This may be useful when generating debugging error messages.</p>"},{"location":"DM/preprocessor/__LINE__/","title":"LINE","text":""},{"location":"DM/preprocessor/__LINE__/#__line__-macro","title":"__LINE__ macro","text":"<p>See also: </p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>__FILE__ macro </p> <p>See also: </p> <p>See also:</p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>__FILE__ macro </p> <p>ASSERT proc</p> <p>DEBUG definition </p> <p>__FILE__ macro </p> <p>DEBUG definition</p> <p>__FILE__ macro </p> <p>__FILE__ macro</p> <p>The __LINE__ macro is replaced by the line number in the current source file. This may be useful when generating debugging error messages.</p>"},{"location":"DM/preprocessor/__MAIN__/","title":"MAIN","text":""},{"location":"DM/preprocessor/__MAIN__/#__main__-macro","title":"__MAIN__ macro","text":"<p>See also: </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>preprocessor </p> <p>preprocessor</p> <p>The __MAIN__ macro is defined in the main  <code>.dme</code>   file being compiled. In all other files included by this file, __MAIN__ is not defined.</p> <p><code>.dme</code></p> <p>The purpose of this is for library writers to package a small demo of their library directly in the library source code. When users compile the library directly, the library's own  <code>.dme</code>   is the main file and can include extra files that are not normally part of the library.</p> <p><code>.dme</code></p>"},{"location":"DM/preprocessor/__MAIN__/#_1","title":"MAIN","text":"<p>Example:</p> <p>#ifdef __MAIN__</p>"},{"location":"DM/preprocessor/__MAIN__/#include-demodm","title":"include \"demo.dm\"","text":""},{"location":"DM/preprocessor/__MAIN__/#include-demodmm","title":"include \"demo.dmm\"","text":""},{"location":"DM/preprocessor/__MAIN__/#endif","title":"endif","text":"<p>If the demo requires a lot of extra resources, it is probably better to package the demo as a separate project. Small demos, however, are nice and convenient using this \"auto-demo\" technique\u2014especially since Dream Seeker automatically launches Dream Maker after installing a library containing a  <code>.dme</code>   file.</p> <p><code>.dme</code></p>"},{"location":"DM/preprocessor/define/","title":"Define","text":""},{"location":"DM/preprocessor/define/#define-directive","title":"#define directive","text":"<p>See also: </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>preprocessor </p> <p>preprocessor</p> <p>Format: </p> <p>#define Name Value</p> <p>#define Name(Parameters) Value</p> <p>Format: </p> <p>Format:</p> <p>#define Name Value</p> <p>#define Name(Parameters) Value</p> <p>#define Name(Parameters) Value</p> <p>Args: </p> <p>Name: A macro definition.</p> <p>Value: The value to substitute for Name.</p> <p>Parameters: Arguments to pass into the macro.</p> <p>Args: </p> <p>Args:</p> <p>Name: A macro definition.</p> <p>Value: The value to substitute for Name.</p> <p>Parameters: Arguments to pass into the macro.</p> <p>Value: The value to substitute for Name.</p> <p>Parameters: Arguments to pass into the macro.</p> <p>Parameters: Arguments to pass into the macro.</p> <p>The #define statement creates a macro that is substituted for Name. Substitution only applies to whole words. Text inside of double or single quotes is not processed for substitution, so  <code>\"This is BIG.\"</code>   would not be modified even if a macro named BIG were defined. That is different from  <code>\"This is [BIG].\"</code>   , where BIG is an embedded expression, which does get processed for macro substitution.</p> <p><code>\"This is BIG.\"</code> <code>\"This is [BIG].\"</code></p>"},{"location":"DM/preprocessor/define/#_1","title":"Define","text":"<p>Example:</p> <p>#define DAY 0</p>"},{"location":"DM/preprocessor/define/#define-night-1","title":"define NIGHT 1","text":"<p>var/daytime = NIGHT //daytime = 1</p>"},{"location":"DM/preprocessor/define/#_2","title":"Define","text":"<p>Example:</p> <p>#define SQR(X) ((X)*(X)) var/x = SQR(2) //x = ((2)*(2)) = 4</p> <p>Note that it's usually important to use parentheses around any arguments you use in a macro. Otherwise strange results may occur if you use an expression such as 2+3. In the SQR(X) example, if there were no parentheses around each X then the expansion of the macro would be (2+3*2+3). Since the * operator has a higher precedence than + the result is 11, not 25 as expected. It's equally important to put parentheses around the entire macro for the same reason.</p>"},{"location":"DM/preprocessor/define/#_3","title":"Define","text":"<p>Variadic macros</p> <p>The last parameter of a macro can end in</p> <p>...</p> <p>which means that it and all other arguments following it count as a single argument. This is called a variadic macro because it lets you use a variable number of arguments. The last parameter will also become optional.</p> <p>...</p>"},{"location":"DM/preprocessor/define/#_4","title":"Define","text":"<p>Example:</p> <p>#define DEFAULT_LIST(n, items...) if(!n) n = list(items)</p>"},{"location":"DM/preprocessor/define/#_5","title":"Define","text":"<p>#var</p> <p>to string</p> <p>#var</p> <p>In a macro's body, if you precede a parameter by</p> <p>#</p> <p>, the replacement value will be turned into a string. For instance, 2 would become \"2\".</p> <p>#</p>"},{"location":"DM/preprocessor/define/#_6","title":"Define","text":"<p>Example:</p> <p>#define DEBUG_VAR(v) world.log &lt;&lt; \"[#v] = [v]\" DEBUG_VAR(usr.x) // world.log &lt;&lt; \"usr.x = [usr.x]\"</p>"},{"location":"DM/preprocessor/define/#_7","title":"Define","text":"<p>##var</p> <p>concatenation</p> <p>##var</p> <p>A parameter preceded by</p> <p>##</p> <p>in the macro body is substituted directly, without any spaces. If you use this with the last argument in a variadic macro, any preceding spaces and a comma (if found) will be removed if the replacement is empty.</p> <p>##</p>"},{"location":"DM/preprocessor/define/#_8","title":"Define","text":"<p>Example:</p> <p>#define MACROVAR(k) var/macro_state_##k // MACROVAR(right) becomes var/macro_state_right</p>"},{"location":"DM/preprocessor/define/#define-prefix_listx-y-listx-src-y","title":"define PREFIX_LIST(x, y...) list(x, src, ##y)","text":"<p>// PREFIX_LIST(1, 2, 3) becomes list(1, src, 2, 3) // PREFIX_LIST(4) becomes list(4, src)</p>"},{"location":"DM/preprocessor/define/#_9","title":"Define","text":"<p>n###var</p> <p>repeat</p> <p>n###var</p> <p>Using</p> <p>###</p> <p>in the macro body, preceded by a number, will repeat the replacement a certain number of times.</p> <p>###</p>"},{"location":"DM/preprocessor/define/#_10","title":"Define","text":"<p>Example:</p> <p>#define SAYTWICE(t) 2###t</p>"},{"location":"DM/preprocessor/define/#define-totextt-t","title":"define TOTEXT(t) #t","text":"<p>world &lt;&lt; \"[TOTEXT(SAYTWICE(hi))]\" // world &lt;&lt; \"hihi\"</p>"},{"location":"DM/preprocessor/elif/","title":"Elif","text":""},{"location":"DM/preprocessor/elif/#elif-directive","title":"#elif directive","text":"<p>See: </p> <p>#if directive </p> <p>See: </p> <p>See:</p> <p>#if directive </p> <p>#if directive</p>"},{"location":"DM/preprocessor/else/","title":"Else","text":""},{"location":"DM/preprocessor/else/#else-directive","title":"#else directive","text":"<p>See: </p> <p>#if directive </p> <p>See: </p> <p>See:</p> <p>#if directive </p> <p>#if directive</p>"},{"location":"DM/preprocessor/endif/","title":"Endif","text":""},{"location":"DM/preprocessor/endif/#endif-directive","title":"#endif directive","text":"<p>See: </p> <p>#if directive </p> <p>See: </p> <p>See:</p> <p>#if directive </p> <p>#if directive</p>"},{"location":"DM/preprocessor/error/","title":"Error","text":""},{"location":"DM/preprocessor/error/#error-directive","title":"#error directive","text":"<p>See also: </p> <p>preprocessor </p> <p>#warn directive </p> <p>See also: </p> <p>See also:</p> <p>preprocessor </p> <p>#warn directive </p> <p>preprocessor</p> <p>#warn directive </p> <p>#warn directive</p> <p>Format: </p> <p>#error Text</p> <p>Format: </p> <p>Format:</p> <p>#error Text</p> <p>Args: </p> <p>Text: an error message to display</p> <p>Args: </p> <p>Args:</p> <p>Text: an error message to display</p> <p>The #error directive halts compilation and displays the specified message.</p>"},{"location":"DM/preprocessor/error/#_1","title":"Error","text":"<p>Example:</p> <p>#if DM_VERSION &lt; 4</p>"},{"location":"DM/preprocessor/error/#error-this-compiler-is-too-far-out-of-date","title":"error This compiler is too far out of date!","text":""},{"location":"DM/preprocessor/error/#endif","title":"endif","text":""},{"location":"DM/preprocessor/if/","title":"If","text":""},{"location":"DM/preprocessor/if/#if-directive","title":"#if directive","text":"<p>See also: </p> <p>#define directive </p> <p>#ifdef directive </p> <p>See also: </p> <p>See also:</p> <p>#define directive </p> <p>#ifdef directive </p> <p>#define directive</p> <p>#ifdef directive </p> <p>#ifdef directive</p> <p>Format: </p> <p>#if Val</p> <p>...</p> <p>#elif Val2</p> <p>...</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>Format: </p> <p>Format:</p> <p>#if Val</p> <p>...</p> <p>#elif Val2</p> <p>...</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>...</p> <p>#elif Val2</p> <p>...</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>#elif Val2</p> <p>...</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>...</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>#else</p> <p>...</p> <p>#endif</p> <p>...</p> <p>#endif</p> <p>#endif</p> <p>Args: </p> <p>Val: A logical expression.</p> <p>Args: </p> <p>Args:</p> <p>Val: A logical expression.</p> <p>The  <code>#if</code>   statement is used to conditionally compile code. If Val is true (non-zero), the code following the  <code>#if</code>   statement will be compiled. Otherwise, compilation skips to the next  <code>#elif</code>   ,  <code>#else</code>   , or  <code>#endif</code>   statement.</p> <p><code>#if</code> <code>#if</code> <code>#elif</code> <code>#else</code> <code>#endif</code></p> <p>The function  <code>defined()</code>   can be used in the conditional expression. It is true if its argument is a defined macro (with  <code>#define</code>   ) and false otherwise.</p> <p><code>defined()</code> <code>#define</code></p>"},{"location":"DM/preprocessor/if/#_1","title":"If","text":"<p>Example:</p> <p>#if defined(DEBUG) // This code will be compiled if DEBUG is // defined</p>"},{"location":"DM/preprocessor/if/#else","title":"else","text":"<p>// This code will be compiled if DEBUG is // not defined</p>"},{"location":"DM/preprocessor/if/#endif","title":"endif","text":""},{"location":"DM/preprocessor/ifdef/","title":"Ifdef","text":""},{"location":"DM/preprocessor/ifdef/#ifdef-directive","title":"#ifdef directive","text":"<p>See also: </p> <p>#define directive </p> <p>#if directive </p> <p>#ifndef directive </p> <p>See also: </p> <p>See also:</p> <p>#define directive </p> <p>#if directive </p> <p>#ifndef directive </p> <p>#define directive</p> <p>#if directive </p> <p>#ifndef directive </p> <p>#if directive</p> <p>#ifndef directive </p> <p>#ifndef directive</p> <p>Format: </p> <p>#ifdef Name</p> <p>Format: </p> <p>Format:</p> <p>#ifdef Name</p> <p>Args: </p> <p>Name: A macro definition.</p> <p>Args: </p> <p>Args:</p> <p>Name: A macro definition.</p> <p>The  <code>#ifdef</code>   statement is used to conditionally compile code. It is equivalent to  <code>#if defined(Name)</code>   .</p> <p><code>#ifdef</code> <code>#if defined(Name)</code></p>"},{"location":"DM/preprocessor/ifndef/","title":"Ifndef","text":""},{"location":"DM/preprocessor/ifndef/#ifndef-directive","title":"#ifndef directive","text":"<p>See also: </p> <p>#define directive </p> <p>#if directive </p> <p>#ifdef directive </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>#define directive </p> <p>#if directive </p> <p>#ifdef directive </p> <p>preprocessor </p> <p>#define directive</p> <p>#if directive </p> <p>#ifdef directive </p> <p>preprocessor </p> <p>#if directive</p> <p>#ifdef directive </p> <p>preprocessor </p> <p>#ifdef directive</p> <p>preprocessor </p> <p>preprocessor</p> <p>Format: </p> <p>#ifndef Name</p> <p>Format: </p> <p>Format:</p> <p>#ifndef Name</p> <p>Args: </p> <p>Name: A macro definition.</p> <p>Args: </p> <p>Args:</p> <p>Name: A macro definition.</p> <p>The  <code>#ifndef</code>   statement is used to conditionally compile code. It is equivalent to  <code>#if !defined(Name)</code>   .</p> <p><code>#ifndef</code> <code>#if !defined(Name)</code></p>"},{"location":"DM/preprocessor/include/","title":"Include","text":""},{"location":"DM/preprocessor/include/#include-directive","title":"#include directive","text":"<p>Format: </p> <p>#include \"Filename\"</p> <p>#include  <p>Format: </p> <p>Format:</p> <p>#include \"Filename\"</p> <p>#include  <p>#include  <p>Args: </p> <p>\"Filename\": The path to the filename to include, from the current  directory.</p> <p>: The path inside the BYOND lib directory. <p>Args: </p> <p>Args:</p> <p>\"Filename\": The path to the filename to include, from the current  directory.</p> <p>: The path inside the BYOND lib directory. <p>: The path inside the BYOND lib directory. <p>The  <code>#include</code>   statement causes the compiler to process another file before continuing in the current source file.</p> <p><code>#include</code></p> <p>If a file is included multiple times, only the first occurrence will be processed. That is a convenient addition to the standard C preprocessor, which DM otherwise emulates quite closely.</p> <p>The file  <code>&lt;stddef.dm&gt;</code>   is automatically included before all other source code.</p> <p><code>&lt;stddef.dm&gt;</code></p>"},{"location":"DM/preprocessor/include/#_1","title":"Include","text":"<p>Example:</p> <p>#include \"test.dm\" // checks ./test.dm</p>"},{"location":"DM/preprocessor/include/#include","title":"include","text":"<p>// checks lib-path/test.dm</p> <p>// checks lib-path/test.dm</p> <p>The BYOND lib directory is called  <code>\"lib\"</code>   and is located in the BYOND system directory (typically  <code>\"\\Program Files\\Byond\\lib\"</code>   ). If the file is not found there, it also looks in the user lib directory, which would typically be  <code>\"...\\Byond\\user\\  *login-name*   \\lib\"</code>   .</p> <p><code>\"lib\"</code> <code>\"\\Program Files\\Byond\\lib\"</code> <code>\"...\\Byond\\user\\  *login-name*   \\lib\"</code> login-name</p> <p>Note that the compiler interface allows you to include files graphically by simply clicking the checkbox next to the file. This creates an include statement for you in the  <code>.dme</code>   project environment file. The only time you would still want to manually include files is when you need to ensure a certain order of processing. For example, if file  <code>\"MyCode.dm\"</code>   overrides procedure definitions of an object defined in  <code>\"LibCode.dm\"</code>   , you should include  <code>\"LibCode.dm\"</code>   at the top of  <code>\"MyCode.dm\"</code>   . Most other DM code is independent of order, but overriding procedure definitions is not. The compiler will warn you in such cases if you forget.</p> <p><code>.dme</code> <code>\"MyCode.dm\"</code> <code>\"LibCode.dm\"</code> <code>\"LibCode.dm\"</code> <code>\"MyCode.dm\"</code></p> <p>Another case in which you should manually include files is if you are writing a library to be used by other programmers. Since the  <code>.dme</code>   file is not distributed with a library, all necessary inclusions must be made in the  <code>.dm</code>   files.</p> <p><code>.dme</code> <code>.dm</code></p>"},{"location":"DM/preprocessor/undef/","title":"Undef","text":""},{"location":"DM/preprocessor/undef/#undef-directive","title":"#undef directive","text":"<p>See also: </p> <p>#define directive </p> <p>preprocessor </p> <p>See also: </p> <p>See also:</p> <p>#define directive </p> <p>preprocessor </p> <p>#define directive</p> <p>preprocessor </p> <p>preprocessor</p> <p>Format: </p> <p>#undef Name</p> <p>Format: </p> <p>Format:</p> <p>#undef Name</p> <p>Args: </p> <p>Name: A macro definition.</p> <p>Args: </p> <p>Args:</p> <p>Name: A macro definition.</p> <p>The  <code>#undef</code>   statement removes a macro definition.</p> <p><code>#undef</code></p>"},{"location":"DM/preprocessor/warn/","title":"Warn","text":""},{"location":"DM/preprocessor/warn/#warn-directive","title":"#warn directive","text":"<p>See also: </p> <p>preprocessor </p> <p>#error directive </p> <p>See also: </p> <p>See also:</p> <p>preprocessor </p> <p>#error directive </p> <p>preprocessor</p> <p>#error directive </p> <p>#error directive</p> <p>Format: </p> <p>#warn Text</p> <p>Format: </p> <p>Format:</p> <p>#warn Text</p> <p>Args: </p> <p>Text: a warning message to display</p> <p>Args: </p> <p>Args:</p> <p>Text: a warning message to display</p> <p>The #warn directive displays the specified message as a warning, but does not prevent the project from compiling.</p>"},{"location":"DM/preprocessor/warn/#_1","title":"Warn","text":"<p>Example:</p> <p>#ifdef USE_LIGHTING</p>"},{"location":"DM/preprocessor/warn/#warn-the-lighting-feature-in-mylibrary-is-experimental","title":"warn The lighting feature in MyLibrary is experimental.","text":""},{"location":"DM/preprocessor/warn/#endif","title":"endif","text":""},{"location":"DM/preprocessor/define/DEBUG/","title":"DEBUG","text":""},{"location":"DM/preprocessor/define/DEBUG/#debug-definition","title":"DEBUG definition","text":"<p>See also: </p> <p>#define directive </p> <p>See also: </p> <p>See also:</p> <p>#define directive </p> <p>#define directive</p> <p>Format: </p> <p>#define DEBUG</p> <p>Format: </p> <p>Format:</p> <p>#define DEBUG</p> <p>If  <code>DEBUG</code>   is defined, source file and line number information will be stored in the compiled  <code>.dmb</code>   file. If a proc crashes during execution and  <code>DEBUG</code>   information is present, the current source file name and line number will be indicated in the error output.</p> <p><code>DEBUG</code> <code>.dmb</code> <code>DEBUG</code></p> <p>This option increases the size of the  <code>.dmb</code>   , typically by about 10%. Execution of the code may also be a tiny bit slower.</p> <p><code>.dmb</code></p> <p>If you are distributing the  <code>.dmb</code>   to players and you do not want them to have debug access at runtime, you should  not   compile in debug mode.</p> <p><code>.dmb</code> not</p> <p>If you want to use the run-time profiler (see the debugging options in Dream Seeker), you must compile in debug mode. Then you can get a report of CPU usage by your various procs.</p>"},{"location":"DM/preprocessor/define/FILE_DIR/","title":"FILE DIR","text":""},{"location":"DM/preprocessor/define/FILE_DIR/#file_dir-definition","title":"FILE_DIR definition","text":"<p>See also: </p> <p>cache </p> <p>icons </p> <p>See also: </p> <p>See also:</p> <p>cache </p> <p>icons </p> <p>cache</p> <p>icons </p> <p>icons</p> <p>Format: </p> <p>#define FILE_DIR Path</p> <p>Format: </p> <p>Format:</p> <p>#define FILE_DIR Path</p> <p>Args: </p> <p>Path: A search path on the current filesystem.</p> <p>Args: </p> <p>Args:</p> <p>Path: A search path on the current filesystem.</p> <p>This macro defines a search path to be used in evaluating resource files (icons and sounds). First the current directory is searched, then the first  <code>FILE_DIR</code>   path, then the next, etc.</p> <p><code>FILE_DIR</code></p>"},{"location":"DM/preprocessor/define/FILE_DIR/#_1","title":"FILE DIR","text":"<p>Example:</p> <p>#define FILE_DIR icons</p>"},{"location":"DM/preprocessor/define/FILE_DIR/#define-file_dir-iconsmobs","title":"define FILE_DIR icons/mobs","text":"<p>mob/clown  icon = 'clown.dmi'</p> <p>This searches for the file at the paths  <code>\"./clown.dmi\"</code>   ,  <code>\"./icons/clown.dmi\"</code>   , and  <code>\"./icons/sounds/clown.dmi\"</code>   , where  <code>\".\"</code>   is the directory of the current source file.</p> <p><code>\"./clown.dmi\"</code> <code>\"./icons/clown.dmi\"</code> <code>\"./icons/sounds/clown.dmi\"</code> <code>\".\"</code></p>"},{"location":"DM/text/entities/","title":"Entities","text":""},{"location":"DM/text/entities/#entities-text","title":"entities (text)","text":"<p>See also: </p> <p>macros (text) </p> <p>tags (text) </p> <p>text </p> <p>See also: </p> <p>See also:</p> <p>macros (text) </p> <p>tags (text) </p> <p>text </p> <p>macros (text)</p> <p>tags (text) </p> <p>text </p> <p>tags (text)</p> <p>text </p> <p>text</p> <p>Special characters may be inserted into text using HTML syntax. Such characters are known as entities. They start with an ampersand and end with a semicolon. The main reason for doing this is to insert characters that otherwise have a special meaning. The most common entities have names. The rest must be referred to by their Unicode character number (e.g. &amp; is the same as &amp;). The common ones are listed in the following table. Note that the same effect may be achieved by simply escaping the special character (like  <code>\\&lt;</code>   ). The full entity syntax is included for generality.</p> <p><code>\\&lt;</code></p> &amp; &amp; &lt; &lt; &gt; &gt; \" \" \u00a9 \u00a9 <p>|   &amp;   |   &amp;   |</p> <p>&amp;  |</p> <p>&amp;  | |   &lt;   |   &lt;   |</p> <p>&lt;  |</p> <p>&lt;  | |   &gt;   | </p> <p>|</p> <p>&gt;  |</p> <p>| |   \"   |   \"   |</p> <p>\"  |</p> <p>\"  | |   \u00a9   |   \u00a9   |</p> <p>\u00a9  |</p> <p>\u00a9  |</p>"},{"location":"DM/text/macros/","title":"Macros","text":""},{"location":"DM/text/macros/#macros-text","title":"macros (text)","text":"<p>See also: </p> <p>icon text macro </p> <p>text </p> <p>text proc </p> <p>See also: </p> <p>See also:</p> <p>icon text macro </p> <p>text </p> <p>text proc </p> <p>icon text macro</p> <p>text </p> <p>text proc </p> <p>text</p> <p>text proc </p> <p>text proc</p> <p>Text macros start with '\\' (a backslash) and end with a space or other punctuation.</p> <p>\\the, \\The // insert 'the' (if needed) \\a, \\an, // insert 'a(n)' or 'some' (if needed) \\A, \\An</p> <p>\\he, \\He // insert 'he/she/they/it' \\she, \\She // same \\his, \\His // insert 'his/her/their/its' \\him // insert 'him/her/them/it' \\himself // insert 'himself/herself/themself/itself' \\herself // same \\hers // insert 'his/hers/theirs/its'</p> <p>\\proper // used in an object name to force proper-noun behavior \\improper // used in an object name to force improper-noun behavior</p> <p>\\th // insert 1st, 2nd, 5th etc. \\s // insert 's' if [] was plural \\icon // insert icon of following [] \\ref // insert a unique id for following [] \\roman // insert following [] as a lower-case roman numeral \\Roman // insert following [] as an upper-case roman numeral ... // suppress final new line \\t // insert tab \\n // insert new line \\\" // insert double quote \\ // insert backslash \\&lt; // insert &lt; (less than) &gt; // insert &gt; (greater than) (space) // skip a space (newline) // skip a newline (and following space)</p> <p>\\xNN // insert a character by its ASCII/Unicode value \\uNNNN // \" \\UNNNNNN // \"</p>"},{"location":"DM/text/macros/#_1","title":"Macros","text":"<p>Example:</p> <p>mob/verb/steal(M as mob,obj/O as obj in M)  O.loc = usr  view() &lt;&lt; \"[usr] finds \\himself \\an [O].\"</p>"},{"location":"DM/text/macros/#_2","title":"Macros","text":"<p>Example:</p> <p>var/DayCount proc/NewDay()  DayCount++  world &lt;&lt; \"The [DayCount]\\th day dawns.\"</p>"},{"location":"DM/text/macros/#_3","title":"Macros","text":"<p>Example:</p> <p>obj/CPU  name = \"\\improper CPU\" //prevent capitalization from causing proper-noun behavior</p>"},{"location":"DM/text/style/","title":"Style","text":""},{"location":"DM/text/style/#style-sheets","title":"style sheets","text":"<p>See also: </p> <p>CSS attributes </p> <p>entities (text) </p> <p>macros (text) </p> <p>script var (client) </p> <p>tags (text) </p> <p>text </p> <p>See also: </p> <p>See also:</p> <p>CSS attributes </p> <p>entities (text) </p> <p>macros (text) </p> <p>script var (client) </p> <p>tags (text) </p> <p>text </p> <p>CSS attributes</p> <p>entities (text) </p> <p>macros (text) </p> <p>script var (client) </p> <p>tags (text) </p> <p>text </p> <p>entities (text)</p> <p>macros (text) </p> <p>script var (client) </p> <p>tags (text) </p> <p>text </p> <p>macros (text)</p> <p>script var (client) </p> <p>tags (text) </p> <p>text </p> <p>script var (client)</p> <p>tags (text) </p> <p>text </p> <p>tags (text)</p> <p>text </p> <p>text</p> <p>HTML tags, such as  <code>&lt;font&gt;</code>   may be used to directly format output text. Another approach, however, is to use HTML tags to specify purely structural information and use a style sheet to define how various elements within that structure should be treated. DM uses a  subset of the Cascading Style Sheet (CSS) language   , which was introduced for this purpose in HTML documents.</p> <p><code>&lt;font&gt;</code> subset of the Cascading Style Sheet (CSS) language</p> <p>This section discusses the syntax of style sheets as an independent element. For information on how to include the style sheets in your DM code, see the section on  client.script   .</p> <p>client.script</p> <p>As an example of a style sheet, one might want combat and conversational messages to appear differently\u2014perhaps using different colors. Instead of using the  <code>&lt;font&gt;</code>   tag to color the text, you could use  <code>&lt;span&gt;</code>   to mark the beginning and ending of the text and to specify what kind of message it is. The result might be text such as the following:</p> <p><code>&lt;font&gt;</code> <code>&lt;span&gt;</code></p> <p>\"[usr]</p> <p>spanks</p> <p>[targ]!\" \"[usr] says, '</p> <p>[msg]</p> <p>'\"</p> <p>spanks</p> <p>[msg]</p> <p>The  <code>class</code>   attribute may be used with any tag, but  <code>span</code>   and  <code>div</code>   are often convenient because they have no other side-effect but defining the style class.  <code>span</code>   is for text within a single paragraph and  <code>div</code>   is for whole paragraphs. The way text belonging to a particular class is formatted may be controlled in a style sheet such as the following:</p> <p><code>class</code> <code>span</code> <code>div</code> <code>span</code> <code>div</code></p> <p>.combat {color: red} .chat {color: green}</p> <p>This says that text in the</p> <p>combat</p> <p>class should be colored red and text in the</p> <p>chat</p> <p>class should be colored green. These classes are not pre-defined; you can create whatever new style classes you need. (The color names are predefined however. You can find a list of them in  HTML colors   .</p> <p>combat</p> <p>chat</p> <p>HTML colors</p> <p>The advantage of using style sheets instead of direct formatting tags is that you can cleanly separate structural information (such as combat and conversational messages) from formatting information (such as red and green text). By separating the two, you or the player can easily plug in different formatting schemes without changing any of the actual content.</p> <p>A style sheet is composed of a list of rules, such as the two rules in the preceding example. Each rule contains one or more  selectors   followed by a body of attribute assignments (in braces). The selector specifies the context of the rule and the body specifies the format.</p> <p>selectors</p> <p>A selector may specify a container tag (such as  <code>span</code>   ,  <code>body</code>   , or  <code>p</code>   ) and a class. The above example could have been written with a selector of  <code>span.chat</code>   . However, by leaving out the tag, it applies to any tag with  <code>class=chat</code>   . It is also possible to only specify the tag and not the class. In that case, the selector applies to any matching tag, regardless of class.</p> <p><code>span</code> <code>body</code> <code>p</code> <code>span.chat</code> <code>class=chat</code></p> <p>To specify a  nested   context, several simple selectors may be listed one after the other. For example, emphasized text within a combat message could be enlarged with the following rule:</p> <p>nested</p> <p>.combat em {font-size: larger}</p> <p>It is also possible to list several selectors separated by commas in order to make them all apply to the same body. For example, this next rule is equivalent to the two following ones:</p> <p>.combat em, .chat em {font-size: larger} .combat em {font-size: larger} .chat em {font-size: larger}</p> <p>The style rule body contains a list of attribute assignments, delimited by semicolons. Each assignment takes the form of an attribute name, followed by a colon, followed by the value of the attribute. The following table summarizes the recognized attributes and their possible values.</p> color #F00, #FF0000, red, rgb(255,0,0), rgb(100%,0%,0%) background font-size 10pt, 1.5em, 150% font-style normal or italic font-weight normal, bold, lighter, darker, or 100 to 900 font-family monospace, sans-serif, serif, cursive, ... font style weight size family text-decoration none, underline text-align right, left, or center vertical-align top, middle, bottom text-indent 0.25in, 3em, 20pt margin-left margin-right width 16px, 32px, auto height line-height 1.2 <p>|   color   |   #F00, #FF0000, red, rgb(255,0,0), rgb(100%,0%,0%)   |</p> <p>color  |</p> <p>#F00, #FF0000, red, rgb(255,0,0), rgb(100%,0%,0%)  | |   background   |</p> <p>background  | |   font-size   |   10pt, 1.5em, 150%   |</p> <p>font-size  |</p> <p>10pt, 1.5em, 150%  | |   font-style   |   normal or italic   |</p> <p>font-style  |</p> <p>normal or italic  | |   font-weight   |   normal, bold, lighter, darker, or 100 to 900   |</p> <p>font-weight  |</p> <p>normal, bold, lighter, darker, or 100 to 900  | |   font-family   |   monospace, sans-serif, serif, cursive, ...   |</p> <p>font-family  |</p> <p>monospace, sans-serif, serif, cursive, ...  | |   font   | style weight size family  |</p> <p>font  |  style weight size family  | style weight size family |   text-decoration   |   none, underline   |</p> <p>text-decoration  |</p> <p>none, underline  | |   text-align   |   right, left, or center   |</p> <p>text-align  |</p> <p>right, left, or center  | |   vertical-align   |   top, middle, bottom   |</p> <p>vertical-align  |</p> <p>top, middle, bottom  | |   text-indent   |   0.25in, 3em, 20pt   |</p> <p>text-indent  |</p> <p>0.25in, 3em, 20pt  | |   margin-left   |</p> <p>margin-left  | |   margin-right   |</p> <p>margin-right  | |   width   |   16px, 32px, auto   |</p> <p>width  |</p> <p>16px, 32px, auto  | |   height   |</p> <p>height  | |   line-height   |   1.2   |</p> <p>line-height  |</p> <p>1.2  |</p>"},{"location":"DM/text/style/#_1","title":"Style","text":"<p>fonts</p> <p>The  <code>font</code>   attribute is a special short-hand for assigning  <code>font-size</code>   ,  <code>font-style</code>   ,  <code>font-weight</code>   , and  <code>font-family</code>   in one statement. Any properties that are not specified in the  <code>font</code>   statement are assigned to their default values.</p> <p><code>font</code> <code>font-size</code> <code>font-style</code> <code>font-weight</code> <code>font-family</code> <code>font</code></p> <p>The font family may be a specific font name or a more general category such as monospace or sans-serif. Since not all users necessarily have the same fonts installed, it is a good idea to list alternate fonts. The desired font is placed first, followed by other possible fall-backs, each separated by a comma. Usually a general family such as monospace is listed last of all. Any font names containing a space should have quotes around them.</p> <p>The following example sets the font for the  <code>&lt;body&gt;</code>   tag. Even if you don't explicitly use  <code>&lt;body&gt;</code>   in output text, it is applied implicitly.</p> <p><code>&lt;body&gt;</code> <code>&lt;body&gt;</code></p> <p>body {font: 12pt 'Times New Roman', sans-serif}</p> <p>This sets the font to 12 point and selects  <code>Times New Roman</code>   if it is available and otherwise falls back on a system-determined sans-serif font. This command also implicitly specifies not to use italics and to use a normal font weight (not bold).</p> <p><code>Times New Roman</code></p> <p>Font sizes may be specified in points (1pt = 1/72 of an inch), picas (1pc = 12pt), pixels (px), inches (in), centimeters (cm), and millimeters (mm). There are also various levels corresponding to the old 1 to 7 HTML scale. These are</p> <p>xx-small</p> <p>,</p> <p>x-small</p> <p>,</p> <p>small</p> <p>,</p> <p>medium</p> <p>,</p> <p>large</p> <p>,</p> <p>x-large</p> <p>, and</p> <p>xx-large</p> <p>. In addition to these absolute font sizes, it is possible to use a relative size, such as 150% or equivalently 1.5em (1em = 100% of the current font size). This scales the font relative to the currently active font setting.</p> <p>xx-small</p> <p>x-small</p> <p>small</p> <p>medium</p> <p>large</p> <p>x-large</p> <p>xx-large</p> <p>In addition to regular classes, there are special pseudo-classes for handling embedded hyperlinks. These are specified in the selector with the class starting with a colon rather than a dot. They are  <code>:link</code>   ,  <code>:visited</code>   , and  <code>:active</code>   . These only apply to the  <code>&lt;a&gt;</code>   tag. The  <code>:link</code>   class applies to hyperlinks in their normal state. Once a link has been clicked, it belongs instead to the  <code>:visited</code>   class. When the user holds the mouse over a link, it temporarily belongs to the  <code>:active</code>   class. The only attribute that may change in an active or visited link is the text color.</p> <p><code>:link</code> <code>:visited</code> <code>:active</code> <code>&lt;a&gt;</code> <code>:link</code> <code>:visited</code> <code>:active</code></p>"},{"location":"DM/text/style/#_2","title":"Style","text":"<p>margins and indents</p> <p>Paragraphs can be given different margins according to your preferences. The  <code>margin-left</code>   attribute controls the left margin, and  <code>margin-right</code>   is the right margin. You can use specific sizes like inches or points, or a relative size unit like em or ex. (A percentage is interpreted so that 100% is 1em, not the width of the window.) Using the  <code>text-indent</code>   attribute will indent the first line of a paragraph from the left margin. It is possible to create a hanging indent by using a negative value for  <code>text-indent</code>   , like so:</p> <p><code>margin-left</code> <code>margin-right</code> <code>text-indent</code> <code>text-indent</code></p> <p>body {text-indent: -0.5in; margin-left: 0.5in}</p>"},{"location":"DM/text/style/#_3","title":"Style","text":"<p>background colors</p> <p>The background attribute is only relevant to the</p> <p>body</p> <p>context. It causes the entire terminal background to change color. When doing this, it is usually necessary to change the foreground colors of text or it may become unreadable. The various standard classes of output generated by DreamSeeker are in the following table.</p> <p>body</p>"},{"location":"DM/text/style/#_4","title":"Style","text":"<p>system colors</p> system notice general notices from the client system command echo command echoing system command expansion command-line expansion list system pager pager messages system irc IRC command prefix <p>|   system notice   |   general notices from the client   |</p> <p>system notice  |</p> <p>general notices from the client  | |   system command echo   |   command echoing   |</p> <p>system command echo  |</p> <p>command echoing  | |   system command expansion   |   command-line expansion list   |</p> <p>system command expansion  |</p> <p>command-line expansion list  | |   system pager   |   pager messages   |</p> <p>system pager  |</p> <p>pager messages  | |   system irc   |   IRC command prefix   |</p> <p>system irc  |</p> <p>IRC command prefix  |</p> <p>The value of the CLASS attribute may contain a list of classes separated by spaces. This permits client output to be in the 'system' class as well as more specific ones. That allows you to change all of these colors in one shot if you are too lazy to change them each individually. For example, if you define a style sheet that changes the background color, you might need to redefine the various foreground colors like this:</p> <p>body {background: aqua; color: black} .system {color: red; font-weight: bold} .command {color: green}</p> <p>In this example, the background color of the terminal will be aqua, normal text from the server will be black, and all output from the client will be bold and red, except echoed commands and expansion lists, which will be bold and green. The more specific .command rule is placed after the general .system rule so that its color takes precedence. This is how style sheets are composed\u2014you write general rules first followed by any exceptions.</p>"},{"location":"DM/text/style/#_5","title":"Style","text":"<p>style rule precedence</p> <p>The order in which rules are specified is one of the factors that determines precedence of style sheet commands. The language is known as Cascading Style Sheets because of its ability to handle several layers of stylistic rules, intermingling the configurations of the user and the designer in an ordered fashion.</p> <p>Rules are selected by first finding all matching candidates for a given attribute in the current HTML tag being processed. If there is more than one, rules from a higher level style sheet take precedence over lower level ones. That means the basic user configurable settings in DreamSeeker are the lowest priority, followed by a style sheet in the user's  <code>.dms</code>   script file, followed by a style sheet from the designer's  <code>client.script</code>   setting, because that is the order in which these are read by the style sheet manager.</p> <p><code>.dms</code> <code>client.script</code></p> <p>Rules from the same style sheet are ordered by specificity. The selector  <code>span.chat</code>   is more specific than  <code>.chat</code>   and  <code>.chat em</code>   is more specific than  <code>em</code>   . In general, the more classes referenced by a selector, the more specific it is. When that results in a tie, the selector with the greater number of tags takes precedence.</p> <p><code>span.chat</code> <code>.chat</code> <code>.chat em</code> <code>em</code></p> <p>If two rules about the same attribute come from the same sheet and have the same specificity, the final one to be defined takes precedence.</p> <p>In the rare event that a rule needs to break out of the normal order of precedence, it can be flagged as important. In this case it will take precedence over all other \"unimportant\" rules. However, if more than one rule is important, the normal rules of precedence will be used to resolve the conflict.</p> <p>The important flag is applied after the attribute assignment like this:</p> <p>body {background: white ! important; font: serif}</p> <p>In the above example, only the background color is important, not the font specification.</p>"},{"location":"DM/text/style/#_6","title":"Style","text":"<p>style</p> <p>attribute</p> <p>style</p> <p>Style commands may also be inserted directly in an html tag to control its appearance. This does not have the advantages of style sheets, which separate content from presentation, but it does allow you to use the style sheet syntax when formatting text.</p> <p>The following example uses the style attribute to color some text:</p> <p>usr &lt;&lt; \"That</p> <p>HURT</p> <p>!\"</p> <p>HURT</p> <p>As you can see, the  <code>style</code>   attribute of any tag can be assigned to a text string containing a list of attribute assignments. Just the body of the style rule is given, since no selector is needed to match the current context.</p> <p><code>style</code></p>"},{"location":"DM/text/style/#_7","title":"Style","text":"<p>Maptext options</p> <p>The  atom.maptext   var supports some additional CSS attributes.</p> <p>atom.maptext</p> vertical-align top, middle, bottom text-shadow x-offset y-offset blur color -dm-text-outline width color style <p>|   vertical-align   |   top, middle, bottom   |</p> <p>vertical-align  |</p> <p>top, middle, bottom  | |   text-shadow   | x-offset y-offset blur color  |</p> <p>text-shadow  |  x-offset y-offset blur color  | x-offset y-offset blur color |   -dm-text-outline   | width color style  |</p> <p>-dm-text-outline  |  width color style  | width color style</p> <p>Additionally, you can use the</p> <p>:hover</p> <p>pseudo-class to change the color of a link. As with other link pseudo-classes, only the text color can currently be changed.</p> <p>:hover</p>"},{"location":"DM/text/tags/","title":"Tags","text":""},{"location":"DM/text/tags/#tags-text","title":"tags (text)","text":"<p>See also: </p> <p>entities (text) </p> <p>macros (text) </p> <p>style sheets </p> <p>text </p> <p>See also: </p> <p>See also:</p> <p>entities (text) </p> <p>macros (text) </p> <p>style sheets </p> <p>text </p> <p>entities (text)</p> <p>macros (text) </p> <p>style sheets </p> <p>text </p> <p>macros (text)</p> <p>style sheets </p> <p>text </p> <p>style sheets</p> <p>text </p> <p>text</p> <p>Text tags (also known as  elements   by snooty HTML purists) control how the text is formatted. HTML syntax is used, so all tags start with  <code>&lt;</code>   and end with  <code>&gt;</code>   . The tags which are currently supported by Dream Seeker, are listed below:</p> <p>elements <code>&lt;</code> <code>&gt;</code></p> <pre><code>&lt;A&gt;&lt;/A&gt;              // anchor (hyperlink)\n&lt;ACRONYM&gt;&lt;/ACRONYM&gt;  // acronym or abbreviation\n&lt;B&gt;&lt;/B&gt;              // bold text\n&lt;BIG&gt;&lt;/BIG&gt;          // one size bigger text\n&lt;BODY&gt;&lt;/BODY&gt;        // body of html document\n&lt;BR&gt;                 // line break\n&lt;CITE&gt;&lt;/CITE&gt;        // citation reference\n&lt;CODE&gt;&lt;/CODE&gt;        // program source code\n&lt;DFN&gt;&lt;/DFN&gt;          // definition\n&lt;DIV&gt;&lt;/DIV&gt;          // used in conjunction with style sheets\n&lt;EM&gt;&lt;/EM&gt;            // emphasized text\n&lt;FONT&gt;&lt;/FONT&gt;        // font face, color, and size\n&lt;H1&gt;&lt;/H1&gt;            // heading level\n&lt;H2&gt;&lt;/H2&gt;\n&lt;H3&gt;&lt;/H3&gt;\n&lt;H4&gt;&lt;/H4&gt;\n&lt;H5&gt;&lt;/H5&gt;\n&lt;H6&gt;&lt;/H6&gt;\n&lt;HEAD&gt;&lt;/HEAD&gt;        // document head section\n&lt;HTML&gt;&lt;/HTML&gt;        // html document\n&lt;I&gt;&lt;/I&gt;              // italic text\n&lt;IMG&gt;&lt;/IMG&gt;          // display icons\n&lt;KBD&gt;&lt;/KBD&gt;          // keyboard input\n&lt;P&gt;&lt;/P&gt;              // paragraph\n&lt;PRE&gt;&lt;/PRE&gt;          // pre-formatted text\n&lt;S&gt;&lt;/S&gt;              // overstrike text\n&lt;SAMP&gt;&lt;/SAMP&gt;        // sample output\n&lt;SMALL&gt;&lt;/SMALL&gt;      // one size smaller text\n&lt;SPAN&gt;&lt;/SPAN&gt;        // used in conjunction with style sheets\n&lt;STRONG&gt;&lt;/STRONG&gt;    // strongly emphasized text\n&lt;STYLE&gt;&lt;/STYLE&gt;      // contains a style sheet\n&lt;TITLE&gt;&lt;/TITLE&gt;      // document title\n&lt;TT&gt;&lt;/TT&gt;            // typewriter style\n&lt;U&gt;&lt;/U&gt;              // underline\n&lt;VAR&gt;&lt;/VAR&gt;          // variable name\n&lt;XMP&gt;&lt;/XMP&gt;          // preformatted (tags ignored)\n\n</code></pre> <p>In addition to these, the  <code>&lt;BEEP&gt;</code>   tag, which is not standard HTML, may be used to beep the terminal.</p> <p><code>&lt;BEEP&gt;</code></p> <p>Some tags take additional parameters, known as attributes. The most common ones are  <code>&lt;FONT&gt;</code>   and  <code>&lt;A&gt;</code>   . The syntax for these is illustrated by the following two examples:</p> <p><code>&lt;FONT&gt;</code> <code>&lt;A&gt;</code></p> <p>\"How about</p> <p>this</p> <p>!\" \"Click  here   !\"</p> <p>this</p> <p>here</p> <p>As many attributes may be specified as desired. The attribute value may have quotes around it, but this is only necessary if the value contains spaces. It is usually more convenient to use single quotes so you don't have to escape the double quotes, but you can also embed the HTML in a  text document   to avoid the need for escaping quotes.</p> <p>text document</p> <p>When applying color to text, you can use hexadecimal RGB or you can use one of the named  HTML colors   .</p> <p>HTML colors</p> <p>Text sizes range from 1 to 7, 1 being the smallest and 7 being the largest. In addition to absolute sizes, relative sizes may be specified (like +1 for one size bigger or -1 for one size smaller).</p>"},{"location":"DM/text/macros/icon/","title":"Icon","text":""},{"location":"DM/text/macros/icon/#icon-text-macro","title":"icon text macro","text":"<p>See also: </p> <p>icon_state var (atom) </p> <p>macros (text) </p> <p>style sheets </p> <p>tags (text) </p> <p>See also: </p> <p>See also:</p> <p>icon_state var (atom) </p> <p>macros (text) </p> <p>style sheets </p> <p>tags (text) </p> <p>icon_state var (atom)</p> <p>macros (text) </p> <p>style sheets </p> <p>tags (text) </p> <p>macros (text)</p> <p>style sheets </p> <p>tags (text) </p> <p>style sheets</p> <p>tags (text) </p> <p>tags (text)</p> <p>The \\icon macro is used to treat the following embedded expression (in []'s) as an icon rather than as text. An object, for example, would be replaced by its icon rather than by its name.</p>"},{"location":"DM/text/macros/icon/#_1","title":"Icon","text":"<p>Example:</p> <p>usr &lt;&lt; \"You look like this: \\icon[usr]!\"</p> <p>The  <code>\\icon</code>   macro expands internally to the  tag. The above example, could be rewritten like this:</p> <p><code>\\icon</code></p> <p>usr &lt;&lt; \"You look like this: \\    !\"</p> <p></p> <p>Note that the current icon state of the object is automatically used. Also note that the image belongs to a class called  <code>icon</code>   . That allows you to configure the way icons are displayed by using a style sheet. The following default style rule causes icons to be shrunk to 16 by 16 pixels so they fit in better with surrounding text:</p> <p><code>icon</code></p> <p>IMG.icon {width: 16px; height: 16px}</p> <p>You could override this setting globally in your own style sheet. You could even define rules to allow individual icons to be formatted differently from the rest.</p>"},{"location":"DM/text/macros/icon/#_2","title":"Icon","text":"<p>Example:</p> <p>BIG IMG.icon {width: 32px; height: 32px} SMALL IMG.icon {width: 16px; height: 16px}</p> <p>With those rules in place, you could output a full sized icon by using the  tag: <p>usr &lt;&lt; \"You look like this:</p> <p>\\icon[usr]</p> <p>!\"</p> <p>\\icon[usr]</p> <p>The one time that one might want to use the  tag directly is to specify the ALT text to be displayed on clients which don't support graphical icons.</p> <p>Specific states, directions, and frames of an icon can be displayed in lieu of the default through use of the following tags:</p> <ul> <li>ICONSTATE='[state]'</li> <li>ICONDIR=[dir], where dir is one of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST</li> <li> <p>ICONFRAME=[frame], where frame is the animation frame, starting with 1</p> </li> <li> <p>ICONSTATE='[state]'</p> </li> <li> <p>ICONDIR=[dir], where dir is one of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST</p> </li> <li> <p>ICONFRAME=[frame], where frame is the animation frame, starting with 1</p> </li> </ul>"},{"location":"DM/text/macros/icon/#_3","title":"Icon","text":"<p>Example:</p> <p>usr &lt;&lt; \"You look like this: \\    !\"</p> <p></p> <p>Note that the \\icon macro does not work in the mini-browser; it is only for text output. To make icons appear in an HTML document, use  browse_rsc()   to send an icon to the client before using  browse()   to display it.</p> <p>browse_rsc() browse()</p>"},{"location":"DM/text/macros/ref/","title":"Ref","text":""},{"location":"DM/text/macros/ref/#ref-text-macro","title":"ref text macro","text":"<p>See also: </p> <p>Topic proc (client) </p> <p>icon text macro </p> <p>locate proc </p> <p>macros (text) </p> <p>tag var (datum) </p> <p>See also: </p> <p>See also:</p> <p>Topic proc (client) </p> <p>icon text macro </p> <p>locate proc </p> <p>macros (text) </p> <p>tag var (datum) </p> <p>Topic proc (client)</p> <p>icon text macro </p> <p>locate proc </p> <p>macros (text) </p> <p>tag var (datum) </p> <p>icon text macro</p> <p>locate proc </p> <p>macros (text) </p> <p>tag var (datum) </p> <p>locate proc</p> <p>macros (text) </p> <p>tag var (datum) </p> <p>macros (text)</p> <p>tag var (datum) </p> <p>tag var (datum)</p> <p>The  <code>\\ref</code>   text macro inserts a unique identification number or text string for the following embedded object (inside []'s).</p> <p><code>\\ref</code></p> <p>In older versions of BYOND, if an object had a tag, that was used instead. However this has often proved to be problematic, so anything compiled from version 512 onward should expect to output a reference number. If you want to use the tag, which stands a better chance of still being valid if the object is deleted and recreated (like in a world reboot), you can output the object's tag explicitly.</p> <p>The primary use for object references embedded in text is in topic links. This allows you to encode a reference to an object in the href value of a hyperlink. (Just make sure the object does not get deleted before the user executes the link. See  garbage collection   .)</p> <p>garbage collection</p> <p>Topic links that contain a parameter \"src\" assigned to an object reference are treated somewhat specially. Unless you override client.Topic() to do otherwise, the default behavior is to call the referenced object's own Topic() procedure.</p>"},{"location":"DM/text/macros/ref/#_1","title":"Ref","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; \"Click  here   !\" mob/Topic(href,href_list[])  switch(href_list[\"action\"])  if(\"start\")  usr &lt;&lt; \"Starting the game...\"  else  return ..()</p> <p>here</p> <p>The above example uses an embedded reference to the player's own mob to create a link to a topic handled by that mob's Topic() proc. The  <code>href_list</code>   parameter is simply the result of  <code>params2list(href)</code>   .</p> <p><code>href_list</code> <code>params2list(href)</code></p> <p>In that example, the embedded reference was automatically converted back into an object (dereferenced) for you. If you embed references to additional objects in the href data, you would have to dereference those yourself using the locate() instruction.</p>"},{"location":"area/proc/","title":"Proc","text":""},{"location":"area/proc/#procs-area","title":"procs (area)","text":"<p>Built-in area procs:</p> <p>area/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>area/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Click</p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Cross proc</p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Crossed proc</p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>DblClick</p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Del</p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Enter</p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Entered</p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exit</p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exited</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseUp</p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseWheel</p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>New</p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Read</p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Stat</p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Topic</p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncross proc</p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncrossed proc</p> <p>Write </p> <p>Write</p>"},{"location":"area/room/","title":"Room","text":""},{"location":"area/room/#rooms","title":"rooms","text":"<p>Areas that are not located on the map are referred to as  rooms   . When a player enters one, the map goes away and you have something like a text MUD. By default, there would be no way for players to move from one room to another, so you have to handle movement yourself.</p> <p>rooms</p> <p>You can check the variable  area.x   to see if a given area is on the map or not.</p> <p>area.x</p> <p>The following example puts players in a room when they log in and provides a single exit.</p>"},{"location":"area/room/#_1","title":"Room","text":"<p>Example:</p> <p>mob/Login()  if(!loc) Move(locate(/area/birthing_hut))  return ..()</p> <p>area/birthing_hut  Entered(O)  O &lt;&lt; \"Waaaaah! You land in a pile of straw.\"  return ..()  verb/exit()  if(Move(locate(1,1,1))) //jump to the map or whatever  usr &lt;&lt; \"You crawl into the open air...\"  else  usr &lt;&lt; \"The hut door is blocked. You cannot get out.\"</p>"},{"location":"area/var/","title":"Var","text":""},{"location":"area/var/#vars-area","title":"vars (area)","text":"<p>Built-in area vars:</p> <p>area/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>area/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>blend_mode</p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>color</p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>contents</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>filters</p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>gender</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>icon_state</p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>invisibility</p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>underlays</p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>overlays</p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>layer</p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>luminosity</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>maptext_x</p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>maptext_y</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>name</p> <p>opacity </p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>opacity</p> <p>parent_type </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>parent_type</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>render_source</p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>render_target</p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>suffix</p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>tag</p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>text</p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>transform</p> <p>type </p> <p>vars </p> <p>verbs </p> <p>type</p> <p>vars </p> <p>verbs </p> <p>vars</p> <p>verbs </p> <p>verbs</p>"},{"location":"atom/movable/","title":"Movable","text":""},{"location":"atom/movable/#movable-atoms","title":"movable atoms","text":"<p>See also: </p> <p>atom </p> <p>mob </p> <p>obj </p> <p>procs (movable atoms) </p> <p>vars (movable atoms) </p> <p>See also: </p> <p>See also:</p> <p>atom </p> <p>mob </p> <p>obj </p> <p>procs (movable atoms) </p> <p>vars (movable atoms) </p> <p>atom</p> <p>mob </p> <p>obj </p> <p>procs (movable atoms) </p> <p>vars (movable atoms) </p> <p>mob</p> <p>obj </p> <p>procs (movable atoms) </p> <p>vars (movable atoms) </p> <p>obj</p> <p>procs (movable atoms) </p> <p>vars (movable atoms) </p> <p>procs (movable atoms)</p> <p>vars (movable atoms) </p> <p>vars (movable atoms)</p> <p>The /atom/movable object type is the ancestor of all mappable objects that are capable of motion. The types /obj and /mob are derived from /atom/movable. You should not create instances of /atom/movable but should use /obj and /mob for actual objects. This object definition exists solely to define variables and procedures related to motion.</p>"},{"location":"atom/proc/","title":"Proc","text":""},{"location":"atom/proc/#procs-atom","title":"procs (atom)","text":"<p>Built-in atom procs:</p> <p>atom/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>atom/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Click</p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Cross proc</p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Crossed proc</p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>DblClick</p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Del</p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Enter</p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Entered</p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exit</p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exited</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseUp</p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseWheel</p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>New</p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Read</p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Stat</p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Topic</p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncross proc</p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncrossed proc</p> <p>Write </p> <p>Write</p>"},{"location":"atom/var/","title":"Var","text":""},{"location":"atom/var/#vars-atom","title":"vars (atom)","text":"<p>Built-in atom vars:</p> <p>atom/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>atom/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>blend_mode</p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>color</p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>contents</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>filters</p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>gender</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon_state</p> <p>invisibility </p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>invisibility</p> <p>infra_luminosity </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>infra_luminosity</p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>loc</p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>layer</p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>luminosity</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_x</p> <p>maptext_y </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_y</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>name</p> <p>opacity </p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>opacity</p> <p>overlays </p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>overlays</p> <p>override   (images only)</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>override</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>parent_type</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_source</p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_target</p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>suffix</p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>tag</p> <p>text </p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>text</p> <p>transform </p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>transform</p> <p>type </p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>type</p> <p>underlays </p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>underlays</p> <p>vars </p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>vars</p> <p>verbs </p> <p>x </p> <p>y </p> <p>z </p> <p>verbs</p> <p>x </p> <p>y </p> <p>z </p> <p>x</p> <p>y </p> <p>z </p> <p>y</p> <p>z </p> <p>z</p>"},{"location":"atom/movable/proc/","title":"Proc","text":""},{"location":"atom/movable/proc/#procs-movable-atoms","title":"procs (movable atoms)","text":"<p>Built-in movement procs:</p> <p>atom/movable/proc</p> <p>Bump </p> <p>Move </p> <p>atom/movable/proc</p> <p>Bump </p> <p>Move </p> <p>Bump</p> <p>Move </p> <p>Move</p>"},{"location":"atom/movable/var/","title":"Var","text":""},{"location":"atom/movable/var/#vars-movable-atoms","title":"vars (movable atoms)","text":"<p>Built-in movement vars:</p> <p>atom/movable/var</p> <p>animate_movement </p> <p>bound_x </p> <p>bound_y </p> <p>bound_width </p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>atom/movable/var</p> <p>animate_movement </p> <p>bound_x </p> <p>bound_y </p> <p>bound_width </p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>animate_movement</p> <p>bound_x </p> <p>bound_y </p> <p>bound_width </p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>bound_x</p> <p>bound_y </p> <p>bound_width </p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>bound_y</p> <p>bound_width </p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>bound_width</p> <p>bound_height </p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>bound_height</p> <p>locs </p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>locs</p> <p>screen_loc </p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>screen_loc</p> <p>glide_size </p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>glide_size</p> <p>particles </p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>particles</p> <p>step_size </p> <p>step_x </p> <p>step_y </p> <p>step_size</p> <p>step_x </p> <p>step_y </p> <p>step_x</p> <p>step_y </p> <p>step_y</p>"},{"location":"atom/movable/proc/Bump/","title":"Bump","text":""},{"location":"atom/movable/proc/Bump/#bump-proc-movable-atom","title":"Bump proc (movable atom)","text":"<p>See also: </p> <p>Move proc (movable atom) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Move proc (movable atom) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Bump(atom/Obstacle)</p> <p>Format: </p> <p>Format:</p> <p>Bump(atom/Obstacle)</p> <p>When: </p> <p>Called when a movement fails due to a dense blockage.</p> <p>When: </p> <p>When:</p> <p>Called when a movement fails due to a dense blockage.</p> <p>Args: </p> <p>Obstacle: The blocking object.</p> <p>Args: </p> <p>Args:</p> <p>Obstacle: The blocking object.</p> <p>Default action: </p> <p>If the obstacle is a mob and src is in its group, swap their positions. This is only done if the mobs both move by full tiles and do not use pixel movement, to preserve the behavior of older games.</p> <p>Default action: </p> <p>Default action:</p> <p>If the obstacle is a mob and src is in its group, swap their positions. This is only done if the mobs both move by full tiles and do not use pixel movement, to preserve the behavior of older games.</p>"},{"location":"atom/movable/proc/Move/","title":"Move","text":""},{"location":"atom/movable/proc/Move/#move-proc-movable-atom","title":"Move proc (movable atom)","text":"<p>See also: </p> <p>Bump proc (movable atom) </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Bump proc (movable atom) </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Bump proc (movable atom)</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>Uncrossed proc (atom)</p> <p>loc var (atom) </p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>loc var (atom)</p> <p>locs list var (movable atom) </p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>locs list var (movable atom)</p> <p>walk proc </p> <p>Gliding </p> <p>Pixel movement </p> <p>walk proc</p> <p>Gliding </p> <p>Pixel movement </p> <p>Gliding</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Move(NewLoc,Dir=0,step_x=0,step_y=0)</p> <p>Format: </p> <p>Format:</p> <p>Move(NewLoc,Dir=0,step_x=0,step_y=0)</p> <p>Returns: </p> <p>Success (jump): 1</p> <p>Success (slide): Number of pixels moved</p> <p>Failure: 0</p> <p>Returns: </p> <p>Returns:</p> <p>Success (jump): 1</p> <p>Success (slide): Number of pixels moved</p> <p>Failure: 0</p> <p>Success (slide): Number of pixels moved</p> <p>Failure: 0</p> <p>Failure: 0</p> <p>When: </p> <p>Called to move the object. By default, client.Move() calls this proc when players use direction keys. The automated movement functions (like walk()) also call this proc. Directly setting the loc variable does  not   call this procedure.</p> <p>When: </p> <p>When:</p> <p>Called to move the object. By default, client.Move() calls this proc when players use direction keys. The automated movement functions (like walk()) also call this proc. Directly setting the loc variable does  not   call this procedure.</p> <p>not</p> <p>Args: </p> <p>NewLoc: The new location.</p> <p>Dir: The direction of movement (or 0).</p> <p>step_x</p> <p>: The new step_x value, relative to NewLoc</p> <p>step_y</p> <p>: The new step_y value, relative to NewLoc</p> <p>Args: </p> <p>Args:</p> <p>NewLoc: The new location.</p> <p>Dir: The direction of movement (or 0).</p> <p>step_x</p> <p>: The new step_x value, relative to NewLoc</p> <p>step_y</p> <p>: The new step_y value, relative to NewLoc</p> <p>Dir: The direction of movement (or 0).</p> <p>step_x</p> <p>: The new step_x value, relative to NewLoc</p> <p>step_y</p> <p>: The new step_y value, relative to NewLoc</p> <p>step_x</p> <p>: The new step_x value, relative to NewLoc</p> <p>step_y</p> <p>: The new step_y value, relative to NewLoc</p> <p>step_x</p> <p>step_y</p> <p>: The new step_y value, relative to NewLoc</p> <p>step_y</p> <p>Any Move() is either a slide or a jump. Normal walking around is a slide; it can be stopped partway. A jump is pass/fail. See more information below.</p> <p>This is what happens by default:</p> <ol> <li>oldloc.Exit(src) is called for any turfs or areas being vacated, or the container if moving out of an obj or mob. neighbor.Uncross(src) is called for any atoms that will no longer be overlapping this object. If any of these return 0 (failure), movement fails.</li> <li>newloc.Enter(src) is called for any turfs or areas that may be entered for the first time, or the container if moving into an obj or mob. neighbor.Cross(src) is called for any atoms that may be in collision with this object if the move fully succeeds. If any of these return 0 (failure), then a slide can be cut short but a jump will fail completely.</li> <li>If any obstacles were encountered via Enter() or Cross() failing, then src.Bump(obstacle) will be called for each of them.</li> <li> <p>If movement did not fail completely, then loc and step_x/y, will be changed, and the following calls will be made: oldloc.Exited() for any turfs, areas, or other containers vacated; neighbor.Uncrossed() for any movable atoms no longer overlapping; newloc.Entered() for any turfs, areas, or other containers being entered for the first time; and neighbor.Crossed() for any movable atoms now overlapping the object.</p> </li> <li> <p>oldloc.Exit(src) is called for any turfs or areas being vacated, or the container if moving out of an obj or mob. neighbor.Uncross(src) is called for any atoms that will no longer be overlapping this object. If any of these return 0 (failure), movement fails.</p> </li> </ol> <p>oldloc.Exit(src) is called for any turfs or areas being vacated, or the container if moving out of an obj or mob. neighbor.Uncross(src) is called for any atoms that will no longer be overlapping this object. If any of these return 0 (failure), movement fails.</p> <ul> <li>newloc.Enter(src) is called for any turfs or areas that may be entered for the first time, or the container if moving into an obj or mob. neighbor.Cross(src) is called for any atoms that may be in collision with this object if the move fully succeeds. If any of these return 0 (failure), then a slide can be cut short but a jump will fail completely.</li> </ul> <p>newloc.Enter(src) is called for any turfs or areas that may be entered for the first time, or the container if moving into an obj or mob. neighbor.Cross(src) is called for any atoms that may be in collision with this object if the move fully succeeds. If any of these return 0 (failure), then a slide can be cut short but a jump will fail completely.</p> <ul> <li>If any obstacles were encountered via Enter() or Cross() failing, then src.Bump(obstacle) will be called for each of them.</li> </ul> <p>If any obstacles were encountered via Enter() or Cross() failing, then src.Bump(obstacle) will be called for each of them.</p> <ul> <li>If movement did not fail completely, then loc and step_x/y, will be changed, and the following calls will be made: oldloc.Exited() for any turfs, areas, or other containers vacated; neighbor.Uncrossed() for any movable atoms no longer overlapping; newloc.Entered() for any turfs, areas, or other containers being entered for the first time; and neighbor.Crossed() for any movable atoms now overlapping the object.</li> </ul> <p>If movement did not fail completely, then loc and step_x/y, will be changed, and the following calls will be made: oldloc.Exited() for any turfs, areas, or other containers vacated; neighbor.Uncrossed() for any movable atoms no longer overlapping; newloc.Entered() for any turfs, areas, or other containers being entered for the first time; and neighbor.Crossed() for any movable atoms now overlapping the object.</p> <p>A movement is considered a slide if src is moving from one turf to another on the same z level, and the total pixel distance is less than either src.step_size or a full tile size (whichever is largest). Any other movement is a jump. Movement to the same turf with no step_x/y change is also considered a jump.</p>"},{"location":"atom/proc/Click/","title":"Click","text":""},{"location":"atom/proc/Click/#click-proc-atom","title":"Click proc (atom)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>Click(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>Click(location,control,params)</p> <p>When: </p> <p>Called when the object is clicked.</p> <p>When: </p> <p>When:</p> <p>Called when the object is clicked.</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This proc is called by the default client.Click() procedure.</p> <p>The following example allows the player to walk to a position by clicking it.</p>"},{"location":"atom/proc/Click/#_1","title":"Click","text":"<p>Example:</p> <p>turf/Click()  walk_to(usr,src)</p>"},{"location":"atom/proc/Cross/","title":"Cross","text":""},{"location":"atom/proc/Cross/#cross-proc-atom","title":"Cross proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>group var (mob) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>group var (mob)</p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>movement_mode var (world)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Cross(atom/movable/O)</p> <p>Format: </p> <p>Format:</p> <p>Cross(atom/movable/O)</p> <p>Returns: </p> <p>1 to permit; 0 to deny.</p> <p>Returns: </p> <p>Returns:</p> <p>1 to permit; 0 to deny.</p> <p>When: </p> <p>Called when another object attempts to overlap this one.</p> <p>When: </p> <p>When:</p> <p>Called when another object attempts to overlap this one.</p> <p>Args: </p> <p>O: the object attempting to overlap.</p> <p>Args: </p> <p>Args:</p> <p>O: the object attempting to overlap.</p> <p>Default action: </p> <p>Allow overlap unless both atoms are dense. If both atoms are mobs, the behavior depends partly on whether they are in the same group.</p> <p>Default action: </p> <p>Default action:</p> <p>Allow overlap unless both atoms are dense. If both atoms are mobs, the behavior depends partly on whether they are in the same group.</p> <p>The following behavior only applies to  LEGACY_MOVEMENT_MODE   . In other movement modes, src.Cross(O) returns 0 by default if src and O are both mobs in the same group.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>If src completely covers the turf it is standing on, Cross() is called as part of turf.Enter(). This is to preserve the behavior of older games, which expect turf.Enter() to care about its contents.</p> <p>If src and O are both mobs, and O is in src's group, overlap is allowed  unless   neither of them use pixel movement. Older games that do not use pixel movement expect that Bump() will be called, and by default Bump() will swap the mobs' positions. Swapping obviously only works in situations where a mob takes up a whole tile and only moves by tiles; for all other situations, allowing an overlap makes more sense.</p> <p>unless</p>"},{"location":"atom/proc/Crossed/","title":"Crossed","text":""},{"location":"atom/proc/Crossed/#crossed-proc-atom","title":"Crossed proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Cross proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>group var (mob) </p> <p>Pixel movement </p> <p>group var (mob)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Crossed(atom/movable/O)</p> <p>Format: </p> <p>Format:</p> <p>Crossed(atom/movable/O)</p> <p>When: </p> <p>Called when an object has overlapped this one through Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Crossed() or any other movement side-effects. The same goes for creation or deletion of an object at a location.</p> <p>When: </p> <p>When:</p> <p>Called when an object has overlapped this one through Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Crossed() or any other movement side-effects. The same goes for creation or deletion of an object at a location.</p> <p>Args: </p> <p>O: the object that moved and is now overlapping.</p> <p>Args: </p> <p>Args:</p> <p>O: the object that moved and is now overlapping.</p> <p>Default action: </p> <p>none</p> <p>Default action: </p> <p>Default action:</p> <p>none</p>"},{"location":"atom/proc/Crossed/#_1","title":"Crossed","text":"<p>Example:</p> <p>obj/landmine  Crossed(O)  O &lt;&lt; \"You stepped on a land mine!\"  Explode()</p>"},{"location":"atom/proc/DblClick/","title":"DblClick","text":""},{"location":"atom/proc/DblClick/#dblclick-proc-atom","title":"DblClick proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>DblClick(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>DblClick(location,control,params)</p> <p>When: </p> <p>Called when the object is double-clicked.</p> <p>When: </p> <p>When:</p> <p>Called when the object is double-clicked.</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. in which the object was double-clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. in which the object was double-clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This proc is called by the default client.DblClick() procedure.</p> <p>This example allows the player to teleport to a position by double clicking it.</p>"},{"location":"atom/proc/DblClick/#_1","title":"DblClick","text":"<p>Example:</p> <p>turf/DblClick()  usr.Move(src)</p>"},{"location":"atom/proc/Enter/","title":"Enter","text":""},{"location":"atom/proc/Enter/#enter-proc-atom","title":"Enter proc (atom)","text":"<p>See also: </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>movement_mode var (world) </p> <p>Pixel movement </p> <p>movement_mode var (world)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Enter(atom/movable/O, atom/oldloc)</p> <p>Format: </p> <p>Format:</p> <p>Enter(atom/movable/O, atom/oldloc)</p> <p>Returns: </p> <p>1 to permit; 0 to deny.</p> <p>Returns: </p> <p>Returns:</p> <p>1 to permit; 0 to deny.</p> <p>When: </p> <p>Called when an object attempts to enter the contents list.</p> <p>When: </p> <p>When:</p> <p>Called when an object attempts to enter the contents list.</p> <p>Args: </p> <p>O: the object attempting to enter.</p> <p>oldloc: the old (current) loc of the object attempting to enter.</p> <p>Args: </p> <p>Args:</p> <p>O: the object attempting to enter.</p> <p>oldloc: the old (current) loc of the object attempting to enter.</p> <p>oldloc: the old (current) loc of the object attempting to enter.</p> <p>Default action: </p> <p>Explained below.</p> <p>Default action: </p> <p>Default action:</p> <p>Explained below.</p> <p>Areas, objs, and mobs will always permit anything to enter by default.</p> <p>The following behavior only applies to  LEGACY_MOVEMENT_MODE   . In all other movement modes, the turf's contents are not taken into account. Only the result of turf.Cross() matters.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>Turfs will return 1 (permit) or 0 (deny) based on density. In simple terms, if the atom that is entering is dense, then the turf will deny entry if the turf itself or its contents (any that take up the full tile) are dense.</p> <p>What actually happens in turf.Enter() is more detailed: Cross() is called for the turf, and if it succeeds (movement is permitted), then Cross() is called for any atoms in turf.contents that cover the entire tile. If any Cross() call fails, Enter() fails too and will return 0.</p> <p>If a mob is standing on a turf but its bounding box does not cover the whole tile, it is ignored by Enter(). Instead, its Cross() proc is called if there is a danger of the object overlapping it.</p>"},{"location":"atom/proc/Entered/","title":"Entered","text":""},{"location":"atom/proc/Entered/#entered-proc-atom","title":"Entered proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Enter proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>Move proc (movable atom)</p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>step_x var (movable atom)</p> <p>step_y var (movable atom) </p> <p>step_y var (movable atom)</p> <p>Format: </p> <p>Entered(atom/movable/Obj,atom/OldLoc)</p> <p>Format: </p> <p>Format:</p> <p>Entered(atom/movable/Obj,atom/OldLoc)</p> <p>When: </p> <p>Called when an object has entered the contents list through Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Entered() or any other movement side-effects. The same goes for creation or deletion of an object at a location.</p> <p>When: </p> <p>When:</p> <p>Called when an object has entered the contents list through Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Entered() or any other movement side-effects. The same goes for creation or deletion of an object at a location.</p> <p>Args: </p> <p>Obj: the object that entered (a mob or obj).</p> <p>OldLoc: the previous location of the object.</p> <p>Args: </p> <p>Args:</p> <p>Obj: the object that entered (a mob or obj).</p> <p>OldLoc: the previous location of the object.</p> <p>OldLoc: the previous location of the object.</p> <p>Default action: </p> <p>None for most atoms, but turfs will call Crossed().</p> <p>Default action: </p> <p>Default action:</p> <p>None for most atoms, but turfs will call Crossed().</p>"},{"location":"atom/proc/Entered/#_1","title":"Entered","text":"<p>Example:</p> <p>turf/pit  Entered(O)  O &lt;&lt; \"OUCH. You fell in a pit!\"</p> <p>The mob's Entered() and Exited() procs can be used to control what happens when objects are added or removed from the mob's inventory. Of course that could all be done within get() and drop() verbs, but the following code separates user interface from lower-level functions.</p>"},{"location":"atom/proc/Entered/#_2","title":"Entered","text":"<p>Example:</p> <p>obj  var  weight = 10  verb  get()  set src in oview(1)  if(Move(usr))  usr &lt;&lt; \"You pick up \\a [src].\"  else  usr &lt;&lt; \"You cannot pick up [src].\"  drop()  set src in usr  if(Move(usr.loc))  usr &lt;&lt; \"You drop \\a [src].\" mob  var  weight  max_weight = 50</p> <p>Entered(obj/O)  weight += O.weight  Exited(obj/O)  weight -= O.weight  Enter(obj/O)  //only allow entrance if weight is within the limit  if(O.weight + weight &lt;= max_weight)  return ..()</p> <p>To see the advantages of this arrangement, imagine that there are certain situations in which an object may be created directly within the mob's inventory without the mob picking it up. You can still run it through your normal movement rules without calling get().</p>"},{"location":"atom/proc/Entered/#_3","title":"Entered","text":"<p>Example:</p> <p>mob/verb/wish()  var/obj/O = new() //create it with loc=null  if(O.Move(usr)) //and then move it into inventory  usr &lt;&lt; \"Your wish has been granted!\"  else  usr &lt;&lt; \"You are too greedy!\"  del O</p>"},{"location":"atom/proc/Exit/","title":"Exit","text":""},{"location":"atom/proc/Exit/#exit-proc-atom","title":"Exit proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Entered proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>movement_mode var (world) </p> <p>Move proc (movable atom)</p> <p>movement_mode var (world) </p> <p>movement_mode var (world)</p> <p>Format: </p> <p>Exit(atom/movable/O, atom/newloc)</p> <p>Format: </p> <p>Format:</p> <p>Exit(atom/movable/O, atom/newloc)</p> <p>Returns: </p> <p>1 to permit; 0 to deny.</p> <p>Returns: </p> <p>Returns:</p> <p>1 to permit; 0 to deny.</p> <p>When: </p> <p>Called when an object attempts to exit the contents list.</p> <p>When: </p> <p>When:</p> <p>Called when an object attempts to exit the contents list.</p> <p>Args: </p> <p>O: the object attempting to exit.</p> <p>newloc</p> <p>: the object's new location.</p> <p>Args: </p> <p>Args:</p> <p>O: the object attempting to exit.</p> <p>newloc</p> <p>: the object's new location.</p> <p>newloc</p> <p>: the object's new location.</p> <p>newloc</p> <p>Default action: </p> <p>Turfs will call Uncross() and return that value (1 by default). All others allow the object to exit (returning 1).</p> <p>Default action: </p> <p>Default action:</p> <p>Turfs will call Uncross() and return that value (1 by default). All others allow the object to exit (returning 1).</p> <p>By default, every atom returns 1 to allow exit, except for turfs which call Uncross() to handle it for them.</p> <p>The following behavior only applies to  LEGACY_MOVEMENT_MODE   . In all other movement modes, the turf's contents are not taken into account. Only the result of turf.Uncross() matters.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>In the default Exit handler for turfs, Uncross() is called for the turf itself and then Uncross() will also be called for any atoms in turf.contents that cover the entire tile. If any Uncross() call fails, Exit() fails too and will return 0. In games using pixel movement, Uncross() is usually called separately, but this allows projects using tile-based movement instead to benefit from Cross() and Uncross().</p>"},{"location":"atom/proc/Exited/","title":"Exited","text":""},{"location":"atom/proc/Exited/#exited-proc-atom","title":"Exited proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Exit proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>Move proc (movable atom)</p> <p>Format: </p> <p>Exited(atom/movable/Obj, atom/newloc)</p> <p>Format: </p> <p>Format:</p> <p>Exited(atom/movable/Obj, atom/newloc)</p> <p>When: </p> <p>Called when an object has exited from the contents list through a call to Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Exited() or any other movement side-effects. The same goes for deletion of an object.</p> <p>When: </p> <p>When:</p> <p>Called when an object has exited from the contents list through a call to Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Exited() or any other movement side-effects. The same goes for deletion of an object.</p> <p>Args: </p> <p>Obj: the object that exited (a mob or obj).</p> <p>newloc</p> <p>: the object's new location.</p> <p>Args: </p> <p>Args:</p> <p>Obj: the object that exited (a mob or obj).</p> <p>newloc</p> <p>: the object's new location.</p> <p>newloc</p> <p>: the object's new location.</p> <p>newloc</p> <p>Default action: </p> <p>None for most atoms, but turfs will call Uncrossed().</p> <p>Default action: </p> <p>Default action:</p> <p>None for most atoms, but turfs will call Uncrossed().</p>"},{"location":"atom/proc/MouseDown/","title":"MouseDown","text":""},{"location":"atom/proc/MouseDown/#mousedown-proc-atom","title":"MouseDown proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDown(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDown(location,control,params)</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when a mouse button is pressed while pointing to this object.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through</p> <p>Click()</p> <p>,</p> <p>DblClick()</p> <p>, and</p> <p>MouseDrop()</p> <p>. The other procedures are simply available for completeness.</p> <p>Click()</p> <p>DblClick()</p> <p>MouseDrop()</p> <p>Note: In BYOND 3.5 this procedure took three different arguments:</p> <p>location</p> <p>,</p> <p>icon_x</p> <p>, and</p> <p>icon_y</p> <p>. Since</p> <p>icon_x</p> <p>and</p> <p>icon_y</p> <p>have been replaced, old code will need to be modified. Games compiled before this change will still work normally.</p> <p>location</p> <p>icon_x</p> <p>icon_y</p> <p>icon_x</p> <p>icon_y</p>"},{"location":"atom/proc/MouseDrag/","title":"MouseDrag","text":""},{"location":"atom/proc/MouseDrag/#mousedrag-proc-atom","title":"MouseDrag proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_zone var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDrag(over_object,src_location,over_location,src_control,over_control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDrag(over_object,src_location,over_location,src_control,over_control,params)</p> <p>Args: </p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called while dragging this object by pressing and holding the left mouse button over the object and moving the mouse. The over_object may be null if dragging over a stat panel or over other empty space.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through</p> <p>Click()</p> <p>,</p> <p>DblClick()</p> <p>, and</p> <p>MouseDrop()</p> <p>. The other procedures are simply available for completeness.</p> <p>Click()</p> <p>DblClick()</p> <p>MouseDrop()</p>"},{"location":"atom/proc/MouseDrop/","title":"MouseDrop","text":""},{"location":"atom/proc/MouseDrop/#mousedrop-proc-atom","title":"MouseDrop proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_zone var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDrop(over_object,src_location,over_location,src_control,over_control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDrop(over_object,src_location,over_location,src_control,over_control,params)</p> <p>Args: </p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when the a mouse button is released after dragging this object. The over_object may be null if dropping over a stat panel or over other empty space.</p>"},{"location":"atom/proc/MouseEntered/","title":"MouseEntered","text":""},{"location":"atom/proc/MouseEntered/#mouseentered-proc-atom","title":"MouseEntered proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseEntered(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseEntered(location,control,params)</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when the mouse moves onto the object with no buttons pressed.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"atom/proc/MouseExited/","title":"MouseExited","text":""},{"location":"atom/proc/MouseExited/#mouseexited-proc-atom","title":"MouseExited proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseExited(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseExited(location,control,params)</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when the mouse moves off of an object with no buttons pressed.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"atom/proc/MouseMove/","title":"MouseMove","text":""},{"location":"atom/proc/MouseMove/#mousemove-proc-atom","title":"MouseMove proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseMove(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseMove(location,control,params)</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when the mouse moves over the object with no buttons pressed. When the mouse moves over for the first time, MouseEntered() is called instead.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"atom/proc/MouseUp/","title":"MouseUp","text":""},{"location":"atom/proc/MouseUp/#mouseup-proc-atom","title":"MouseUp proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (atom) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_drop_zone var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_drop_zone var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseUp(location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseUp(location,control,params)</p> <p>Args: </p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>location: the turf, stat panel, grid cell, etc. in which the object was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when a mouse button is released while pointing to this object.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through</p> <p>Click()</p> <p>,</p> <p>DblClick()</p> <p>, and</p> <p>MouseDrop()</p> <p>. The other procedures are simply available for completeness.</p> <p>Click()</p> <p>DblClick()</p> <p>MouseDrop()</p> <p>Note: In BYOND 3.5 this procedure took three different arguments:</p> <p>location</p> <p>,</p> <p>icon_x</p> <p>, and</p> <p>icon_y</p> <p>. Since</p> <p>icon_x</p> <p>and</p> <p>icon_y</p> <p>have been replaced, old code will need to be modified. Games compiled before this change will still work normally.</p> <p>location</p> <p>icon_x</p> <p>icon_y</p> <p>icon_x</p> <p>icon_y</p>"},{"location":"atom/proc/MouseWheel/","title":"MouseWheel","text":""},{"location":"atom/proc/MouseWheel/#mousewheel-proc-atom","title":"MouseWheel proc (atom)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>Click proc (atom)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (client) </p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>MouseWheel proc (client)</p> <p>mouse_drag_pointer var (atom) </p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_drag_pointer var (atom)</p> <p>mouse_drop_pointer var (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_drop_pointer var (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>mouse_over_pointer var (atom)</p> <p>Format: </p> <p>MouseWheel(delta_x,delta_y,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseWheel(delta_x,delta_y,location,control,params)</p> <p>Args: </p> <p>delta_x,delta_y: amount of wheel movement</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>delta_x,delta_y: amount of wheel movement</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>This is called when the mouse wheel is moved while over an object.</p> <p>Positive values of delta_x and delta_y refer to scrolling right or up, respectively. Negative values are left and down, respectively.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"atom/proc/New/","title":"New","text":""},{"location":"atom/proc/New/#new-proc-atom","title":"New proc (atom)","text":"<p>See also: </p> <p>New proc (datum) </p> <p>new proc </p> <p>See also: </p> <p>See also:</p> <p>New proc (datum) </p> <p>new proc </p> <p>New proc (datum)</p> <p>new proc </p> <p>new proc</p> <p>Format: </p> <p>New(loc)</p> <p>(supports  named arguments   )</p> <p>Format: </p> <p>Format:</p> <p>New(loc)</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>named arguments</p> <p>When: </p> <p>Called when the object is created.</p> <p>When: </p> <p>When:</p> <p>Called when the object is created.</p> <p>Args: </p> <p>loc: The initial location.</p> <p>Args: </p> <p>Args:</p> <p>loc: The initial location.</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p> <p>By the time New() is called, the object has already been created at the specified location and all of its variables have been initialized. You can perform additional initialization by overriding this procedure.</p> <p>Since the initial location parameter passed to  <code>new()</code>   is applied before New() is even called, there is some special handling of the</p> <p>loc</p> <p>variable when using named arguments in a call. Normally, if a procedure is overridden, named arguments in a call are matched against those in the the overridden definition. In this case, however, the</p> <p>loc</p> <p>parameter name is hard-coded. Regardless of what you call the first argument in your definition of New(), the initial location will be taken from the first positional argument, or from the argument named</p> <p>loc</p> <p>if there are no positional arguments.</p> <p><code>new()</code></p> <p>loc</p> <p>loc</p> <p>loc</p> <p>The following example does some extra initialization that is not possible in the variable definition section, because it requires a runtime evaluation. This is a common reason to use New().</p>"},{"location":"atom/proc/New/#_1","title":"New","text":"<p>Example:</p> <p>mob  var  birthdate //time stamp  New()  birthdate = world.realtime  return ..()  verb/look()  set src in view()  usr &lt;&lt; \"[src] was born on [time2text(birthdate,\"DD-MMM-YYYY\")].\"</p>"},{"location":"atom/proc/Stat/","title":"Stat","text":""},{"location":"atom/proc/Stat/#stat-proc-atom","title":"Stat proc (atom)","text":"<p>See also: </p> <p>Stat proc (client) </p> <p>stat proc </p> <p>Info control (skin) </p> <p>See also: </p> <p>See also:</p> <p>Stat proc (client) </p> <p>stat proc </p> <p>Info control (skin) </p> <p>Stat proc (client)</p> <p>stat proc </p> <p>Info control (skin) </p> <p>stat proc</p> <p>Info control (skin) </p> <p>Info control (skin)</p> <p>Format: </p> <p>Stat()</p> <p>Format: </p> <p>Format:</p> <p>Stat()</p> <p>When: </p> <p>Called periodically by the client to update the stat window.</p> <p>When: </p> <p>When:</p> <p>Called periodically by the client to update the stat window.</p> <p>Default action: </p> <p>none.</p> <p>Default action: </p> <p>Default action:</p> <p>none.</p> <p>The following code could be used to display a player's current status.</p>"},{"location":"atom/proc/Stat/#_1","title":"Stat","text":"<p>Example:</p> <p>mob/var  health = 100 mob/Stat()  stat(\"health\",health)  statpanel(\"Inventory\",contents)</p>"},{"location":"atom/proc/Uncross/","title":"Uncross","text":""},{"location":"atom/proc/Uncross/#uncross-proc-atom","title":"Uncross proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Crossed proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Uncrossed proc (atom)</p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>group var (mob) </p> <p>Pixel movement </p> <p>group var (mob)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Uncross(atom/movable/O)</p> <p>Format: </p> <p>Format:</p> <p>Uncross(atom/movable/O)</p> <p>Returns: </p> <p>1 to permit; 0 to deny.</p> <p>Returns: </p> <p>Returns:</p> <p>1 to permit; 0 to deny.</p> <p>When: </p> <p>Called when another object attempts to stop overlapping this one.</p> <p>When: </p> <p>When:</p> <p>Called when another object attempts to stop overlapping this one.</p> <p>Args: </p> <p>O: the object attempting to get away.</p> <p>Args: </p> <p>Args:</p> <p>O: the object attempting to get away.</p> <p>Default action: </p> <p>Allow the object to get away (returning 1)</p> <p>Default action: </p> <p>Default action:</p> <p>Allow the object to get away (returning 1)</p>"},{"location":"atom/proc/Uncrossed/","title":"Uncrossed","text":""},{"location":"atom/proc/Uncrossed/#uncrossed-proc-atom","title":"Uncrossed proc (atom)","text":"<p>See also: </p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>Enter proc (atom) </p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Enter proc (atom)</p> <p>Entered proc (atom) </p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Entered proc (atom)</p> <p>Exit proc (atom) </p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exit proc (atom)</p> <p>Exited proc (atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Exited proc (atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Uncross proc (atom)</p> <p>Move proc (movable atom) </p> <p>group var (mob) </p> <p>Pixel movement </p> <p>Move proc (movable atom)</p> <p>group var (mob) </p> <p>Pixel movement </p> <p>group var (mob)</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>Uncrossed(atom/movable/O)</p> <p>Format: </p> <p>Format:</p> <p>Uncrossed(atom/movable/O)</p> <p>When: </p> <p>Called when an object has stopped overlapping this one through a call to Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Uncrossed() or any other movement side-effects. The same goes for deletion of an object.</p> <p>When: </p> <p>When:</p> <p>Called when an object has stopped overlapping this one through a call to Move(). Directly setting the object's loc or step_x/y vars does not result in a call to Uncrossed() or any other movement side-effects. The same goes for deletion of an object.</p> <p>Args: </p> <p>O: the object that moved and is no longer overlapping.</p> <p>Args: </p> <p>Args:</p> <p>O: the object that moved and is no longer overlapping.</p> <p>Default action: </p> <p>none</p> <p>Default action: </p> <p>Default action:</p> <p>none</p>"},{"location":"atom/proc/Uncrossed/#_1","title":"Uncrossed","text":"<p>Example:</p> <p>obj/pressure_plate  Uncrossed(O)  // if no other mobs are standing on it...  if(!(locate(/mob) in bounds()))  // do something  Release()</p>"},{"location":"client/proc/","title":"Proc","text":""},{"location":"client/proc/#procs-client","title":"procs (client)","text":"<p>Built-in client procs:</p> <p>client/proc</p> <p>AllowUpload </p> <p>Center </p> <p>CheckPassport </p> <p>Click </p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>client/proc</p> <p>AllowUpload </p> <p>Center </p> <p>CheckPassport </p> <p>Click </p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>AllowUpload</p> <p>Center </p> <p>CheckPassport </p> <p>Click </p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Center</p> <p>CheckPassport </p> <p>Click </p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>CheckPassport</p> <p>Click </p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Click</p> <p>Command </p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Command</p> <p>DblClick </p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>DblClick</p> <p>Del </p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Del</p> <p>East </p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>East</p> <p>Export </p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Export</p> <p>GetAPI proc </p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>GetAPI proc</p> <p>Import </p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Import</p> <p>IsByondMember </p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>IsByondMember</p> <p>MeasureText </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MeasureText</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseUp</p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>MouseWheel</p> <p>Move </p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Move</p> <p>New </p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>New</p> <p>North </p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>North</p> <p>Northeast </p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Northeast</p> <p>Northwest </p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Northwest</p> <p>RenderIcon </p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>RenderIcon</p> <p>SendPage </p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>SendPage</p> <p>SetAPI proc </p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>SetAPI proc</p> <p>SoundQuery </p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>SoundQuery</p> <p>South </p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>South</p> <p>Southeast </p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Southeast</p> <p>Southwest </p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Southwest</p> <p>Stat </p> <p>Topic </p> <p>West </p> <p>Stat</p> <p>Topic </p> <p>West </p> <p>Topic</p> <p>West </p> <p>West</p>"},{"location":"client/var/","title":"Var","text":""},{"location":"client/var/#vars-client","title":"vars (client)","text":"<p>Built-in client vars:</p> <p>client/var</p> <p>address </p> <p>authenticate </p> <p>bounds </p> <p>byond_build </p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>client/var</p> <p>address </p> <p>authenticate </p> <p>bounds </p> <p>byond_build </p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>address</p> <p>authenticate </p> <p>bounds </p> <p>byond_build </p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>authenticate</p> <p>bounds </p> <p>byond_build </p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>bounds</p> <p>byond_build </p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>byond_build</p> <p>byond_version </p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>byond_version</p> <p>CGI </p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>CGI</p> <p>ckey </p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>ckey</p> <p>color </p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>color</p> <p>command_text </p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>command_text</p> <p>connection </p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>connection</p> <p>control_freak </p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>control_freak</p> <p>computer_id </p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>computer_id</p> <p>default_verb_category </p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>default_verb_category</p> <p>dir </p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>dir</p> <p>edge_limit </p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>edge_limit</p> <p>eye </p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>eye</p> <p>fps </p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>fps</p> <p>gender </p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>gender</p> <p>glide_size </p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>glide_size</p> <p>images </p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>images</p> <p>inactivity </p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>inactivity</p> <p>key </p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>key</p> <p>lazy_eye </p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>lazy_eye</p> <p>mob </p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>mob</p> <p>mouse_pointer_icon </p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>mouse_pointer_icon</p> <p>perspective </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>perspective</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>pixel_w</p> <p>pixel_z </p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>pixel_z</p> <p>preload_rsc </p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>preload_rsc</p> <p>screen </p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>screen</p> <p>script </p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>script</p> <p>show_map </p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>show_map</p> <p>show_popup_menus var </p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>show_popup_menus var</p> <p>show_verb_panel </p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>show_verb_panel</p> <p>statobj </p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>statobj</p> <p>statpanel </p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>statpanel</p> <p>tick_lag </p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>tick_lag</p> <p>timezone </p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>timezone</p> <p>verbs </p> <p>view </p> <p>virtual_eye </p> <p>verbs</p> <p>view </p> <p>virtual_eye </p> <p>view</p> <p>virtual_eye </p> <p>virtual_eye</p>"},{"location":"client/proc/AllowUpload/","title":"AllowUpload","text":""},{"location":"client/proc/AllowUpload/#allowupload-proc-client","title":"AllowUpload proc (client)","text":"<p>See also: </p> <p>input proc </p> <p>See also: </p> <p>See also:</p> <p>input proc </p> <p>input proc</p> <p>Format: </p> <p>AllowUpload(filename, filelength)</p> <p>Format: </p> <p>Format:</p> <p>AllowUpload(filename, filelength)</p> <p>When: </p> <p>Called when the player attempts to upload a file to the server, through input() or a command.</p> <p>When: </p> <p>When:</p> <p>Called when the player attempts to upload a file to the server, through input() or a command.</p> <p>Default action: </p> <p>Allows the upload by returning 1.</p> <p>Default action: </p> <p>Default action:</p> <p>Allows the upload by returning 1.</p> <p>The client who owns this proc (src) is the one trying to upload the file. If this proc returns a true value, the upload will be allowed. Otherwise, it will be rejected.</p>"},{"location":"client/proc/AllowUpload/#_1","title":"AllowUpload","text":"<p>Example:</p> <p>client  AllowUpload(filename, filelength)  if(filelength &gt;= 524288) // 512K (0.5M)  src &lt;&lt; \"[filename] is too big to upload!\"  return 0  return 1</p>"},{"location":"client/proc/Center/","title":"Center","text":""},{"location":"client/proc/Center/#center-proc-client","title":"Center proc (client)","text":"<p>See also: </p> <p>walk proc </p> <p>See also: </p> <p>See also:</p> <p>walk proc </p> <p>walk proc</p> <p>Format: </p> <p>Center()</p> <p>Format: </p> <p>Format:</p> <p>Center()</p> <p>When: </p> <p>Called when the player presses the \"center\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"center\" key or cursor.</p> <p>Default action: </p> <p>Cancels any automated movement by calling walk(usr,0).</p> <p>Default action: </p> <p>Default action:</p> <p>Cancels any automated movement by calling walk(usr,0).</p>"},{"location":"client/proc/CheckPassport/","title":"CheckPassport","text":""},{"location":"client/proc/CheckPassport/#checkpassport-proc-client","title":"CheckPassport proc (client)","text":"<p>See also: </p> <p>IsSubscribed proc (world) </p> <p>IsByondMember proc (client) </p> <p>GetAPI proc (client) </p> <p>SetAPI proc (client) </p> <p>See also: </p> <p>See also:</p> <p>IsSubscribed proc (world) </p> <p>IsByondMember proc (client) </p> <p>GetAPI proc (client) </p> <p>SetAPI proc (client) </p> <p>IsSubscribed proc (world)</p> <p>IsByondMember proc (client) </p> <p>GetAPI proc (client) </p> <p>SetAPI proc (client) </p> <p>IsByondMember proc (client)</p> <p>GetAPI proc (client) </p> <p>SetAPI proc (client) </p> <p>GetAPI proc (client)</p> <p>SetAPI proc (client) </p> <p>SetAPI proc (client)</p> <p>Format: </p> <p>CheckPassport(passport_identifier)</p> <p>Format: </p> <p>Format:</p> <p>CheckPassport(passport_identifier)</p> <p>Args: </p> <p>passport_identifier: a text string assigned to you by the BYOND hub (or an ID/token for a different API; see below).</p> <p>Args: </p> <p>Args:</p> <p>passport_identifier: a text string assigned to you by the BYOND hub (or an ID/token for a different API; see below).</p> <p>This built-in procedure checks to see if the user is subscribed to a particular BYOND hub entry. If the user is subscribed, the result is the number of days left (rounded up) on their subscription, or -1 for lifetime subscribers.</p>"},{"location":"client/proc/CheckPassport/#_1","title":"CheckPassport","text":"<p>Example:</p> <p>world  hub = \"My.Hub\" //change this to your own hub entry</p> <p>mob/var  full_access</p> <p>mob/Login()  if(client.CheckPassport(\"0123456789abcdef\"))  full_access = 1  else  src &lt;&lt; \"For full access,  subscribe)</p> <p>[subscribe]()</p> <p>Note that in general the value of world.hub has nothing to do with the passport you happen to check. This example assumes the passport number belongs to world.hub just for the purpose of forwarding the user to the appropriate subscription page.</p>"},{"location":"client/proc/CheckPassport/#_2","title":"CheckPassport","text":"<p>Other APIs</p> <p>You can use this with other APIs that are supported by BYOND, which currently only applies to Steam and only if the game is specially built for Steam support.</p> <p>To check ownership of a Steam game or DLC (must be the current game's ID or one of its DLCs), use</p> <p>\"steam:  NNNNNN   \"</p> <p>for the passport string, where  NNNNNN   is a Steam app ID. Note that the user must be logged into Steam for this to work.</p> <p>\"steam:  NNNNNN   \"</p> <p>NNNNNN NNNNNN</p>"},{"location":"client/proc/Click/","title":"Click","text":""},{"location":"client/proc/Click/#click-proc-client","title":"Click proc (client)","text":"<p>See also: </p> <p>Click proc (atom) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (atom) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (atom)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>Click(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>Click(object,location,control,params)</p> <p>When: </p> <p>Called when the player clicks on the map or in the stat panels.</p> <p>When: </p> <p>When:</p> <p>Called when the player clicks on the map or in the stat panels.</p> <p>Args: </p> <p>object: the object clicked</p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object clicked</p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.Click(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.Click(location,control,params).</p>"},{"location":"client/proc/Click/#_1","title":"Click","text":"<p>Example:</p> <p>client  Click(O)  usr &lt;&lt; \"You clicked [O]\"  ..() // do default action</p> <p>Note that due to network lag, it is possible when clicking on moving objects for the location of those objects to have changed by the time the Click() proc is executed. That is the reason for the location argument. It tells you where the click originally took place.</p>"},{"location":"client/proc/Command/","title":"Command","text":""},{"location":"client/proc/Command/#command-proc-client","title":"Command proc (client)","text":"<p>Format: </p> <p>Command(command as command_text)</p> <p>Format: </p> <p>Format:</p> <p>Command(command as command_text)</p> <p>When: </p> <p>Called when the player types in something that is not understood as a valid command, or if the player is connected via telnet.</p> <p>When: </p> <p>When:</p> <p>Called when the player types in something that is not understood as a valid command, or if the player is connected via telnet.</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p> <p>If this proc is used, players will be able to connect to your world via telnet. All telnet users' commands are routed through this proc instead of being parsed into verbs. Players who join the world through Dream Seeker will have their commands parsed as verbs first, and those commands will end up here only if there is no applicable verb.</p> <p>Note that text received by this proc is not interpreted beforehand, so quotes \" and backslashes \\ should come through unaltered.</p> <p>This proc is primarily useful if you want to handle parsing yourself (like for a MUD), or if your world is a chat server and verbs are not used much.</p>"},{"location":"client/proc/DblClick/","title":"DblClick","text":""},{"location":"client/proc/DblClick/#dblclick-proc-client","title":"DblClick proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (atom) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (atom)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_over_pointer var (atom) </p> <p>show_popup_menus var (client) </p> <p>mouse_over_pointer var (atom)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>DblClick(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>DblClick(object,location,control,params)</p> <p>When: </p> <p>Called when the player double-clicks on the map or in the stat panels.</p> <p>When: </p> <p>When:</p> <p>Called when the player double-clicks on the map or in the stat panels.</p> <p>Args: </p> <p>object: the object double-clicked</p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object double-clicked</p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the client stat panel, location (turf) of object on map, grid cell, or other control-specific info</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.DblClick(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.DblClick(location,control,params).</p>"},{"location":"client/proc/DblClick/#_1","title":"DblClick","text":"<p>Example:</p> <p>client  DblClick(O)  usr &lt;&lt; \"You double-clicked [O]\"  ..() // do default action</p> <p>Note that due to network lag, it is possible when clicking on moving objects for the location of those objects to have changed by the time the DblClick() proc is executed. That is the reason for the location argument. It tells you where the click originally took place.</p>"},{"location":"client/proc/Del/","title":"Del","text":""},{"location":"client/proc/Del/#del-proc-client","title":"Del proc (client)","text":"<p>See also: </p> <p>Logout proc (mob) </p> <p>See also: </p> <p>See also:</p> <p>Logout proc (mob) </p> <p>Logout proc (mob)</p> <p>Format: </p> <p>Del()</p> <p>Format: </p> <p>Format:</p> <p>Del()</p> <p>When: </p> <p>Called when the player disconnects from the world.</p> <p>When: </p> <p>When:</p> <p>Called when the player disconnects from the world.</p> <p>Default action: </p> <p>If the player is connected to a mob, call mob.Logout() to disconnect. If the player's connection to the world is still not dead, kill it.</p> <p>Default action: </p> <p>Default action:</p> <p>If the player is connected to a mob, call mob.Logout() to disconnect. If the player's connection to the world is still not dead, kill it.</p> <p>Note that this does not automatically delete the player's mob. If you want to do that, you could do so in mob.Logout().</p>"},{"location":"client/proc/East/","title":"East","text":""},{"location":"client/proc/East/#east-proc-client","title":"East proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>East()</p> <p>Format: </p> <p>Format:</p> <p>East()</p> <p>Returns: </p> <p>1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"right\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"right\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the east.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the east.</p>"},{"location":"client/proc/Export/","title":"Export","text":""},{"location":"client/proc/Export/#export-proc-client","title":"Export proc (client)","text":"<p>See also: </p> <p>Import proc (client) </p> <p>New proc (client) </p> <p>hub var (world) </p> <p>savefile </p> <p>See also: </p> <p>See also:</p> <p>Import proc (client) </p> <p>New proc (client) </p> <p>hub var (world) </p> <p>savefile </p> <p>Import proc (client)</p> <p>New proc (client) </p> <p>hub var (world) </p> <p>savefile </p> <p>New proc (client)</p> <p>hub var (world) </p> <p>savefile </p> <p>hub var (world)</p> <p>savefile </p> <p>savefile</p> <p>Format: </p> <p>client.Export(file)</p> <p>Format: </p> <p>Format:</p> <p>client.Export(file)</p> <p>Args: </p> <p>file: file to send to client</p> <p>Args: </p> <p>Args:</p> <p>file: file to send to client</p> <p>This stores the file on the user's computer in a special location unique to  each registered  world.hub   setting. This is most  useful for writing a client-side savefile, but any type of file may be stored.  The purpose of this is to exchange information between different worlds running  under the same hub path.</p> <p>world.hub</p> <p>When a file is exported to the player's computer, it replaces any previous file stored by a game with the same  <code>world.hub</code>   value. This should not be used for anything requiring high security, because any other world could make use of the same hub path and access the file. It is also possible for the user to tinker with the file, since it resides on their computer.</p> <p><code>world.hub</code></p> <p>To delete the client-side file completely, call  <code>client.Export()</code>   with no argument at all.</p> <p><code>client.Export()</code></p>"},{"location":"client/proc/Export/#_1","title":"Export","text":"<p>Example:</p> <p>mob/verb/save()  var/savefile/F = new()  F &lt;&lt; usr //write the player's mob  usr.client.Export(F)</p> <p>client/New()  var/client_file = Import()  if(client_file)  var/savefile/F = new(client_file) //open it as a savefile  F &gt;&gt; usr //read the player's mob  return ..()</p>"},{"location":"client/proc/GetAPI/","title":"GetAPI","text":""},{"location":"client/proc/GetAPI/#getapi-proc-client","title":"GetAPI proc (client)","text":"<p>See also: </p> <p>SetAPI proc (client) </p> <p>CheckPassport proc (client) </p> <p>See also: </p> <p>See also:</p> <p>SetAPI proc (client) </p> <p>CheckPassport proc (client) </p> <p>SetAPI proc (client)</p> <p>CheckPassport proc (client) </p> <p>CheckPassport proc (client)</p> <p>Format: </p> <p>GetAPI(Api, Name)</p> <p>Format: </p> <p>Format:</p> <p>GetAPI(Api, Name)</p> <p>Args: </p> <p>Api: the name of the API (e.g. \"steam\")</p> <p>Key: the name of the value to read</p> <p>Args: </p> <p>Args:</p> <p>Api: the name of the API (e.g. \"steam\")</p> <p>Key: the name of the value to read</p> <p>Key: the name of the value to read</p> <p>Interfaces with supported external APIs to read information. Currently this only has meaning for Steam, for specially built games that have a Steam app ID.</p> <p>This proc returns null any time the call or its results are invalid: for instance, trying to query a Steam stat from a user who isn't logged into Steam.</p> <p>|   Key   |   Return type   |   Description   | | --- | --- | --- | |   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   | | --- | |   id   |   text   |   Returns the user's numeric Steam ID, if any. Because this number is too big to fit in BYOND's numbering system, it is returned as text.   | |   name   |   text   |   Returns the user's persona name on Steam.   | |   stat:  Name  |   num   |   Returns the value of the stat called</p> <p>Name</p> <p>.   | |   achievement:  Name  |   num   |   Returns the date (for use with  time2text   ) the achievement called</p> <p>Name</p> <p>, or 0 if it hasn't been earned.   | |   achievement-data:  Name  |   list   |   Returns information about the achievement called</p> <p>Name</p> <p>. The result is an associative list with named values</p> <p>name</p> <p>(display name),</p> <p>desc</p> <p>(description), and optionally</p> <p>hidden</p> <p>and</p> <p>icon</p> <p>. (This call is the same no matter which client you call it for.)   | |   achievements   |   list   |   Returns a list of all possible achievements. Each item in the list is the internal name of the achievement, and it is associated with a list in the form described for</p> <p>achievement-data:  Name </p> <p>. (This call is the same no matter which client you call it for.)   |</p> <p>|   Key   |   Return type   |   Description   | | --- | --- | --- |</p> <p>|   Key   |   Return type   |   Description   |</p> <p>Key  |</p> <p>Return type  |</p> <p>Description  | |   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   | | --- | |   id   |   text   |   Returns the user's numeric Steam ID, if any. Because this number is too big to fit in BYOND's numbering system, it is returned as text.   | |   name   |   text   |   Returns the user's persona name on Steam.   | |   stat:  Name  |   num   |   Returns the value of the stat called</p> <p>Name</p> <p>.   | |   achievement:  Name  |   num   |   Returns the date (for use with  time2text   ) the achievement called</p> <p>Name</p> <p>, or 0 if it hasn't been earned.   | |   achievement-data:  Name  |   list   |   Returns information about the achievement called</p> <p>Name</p> <p>. The result is an associative list with named values</p> <p>name</p> <p>(display name),</p> <p>desc</p> <p>(description), and optionally</p> <p>hidden</p> <p>and</p> <p>icon</p> <p>. (This call is the same no matter which client you call it for.)   | |   achievements   |   list   |   Returns a list of all possible achievements. Each item in the list is the internal name of the achievement, and it is associated with a list in the form described for</p> <p>achievement-data:  Name </p> <p>. (This call is the same no matter which client you call it for.)   |</p> <p>|   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   |</p> <p>\"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.  |</p> <p>\"steam\"</p> <p>|   id   |   text   |   Returns the user's numeric Steam ID, if any. Because this number is too big to fit in BYOND's numbering system, it is returned as text.   |</p> <p>id  |</p> <p>text  |</p> <p>Returns the user's numeric Steam ID, if any. Because this number is too big to fit in BYOND's numbering system, it is returned as text.  | |   name   |   text   |   Returns the user's persona name on Steam.   |</p> <p>name  |</p> <p>text  |</p> <p>Returns the user's persona name on Steam.  | |   stat:  Name  |   num   |   Returns the value of the stat called</p> <p>Name</p> <p>.   |</p> <p>stat:  Name  | Name</p> <p>num  |</p> <p>Returns the value of the stat called</p> <p>Name</p> <p>.  |</p> <p>Name</p> <p>|   achievement:  Name  |   num   |   Returns the date (for use with  time2text   ) the achievement called</p> <p>Name</p> <p>, or 0 if it hasn't been earned.   |</p> <p>achievement:  Name  | Name</p> <p>num  |</p> <p>Returns the date (for use with  time2text   ) the achievement called</p> <p>Name</p> <p>, or 0 if it hasn't been earned.  | time2text</p> <p>Name</p> <p>|   achievement-data:  Name  |   list   |   Returns information about the achievement called</p> <p>Name</p> <p>. The result is an associative list with named values</p> <p>name</p> <p>(display name),</p> <p>desc</p> <p>(description), and optionally</p> <p>hidden</p> <p>and</p> <p>icon</p> <p>. (This call is the same no matter which client you call it for.)   |</p> <p>achievement-data:  Name  | Name</p> <p>list  |</p> <p>Returns information about the achievement called</p> <p>Name</p> <p>. The result is an associative list with named values</p> <p>name</p> <p>(display name),</p> <p>desc</p> <p>(description), and optionally</p> <p>hidden</p> <p>and</p> <p>icon</p> <p>. (This call is the same no matter which client you call it for.)  |</p> <p>Name</p> <p>name</p> <p>desc</p> <p>hidden</p> <p>icon</p> <p>|   achievements   |   list   |   Returns a list of all possible achievements. Each item in the list is the internal name of the achievement, and it is associated with a list in the form described for</p> <p>achievement-data:  Name </p> <p>. (This call is the same no matter which client you call it for.)   |</p> <p>achievements  |</p> <p>list  |</p> <p>Returns a list of all possible achievements. Each item in the list is the internal name of the achievement, and it is associated with a list in the form described for</p> <p>achievement-data:  Name </p> <p>. (This call is the same no matter which client you call it for.)  |</p> <p>achievement-data:  Name </p> <p>Name</p>"},{"location":"client/proc/Import/","title":"Import","text":""},{"location":"client/proc/Import/#import-proc-client","title":"Import proc (client)","text":"<p>See also: </p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>savefile </p> <p>See also: </p> <p>See also:</p> <p>Export proc (client) </p> <p>New proc (client) </p> <p>savefile </p> <p>Export proc (client)</p> <p>New proc (client) </p> <p>savefile </p> <p>New proc (client)</p> <p>savefile </p> <p>savefile</p> <p>Format: </p> <p>client.Import(Query)</p> <p>Format: </p> <p>Format:</p> <p>client.Import(Query)</p> <p>Args: </p> <p>Query: optional query parameters</p> <p>Args: </p> <p>Args:</p> <p>Query: optional query parameters</p> <p>When no query parameters are given, this returns the client-side file last exported with  <code>client.Export()</code>   . This comes as an entry in the resource cache, which can be opened as a savefile among other things. If there is no file, null is returned. For an example, see  client.Export   .</p> <p><code>client.Export()</code> client.Export</p> <p>When there are query parameters, these may be used to import a file from some alternate source. Currently this is not supported.</p>"},{"location":"client/proc/IsByondMember/","title":"IsByondMember","text":""},{"location":"client/proc/IsByondMember/#isbyondmember-proc-client","title":"IsByondMember proc (client)","text":"<p>Format: </p> <p>IsByondMember()</p> <p>Format: </p> <p>Format:</p> <p>IsByondMember()</p> <p>Args: </p> <p>None.</p> <p>Args: </p> <p>Args:</p> <p>None.</p> <p>This built-in procedure checks to see if the user is a BYOND Member. Use it to give special in-game rewards to those who support BYOND.</p> <p>If the user is a Member, the result is the number of days left (rounded up) on their Membership, or -1 for lifetime Members.</p>"},{"location":"client/proc/IsByondMember/#_1","title":"IsByondMember","text":"<p>Example:</p> <p>mob/var  special_features</p> <p>mob/Login()  if(client.IsByondMember())  special_features = 1  else  src &lt;&lt; \"For special features,  become a BYOND Member)</p> <p>[become a BYOND Member]()</p>"},{"location":"client/proc/MeasureText/","title":"MeasureText","text":""},{"location":"client/proc/MeasureText/#measuretext-proc-client","title":"MeasureText proc (client)","text":"<p>See also: </p> <p>maptext var (atom) </p> <p>maptext_width var (atom) </p> <p>maptext_height var (atom) </p> <p>See also: </p> <p>See also:</p> <p>maptext var (atom) </p> <p>maptext_width var (atom) </p> <p>maptext_height var (atom) </p> <p>maptext var (atom)</p> <p>maptext_width var (atom) </p> <p>maptext_height var (atom) </p> <p>maptext_width var (atom)</p> <p>maptext_height var (atom) </p> <p>maptext_height var (atom)</p> <p>Format: </p> <p>MeasureText(text, style, width=0)</p> <p>Format: </p> <p>Format:</p> <p>MeasureText(text, style, width=0)</p> <p>Args: </p> <p>text: The text to be measured</p> <p>style: Stylesheet to be used (leave blank to use the default map control's styles, if any)</p> <p>width: Width limit, if you only want to measure height; 0 means no limit</p> <p>Args: </p> <p>Args:</p> <p>text: The text to be measured</p> <p>style: Stylesheet to be used (leave blank to use the default map control's styles, if any)</p> <p>width: Width limit, if you only want to measure height; 0 means no limit</p> <p>style: Stylesheet to be used (leave blank to use the default map control's styles, if any)</p> <p>width: Width limit, if you only want to measure height; 0 means no limit</p> <p>width: Width limit, if you only want to measure height; 0 means no limit</p> <p>Returns: </p> <p>A size value in</p> <p>\"[width]x[height]\"</p> <p>format, e.g. \"60x16\"</p> <p>Returns: </p> <p>Returns:</p> <p>A size value in</p> <p>\"[width]x[height]\"</p> <p>format, e.g. \"60x16\"</p> <p>\"[width]x[height]\"</p> <p>Because maptext rendering may vary by client,</p> <p>MeasureText</p> <p>lets you get a measurement of how text will be laid out, so you can adjust</p> <p>maptext_width</p> <p>and</p> <p>maptext_height</p> <p>accordingly.</p> <p>MeasureText</p> <p>maptext_width</p> <p>maptext_height</p>"},{"location":"client/proc/MouseDown/","title":"MouseDown","text":""},{"location":"client/proc/MouseDown/#mousedown-proc-client","title":"MouseDown proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (atom) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (atom)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDown(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDown(object,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseDown(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseDown(location,control,params).</p> <p>This is called when the a mouse button is pressed while pointing to the object. Note that MouseUp() will always be called after MouseDown() is called, even if over empty space. That means</p> <p>object</p> <p>and</p> <p>location</p> <p>may be null.</p> <p>object</p> <p>location</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through</p> <p>Click()</p> <p>,</p> <p>DblClick()</p> <p>, and</p> <p>MouseDrop()</p> <p>. The other procedures are simply available for completeness.</p> <p>Click()</p> <p>DblClick()</p> <p>MouseDrop()</p> <p>Note: In BYOND 3.5 this procedure took three different arguments:</p> <p>location</p> <p>,</p> <p>icon_x</p> <p>, and</p> <p>icon_y</p> <p>. Since</p> <p>icon_x</p> <p>and</p> <p>icon_y</p> <p>have been replaced, old code will need to be modified. Games compiled before this change will still work normally.</p> <p>location</p> <p>icon_x</p> <p>icon_y</p> <p>icon_x</p> <p>icon_y</p>"},{"location":"client/proc/MouseDrag/","title":"MouseDrag","text":""},{"location":"client/proc/MouseDrag/#mousedrag-proc-client","title":"MouseDrag proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (atom) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (atom)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDrag(src_object,over_object,src_location,over_location,src_control,over_control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDrag(src_object,over_object,src_location,over_location,src_control,over_control,params)</p> <p>Args: </p> <p>src_object: the object being dragged</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>src_object: the object being dragged</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_control: The id of the skin control the object was dragged over</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseDrag(over_object,src_location,over_location,src_control,over_control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseDrag(over_object,src_location,over_location,src_control,over_control,params).</p> <p>This is called while dragging an object by pressing and holding the left mouse button over the object and moving the mouse. The over_object may be null if dragging over a stat panel or over other empty space.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through Click(), DblClick(), and MouseDrop(). The other procedures are simply available for completeness.</p>"},{"location":"client/proc/MouseDrop/","title":"MouseDrop","text":""},{"location":"client/proc/MouseDrop/#mousedrop-proc-client","title":"MouseDrop proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (atom) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (atom)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseDrop(src_object,over_object,src_location,over_location,src_control,over_control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseDrop(src_object,over_object,src_location,over_location,src_control,over_control,params)</p> <p>Args: </p> <p>src_object: the object being dropped</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>src_object: the object being dropped</p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_object: the object under the mouse pointer</p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_location: the turf, stat panel, grid cell, etc. from where the src object was dragged</p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_location: the turf, stat panel, grid cell, etc. containing the object under the mouse pointer</p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>src_control: The id of the skin control the object was dragged from</p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>over_control: The id of the skin control the object was dropped onto</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseDrop(over_object,src_location,over_location,src_control,over_control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseDrop(over_object,src_location,over_location,src_control,over_control,params).</p> <p>This is called when a mouse button is released after dragging an object. The over_object may be null if dropping over a stat panel or over other empty space.</p>"},{"location":"client/proc/MouseEntered/","title":"MouseEntered","text":""},{"location":"client/proc/MouseEntered/#mouseentered-proc-client","title":"MouseEntered proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (atom) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (atom)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseEntered(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseEntered(object,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseEntered(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseEntered(location,control,params).</p> <p>This is called when no mouse buttons are pressed while pointing to the object.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"client/proc/MouseExited/","title":"MouseExited","text":""},{"location":"client/proc/MouseExited/#mouseexited-proc-client","title":"MouseExited proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (atom) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (atom)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseExited(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseExited(object,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseExited(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseExited(location,control,params).</p> <p>This is called when the mouse moves off of an object.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"client/proc/MouseMove/","title":"MouseMove","text":""},{"location":"client/proc/MouseMove/#mousemove-proc-client","title":"MouseMove proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (atom) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (atom)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseMove(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseMove(object,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseMove(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseMove(location,control,params).</p> <p>This is called when no mouse buttons are pressed while pointing to the object, and the mouse has moved. The first time the mouse moves over the object, MouseEntered() is called instead.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Defining it on only the objects that require it reduces overhead.</p>"},{"location":"client/proc/MouseUp/","title":"MouseUp","text":""},{"location":"client/proc/MouseUp/#mouseup-proc-client","title":"MouseUp proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (atom) </p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseUp proc (atom)</p> <p>MouseWheel proc (client) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>MouseWheel proc (client)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>show_popup_menus var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>show_popup_menus var (client) </p> <p>show_popup_menus var (client)</p> <p>Format: </p> <p>MouseUp(object,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseUp(object,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object where it was clicked</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseUp(location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseUp(location,control,params).</p> <p>This is called when a mouse button is released while pointing to an object.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. Most operations can be done through</p> <p>Click()</p> <p>,</p> <p>DblClick()</p> <p>, and</p> <p>MouseDrop()</p> <p>. The other procedures are simply available for completeness.</p> <p>Click()</p> <p>DblClick()</p> <p>MouseDrop()</p> <p>Note: In BYOND 3.5 this procedure took three different arguments:</p> <p>location</p> <p>,</p> <p>icon_x</p> <p>, and</p> <p>icon_y</p> <p>. Since</p> <p>icon_x</p> <p>and</p> <p>icon_y</p> <p>have been replaced, old code will need to be modified. Games compiled before this change will still work normally.</p> <p>location</p> <p>icon_x</p> <p>icon_y</p> <p>icon_x</p> <p>icon_y</p>"},{"location":"client/proc/MouseWheel/","title":"MouseWheel","text":""},{"location":"client/proc/MouseWheel/#mousewheel-proc-client","title":"MouseWheel proc (client)","text":"<p>See also: </p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>See also: </p> <p>See also:</p> <p>Click proc (client) </p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>Click proc (client)</p> <p>DblClick proc (client) </p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>DblClick proc (client)</p> <p>MouseDown proc (client) </p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseDown proc (client)</p> <p>MouseDrag proc (client) </p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseDrag proc (client)</p> <p>MouseDrop proc (client) </p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseDrop proc (client)</p> <p>MouseEntered proc (client) </p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseEntered proc (client)</p> <p>MouseExited proc (client) </p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseExited proc (client)</p> <p>MouseMove proc (client) </p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseMove proc (client)</p> <p>MouseUp proc (client) </p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseUp proc (client)</p> <p>MouseWheel proc (atom) </p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>MouseWheel proc (atom)</p> <p>mouse_opacity var (atom) </p> <p>mouse_pointer_icon var (client) </p> <p>mouse_opacity var (atom)</p> <p>mouse_pointer_icon var (client) </p> <p>mouse_pointer_icon var (client)</p> <p>Format: </p> <p>MouseWheel(object,delta_x,delta_y,location,control,params)</p> <p>Format: </p> <p>Format:</p> <p>MouseWheel(object,delta_x,delta_y,location,control,params)</p> <p>Args: </p> <p>object: the object under the mouse pointer</p> <p>delta_x,delta_y: amount of wheel movement</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>Args: </p> <p>Args:</p> <p>object: the object under the mouse pointer</p> <p>delta_x,delta_y: amount of wheel movement</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>delta_x,delta_y: amount of wheel movement</p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>location: the turf, stat panel, grid cell, etc. containing the object</p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>control: the name of the skin control involved</p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>params: other parameters including mouse/keyboard flags, icon offsets, etc.; see  mouse handling </p> <p>mouse handling</p> <p>Default action: </p> <p>Call object.MouseWheel(delta_x,delta_y,location,control,params).</p> <p>Default action: </p> <p>Default action:</p> <p>Call object.MouseWheel(delta_x,delta_y,location,control,params).</p> <p>This is called when the mouse wheel is moved while over an object or control. It is NOT called if over a browser control, or any control that is currently scrollable.</p> <p>Positive values of delta_x and delta_y refer to scrolling right or up, respectively. Negative values are left and down, respectively.</p> <p>Don't define this unless you need it, because it generates extra communication that is otherwise avoided. If you only need wheel support on specific objects, use atom.MouseWheel() instead which is more selective.</p>"},{"location":"client/proc/Move/","title":"Move","text":""},{"location":"client/proc/Move/#move-proc-client","title":"Move proc (client)","text":"<p>See also: </p> <p>East proc (client) </p> <p>Move proc (movable atom) </p> <p>North proc (client) </p> <p>Northeast proc (client) </p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>See also: </p> <p>See also:</p> <p>East proc (client) </p> <p>Move proc (movable atom) </p> <p>North proc (client) </p> <p>Northeast proc (client) </p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>East proc (client)</p> <p>Move proc (movable atom) </p> <p>North proc (client) </p> <p>Northeast proc (client) </p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>Move proc (movable atom)</p> <p>North proc (client) </p> <p>Northeast proc (client) </p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>North proc (client)</p> <p>Northeast proc (client) </p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>Northeast proc (client)</p> <p>Northwest proc (client) </p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>Northwest proc (client)</p> <p>South proc (client) </p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>South proc (client)</p> <p>Southeast proc (client) </p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>Southeast proc (client)</p> <p>Southwest proc (client) </p> <p>West proc (client) </p> <p>Southwest proc (client)</p> <p>West proc (client) </p> <p>West proc (client)</p> <p>Format: </p> <p>Move(loc,dir)</p> <p>Format: </p> <p>Format:</p> <p>Move(loc,dir)</p> <p>Returns: </p> <p>1 on success; 0 on failure</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure</p> <p>When: </p> <p>Called by the direction procs.</p> <p>When: </p> <p>When:</p> <p>Called by the direction procs.</p> <p>Default action: </p> <p>Calls src.mob.Move(). Also cancels any automated movement by  calling walk(usr,0).</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.mob.Move(). Also cancels any automated movement by  calling walk(usr,0).</p>"},{"location":"client/proc/New/","title":"New","text":""},{"location":"client/proc/New/#new-proc-client","title":"New proc (client)","text":"<p>See also: </p> <p>Export proc (client) </p> <p>Import proc (client) </p> <p>Login proc (mob) </p> <p>New proc (datum) </p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>See also: </p> <p>See also:</p> <p>Export proc (client) </p> <p>Import proc (client) </p> <p>Login proc (mob) </p> <p>New proc (datum) </p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>Export proc (client)</p> <p>Import proc (client) </p> <p>Login proc (mob) </p> <p>New proc (datum) </p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>Import proc (client)</p> <p>Login proc (mob) </p> <p>New proc (datum) </p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>Login proc (mob)</p> <p>New proc (datum) </p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>New proc (datum)</p> <p>Topic proc (client) </p> <p>mob var (world) </p> <p>savefile </p> <p>Topic proc (client)</p> <p>mob var (world) </p> <p>savefile </p> <p>mob var (world)</p> <p>savefile </p> <p>savefile</p> <p>Format: </p> <p>New(TopicData)</p> <p>Format: </p> <p>Format:</p> <p>New(TopicData)</p> <p>Returns: </p> <p>The newly connected mob, client.mob, or null to disallow the connection.</p> <p>Returns: </p> <p>Returns:</p> <p>The newly connected mob, client.mob, or null to disallow the connection.</p> <p>When: </p> <p>Called when the player first tries to connect to the world.</p> <p>When: </p> <p>When:</p> <p>Called when the player first tries to connect to the world.</p> <p>Args: </p> <p>usr: The mob in the world with the same key as the player, if it exists.</p> <p>TopicData: If the player accessed the world with a \"connection topic\",  this is the topic text. Otherwise it is null.</p> <p>Args: </p> <p>Args:</p> <p>usr: The mob in the world with the same key as the player, if it exists.</p> <p>TopicData: If the player accessed the world with a \"connection topic\",  this is the topic text. Otherwise it is null.</p> <p>TopicData: If the player accessed the world with a \"connection topic\",  this is the topic text. Otherwise it is null.</p> <p>Default action: </p> <p>Look for an existing mob with the same key as the player. If found,  connect the player to that mob (mob.Login()). Otherwise, look for a  prototype mob with the same key as the player. If found, create a mob of  that type and connect the player to it. Otherwise, create a mob of type  world.mob, give it the same name and gender as the player's key, and  connect the player to it. If TopicData is not null, call  client.Topic(TopicData). Finally, the player's mob is returned.</p> <p>Default action: </p> <p>Default action:</p> <p>Look for an existing mob with the same key as the player. If found,  connect the player to that mob (mob.Login()). Otherwise, look for a  prototype mob with the same key as the player. If found, create a mob of  that type and connect the player to it. Otherwise, create a mob of type  world.mob, give it the same name and gender as the player's key, and  connect the player to it. If TopicData is not null, call  client.Topic(TopicData). Finally, the player's mob is returned.</p> <p>This is a fairly low-level procedure that you would only want to override if you cannot accomplish the same thing in  <code>mob/Login()</code>   or  <code>mob/New()</code>   . One reason to override  <code>client/New()</code>   is if player mobs are created from a savefile. In that case, you don't need a temporary mob to be created first.</p> <p><code>mob/Login()</code> <code>mob/New()</code> <code>client/New()</code></p>"},{"location":"client/proc/New/#_1","title":"New","text":"<p>Example:</p> <p>client/New()  if(usr) return ..() //reconnecting to existing mob  else  var/player_sav = \"players/[ckey].sav\"  if(length(file(player_sav))) //if player savefile exists  var/savefile/F = new(player_sav) //open it  F &gt;&gt; usr //create saved mob  return ..() //creates a new mob if necessary mob/Logout()  var/player_sav = \"players/[ckey].sav\"  var/savefile/F = new(player_sav)  F &lt;&lt; src  del src</p> <p>If you want to do any user-interaction before loading the saved mob, you will have to create a temporary mob first in order to interact with the player. In that case, you are better off doing things in  <code>mob/Login()</code>   , rather than  <code>client/New()</code>   .</p> <p><code>mob/Login()</code> <code>client/New()</code></p> <p>Note that for the above example to work, you  must   make proper use of the  tmp   flag when defining new object variables. Otherwise, this can end up sucking large portions of your world into each player savefile, which can have all sorts of unexpected consequences!</p> <p>must tmp</p>"},{"location":"client/proc/North/","title":"North","text":""},{"location":"client/proc/North/#north-proc-client","title":"North proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>North()</p> <p>Format: </p> <p>Format:</p> <p>North()</p> <p>Returns: </p> <p>1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"up\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"up\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the north.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the north.</p>"},{"location":"client/proc/Northeast/","title":"Northeast","text":""},{"location":"client/proc/Northeast/#northeast-proc-client","title":"Northeast proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>Northeast()</p> <p>Format: </p> <p>Format:</p> <p>Northeast()</p> <p>Returns: </p> <p>1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"up-right\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"up-right\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the northeast.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the northeast.</p>"},{"location":"client/proc/Northwest/","title":"Northwest","text":""},{"location":"client/proc/Northwest/#northwest-proc-client","title":"Northwest proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>Northwest()</p> <p>Format: </p> <p>Format:</p> <p>Northwest()</p> <p>Returns: </p> <p>Returns 1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>Returns 1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"up-left\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"up-left\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the northwest.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the northwest.</p>"},{"location":"client/proc/RenderIcon/","title":"RenderIcon","text":""},{"location":"client/proc/RenderIcon/#rendericon-proc-client","title":"RenderIcon proc (client)","text":"<p>See also: </p> <p>vis_contents var (atom) </p> <p>Filter effects </p> <p>See also: </p> <p>See also:</p> <p>vis_contents var (atom) </p> <p>Filter effects </p> <p>vis_contents var (atom)</p> <p>Filter effects </p> <p>Filter effects</p> <p>Format: </p> <p>RenderIcon(object)</p> <p>Format: </p> <p>Format:</p> <p>RenderIcon(object)</p> <p>Args: </p> <p>object: An atom or appearance to render.</p> <p>Args: </p> <p>Args:</p> <p>object: An atom or appearance to render.</p> <p>Returns: </p> <p>A single-image icon file in which the object is rendered with all its overlays, visual contents, etc.</p> <p>Returns: </p> <p>Returns:</p> <p>A single-image icon file in which the object is rendered with all its overlays, visual contents, etc.</p> <p>Use this proc to render an atom or an appearance as a single icon. This is a client proc because the server is not capable of rendering anything on its own.</p> <p>Any overlays, image objects known to this client that are attached to the object, visual contents, maptext, and so on will be included in the render. The returned icon is sized to fit all of the above, and to include room for any expansion due to filter effects.</p>"},{"location":"client/proc/RenderIcon/#_1","title":"RenderIcon","text":"<p>Example:</p> <p>mob/proc/GetFlatIcon()  return client?.RenderIcon(src)</p> <p>Important notes regarding this proc:</p> <ul> <li>The returned icon is a cache file,  not   an</li> </ul> <p>/icon</p> <p>datum. * If</p> <p>object</p> <p>is an  [/image</p> <p>object](#/image)   , the  image must be known to the client. Otherwise the return value is null. * If this object doesn't appear on the client's map, it will be sent to them  on the next map tick, along with any visual contents. The server will hold a  reference to the object until the map tick ends, so an object you create  temporarily should remain valid long enough to be rendered. * render_source   will not  work unless the corresponding  render_target   appears in the  same render stack. That is, this object or appearance will be rendered in an  isolated \"scene\" rather than as part of the map, so it won't be able to use  other objects on the map as render sources.</p> <ul> <li>The returned icon is a cache file,  not   an</li> </ul> <p>/icon</p> <p>datum.</p> <p>not</p> <p>/icon</p> <ul> <li>If</li> </ul> <p>object</p> <p>is an  [/image</p> <p>object](#/image)   , the  image must be known to the client. Otherwise the return value is null.</p> <p>object</p> <p>[/image</p> <p>object](#/image)</p> <p>/image</p> <ul> <li> <p>If this object doesn't appear on the client's map, it will be sent to them  on the next map tick, along with any visual contents. The server will hold a  reference to the object until the map tick ends, so an object you create  temporarily should remain valid long enough to be rendered.</p> </li> <li> <p>render_source   will not  work unless the corresponding  render_target   appears in the  same render stack. That is, this object or appearance will be rendered in an  isolated \"scene\" rather than as part of the map, so it won't be able to use  other objects on the map as render sources.</p> </li> </ul> <p>render_source render_target</p>"},{"location":"client/proc/SendPage/","title":"SendPage","text":""},{"location":"client/proc/SendPage/#sendpage-proc-client","title":"SendPage proc (client)","text":"<p>Format: </p> <p>SendPage(msg,recipient,options)</p> <p>Format: </p> <p>Format:</p> <p>SendPage(msg,recipient,options)</p> <p>Returns: </p> <p>Returns number of recipients successfully contacted.</p> <p>Returns: </p> <p>Returns:</p> <p>Returns number of recipients successfully contacted.</p> <p>Args: </p> <p>msg: text to send</p> <p>recipient: key or list of keys to page</p> <p>options: text string containing key=value options</p> <p>Args: </p> <p>Args:</p> <p>msg: text to send</p> <p>recipient: key or list of keys to page</p> <p>options: text string containing key=value options</p> <p>recipient: key or list of keys to page</p> <p>options: text string containing key=value options</p> <p>options: text string containing key=value options</p> <p>The user is prompted to authorize sending of the pager message. The recipient may easily respond or jump to the sender's location by clicking on the link in the pager message. The effect is identical to that of the sending a page through the Dream Seeker pager.</p> <p>The options are encoded in the same format read by text2params(). The valid options are:</p> <p>summon (0/1)</p> <p>If not included in the options, this is 0. If included in the options without assigning it to anything, it is 1. A value of 1 sends the recipient the sender's location so they can join by clicking on the message.</p> <p>email (0/1)</p> <p>If not included in the options, this is 0. If included in the options without assigning it to anything, it is 1. A value of 1 sends causes the message to be delivered as email. If this is not possible, it is delivered as a long-lived pager message. Normally, pager messages expire within a short time after being sent (half an hour).</p> <p>subject</p> <p>For email messages, this specifies the subject to use.</p> <p>summon (0/1)</p> <p>If not included in the options, this is 0. If included in the options without assigning it to anything, it is 1. A value of 1 sends the recipient the sender's location so they can join by clicking on the message.</p> <p>email (0/1)</p> <p>If not included in the options, this is 0. If included in the options without assigning it to anything, it is 1. A value of 1 sends causes the message to be delivered as email. If this is not possible, it is delivered as a long-lived pager message. Normally, pager messages expire within a short time after being sent (half an hour).</p> <p>subject</p> <p>For email messages, this specifies the subject to use.</p>"},{"location":"client/proc/SetAPI/","title":"SetAPI","text":""},{"location":"client/proc/SetAPI/#setapi-proc-client","title":"SetAPI proc (client)","text":"<p>See also: </p> <p>GetAPI proc (client) </p> <p>CheckPassport proc (client) </p> <p>See also: </p> <p>See also:</p> <p>GetAPI proc (client) </p> <p>CheckPassport proc (client) </p> <p>GetAPI proc (client)</p> <p>CheckPassport proc (client) </p> <p>CheckPassport proc (client)</p> <p>Format: </p> <p>SetAPI(Api, Key, Value)</p> <p>Format: </p> <p>Format:</p> <p>SetAPI(Api, Key, Value)</p> <p>Args: </p> <p>Api: the name of the API (e.g. \"steam\")</p> <p>Key: the name of the value to change</p> <p>Value: the new value to set</p> <p>Args: </p> <p>Args:</p> <p>Api: the name of the API (e.g. \"steam\")</p> <p>Key: the name of the value to change</p> <p>Value: the new value to set</p> <p>Key: the name of the value to change</p> <p>Value: the new value to set</p> <p>Value: the new value to set</p> <p>Interfaces with supported external APIs to write information. Currently this only has meaning for Steam, for specially built games that have a Steam app ID.</p> <p>This proc returns null any time the call or its results are invalid.</p> <p>|   Key   |   Return type   |   Description   | | --- | --- | --- | |   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   | | --- | |   stat:  Name  |   num   |   Changes the value of the stat called</p> <p>Name</p> <p>. Returns 1 on success. This may fail if the stat change is too much or is out of range.   | |   achievement:  Name  |   num   |   Earns the achievement called</p> <p>Name</p> <p>, or clears it. Value is expected to be a number, or number in text form, where 0 will clear the achievement and 1 will earn it.   |</p> <p>|   Key   |   Return type   |   Description   | | --- | --- | --- |</p> <p>|   Key   |   Return type   |   Description   |</p> <p>Key  |</p> <p>Return type  |</p> <p>Description  | |   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   | | --- | |   stat:  Name  |   num   |   Changes the value of the stat called</p> <p>Name</p> <p>. Returns 1 on success. This may fail if the stat change is too much or is out of range.   | |   achievement:  Name  |   num   |   Earns the achievement called</p> <p>Name</p> <p>, or clears it. Value is expected to be a number, or number in text form, where 0 will clear the achievement and 1 will earn it.   |</p> <p>|   \"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.   |</p> <p>\"steam\"</p> <p>API</p> <p>Requires that the server and client are using a valid Steam app ID, such as when a game is built for standalone distribution.  |</p> <p>\"steam\"</p> <p>|   stat:  Name  |   num   |   Changes the value of the stat called</p> <p>Name</p> <p>. Returns 1 on success. This may fail if the stat change is too much or is out of range.   |</p> <p>stat:  Name  | Name</p> <p>num  |</p> <p>Changes the value of the stat called</p> <p>Name</p> <p>. Returns 1 on success. This may fail if the stat change is too much or is out of range.  |</p> <p>Name</p> <p>|   achievement:  Name  |   num   |   Earns the achievement called</p> <p>Name</p> <p>, or clears it. Value is expected to be a number, or number in text form, where 0 will clear the achievement and 1 will earn it.   |</p> <p>achievement:  Name  | Name</p> <p>num  |</p> <p>Earns the achievement called</p> <p>Name</p> <p>, or clears it. Value is expected to be a number, or number in text form, where 0 will clear the achievement and 1 will earn it.  |</p> <p>Name</p>"},{"location":"client/proc/SoundQuery/","title":"SoundQuery","text":""},{"location":"client/proc/SoundQuery/#soundquery-proc-client","title":"SoundQuery proc (client)","text":"<p>See also: </p> <p>/sound datum </p> <p>sound proc </p> <p>See also: </p> <p>See also:</p> <p>/sound datum </p> <p>sound proc </p> <p>/sound datum</p> <p>sound proc </p> <p>sound proc</p> <p>Format: </p> <p>SoundQuery()</p> <p>Format: </p> <p>Format:</p> <p>SoundQuery()</p> <p>Args: </p> <p>none</p> <p>Args: </p> <p>Args:</p> <p>none</p> <p>Returns: </p> <p>A list of</p> <p>/sound</p> <p>datums with information about currently playing sounds.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of</p> <p>/sound</p> <p>datums with information about currently playing sounds.</p> <p>/sound</p> <p>This proc is used to ask a client about sounds that are playing. The</p> <p>/sound</p> <p>datums in the returned list have the following vars set:</p> <p>/sound</p> <ul> <li>file: Sound/music file, or null if none</li> <li>channel: Channel of sound, if one was set when the sound was played</li> <li>repeat: The</li> </ul> <p>repeat</p> <p>value of the sound * status: Status flags active for this channel; currently only</p> <p>SOUND_PAUSED</p> <p>is supported * offset: Current time index, in seconds, of the sound at the current frequency * len: Total duration, in seconds, of the sound at the current frequency * wait: Total duration of sounds queued to play later on this channel (does not apply to channel 0)</p> <ul> <li> <p>file: Sound/music file, or null if none</p> </li> <li> <p>channel: Channel of sound, if one was set when the sound was played</p> </li> <li> <p>repeat: The</p> </li> </ul> <p>repeat</p> <p>value of the sound</p> <p>repeat</p> <ul> <li>status: Status flags active for this channel; currently only</li> </ul> <p>SOUND_PAUSED</p> <p>is supported</p> <p>SOUND_PAUSED</p> <ul> <li> <p>offset: Current time index, in seconds, of the sound at the current frequency</p> </li> <li> <p>len: Total duration, in seconds, of the sound at the current frequency</p> </li> <li> <p>wait: Total duration of sounds queued to play later on this channel (does not apply to channel 0)</p> </li> </ul> <p>Not all info about the sounds is retrieved, such as</p> <p>volume</p> <p>,</p> <p>frequency</p> <p>, etc. If those are needed, it should be a simple matter to keep track of them in your code. The main purpose of</p> <p>SoundQuery()</p> <p>is to ascertain the current status of playing sounds.</p> <p>volume</p> <p>frequency</p> <p>SoundQuery()</p>"},{"location":"client/proc/South/","title":"South","text":""},{"location":"client/proc/South/#south-proc-client","title":"South proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>South()</p> <p>Format: </p> <p>Format:</p> <p>South()</p> <p>Returns: </p> <p>Returns 1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>Returns 1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"down\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"down\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the south.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the south.</p>"},{"location":"client/proc/Southeast/","title":"Southeast","text":""},{"location":"client/proc/Southeast/#southeast-proc-client","title":"Southeast proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>Southeast()</p> <p>Format: </p> <p>Format:</p> <p>Southeast()</p> <p>Returns: </p> <p>1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"down-right\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"down-right\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the southeast.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the southeast.</p>"},{"location":"client/proc/Southwest/","title":"Southwest","text":""},{"location":"client/proc/Southwest/#southwest-proc-client","title":"Southwest proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>Southwest()</p> <p>Format: </p> <p>Format:</p> <p>Southwest()</p> <p>Returns: </p> <p>Returns 1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>Returns 1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"down-left\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"down-left\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the southwest.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the southwest.</p>"},{"location":"client/proc/Stat/","title":"Stat","text":""},{"location":"client/proc/Stat/#stat-proc-client","title":"Stat proc (client)","text":"<p>See also: </p> <p>Stat proc (atom) </p> <p>stat proc </p> <p>statobj var (client) </p> <p>statpanel proc </p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>See also: </p> <p>See also:</p> <p>Stat proc (atom) </p> <p>stat proc </p> <p>statobj var (client) </p> <p>statpanel proc </p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>Stat proc (atom)</p> <p>stat proc </p> <p>statobj var (client) </p> <p>statpanel proc </p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>stat proc</p> <p>statobj var (client) </p> <p>statpanel proc </p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>statobj var (client)</p> <p>statpanel proc </p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>statpanel proc</p> <p>statpanel var (client) </p> <p>Info control (skin) </p> <p>statpanel var (client)</p> <p>Info control (skin) </p> <p>Info control (skin)</p> <p>Format: </p> <p>Stat()</p> <p>Format: </p> <p>Format:</p> <p>Stat()</p> <p>When: </p> <p>Called periodically by the client to update the stat window.</p> <p>When: </p> <p>When:</p> <p>Called periodically by the client to update the stat window.</p> <p>Default action: </p> <p>Call statobj.Stat().</p> <p>Default action: </p> <p>Default action:</p> <p>Call statobj.Stat().</p> <p>If this procedure sleeps (or engages in some other waiting operation), it will not be called again until it finally returns. This allows you to effectively decrease the frequency of calls to the proc. You might want to do that if it is a fairly lengthy procedure, and frequent calls are slowing things down.</p> <p>To increase the frequency of stat updates, you can lower  <code>world.tick_lag</code>   .</p> <p><code>world.tick_lag</code></p> <p>Note: Typically only the currently viewed statpanel is updated, which saves on some network activity and a little time. If however the proc sleeps, you need to be sure that any pending updates are displayed once the right panel is available. Therefore if you're resetting a var that indicates the proc should sleep next time, it should not be reset unless you know the player is looking at the right statpanel and has received the updates.</p>"},{"location":"client/proc/Stat/#_1","title":"Stat","text":"<p>Example</p> <p>client/var/updategold = 1 // set to 1 if gold changes client/var/updateinventory = 1 // set to 1 if inventory changes</p> <p>client/Stat()  // if not ready to update, Stat() won't be called again till sleep is done  while(!updategold &amp;&amp; !updateinventory)  sleep(5)  if(statpanel(\"Gold\")) // switch to Gold panel and ask if player is looking at it  stat(\"Gold\", mob.gold)  updategold = 0 // we updated, so turn this flag back off  if(statpanel(\"Inventory\"))  stat(mob.contents)  updateinventory = 0</p> <p>Because sleeping in Stat() requires more thinking through, it's best to do so only in cases where Stat() has to do a lot of intensive calculations.</p>"},{"location":"client/proc/Topic/","title":"Topic","text":""},{"location":"client/proc/Topic/#topic-proc-client","title":"Topic proc (client)","text":"<p>See also: </p> <p>New proc (client) </p> <p>Topic proc (datum) </p> <p>link proc </p> <p>ref text macro </p> <p>See also: </p> <p>See also:</p> <p>New proc (client) </p> <p>Topic proc (datum) </p> <p>link proc </p> <p>ref text macro </p> <p>New proc (client)</p> <p>Topic proc (datum) </p> <p>link proc </p> <p>ref text macro </p> <p>Topic proc (datum)</p> <p>link proc </p> <p>ref text macro </p> <p>link proc</p> <p>ref text macro </p> <p>ref text macro</p> <p>Format: </p> <p>Topic(href,href_list[],hsrc)</p> <p>Format: </p> <p>Format:</p> <p>Topic(href,href_list[],hsrc)</p> <p>When: </p> <p>Called when a player connects to a world with a \"connection topic\" or  when the player runs a hyperlink in the current world by clicking one  embedded in text or generated by the link() instruction.</p> <p>When: </p> <p>When:</p> <p>Called when a player connects to a world with a \"connection topic\" or  when the player runs a hyperlink in the current world by clicking one  embedded in text or generated by the link() instruction.</p> <p>Args: </p> <p>href: The topic text (everything after the '?' in the full href).</p> <p>href_list: List of key/value pairs in href (produced from params2list(href)).</p> <p>hsrc: The object referenced by the \"src\" parameter in href or null if none.</p> <p>Args: </p> <p>Args:</p> <p>href: The topic text (everything after the '?' in the full href).</p> <p>href_list: List of key/value pairs in href (produced from params2list(href)).</p> <p>hsrc: The object referenced by the \"src\" parameter in href or null if none.</p> <p>href_list: List of key/value pairs in href (produced from params2list(href)).</p> <p>hsrc: The object referenced by the \"src\" parameter in href or null if none.</p> <p>hsrc: The object referenced by the \"src\" parameter in href or null if none.</p> <p>Default action: </p> <p>Call the hsrc object's own Topic() proc.</p> <p>Default action: </p> <p>Default action:</p> <p>Call the hsrc object's own Topic() proc.</p> <p>The following example uses a very simple href value.</p>"},{"location":"client/proc/Topic/#_1","title":"Topic","text":"<p>Example:</p> <p>mob/Login()  src &lt;&lt; \"Click  here   to download the source code.\"  return ..()</p> <p>client/Topic(href)  if(href == \"source\")  usr &lt;&lt; file(\"world.dm\")  usr &lt;&lt; file(\"world.rsc\")  else ..()</p> <p>here</p> <p>Be sure to call the default handler unless you want to prevent rerouting of topics to other objects.</p> <p>Always validate the input in</p> <p>Topic()</p> <p>calls to make sure it's correct and the query you're recieving is legitimate. For security reasons, you will probably want to control which objects a player has access to, since a player could spoof a topic link containing any arbitrary object reference. (Never trust those sneaky players!)</p> <p>Topic()</p> <p>The next example demonstrates an href that gets handled by another object. This is how you would normally want to do things. It is best not to override client/Topic() (as in the example above) unless you need to intervene in the low-level details of routing the request to the right object.</p> <p>You specify the object that will handle the request by using a parameter called \"src\".</p>"},{"location":"client/proc/Topic/#_2","title":"Topic","text":"<p>Example:</p> <p>mob/Login()  src &lt;&lt; \"Click  here   to start.\"  return ..()</p> <p>mob/Topic(href,href_list[])  switch(href_list[\"action\"])  if(\"startgame\")  usr &lt;&lt; \"Starting game...\"  else  return ..()</p> <p>here</p> <p>Although it is slightly more complex, the use of the parameter list allows you to easily include extra data and new functionality. Just remember that the data in the list is always stored as text, so if you are expecting a number or an object, you must convert it yourself (with text2num(), locate(), or whatever).</p>"},{"location":"client/proc/West/","title":"West","text":""},{"location":"client/proc/West/#west-proc-client","title":"West proc (client)","text":"<p>See also: </p> <p>Move proc (client) </p> <p>See also: </p> <p>See also:</p> <p>Move proc (client) </p> <p>Move proc (client)</p> <p>Format: </p> <p>West()</p> <p>Format: </p> <p>Format:</p> <p>West()</p> <p>Returns: </p> <p>Returns 1 on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>Returns 1 on success; 0 on failure.</p> <p>When: </p> <p>Called when the player presses the \"left\" key or cursor.</p> <p>When: </p> <p>When:</p> <p>Called when the player presses the \"left\" key or cursor.</p> <p>Default action: </p> <p>Calls src.Move() towards the west.</p> <p>Default action: </p> <p>Default action:</p> <p>Calls src.Move() towards the west.</p>"},{"location":"database/proc/","title":"Proc","text":""},{"location":"database/proc/#procs-database","title":"procs (database)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>procs (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>procs (database query) </p> <p>database datum</p> <p>database query datum </p> <p>procs (database query) </p> <p>database query datum</p> <p>procs (database query) </p> <p>procs (database query)</p> <p>Built-in database procs:</p> <p>database/proc</p> <p>Close </p> <p>Error </p> <p>ErrorMsg </p> <p>New </p> <p>Open </p> <p>database/proc</p> <p>Close </p> <p>Error </p> <p>ErrorMsg </p> <p>New </p> <p>Open </p> <p>Close</p> <p>Error </p> <p>ErrorMsg </p> <p>New </p> <p>Open </p> <p>Error</p> <p>ErrorMsg </p> <p>New </p> <p>Open </p> <p>ErrorMsg</p> <p>New </p> <p>Open </p> <p>New</p> <p>Open </p> <p>Open</p>"},{"location":"database/query/","title":"Query","text":""},{"location":"database/query/#database-query-datum","title":"database query datum","text":"<p>See also: </p> <p>database datum </p> <p>procs (database query) </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>procs (database query) </p> <p>stddef.dm file </p> <p>database datum</p> <p>procs (database query) </p> <p>stddef.dm file </p> <p>procs (database query)</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>This datum lets you create a query for a database, which can be run with the Execute() proc. The datum can be reused after a query is run by calling Clear() and adding new text with Add().</p>"},{"location":"database/proc/Close/","title":"Close","text":""},{"location":"database/proc/Close/#close-proc-database","title":"Close proc (database)","text":"<p>See also: </p> <p>database datum </p> <p>Open proc (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>Open proc (database) </p> <p>database datum</p> <p>Open proc (database) </p> <p>Open proc (database)</p> <p>Format: </p> <p>Close()</p> <p>Format: </p> <p>Format:</p> <p>Close()</p> <p>If a database is currently open, this will close the database and any queries currently running in it. Usually you don't need to call this directly, because deleting the datum will do it for you.</p>"},{"location":"database/proc/Error/","title":"Error","text":""},{"location":"database/proc/Error/#error-proc-database","title":"Error proc (database)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>ErrorMsg proc (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>ErrorMsg proc (database) </p> <p>database datum</p> <p>database query datum </p> <p>ErrorMsg proc (database) </p> <p>database query datum</p> <p>ErrorMsg proc (database) </p> <p>ErrorMsg proc (database)</p> <p>Format: </p> <p>Error()</p> <p>Format: </p> <p>Format:</p> <p>Error()</p> <p>Returns the error code last received by the database.</p>"},{"location":"database/proc/ErrorMsg/","title":"ErrorMsg","text":""},{"location":"database/proc/ErrorMsg/#errormsg-proc-database","title":"ErrorMsg proc (database)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Error proc (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Error proc (database) </p> <p>database datum</p> <p>database query datum </p> <p>Error proc (database) </p> <p>database query datum</p> <p>Error proc (database) </p> <p>Error proc (database)</p> <p>Format: </p> <p>ErrorMsg()</p> <p>Format: </p> <p>Format:</p> <p>ErrorMsg()</p> <p>Returns the error message last received by the database.</p>"},{"location":"database/proc/New/","title":"New","text":""},{"location":"database/proc/New/#new-proc-database","title":"New proc (database)","text":"<p>See also: </p> <p>database datum </p> <p>Open proc (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>Open proc (database) </p> <p>database datum</p> <p>Open proc (database) </p> <p>Open proc (database)</p> <p>Format: </p> <p>New(filename)</p> <p>Format: </p> <p>Format:</p> <p>New(filename)</p> <p>Args: </p> <p>filename: The database filename to open (optional)</p> <p>Args: </p> <p>Args:</p> <p>filename: The database filename to open (optional)</p> <p>Creates a new database datum, and opens the file if a filename is provided.</p>"},{"location":"database/proc/Open/","title":"Open","text":""},{"location":"database/proc/Open/#open-proc-database","title":"Open proc (database)","text":"<p>See also: </p> <p>database datum </p> <p>Close proc (database) </p> <p>New proc (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>Close proc (database) </p> <p>New proc (database) </p> <p>database datum</p> <p>Close proc (database) </p> <p>New proc (database) </p> <p>Close proc (database)</p> <p>New proc (database) </p> <p>New proc (database)</p> <p>Format: </p> <p>Open(filename)</p> <p>Format: </p> <p>Format:</p> <p>Open(filename)</p> <p>Args: </p> <p>filename: The database filename to open</p> <p>Args: </p> <p>Args:</p> <p>filename: The database filename to open</p> <p>Opens a database file. If another database was already open, it is closed automatically. It is more common to simply open the database in New().</p>"},{"location":"database/query/proc/","title":"Proc","text":""},{"location":"database/query/proc/#procs-database-query","title":"procs (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>procs (database) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>procs (database) </p> <p>database datum</p> <p>database query datum </p> <p>procs (database) </p> <p>database query datum</p> <p>procs (database) </p> <p>procs (database)</p> <p>Built-in database query procs:</p> <p>database/query/proc</p> <p>Add </p> <p>Clear </p> <p>Close </p> <p>Columns </p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>database/query/proc</p> <p>Add </p> <p>Clear </p> <p>Close </p> <p>Columns </p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Add</p> <p>Clear </p> <p>Close </p> <p>Columns </p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Clear</p> <p>Close </p> <p>Columns </p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Close</p> <p>Columns </p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Columns</p> <p>Error </p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Error</p> <p>ErrorMsg </p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>ErrorMsg</p> <p>Execute </p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>Execute</p> <p>GetColumn </p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>GetColumn</p> <p>GetRowData </p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>GetRowData</p> <p>New </p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>New</p> <p>NextRow </p> <p>Reset </p> <p>RowsAffected </p> <p>NextRow</p> <p>Reset </p> <p>RowsAffected </p> <p>Reset</p> <p>RowsAffected </p> <p>RowsAffected</p>"},{"location":"database/query/proc/Add/","title":"Add","text":""},{"location":"database/query/proc/Add/#add-proc-database-query","title":"Add proc (database query)","text":"<p>See also: </p> <p>database query datum </p> <p>Clear proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database query datum </p> <p>Clear proc (database query) </p> <p>database query datum</p> <p>Clear proc (database query) </p> <p>Clear proc (database query)</p> <p>Format: </p> <p>Add(text, item1, item2, ...)</p> <p>Format: </p> <p>Format:</p> <p>Add(text, item1, item2, ...)</p> <p>Args: </p> <p>text: Text to add to the query</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>Args: </p> <p>Args:</p> <p>text: Text to add to the query</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>Adds text to a database query. If this datum was already used to run a query, Clear() will be called automatically.</p> <p>If your text includes question marks, they will be replaced with the other items listed in the proc arguments. If that item is a string, quotes will be put around it for the query text. Files in the cache (such as icons) will be added as BLOB values.</p> <p>After the query has been built, call Execute() to run it.</p>"},{"location":"database/query/proc/Add/#_1","title":"Add","text":"<p>Example:</p> <p>var/database/db = new(\"mydb.db\") var/database/query/q = new q.Add(\"INSERT INTO quests (name, quest, complete) VALUES (?,?,?)\", usr.key, quest_name, 1) q.Execute(db)</p> <p>In the example above, the query text might look like this:</p> <p>INSERT INTO quests (name, quest, complete) VALUES ('Tom','Save the Dog',1)</p> <p>INSERT INTO quests (name, quest, complete) VALUES ('Tom','Save the Dog',1)</p>"},{"location":"database/query/proc/Clear/","title":"Clear","text":""},{"location":"database/query/proc/Clear/#clear-proc-database-query","title":"Clear proc (database query)","text":"<p>See also: </p> <p>database query datum </p> <p>Add proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database query datum </p> <p>Add proc (database query) </p> <p>database query datum</p> <p>Add proc (database query) </p> <p>Add proc (database query)</p> <p>Format: </p> <p>Clear()</p> <p>Format: </p> <p>Format:</p> <p>Clear()</p> <p>Clears the query text so you can begin creating a new query. This is called automatically if you already called Execute() for the last query used by this datum.</p>"},{"location":"database/query/proc/Close/","title":"Close","text":""},{"location":"database/query/proc/Close/#close-proc-database-query","title":"Close proc (database query)","text":"<p>See also: </p> <p>database query datum </p> <p>Clear proc (database query) </p> <p>Reset proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database query datum </p> <p>Clear proc (database query) </p> <p>Reset proc (database query) </p> <p>database query datum</p> <p>Clear proc (database query) </p> <p>Reset proc (database query) </p> <p>Clear proc (database query)</p> <p>Reset proc (database query) </p> <p>Reset proc (database query)</p> <p>Format: </p> <p>Close()</p> <p>Format: </p> <p>Format:</p> <p>Close()</p> <p>Ends a query that is in progress. This is usually done automatically and shouldn't be necessary to call in most cases.</p>"},{"location":"database/query/proc/Columns/","title":"Columns","text":""},{"location":"database/query/proc/Columns/#columns-proc-database-query","title":"Columns proc (database query)","text":"<p>See also: </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>database query datum</p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Execute proc (database query)</p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>GetColumn proc (database query)</p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>GetRowData proc (database query)</p> <p>NextRow proc (database query) </p> <p>NextRow proc (database query)</p> <p>Format: </p> <p>Columns()</p> <p>or </p> <p>Columns(column)</p> <p>Format: </p> <p>Format:</p> <p>Columns()</p> <p>or </p> <p>Columns(column)</p> <p>or</p> <p>Args: </p> <p>column: The Nth column whose name should be read</p> <p>Args: </p> <p>Args:</p> <p>column: The Nth column whose name should be read</p> <p>Returns a list of column names for the current query, or the name of the Nth column.</p> <p>You must call Execute() before calling Columns().</p>"},{"location":"database/query/proc/Error/","title":"Error","text":""},{"location":"database/query/proc/Error/#error-proc-database-query","title":"Error proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>ErrorMsg proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>ErrorMsg proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>ErrorMsg proc (database query) </p> <p>database query datum</p> <p>ErrorMsg proc (database query) </p> <p>ErrorMsg proc (database query)</p> <p>Format: </p> <p>Error()</p> <p>Format: </p> <p>Format:</p> <p>Error()</p> <p>Returns the error code last received for this query.</p>"},{"location":"database/query/proc/ErrorMsg/","title":"ErrorMsg","text":""},{"location":"database/query/proc/ErrorMsg/#errormsg-proc-database-query","title":"ErrorMsg proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Error proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Error proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Error proc (database query) </p> <p>database query datum</p> <p>Error proc (database query) </p> <p>Error proc (database query)</p> <p>Format: </p> <p>ErrorMsg()</p> <p>Format: </p> <p>Format:</p> <p>ErrorMsg()</p> <p>Returns the error message last received for this query.</p>"},{"location":"database/query/proc/Execute/","title":"Execute","text":""},{"location":"database/query/proc/Execute/#execute-proc-database-query","title":"Execute proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Add proc (database query) </p> <p>Close proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Add proc (database query) </p> <p>Close proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Add proc (database query) </p> <p>Close proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>database query datum</p> <p>Add proc (database query) </p> <p>Close proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>Add proc (database query)</p> <p>Close proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>Close proc (database query)</p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>GetColumn proc (database query)</p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>GetRowData proc (database query)</p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>NextRow proc (database query)</p> <p>Reset proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>Reset proc (database query)</p> <p>RowsAffected proc (database query) </p> <p>RowsAffected proc (database query)</p> <p>Format: </p> <p>Execute(database)</p> <p>Format: </p> <p>Format:</p> <p>Execute(database)</p> <p>Args: </p> <p>database: A /database datum with the database to be queried, or the name of the database file</p> <p>Args: </p> <p>Args:</p> <p>database: A /database datum with the database to be queried, or the name of the database file</p> <p>Runs a database query. Once the query is run, if the query is supposed to returns any rows you can call NextRow() until finished, and then GetColumn() or GetRowData() to get the information from each row. For queries that cause changes, RowsAffected() is also a useful call.</p> <p>The database argument is optional after the first time you use it.</p> <p>You can use a filename instead of a /database datum, as a shortcut; the datum will be created for you.</p> <p>After a query is executed, calling Add() to create new query text will clear out the old query text automatically.</p>"},{"location":"database/query/proc/Execute/#_1","title":"Execute","text":"<p>Example:</p> <p>var/database/db = new(\"mydb.db\") var/database/query/q = new(\"SELECT quest,complete FROM quests WHERE name=?\", usr.key)</p> <p>if(!q.Execute(db)) return null</p> <p>var/list/completed_quests = new while(q.NextRow())  var/row = q.GetRowData()  if(row[\"complete\"]) completed_quests[row[\"quest\"]] = 1 return completed_quests</p>"},{"location":"database/query/proc/GetColumn/","title":"GetColumn","text":""},{"location":"database/query/proc/GetColumn/#getcolumn-proc-database-query","title":"GetColumn proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>database query datum</p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>Columns proc (database query)</p> <p>Execute proc (database query) </p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>Execute proc (database query)</p> <p>GetRowData proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>GetRowData proc (database query)</p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>NextRow proc (database query)</p> <p>Reset proc (database query) </p> <p>Reset proc (database query)</p> <p>Format: </p> <p>GetColumn(column)</p> <p>Format: </p> <p>Format:</p> <p>GetColumn(column)</p> <p>Args: </p> <p>column: The column number whose value should be retrieved</p> <p>Args: </p> <p>Args:</p> <p>column: The column number whose value should be retrieved</p> <p>Gets the value from the Nth column in this row of results. If you haven't already called Execute() and NextRow(), you should do that first.</p> <p>To get the name of the column, not the value for this row, call Columns(column) instead.</p> <p>The value returned depends on what type the database table thinks it is. For instance if you defined a column as INTEGER or FLOAT, the value should be a number. TEXT is still text, and null values are returned as null. If an icon was saved into a BLOB field, the result is an icon file.</p>"},{"location":"database/query/proc/GetRowData/","title":"GetRowData","text":""},{"location":"database/query/proc/GetRowData/#getrowdata-proc-database-query","title":"GetRowData proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>database query datum</p> <p>Columns proc (database query) </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>Columns proc (database query)</p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>Execute proc (database query)</p> <p>GetColumn proc (database query) </p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>GetColumn proc (database query)</p> <p>NextRow proc (database query) </p> <p>Reset proc (database query) </p> <p>NextRow proc (database query)</p> <p>Reset proc (database query) </p> <p>Reset proc (database query)</p> <p>Format: </p> <p>GetRowData()</p> <p>Format: </p> <p>Format:</p> <p>GetRowData()</p> <p>Returns a list with the current result row for this query. If you haven't already called Execute() and NextRow(), you should do that first.</p> <p>The list returned is an associative list with name=value pairs. A typical result might look like this:</p> <p>list(\"name\" = \"Tom\", \"quest\" = \"Save a Dog\", complete = 1)</p> <p>list(\"name\" = \"Tom\", \"quest\" = \"Save a Dog\", complete = 1)</p> <p>The values returned depend on what type the database table thinks they are. For instance if you defined a column as INTEGER or FLOAT, the value should be a number. TEXT is still text, and null values are returned as null. If an icon was saved into a BLOB field, the result is an icon file.</p>"},{"location":"database/query/proc/New/","title":"New","text":""},{"location":"database/query/proc/New/#new-proc-database-query","title":"New proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Add proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Add proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Add proc (database query) </p> <p>database query datum</p> <p>Add proc (database query) </p> <p>Add proc (database query)</p> <p>Format: </p> <p>New(text, item1, item2, ...)</p> <p>Format: </p> <p>Format:</p> <p>New(text, item1, item2, ...)</p> <p>Args: </p> <p>text: Text to add to the query</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>Args: </p> <p>Args:</p> <p>text: Text to add to the query</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>item1, item2, etc.: Items that will replace question marks in text</p> <p>Creates a new query and adds text by automatically calling Add(). See the  Add proc   for more information.</p> <p>Add proc</p> <p>Call Execute() to run the query.</p>"},{"location":"database/query/proc/NextRow/","title":"NextRow","text":""},{"location":"database/query/proc/NextRow/#nextrow-proc-database-query","title":"NextRow proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>database query datum</p> <p>Execute proc (database query) </p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>Execute proc (database query)</p> <p>GetColumn proc (database query) </p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>GetColumn proc (database query)</p> <p>GetRowData proc (database query) </p> <p>Reset proc (database query) </p> <p>GetRowData proc (database query)</p> <p>Reset proc (database query) </p> <p>Reset proc (database query)</p> <p>Format: </p> <p>NextRow()</p> <p>Format: </p> <p>Format:</p> <p>NextRow()</p> <p>If there are result rows in this query (Execute() must be called to run the query first), NextRow() will retrieve the next row and return 1 if it found a row, or 0 if the results are all finished. NextRow() is typically called in a while() loop.</p> <p>After calling NextRow(), you can call GetColumn() or GetRowData() to get information about the results in this row.</p> <p>Call Reset() if you want to rewind the query to the beginning.</p>"},{"location":"database/query/proc/Reset/","title":"Reset","text":""},{"location":"database/query/proc/Reset/#reset-proc-database-query","title":"Reset proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>NextRow proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>NextRow proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>NextRow proc (database query) </p> <p>database query datum</p> <p>Execute proc (database query) </p> <p>NextRow proc (database query) </p> <p>Execute proc (database query)</p> <p>NextRow proc (database query) </p> <p>NextRow proc (database query)</p> <p>Format: </p> <p>Reset()</p> <p>Format: </p> <p>Format:</p> <p>Reset()</p> <p>If a query returns any rows of results, Reset() will go back to the beginning just after Execute() was called. This is useful if you have called NextRow() repeatedly to retrieve a number of rows, but need to go back to the start of the query for some other reason. This can also be used to count the total number of result rows if needed, but for best performance that isn't recommended.</p>"},{"location":"database/query/proc/RowsAffected/","title":"RowsAffected","text":""},{"location":"database/query/proc/RowsAffected/#rowsaffected-proc-database-query","title":"RowsAffected proc (database query)","text":"<p>See also: </p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>See also: </p> <p>See also:</p> <p>database datum </p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>database datum</p> <p>database query datum </p> <p>Execute proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>database query datum</p> <p>Execute proc (database query) </p> <p>RowsAffected proc (database query) </p> <p>Execute proc (database query)</p> <p>RowsAffected proc (database query) </p> <p>RowsAffected proc (database query)</p> <p>Format: </p> <p>RowsAffected()</p> <p>Format: </p> <p>Format:</p> <p>RowsAffected()</p> <p>After running Execute() on a query that changes rows in the database (for instance, an UPDATE query), this proc returns the number of rows that were changed. This can be useful if you need to know whether a query actually did anything.</p>"},{"location":"datum/proc/","title":"Proc","text":""},{"location":"datum/proc/#procs-datum","title":"procs (datum)","text":"<p>Built-in datum procs:</p> <p>datum/proc</p> <p>New </p> <p>Del </p> <p>Write </p> <p>Read </p> <p>Topic </p> <p>datum/proc</p> <p>New </p> <p>Del </p> <p>Write </p> <p>Read </p> <p>Topic </p> <p>New</p> <p>Del </p> <p>Write </p> <p>Read </p> <p>Topic </p> <p>Del</p> <p>Write </p> <p>Read </p> <p>Topic </p> <p>Write</p> <p>Read </p> <p>Topic </p> <p>Read</p> <p>Topic </p> <p>Topic</p>"},{"location":"datum/var/","title":"Var","text":""},{"location":"datum/var/#vars-datum","title":"vars (datum)","text":"<p>Built-in datum vars:</p> <p>datum/var</p> <p>type </p> <p>parent_type </p> <p>tag </p> <p>vars </p> <p>datum/var</p> <p>type </p> <p>parent_type </p> <p>tag </p> <p>vars </p> <p>type</p> <p>parent_type </p> <p>tag </p> <p>vars </p> <p>parent_type</p> <p>tag </p> <p>vars </p> <p>tag</p> <p>vars </p> <p>vars</p>"},{"location":"datum/proc/Del/","title":"Del","text":""},{"location":"datum/proc/Del/#del-proc-datum","title":"Del proc (datum)","text":"<p>See also: </p> <p>del proc </p> <p>garbage collection </p> <p>See also: </p> <p>See also:</p> <p>del proc </p> <p>garbage collection </p> <p>del proc</p> <p>garbage collection </p> <p>garbage collection</p> <p>Format: </p> <p>Del()</p> <p>Format: </p> <p>Format:</p> <p>Del()</p> <p>When: </p> <p>Called when the object is destroyed, for example by using the  <code>del</code>   instruction.</p> <p>When: </p> <p>When:</p> <p>Called when the object is destroyed, for example by using the  <code>del</code>   instruction.</p> <p><code>del</code></p> <p>Default action: </p> <p>Delete the object. The contents of atomic objects are also destroyed at this time, as though  <code>del</code>   were called on each one of them.</p> <p>Default action: </p> <p>Default action:</p> <p>Delete the object. The contents of atomic objects are also destroyed at this time, as though  <code>del</code>   were called on each one of them.</p> <p><code>del</code></p> <p>When the world is destroyed, the</p> <p>Del()</p> <p>proc is not automatically called. The only object for which it is called is  /world   . If you need the</p> <p>Del()</p> <p>proc for a particular object to be called at that time, you should explicitly call it from</p> <p>world/Del()</p> <p>.</p> <p>Del()</p> <p>/world</p> <p>Del()</p> <p>world/Del()</p> <p>Note:  Always   call</p> <p>..()</p> <p>at the end of the proc if you override it.</p> <p>Always</p> <p>..()</p>"},{"location":"datum/proc/New/","title":"New","text":""},{"location":"datum/proc/New/#new-proc-datum","title":"New proc (datum)","text":"<p>See also: </p> <p>New proc (atom) </p> <p>New proc (client) </p> <p>new proc </p> <p>See also: </p> <p>See also:</p> <p>New proc (atom) </p> <p>New proc (client) </p> <p>new proc </p> <p>New proc (atom)</p> <p>New proc (client) </p> <p>new proc </p> <p>New proc (client)</p> <p>new proc </p> <p>new proc</p> <p>Format: </p> <p>New()</p> <p>Format: </p> <p>Format:</p> <p>New()</p> <p>When: </p> <p>Called when the datum is created, for example by using  <code>new</code>   , when reading an object that was stored in a  savefile   , or when the world is initially created.</p> <p>When: </p> <p>When:</p> <p>Called when the datum is created, for example by using  <code>new</code>   , when reading an object that was stored in a  savefile   , or when the world is initially created.</p> <p><code>new</code> savefile</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p> <p>You can use the New() procedure to do more complicated initializations than are possible in the object definition where you assign the initial value of variables to constants.</p> <p>The following example makes use of the \"Location\" parameter that is passed to objects of type  /atom   . You can pass any number of additional arguments to New() by passing them to the  <code>new</code>   instruction which creates the object.</p> <p>/atom <code>new</code></p>"},{"location":"datum/proc/New/#_1","title":"New","text":"<p>Example:</p> <p>mob/night  var/mob/squire/my_squire  New(Location)  my_squire = new(Location)  return ..()</p> <p>Also note that the type of object being created in this case was automatically inferred from the variable type on the left-hand side of the assignment. That's a handy little DM short-cut.</p>"},{"location":"datum/proc/Read/","title":"Read","text":""},{"location":"datum/proc/Read/#read-proc-datum","title":"Read proc (datum)","text":"<p>See also: </p> <p>&gt;&gt; operator (savefile) </p> <p>Write proc (datum) </p> <p>tmp vars </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; operator (savefile) </p> <p>Write proc (datum) </p> <p>tmp vars </p> <p>&gt;&gt; operator (savefile)</p> <p>Write proc (datum) </p> <p>tmp vars </p> <p>Write proc (datum)</p> <p>tmp vars </p> <p>tmp vars</p> <p>Format: </p> <p>Read(savefile/F)</p> <p>Format: </p> <p>Format:</p> <p>Read(savefile/F)</p> <p>When: </p> <p>Called when the object is read from a save file.</p> <p>When: </p> <p>When:</p> <p>Called when the object is read from a save file.</p> <p>Args: </p> <p>F: the save file being read</p> <p>Args: </p> <p>Args:</p> <p>F: the save file being read</p> <p>Default action: </p> <p>Read the value of each variable from a directory by the same name as the  variable. Variables marked tmp, global, or const and variables for  which there is no directory are skipped.</p> <p>Default action: </p> <p>Default action:</p> <p>Read the value of each variable from a directory by the same name as the  variable. Variables marked tmp, global, or const and variables for  which there is no directory are skipped.</p>"},{"location":"datum/proc/Topic/","title":"Topic","text":""},{"location":"datum/proc/Topic/#topic-proc-datum","title":"Topic proc (datum)","text":"<p>See also: </p> <p>Topic proc (client) </p> <p>ref text macro </p> <p>See also: </p> <p>See also:</p> <p>Topic proc (client) </p> <p>ref text macro </p> <p>Topic proc (client)</p> <p>ref text macro </p> <p>ref text macro</p> <p>Format: </p> <p>Topic(href,href_list[])</p> <p>Format: </p> <p>Format:</p> <p>Topic(href,href_list[])</p> <p>Args: </p> <p>href: the hyperlink data (following ? in the URL).</p> <p>href_list: key/value list (from params2list(href)).</p> <p>Args: </p> <p>Args:</p> <p>href: the hyperlink data (following ? in the URL).</p> <p>href_list: key/value list (from params2list(href)).</p> <p>href_list: key/value list (from params2list(href)).</p> <p>This procedure is called by the default</p> <p>client.Topic()</p> <p>proc when the href contains a parameter called \"src\" containing an object reference.</p> <p>client.Topic()</p>"},{"location":"datum/proc/Topic/#_1","title":"Topic","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; \"Click  here   !\" mob/Topic(href,href_list[])  switch(href_list[\"action\"])  if(\"startgame\")  usr &lt;&lt; \"Starting game...\"</p> <p>here</p> <p>The above example uses an embedded reference to the player's own mob to create a hyperlink to that mob's</p> <p>Topic()</p> <p>proc. You can easily add different actions, parameters, and so forth. Just remember that the parameter values are always stored as text, so you need to convert those to whatever data format you need using procedures such as</p> <p>text2num()</p> <p>,</p> <p>locate()</p> <p>, etc.</p> <p>Topic()</p> <p>text2num()</p> <p>locate()</p> <p>Always validate the input in</p> <p>Topic()</p> <p>calls to make sure it's correct and the query you're recieving is legitimate.</p> <p>Topic()</p>"},{"location":"datum/proc/Write/","title":"Write","text":""},{"location":"datum/proc/Write/#write-proc-datum","title":"Write proc (datum)","text":"<p>See also: </p> <p>&lt;&lt; operator (savefile) </p> <p>Read proc (datum) </p> <p>initial proc </p> <p>issaved proc </p> <p>tmp vars </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; operator (savefile) </p> <p>Read proc (datum) </p> <p>initial proc </p> <p>issaved proc </p> <p>tmp vars </p> <p>&lt;&lt; operator (savefile)</p> <p>Read proc (datum) </p> <p>initial proc </p> <p>issaved proc </p> <p>tmp vars </p> <p>Read proc (datum)</p> <p>initial proc </p> <p>issaved proc </p> <p>tmp vars </p> <p>initial proc</p> <p>issaved proc </p> <p>tmp vars </p> <p>issaved proc</p> <p>tmp vars </p> <p>tmp vars</p> <p>Format: </p> <p>Write(savefile/F)</p> <p>Format: </p> <p>Format:</p> <p>Write(savefile/F)</p> <p>When: </p> <p>Called when the object is written to a save file.</p> <p>When: </p> <p>When:</p> <p>Called when the object is written to a save file.</p> <p>Args: </p> <p>F: the save file being written to</p> <p>Args: </p> <p>Args:</p> <p>F: the save file being written to</p> <p>Default action: </p> <p>Write the value of each variable to a directory by the same name as the  variable. Variables marked tmp, global, or const and variables which  are equal to their initial value are skipped.</p> <p>Default action: </p> <p>Default action:</p> <p>Write the value of each variable to a directory by the same name as the  variable. Variables marked tmp, global, or const and variables which  are equal to their initial value are skipped.</p>"},{"location":"icon/proc/","title":"Proc","text":""},{"location":"icon/proc/#procs-icon","title":"procs (icon)","text":"<p>See also: </p> <p>icon </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>icon</p> <p>icon/proc</p> <p>New </p> <p>IconStates </p> <p>Turn </p> <p>Flip </p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>icon/proc</p> <p>New </p> <p>IconStates </p> <p>Turn </p> <p>Flip </p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>New</p> <p>IconStates </p> <p>Turn </p> <p>Flip </p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>IconStates</p> <p>Turn </p> <p>Flip </p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Turn</p> <p>Flip </p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Flip</p> <p>Shift </p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Shift</p> <p>SetIntensity </p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>SetIntensity</p> <p>Blend </p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Blend</p> <p>SwapColor </p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>SwapColor</p> <p>DrawBox </p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>DrawBox</p> <p>Insert </p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Insert</p> <p>MapColors </p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>MapColors</p> <p>Scale </p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Scale</p> <p>Crop </p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>Crop</p> <p>GetPixel </p> <p>Width </p> <p>Height </p> <p>GetPixel</p> <p>Width </p> <p>Height </p> <p>Width</p> <p>Height </p> <p>Height</p>"},{"location":"icon/proc/Blend/","title":"Blend","text":""},{"location":"icon/proc/Blend/#blend-proc-icon","title":"Blend proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>overlays var (atom) </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>overlays var (atom) </p> <p>rgb proc </p> <p>icon</p> <p>procs (icon) </p> <p>overlays var (atom) </p> <p>rgb proc </p> <p>procs (icon)</p> <p>overlays var (atom) </p> <p>rgb proc </p> <p>overlays var (atom)</p> <p>rgb proc </p> <p>rgb proc</p> <p>Format: </p> <p>Blend(icon,function=ICON_ADD,x=1,y=1)</p> <p>Format: </p> <p>Format:</p> <p>Blend(icon,function=ICON_ADD,x=1,y=1)</p> <p>Args: </p> <p>icon: an icon file, /icon object, or color</p> <p>function: the blending operation to use</p> <p>x, y: the position to blend the icon</p> <p>Args: </p> <p>Args:</p> <p>icon: an icon file, /icon object, or color</p> <p>function: the blending operation to use</p> <p>x, y: the position to blend the icon</p> <p>function: the blending operation to use</p> <p>x, y: the position to blend the icon</p> <p>x, y: the position to blend the icon</p> <p></p> <p></p> <p>The valid blending operations are:</p> <ul> <li>ICON_ADD</li> <li>ICON_SUBTRACT</li> <li>ICON_MULTIPLY</li> <li>ICON_OVERLAY</li> <li>ICON_AND</li> <li>ICON_OR</li> <li> <p>ICON_UNDERLAY</p> </li> <li> <p>ICON_ADD</p> </li> <li> <p>ICON_SUBTRACT</p> </li> <li> <p>ICON_MULTIPLY</p> </li> <li> <p>ICON_OVERLAY</p> </li> <li> <p>ICON_AND</p> </li> <li> <p>ICON_OR</p> </li> <li> <p>ICON_UNDERLAY</p> </li> </ul> <p>The result is a combination of each corresponding pixel in the two icons. In all but ICON_OVERLAY, ICON_UNDERLAY, and ICON_OR, the transparent regions of the two icons are ORed together. That means if either icon is transparent on a given pixel, the result will be transparent. With ICON_OVERLAY or ICON_UNDERLAY, on the other hand, the original icon shows through wherever the top icon is transparent, giving the same effect as an overlay object, but resulting in only a single icon. In ICON_OR, the transparent regions are ANDed together; solid pixels are added together where they exist in both icons, or just pass through if the other icon is transparent at that pixel.</p> <p>In addition to blending with an icon, an rgb() value may also be specified. This is treated identically to an icon of that same solid color, except that the x and y arguments will be ignored. Blending with a color blends the whole icon.</p> <p>By default, the icons will line up at their lower left corners. If you want to position the second icon in a different place for blending, use the x and y arguments to specify where its lower left corner will be. 1,1 is the default, which is the lower left. 11,1 for instance would be 10 pixels to the right, and 1,21 would be 20 pixels up.</p>"},{"location":"icon/proc/Crop/","title":"Crop","text":""},{"location":"icon/proc/Crop/#crop-proc-icon","title":"Crop proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icon</p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>procs (icon)</p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icon_size var (world)</p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>map_format var (world)</p> <p>Big icons </p> <p>Tiled icons </p> <p>Big icons</p> <p>Tiled icons </p> <p>Tiled icons</p> <p>Format: </p> <p>Crop(x1,y1,x2,y2)</p> <p>Format: </p> <p>Format:</p> <p>Crop(x1,y1,x2,y2)</p> <p>Args: </p> <p>x1,y1: Coordinates of one corner of the rectangle (1,1 is the lower left)</p> <p>x2,y2: Coordinates of the other corner</p> <p>Args: </p> <p>Args:</p> <p>x1,y1: Coordinates of one corner of the rectangle (1,1 is the lower left)</p> <p>x2,y2: Coordinates of the other corner</p> <p>x2,y2: Coordinates of the other corner</p> <p>A portion of the current icon is cropped (cut). If the crop region extends outside the icon, it will be padded with transparent pixels.</p> <p>If using the TILED_ICON_MAP value for map_format, all icons must be even multiples of world.tile_size, so the icon will be padded with transparent pixels to the top and right as needed.</p>"},{"location":"icon/proc/Crop/#_1","title":"Crop","text":"<p>Example:</p> <p>// start with a simple icon var/icon/I = new('circle.dmi') // take the upper right 16x16 chunk I.Crop(17,17,32,32) // that chunk now appears in the lower left corner icon = I</p>"},{"location":"icon/proc/DrawBox/","title":"DrawBox","text":""},{"location":"icon/proc/DrawBox/#drawbox-proc-icon","title":"DrawBox proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>icon</p> <p>procs (icon) </p> <p>rgb proc </p> <p>procs (icon)</p> <p>rgb proc </p> <p>rgb proc</p> <p>Format: </p> <p>DrawBox(rgb,x1,y1,x2=x1,y2=y1)</p> <p>Format: </p> <p>Format:</p> <p>DrawBox(rgb,x1,y1,x2=x1,y2=y1)</p> <p>Args: </p> <p>rgb:</p> <p>rgb(red,green,blue)</p> <p>or</p> <p>null</p> <p>x1,y1: Coordinates of one corner of the rectangle (1,1 is the lower left)</p> <p>x2,y2: (optional) Coordinates of the other corner</p> <p>Args: </p> <p>Args:</p> <p>rgb:</p> <p>rgb(red,green,blue)</p> <p>or</p> <p>null</p> <p>x1,y1: Coordinates of one corner of the rectangle (1,1 is the lower left)</p> <p>x2,y2: (optional) Coordinates of the other corner</p> <p>rgb(red,green,blue)</p> <p>null</p> <p>x1,y1: Coordinates of one corner of the rectangle (1,1 is the lower left)</p> <p>x2,y2: (optional) Coordinates of the other corner</p> <p>x2,y2: (optional) Coordinates of the other corner</p> <p>A rectangle (filled) of the given color is drawn over every frame in the icon. If x2 and/or y2 are omitted, a line or a single pixel is drawn. To draw a transparent box instead of an opaque color, use null as the color.</p>"},{"location":"icon/proc/Flip/","title":"Flip","text":""},{"location":"icon/proc/Flip/#flip-proc-icon","title":"Flip proc (icon)","text":"<p>See also: </p> <p>Turn proc (icon) </p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>See also: </p> <p>See also:</p> <p>Turn proc (icon) </p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>Turn proc (icon)</p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>dir var (atom)</p> <p>icon </p> <p>procs (icon) </p> <p>icon</p> <p>procs (icon) </p> <p>procs (icon)</p> <p>Format: </p> <p>Flip(dir)</p> <p>Format: </p> <p>Format:</p> <p>Flip(dir)</p> <p>Args: </p> <p>dir: direction in which to flip over the icon</p> <p>Args: </p> <p>Args:</p> <p>dir: direction in which to flip over the icon</p> <p>This flips the icon over in the specified direction. For example, Flip(NORTH) would be like turning the icon upside down by grabbing the bottom edge and flipping it up over the top edge. You would get the same result by doing Flip(SOUTH). In general, this is not the same as turning the icon by 180 degrees, because it produces a mirror image.</p> <p>If an icon is square, it may be flipped diagonally.</p>"},{"location":"icon/proc/GetPixel/","title":"GetPixel","text":""},{"location":"icon/proc/GetPixel/#getpixel-proc-icon","title":"GetPixel proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>icon</p> <p>procs (icon) </p> <p>rgb proc </p> <p>procs (icon)</p> <p>rgb proc </p> <p>rgb proc</p> <p>Format: </p> <p>GetPixel(x, y, icon_state, dir=0, frame=0, moving=-1)</p> <p>Format: </p> <p>Format:</p> <p>GetPixel(x, y, icon_state, dir=0, frame=0, moving=-1)</p> <p>Args: </p> <p>x,y: coordinates of the pixel to grab; 1,1 is the lower left corner</p> <p>icon_state: a specific icon_state to use (may be null)</p> <p>dir: a specific direction of this icon to use</p> <p>frame: a specific animation frame to use (1 is the 1st frame)</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>Args: </p> <p>Args:</p> <p>x,y: coordinates of the pixel to grab; 1,1 is the lower left corner</p> <p>icon_state: a specific icon_state to use (may be null)</p> <p>dir: a specific direction of this icon to use</p> <p>frame: a specific animation frame to use (1 is the 1st frame)</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>icon_state: a specific icon_state to use (may be null)</p> <p>dir: a specific direction of this icon to use</p> <p>frame: a specific animation frame to use (1 is the 1st frame)</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>dir: a specific direction of this icon to use</p> <p>frame: a specific animation frame to use (1 is the 1st frame)</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>frame: a specific animation frame to use (1 is the 1st frame)</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>moving: non-zero for only movement states, 0 for non-movement states,  or null (default) for either</p> <p>This finds the icon_state and the right animation/direction frame of your choosing (it will pick the first one available if you don't specify) and returns the rgb() value of a pixel at that location, in \"#RRGGBB\" form. If the pixel is totally transparent, it returns null. If the pixel is partially transparent, an alpha component is also returned in \"#RRGGBBAA\" form.</p>"},{"location":"icon/proc/Height/","title":"Height","text":""},{"location":"icon/proc/Height/#height-proc-icon","title":"Height proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>Width proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>Width proc </p> <p>icon</p> <p>procs (icon) </p> <p>Width proc </p> <p>procs (icon)</p> <p>Width proc </p> <p>Width proc</p> <p>Format: </p> <p>Height()</p> <p>Format: </p> <p>Format:</p> <p>Height()</p> <p>This finds the height, in pixels, of the icon.</p>"},{"location":"icon/proc/IconStates/","title":"IconStates","text":""},{"location":"icon/proc/IconStates/#iconstates-proc-icon","title":"IconStates proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>icon_states proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>icon_states proc </p> <p>icon</p> <p>procs (icon) </p> <p>icon_states proc </p> <p>procs (icon)</p> <p>icon_states proc </p> <p>icon_states proc</p> <p>Format: </p> <p>IconStates(mode=0)</p> <p>Format: </p> <p>Format:</p> <p>IconStates(mode=0)</p> <p>Args: </p> <p>mode: see  icon_states proc </p> <p>Args: </p> <p>Args:</p> <p>mode: see  icon_states proc </p> <p>icon_states proc</p> <p>This returns a list of all icon state text strings that exist in the /icon object. This works in exactly the same way as icon_states(icon).</p>"},{"location":"icon/proc/Insert/","title":"Insert","text":""},{"location":"icon/proc/Insert/#insert-proc-icon","title":"Insert proc (icon)","text":"<p>See also: </p> <p>procs (icon) </p> <p>New proc </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>See also: </p> <p>See also:</p> <p>procs (icon) </p> <p>New proc </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>procs (icon)</p> <p>New proc </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>New proc</p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>map_format var (world)</p> <p>Big icons </p> <p>Tiled icons </p> <p>Big icons</p> <p>Tiled icons </p> <p>Tiled icons</p> <p>Format: </p> <p>Insert(new_icon,icon_state,dir,frame,moving,delay)</p> <p>(supports  named arguments   )</p> <p>Format: </p> <p>Format:</p> <p>Insert(new_icon,icon_state,dir,frame,moving,delay)</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>named arguments</p> <p>Args: </p> <p>new_icon: an icon file or /icon object to insert</p> <p>icon_state: an optional text string, specifying a single icon state to  change or add to this icon</p> <p>dir: an optional direction; the inserted icon will only be added for this  direction</p> <p>frame: an optional animation frame (starting at 1); the inserted icon will  only be added for this frame</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>Args: </p> <p>Args:</p> <p>new_icon: an icon file or /icon object to insert</p> <p>icon_state: an optional text string, specifying a single icon state to  change or add to this icon</p> <p>dir: an optional direction; the inserted icon will only be added for this  direction</p> <p>frame: an optional animation frame (starting at 1); the inserted icon will  only be added for this frame</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>icon_state: an optional text string, specifying a single icon state to  change or add to this icon</p> <p>dir: an optional direction; the inserted icon will only be added for this  direction</p> <p>frame: an optional animation frame (starting at 1); the inserted icon will  only be added for this frame</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>dir: an optional direction; the inserted icon will only be added for this  direction</p> <p>frame: an optional animation frame (starting at 1); the inserted icon will  only be added for this frame</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>frame: an optional animation frame (starting at 1); the inserted icon will  only be added for this frame</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>moving: Non-zero to insert as a movement state, 0 for a regular non-movement  state</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>delay: 0 or null to leave unchanged; positive to set delay for a frame and turn  rewind off; negative to set delay and rewind</p> <p>This adds additional states or images to an existing icon, allowing you to build directional, animated, and multi-state icons on the fly. If the state you wish to insert already exists in the file, it will be altered; otherwise it will be added. An animation may be built a piece at a time, for example by inserting an icon into the NORTH direction for animation frame 3.</p>"},{"location":"icon/proc/Insert/#_1","title":"Insert","text":"<p>Example:</p> <p>// start with a non-animated arrow icon var/icon/I = new('arrow.dmi') // make a new state called \"blink\" var/icon/J = new('arrow.dmi') I.Insert(J, \"blink\", delay=-1) // set rewind flag // create darker shades of the arrow var/n = 2 for(var/light=9, light&gt;=5, light--)  J = new('arrow.dmi')  J.SetIntensity(light/10)  I.Insert(J, \"blink\", frame=n++) // congratulations, you have a pulsating arrow icon = I</p> <p>The icon resulting from this example has two states: The original arrow, and a new state called \"blink\" that pulsates between full and \u00bd luminance. To use the blinking state after that, set the atom's icon_state to \"blink\".</p> <p>(Note for animations: When building an animated icon_state from scratch, you can only add 16 new animation frames at a time; i.e., frame&lt;=total_frames+16. Higher values for frame will be ignored. This is a safety precaution.)</p> <p>If you insert an icon of a different size, the src icon will be resized to match the size of new_icon. (The only exception is if you are using the TILED_ICON_MAP map_format, and new_icon is a single tile being inserted as a chunk into a larger icon. If icon_state, such as \"2,0\" or \"open 0,0\", already exists in src as one of its smaller pieces, then new_icon will be inserted in its place.)</p> <p>When inserting an individual animation frame, you can change the delay for just that frame only. If you don't specify a delay, the nearest frame's delay will be used. If this is the first frame being inserted into an icon, then the delay will default to 1 tick. Remember, if your delay is positive, it will turn off the rewind flag for that entire icon state; negative will turn it on.</p>"},{"location":"icon/proc/MapColors/","title":"MapColors","text":""},{"location":"icon/proc/MapColors/#mapcolors-proc-icon","title":"MapColors proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>icon</p> <p>procs (icon) </p> <p>rgb proc </p> <p>procs (icon)</p> <p>rgb proc </p> <p>rgb proc</p> <p>Format: </p> <p>MapColors(rr, rg, rb, gr, gg, gb, br, bg, bb, r0=0, g0=0, b0=0)</p> <p>or </p> <p>MapColors(r_rgb, g_rgb, b_rgb, rgb0=rgb(0,0,0))</p> <p>or </p> <p>MapColors(rr, rg, rb, ra, gr, gg, gb, ga, br, bg, bb, ba, ar, ag, ab, aa, r0=0, g0=0, b0=0, a0=0)</p> <p>or </p> <p>MapColors(r_rgba, g_rgba, b_rgba, a_rgba, rgba0)</p> <p>Format: </p> <p>Format:</p> <p>MapColors(rr, rg, rb, gr, gg, gb, br, bg, bb, r0=0, g0=0, b0=0)</p> <p>or </p> <p>MapColors(r_rgb, g_rgb, b_rgb, rgb0=rgb(0,0,0))</p> <p>or </p> <p>MapColors(rr, rg, rb, ra, gr, gg, gb, ga, br, bg, bb, ba, ar, ag, ab, aa, r0=0, g0=0, b0=0, a0=0)</p> <p>or </p> <p>MapColors(r_rgba, g_rgba, b_rgba, a_rgba, rgba0)</p> <p>or</p> <p>or</p> <p>or</p> <p>Args: </p> <p>rr: portion of old red component -&gt; new red component</p> <p>rg: portion of old red component -&gt; new green component</p> <p>rb: portion of old red component -&gt; new blue component</p> <p>ra: portion of old red component -&gt; new alpha component</p> <p>r0: new base red component</p> <p>...</p> <p>or </p> <p>r_rgb: red component is converted to this color</p> <p>g_rgb: green component is converted to this color</p> <p>b_rgb: blue component is converted to this color</p> <p>rgb0: this color is added to the result</p> <p>Args: </p> <p>Args:</p> <p>rr: portion of old red component -&gt; new red component</p> <p>rg: portion of old red component -&gt; new green component</p> <p>rb: portion of old red component -&gt; new blue component</p> <p>ra: portion of old red component -&gt; new alpha component</p> <p>r0: new base red component</p> <p>...</p> <p>rg: portion of old red component -&gt; new green component</p> <p>rb: portion of old red component -&gt; new blue component</p> <p>ra: portion of old red component -&gt; new alpha component</p> <p>r0: new base red component</p> <p>...</p> <p>rb: portion of old red component -&gt; new blue component</p> <p>ra: portion of old red component -&gt; new alpha component</p> <p>r0: new base red component</p> <p>...</p> <p>ra: portion of old red component -&gt; new alpha component</p> <p>r0: new base red component</p> <p>...</p> <p>r0: new base red component</p> <p>...</p> <p>...</p> <p>or </p> <p>or</p> <p>r_rgb: red component is converted to this color</p> <p>g_rgb: green component is converted to this color</p> <p>b_rgb: blue component is converted to this color</p> <p>rgb0: this color is added to the result</p> <p>g_rgb: green component is converted to this color</p> <p>b_rgb: blue component is converted to this color</p> <p>rgb0: this color is added to the result</p> <p>b_rgb: blue component is converted to this color</p> <p>rgb0: this color is added to the result</p> <p>rgb0: this color is added to the result</p> <p>This is used for complex color mapping that can be used for many special effects. For the number form, values usually range from 0 to 1, but you can use anything you like, including negative numbers. 1 means 100% of the original color will be used. If rg=1, for example, then the amount of red in the original icon becomes the same amount of green in the new icon's colors.</p> <p>There is also an alternate form that can use</p> <p>rgb()</p> <p>values instead, though it is less flexible. r_rgb is the color that will be used in place of 100% red; any darker shades of red will become a darker shade of that color. g_rgb converts green to another color, and b_rgb converts blue to still another color, and all of them are added together.</p> <p>rgb()</p> <p>Either of these calls change the icon to grayscale:</p> <p>icon.MapColors(0.3,0.3,0.3, 0.59,0.59,0.59, 0.11,0.11,0.11, 0,0,0) // or... icon.MapColors(rgb(77,77,77), rgb(150,150,150), rgb(28,28,28), rgb(0,0,0))</p> <p>The calculations are as follows:</p> <ul> <li>For any red in the original icon, add 30% gray to the output.</li> <li>For any green in the original icon, add 59% gray to the output.</li> <li>For any blue in the original icon, add 11% gray to the output.</li> <li> <p>Add an additional 0% (nothing).</p> </li> <li> <p>For any red in the original icon, add 30% gray to the output.</p> </li> <li> <p>For any green in the original icon, add 59% gray to the output.</p> </li> <li> <p>For any blue in the original icon, add 11% gray to the output.</p> </li> <li> <p>Add an additional 0% (nothing).</p> </li> </ul> <p>Or this will make a nice moonlight effect:</p> <p>icon.MapColors(0.2,0.05,0.05, 0.1,0.3,0.2, 0.1,0.1,0.4, 0,0,0) // or... icon.MapColors(rgb(51,13,13), rgb(26,77,51), rgb(26,26,102), rgb(0,0,0))</p> <ul> <li>For any red in the original icon, add rgb(51,12.75,12.75) (dark pink) to the output.</li> <li>For any green in the original icon, add rgb(25.5,76.5,51) (dark bluish green) to the output.</li> <li>For any blue in the original icon, add rgb(25.5,25.5,102) (dark grayish blue) to the output.</li> <li> <p>Add an additional 0% (nothing).</p> </li> <li> <p>For any red in the original icon, add rgb(51,12.75,12.75) (dark pink) to the output.</p> </li> <li> <p>For any green in the original icon, add rgb(25.5,76.5,51) (dark bluish green) to the output.</p> </li> <li> <p>For any blue in the original icon, add rgb(25.5,25.5,102) (dark grayish blue) to the output.</p> </li> <li> <p>Add an additional 0% (nothing).</p> </li> </ul> <p>Or a negative icon (invert all colors):</p> <p>MapColors(-1,0,0, 0,-1,0, 0,0,-1, 1,1,1)</p> <p>The longer formats of MapColors() will allow you to also change alpha colors.</p>"},{"location":"icon/proc/New/","title":"New","text":""},{"location":"icon/proc/New/#new-proc-icon","title":"New proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>image proc </p> <p>new proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>image proc </p> <p>new proc </p> <p>icon</p> <p>procs (icon) </p> <p>image proc </p> <p>new proc </p> <p>procs (icon)</p> <p>image proc </p> <p>new proc </p> <p>image proc</p> <p>new proc </p> <p>new proc</p> <p>Format: </p> <p>New(icon,icon_state,dir,frame,moving)</p> <p>(supports  named arguments   )</p> <p>Format: </p> <p>Format:</p> <p>New(icon,icon_state,dir,frame,moving)</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>named arguments</p> <p>Args: </p> <p>icon: an icon file or /icon object</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>Args: </p> <p>Args:</p> <p>icon: an icon file or /icon object</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>You generally don't call this directly but via new(). The specified icon file is loaded into memory for direct access and manipulation.</p> <p>If the icon state is not specified, all icon states are loaded. Ditto for the direction, animation frame, or preference for movement states. Animation frames are numbered from 1 and up, so frame=4 is the 4th frame.</p> <p>(Movement states are special versions of an existing icon_state with the same name, but appear in the Dream Maker editor with an \"M\" indicator. These states are used for animation when the atom using the icon_state moves from one tile to the next; otherwise only the normal non-moving state is displayed.)</p> <p>The following contrived example, loads the EAST facing default icon state \"\" from the user's icon file, rotates that a bit, and then creates a new icon file for the user.</p>"},{"location":"icon/proc/New/#_1","title":"New","text":"<p>Example:</p> <p>mob/verb/test()  var/icon/I = new(usr.icon,icon_state = \"\",dir = EAST)  I.Turn(90) //rotate clockwise 90 degrees  usr.icon = I</p> <p>Note that merely displaying different icon states or directions can generally be achieved without any icon manipulation, which is good, because it saves quite a bit of overhead. For example, the variables atom.icon_state and atom.dir can be used to control how atom.icon is displayed, without any need for generating a new icon file.</p>"},{"location":"icon/proc/Scale/","title":"Scale","text":""},{"location":"icon/proc/Scale/#scale-proc-icon","title":"Scale proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icon</p> <p>procs (icon) </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>procs (icon)</p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icon_size var (world)</p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>map_format var (world)</p> <p>Big icons </p> <p>Tiled icons </p> <p>Big icons</p> <p>Tiled icons </p> <p>Tiled icons</p> <p>Format: </p> <p>Scale(width, height)</p> <p>Format: </p> <p>Format:</p> <p>Scale(width, height)</p> <p>Args: </p> <p>width,height: size of the new icon</p> <p>Args: </p> <p>Args:</p> <p>width,height: size of the new icon</p> <p>The current icon is scaled to a new size.</p> <p>If world.map_format is set to TILED_ICON_MAP and the new size is not in multiples of world.icon_size, the icon will be padded with transparent pixels to the top and right as needed. See map_format for more information.</p> <p>Scale() automatically performs antialiasing to avoid unwanted artifacts.</p>"},{"location":"icon/proc/SetIntensity/","title":"SetIntensity","text":""},{"location":"icon/proc/SetIntensity/#setintensity-proc-icon","title":"SetIntensity proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>MapColors() proc (icon) </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>MapColors() proc (icon) </p> <p>icon</p> <p>procs (icon) </p> <p>MapColors() proc (icon) </p> <p>procs (icon)</p> <p>MapColors() proc (icon) </p> <p>MapColors() proc (icon)</p> <p>Format: </p> <p>SetIntensity(r,g=r,b=r)</p> <p>Format: </p> <p>Format:</p> <p>SetIntensity(r,g=r,b=r)</p> <p>Args: </p> <p>r: red component</p> <p>g: green component</p> <p>b: blue component</p> <p>Args: </p> <p>Args:</p> <p>r: red component</p> <p>g: green component</p> <p>b: blue component</p> <p>g: green component</p> <p>b: blue component</p> <p>b: blue component</p> <p>This multiplies the pixel intensities by the specified amounts. A value greater than 1.0 increases the intensity and a value less than 1.0 decreases the intensity.</p>"},{"location":"icon/proc/Shift/","title":"Shift","text":""},{"location":"icon/proc/Shift/#shift-proc-icon","title":"Shift proc (icon)","text":"<p>See also: </p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>See also: </p> <p>See also:</p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>dir var (atom)</p> <p>icon </p> <p>procs (icon) </p> <p>icon</p> <p>procs (icon) </p> <p>procs (icon)</p> <p>Format: </p> <p>Shift(dir,offset,wrap=0)</p> <p>Format: </p> <p>Format:</p> <p>Shift(dir,offset,wrap=0)</p> <p>Args: </p> <p>dir: direction in which to shift the icon</p> <p>offset: distance to shift the pixels</p> <p>wrap: if true, causes shifted pixels to wrap around to the other side</p> <p>Args: </p> <p>Args:</p> <p>dir: direction in which to shift the icon</p> <p>offset: distance to shift the pixels</p> <p>wrap: if true, causes shifted pixels to wrap around to the other side</p> <p>offset: distance to shift the pixels</p> <p>wrap: if true, causes shifted pixels to wrap around to the other side</p> <p>wrap: if true, causes shifted pixels to wrap around to the other side</p> <p>This moves all of the pixels by the specified amount in a direction. For example, Shift(NORTH,1) would move everything one pixel to the north.</p> <p>By default, pixels that move off the edge are not wrapped around; transparent pixels are shifted onto the other side. Calling with wrap=1 causes it to shift the pixels around to the other side.</p>"},{"location":"icon/proc/SwapColor/","title":"SwapColor","text":""},{"location":"icon/proc/SwapColor/#swapcolor-proc-icon","title":"SwapColor proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>rgb proc </p> <p>icon</p> <p>procs (icon) </p> <p>rgb proc </p> <p>procs (icon)</p> <p>rgb proc </p> <p>rgb proc</p> <p>Format: </p> <p>SwapColor(old_rgb,new_rgb)</p> <p>or </p> <p>SwapColor(old_rgba,new_rgba)</p> <p>Format: </p> <p>Format:</p> <p>SwapColor(old_rgb,new_rgb)</p> <p>or </p> <p>SwapColor(old_rgba,new_rgba)</p> <p>or</p> <p>Args: </p> <p>old_rgba: the old rgba value to be replaced</p> <p>new_rgba: the new rgba value to use in its place</p> <p>Args: </p> <p>Args:</p> <p>old_rgba: the old rgba value to be replaced</p> <p>new_rgba: the new rgba value to use in its place</p> <p>new_rgba: the new rgba value to use in its place</p> <p>This causes a color value in the icon's palette to be changed. You can use null in place of an RGB or RGBA value.</p> <p>If the old color is a full RGBA color with an alpha value, such as rgb(1,2,3,4) or \"#01020304\", then that exact color is the only one changed.</p> <p>If the old color is an RGB value with no alpha specified, such as rgb(1,2,3) or \"#010203\", then that color will change to the new one regardless of its alpha value, and the original icon's alpha will be kept intact. (If the new color is totally transparent, however, then the old color will be replaced with full transparency.)</p>"},{"location":"icon/proc/Turn/","title":"Turn","text":""},{"location":"icon/proc/Turn/#turn-proc-icon","title":"Turn proc (icon)","text":"<p>See also: </p> <p>Flip proc (icon) </p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>See also: </p> <p>See also:</p> <p>Flip proc (icon) </p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>Flip proc (icon)</p> <p>dir var (atom) </p> <p>icon </p> <p>procs (icon) </p> <p>dir var (atom)</p> <p>icon </p> <p>procs (icon) </p> <p>icon</p> <p>procs (icon) </p> <p>procs (icon)</p> <p>Format: </p> <p>Turn(angle)</p> <p>Format: </p> <p>Format:</p> <p>Turn(angle)</p> <p>Args: </p> <p>angle: an angle in degrees</p> <p>Args: </p> <p>Args:</p> <p>angle: an angle in degrees</p> <p>This rotates the icon clockwise by the specified amount.</p>"},{"location":"icon/proc/Turn/#_1","title":"Turn","text":"<p>Example:</p> <p>mob/verb/drink()  //this effect is very confusing!  var/icon/I = new(usr.icon)  I.Turn(90)  usr.icon = I  usr &lt;&lt; \"You feel a little tipsy!\"</p> <p>sleep(200)</p> <p>I.Turn(-90) //turn it back  usr.icon = I //should have just saved original value</p> <p>If an icon is not square, it cannot be turned.</p>"},{"location":"icon/proc/Width/","title":"Width","text":""},{"location":"icon/proc/Width/#width-proc-icon","title":"Width proc (icon)","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>Height proc </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>Height proc </p> <p>icon</p> <p>procs (icon) </p> <p>Height proc </p> <p>procs (icon)</p> <p>Height proc </p> <p>Height proc</p> <p>Format: </p> <p>Width()</p> <p>Format: </p> <p>Format:</p> <p>Width()</p> <p>This finds the width, in pixels, of the icon.</p>"},{"location":"image/var/","title":"Var","text":""},{"location":"image/var/#vars-image","title":"vars (image)","text":"<p>/image/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>/image/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>blend_mode</p> <p>color </p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>color</p> <p>icon </p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>icon</p> <p>icon_state </p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>icon_state</p> <p>text </p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>text</p> <p>dir </p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>dir</p> <p>filters </p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>filters</p> <p>loc </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>loc</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>maptext_x</p> <p>maptext_y </p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>maptext_y</p> <p>overlays </p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>overlays</p> <p>override </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>override</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>render_source</p> <p>render_target </p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>render_target</p> <p>transform </p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>transform</p> <p>underlays </p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>underlays</p> <p>vis_contents </p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>vis_contents</p> <p>x </p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>x</p> <p>y </p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>y</p> <p>z </p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>z</p> <p>type </p> <p>tag </p> <p>parent_type </p> <p>type</p> <p>tag </p> <p>parent_type </p> <p>tag</p> <p>parent_type </p> <p>parent_type</p>"},{"location":"list/associations/","title":"Associations","text":""},{"location":"list/associations/#list-associations","title":"list associations","text":"<p>See also: </p> <p>list </p> <p>list proc </p> <p>list2params proc </p> <p>params var (world) </p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>list proc </p> <p>list2params proc </p> <p>params var (world) </p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>list</p> <p>list proc </p> <p>list2params proc </p> <p>params var (world) </p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>list proc</p> <p>list2params proc </p> <p>params var (world) </p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>list2params proc</p> <p>params var (world) </p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>params var (world)</p> <p>params2list proc </p> <p>vars list var (datum) </p> <p>params2list proc</p> <p>vars list var (datum) </p> <p>vars list var (datum)</p> <p>Each unique text string or object in a list may be associated with another value. This is done by using the item as an index into the list.</p>"},{"location":"list/associations/#_1","title":"Associations","text":"<p>Example:</p> <p>var/params[0]</p> <p>params[\"player\"] = \"James Byond\" params[\"score\"] = 2000</p> <p>//List now contains (\"player\",\"score\") //These are associated with (\"James Byond\",2000)</p> <p>usr &lt;&lt; \"Looping through list items:\" var/p for(p in params)  usr &lt;&lt; \"[p] = [params[p]]\"</p> <p>usr &lt;&lt; \"Looping through array indices:\" var/i for(i=1,i&lt;=params.len,i++)  p = params[i]  usr &lt;&lt; \"[p] = [params[p]]\"</p> <p>The above example illustrates the typical way in which list associations are managed. Note that an item in the list may be added by assigning its associated value. The example could have started by doing  <code>params.Add(\"player\",\"score\")</code>   , but that would have been redundant.</p> <p><code>params.Add(\"player\",\"score\")</code></p> <p>Both  <code>for</code>   loops in the example have the same effect. The first one loops through each item in the list, and displays it along with its associated value. The second loop achieves the same thing by looping through the numerical indices (referred to as  array   indices as opposed to  associative   indices).</p> <p><code>for</code> array associative</p> <p>Since numerical indices are treated differently, you may not assign an associated value to a numerical list item. Associations must have a text string or object reference as the index item.</p> <p>Associated values default to null if none is assigned. This is also the value returned when the supplied index item does not exist in the list. The list defined above, for example, would return null for  <code>params[\"time\"]</code>   .</p> <p><code>params[\"time\"]</code></p> <p>The  <code>list()</code>   instruction may also be used to create associative lists.</p> <p><code>list()</code></p>"},{"location":"list/associations/#_2","title":"Associations","text":"<p>Example:</p> <p>var/list/lst = list(\"player\" = \"James Byond\", \"score\" = 2000)</p> <p>When the index values happen to be text strings that satisfy all the requirements for variable names, this may also be written in a convenient short-hand:</p> <p>var/list/lst = list(player = \"James Byond\", score = 2000)</p> <p>In other words, this is exactly the same syntax as for  named arguments   .</p> <p>named arguments</p>"},{"location":"list/operators/","title":"Operators","text":""},{"location":"list/operators/#list-operators","title":"list operators","text":"<p>These operators are used for accessing list items.</p> <p>[] operator </p> <p>?[] operator </p> <p>[] operator </p> <p>?[] operator </p> <p>[] operator</p> <p>?[] operator </p> <p>?[] operator</p> <p>These operators all have special meaning when applied to lists.</p> <p>+ operator </p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>+ operator </p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>+ operator</p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>+= operator</p> <p>- operator </p> <p>-= operator </p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>- operator</p> <p>-= operator </p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>-= operator</p> <p>| operator </p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>| operator</p> <p>|= operator </p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>|= operator</p> <p>&amp; operator </p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>&amp; operator</p> <p>&amp;= operator </p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>&amp;= operator</p> <p>^ operator </p> <p>^= operator </p> <p>in operator </p> <p>^ operator</p> <p>^= operator </p> <p>in operator </p> <p>^= operator</p> <p>in operator </p> <p>in operator</p>"},{"location":"list/proc/","title":"Proc","text":""},{"location":"list/proc/#procs-list","title":"procs (list)","text":"<p>See also: </p> <p>list </p> <p>list operators </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>list operators </p> <p>list</p> <p>list operators </p> <p>list operators</p> <p>Built-in list procs:</p> <p>list/proc</p> <p>Add </p> <p>Copy </p> <p>Cut </p> <p>Find </p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>list/proc</p> <p>Add </p> <p>Copy </p> <p>Cut </p> <p>Find </p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Add</p> <p>Copy </p> <p>Cut </p> <p>Find </p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Copy</p> <p>Cut </p> <p>Find </p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Cut</p> <p>Find </p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Find</p> <p>Insert </p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Insert</p> <p>Join </p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Join</p> <p>Remove </p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>Remove</p> <p>RemoveAll </p> <p>Splice </p> <p>Swap </p> <p>RemoveAll</p> <p>Splice </p> <p>Swap </p> <p>Splice</p> <p>Swap </p> <p>Swap</p>"},{"location":"list/var/","title":"Var","text":""},{"location":"list/var/#vars-list","title":"vars (list)","text":"<p>Built-in list vars:</p> <p>list/var</p> <p>len </p> <p>list/var</p> <p>len </p> <p>len</p>"},{"location":"list/proc/Add/","title":"Add","text":""},{"location":"list/proc/Add/#add-proc-list","title":"Add proc (list)","text":"<p>See also: </p> <p>+ operator </p> <p>Remove proc (list) </p> <p>RemoveAll proc (list) </p> <p>See also: </p> <p>See also:</p> <p>+ operator </p> <p>Remove proc (list) </p> <p>RemoveAll proc (list) </p> <p>+ operator</p> <p>Remove proc (list) </p> <p>RemoveAll proc (list) </p> <p>Remove proc (list)</p> <p>RemoveAll proc (list) </p> <p>RemoveAll proc (list)</p> <p>Format: </p> <p>list.Add(Item1,Item2,...)</p> <p>Format: </p> <p>Format:</p> <p>list.Add(Item1,Item2,...)</p> <p>Args: </p> <p>One or more items to add to the list.</p> <p>Args: </p> <p>Args:</p> <p>One or more items to add to the list.</p> <p>Appends the specified items to the list. If an argument is itself a list, each item in the list will be added.</p>"},{"location":"list/proc/Copy/","title":"Copy","text":""},{"location":"list/proc/Copy/#copy-proc-list","title":"Copy proc (list)","text":"<p>See also: </p> <p>Cut proc (list) </p> <p>See also: </p> <p>See also:</p> <p>Cut proc (list) </p> <p>Cut proc (list)</p> <p>Format: </p> <p>list.Copy(Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>list.Copy(Start=1,End=0)</p> <p>Returns: </p> <p>A new list.</p> <p>Returns: </p> <p>Returns:</p> <p>A new list.</p> <p>Args: </p> <p>Start: The list position in which to begin the copy.</p> <p>End: The list position immediately following the last element to be  copied.</p> <p>Args: </p> <p>Args:</p> <p>Start: The list position in which to begin the copy.</p> <p>End: The list position immediately following the last element to be  copied.</p> <p>End: The list position immediately following the last element to be  copied.</p> <p>Copy list[Start] through list[End-1] into a new list. The default end position of 0 stands for the position immediately after the end of the list, so by default the entire list is copied.</p>"},{"location":"list/proc/Cut/","title":"Cut","text":""},{"location":"list/proc/Cut/#cut-proc-list","title":"Cut proc (list)","text":"<p>See also: </p> <p>Copy proc (list) </p> <p>Insert proc (list) </p> <p>See also: </p> <p>See also:</p> <p>Copy proc (list) </p> <p>Insert proc (list) </p> <p>Copy proc (list)</p> <p>Insert proc (list) </p> <p>Insert proc (list)</p> <p>Format: </p> <p>list.Cut(Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>list.Cut(Start=1,End=0)</p> <p>Args: </p> <p>Start: The list position in which to begin the cut.</p> <p>End: The list position immediately following the last element to be  removed.</p> <p>Args: </p> <p>Args:</p> <p>Start: The list position in which to begin the cut.</p> <p>End: The list position immediately following the last element to be  removed.</p> <p>End: The list position immediately following the last element to be  removed.</p> <p>Remove the elements between list[Start] and list[End-1], decreasing the size of the list appropriately. The default end position of 0 stands for the position immediately after the end of the list, so by default the entire list is deleted.</p>"},{"location":"list/proc/Find/","title":"Find","text":""},{"location":"list/proc/Find/#find-proc-list","title":"Find proc (list)","text":"<p>Format: </p> <p>list.Find(Elem,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>list.Find(Elem,Start=1,End=0)</p> <p>Returns: </p> <p>The first position of elem in list, or 0 if not found.</p> <p>Returns: </p> <p>Returns:</p> <p>The first position of elem in list, or 0 if not found.</p> <p>Args: </p> <p>Elem: The element to find.</p> <p>Start: The list position in which to begin the search.</p> <p>End: The list position immediately following the end of the search.</p> <p>Args: </p> <p>Args:</p> <p>Elem: The element to find.</p> <p>Start: The list position in which to begin the search.</p> <p>End: The list position immediately following the end of the search.</p> <p>Start: The list position in which to begin the search.</p> <p>End: The list position immediately following the end of the search.</p> <p>End: The list position immediately following the end of the search.</p> <p>Find the first position of Elem in the list. Elements between Start and End are searched. The default end position of 0 stands for the position immediately after the end of the list, so by default the entire list is searched.</p>"},{"location":"list/proc/Insert/","title":"Insert","text":""},{"location":"list/proc/Insert/#insert-proc-list","title":"Insert proc (list)","text":"<p>See also: </p> <p>Cut proc (list) </p> <p>Copy proc (list) </p> <p>Swap proc (list) </p> <p>See also: </p> <p>See also:</p> <p>Cut proc (list) </p> <p>Copy proc (list) </p> <p>Swap proc (list) </p> <p>Cut proc (list)</p> <p>Copy proc (list) </p> <p>Swap proc (list) </p> <p>Copy proc (list)</p> <p>Swap proc (list) </p> <p>Swap proc (list)</p> <p>Format: </p> <p>list.Insert(Index,Item1,Item2...)</p> <p>Format: </p> <p>Format:</p> <p>list.Insert(Index,Item1,Item2...)</p> <p>Returns: </p> <p>The index following the inserted items.</p> <p>Returns: </p> <p>Returns:</p> <p>The index following the inserted items.</p> <p>Args: </p> <p>Index: The index where the new item will be inserted. Any value  already at that index will be pushed forward.</p> <p>Item1: A value or list of values to insert.</p> <p>Item2...: (optional) Additional items to insert, immediately after the  previous item(s).</p> <p>Args: </p> <p>Args:</p> <p>Index: The index where the new item will be inserted. Any value  already at that index will be pushed forward.</p> <p>Item1: A value or list of values to insert.</p> <p>Item2...: (optional) Additional items to insert, immediately after the  previous item(s).</p> <p>Item1: A value or list of values to insert.</p> <p>Item2...: (optional) Additional items to insert, immediately after the  previous item(s).</p> <p>Item2...: (optional) Additional items to insert, immediately after the  previous item(s).</p> <p>Insert values into a list at a specific point. Using Index=0 or Index=list.len+1 is the same as adding to the list.</p> <p>If any of the items you insert is itself a list, its elements will be inserted instead of the list itself.</p> <p>Note: This proc doesn't work with many special lists such as  <code>contents</code>   or  <code>overlays</code>   .</p> <p><code>contents</code> <code>overlays</code></p>"},{"location":"list/proc/Join/","title":"Join","text":""},{"location":"list/proc/Join/#join-proc-list","title":"Join proc (list)","text":"<p>See also: </p> <p>jointext proc </p> <p>See also: </p> <p>See also:</p> <p>jointext proc </p> <p>jointext proc</p> <p>Format: </p> <p>list.Join(Glue,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>list.Join(Glue,Start=1,End=0)</p> <p>Returns: </p> <p>A text string made up of the items in this list, joined together by Glue.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string made up of the items in this list, joined together by Glue.</p> <p>Args: </p> <p>Glue: The text that will go between each item.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>Args: </p> <p>Args:</p> <p>Glue: The text that will go between each item.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>This is exactly the same as calling jointext(List,Glue,Start,End), and is provided for convenience.</p>"},{"location":"list/proc/Remove/","title":"Remove","text":""},{"location":"list/proc/Remove/#remove-proc-list","title":"Remove proc (list)","text":"<p>See also: </p> <p>- operator </p> <p>Add proc (list) </p> <p>RemoveAll proc (list) </p> <p>See also: </p> <p>See also:</p> <p>- operator </p> <p>Add proc (list) </p> <p>RemoveAll proc (list) </p> <p>- operator</p> <p>Add proc (list) </p> <p>RemoveAll proc (list) </p> <p>Add proc (list)</p> <p>RemoveAll proc (list) </p> <p>RemoveAll proc (list)</p> <p>Format: </p> <p>list.Remove(Item1,Item2,...)</p> <p>Format: </p> <p>Format:</p> <p>list.Remove(Item1,Item2,...)</p> <p>Returns: </p> <p>1 if any items removed, 0 if not.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if any items removed, 0 if not.</p> <p>Args: </p> <p>One or more items to remove from the list.</p> <p>Args: </p> <p>Args:</p> <p>One or more items to remove from the list.</p> <p>Removes the specified items from the list. If an argument is itself a list, each item contained in it will be removed. Removal starts at the end of the list (highest index) so that this operation is an exact reversal of Add().</p>"},{"location":"list/proc/RemoveAll/","title":"RemoveAll","text":""},{"location":"list/proc/RemoveAll/#removeall-proc-list","title":"RemoveAll proc (list)","text":"<p>See also: </p> <p>Add proc (list) </p> <p>Remove proc (list) </p> <p>See also: </p> <p>See also:</p> <p>Add proc (list) </p> <p>Remove proc (list) </p> <p>Add proc (list)</p> <p>Remove proc (list) </p> <p>Remove proc (list)</p> <p>Format: </p> <p>list.RemoveAll(Item1,Item2,...)</p> <p>Format: </p> <p>Format:</p> <p>list.RemoveAll(Item1,Item2,...)</p> <p>Returns: </p> <p>Number of items removed.</p> <p>Returns: </p> <p>Returns:</p> <p>Number of items removed.</p> <p>Args: </p> <p>One or more items to remove entirely from the list.</p> <p>Args: </p> <p>Args:</p> <p>One or more items to remove entirely from the list.</p> <p>Removes all copies of the specified items from the list. If an argument is itself a list, each item contained in it will be removed.</p> <p>This is basically a faster version of the statement</p> <p>while(list.Remove(Item1,Item2,...))</p> <p>with an empty code block. For large lists this might be a big improvement because the list doesn't have to be traversed every time.</p> <p>while(list.Remove(Item1,Item2,...))</p>"},{"location":"list/proc/Splice/","title":"Splice","text":""},{"location":"list/proc/Splice/#splice-proc-list","title":"Splice proc (list)","text":"<p>See also: </p> <p>Copy proc (list) </p> <p>Cut proc (list) </p> <p>Insert proc (list) </p> <p>splicetext proc </p> <p>See also: </p> <p>See also:</p> <p>Copy proc (list) </p> <p>Cut proc (list) </p> <p>Insert proc (list) </p> <p>splicetext proc </p> <p>Copy proc (list)</p> <p>Cut proc (list) </p> <p>Insert proc (list) </p> <p>splicetext proc </p> <p>Cut proc (list)</p> <p>Insert proc (list) </p> <p>splicetext proc </p> <p>Insert proc (list)</p> <p>splicetext proc </p> <p>splicetext proc</p> <p>Format: </p> <p>list.Splice(Start=1,End=0,Item1,Item2...)</p> <p>Format: </p> <p>Format:</p> <p>list.Splice(Start=1,End=0,Item1,Item2...)</p> <p>Args: </p> <p>Start: The list index where the splice will begin.</p> <p>End: The index immediately following the last item to be cut from the list. 0 is the end of the list.</p> <p>Item1, Item2...: Items to be inserted.</p> <p>Args: </p> <p>Args:</p> <p>Start: The list index where the splice will begin.</p> <p>End: The index immediately following the last item to be cut from the list. 0 is the end of the list.</p> <p>Item1, Item2...: Items to be inserted.</p> <p>End: The index immediately following the last item to be cut from the list. 0 is the end of the list.</p> <p>Item1, Item2...: Items to be inserted.</p> <p>Item1, Item2...: Items to be inserted.</p> <p>Cuts out items from a list, and inserts new items in their place. This is basically equivalent to calling</p> <p>list.Cut(Start,End)</p> <p>and then calling</p> <p>list.Insert(Start,Item1,Item2...)</p> <p>, but faster.</p> <p>list.Cut(Start,End)</p> <p>list.Insert(Start,Item1,Item2...)</p>"},{"location":"list/proc/Splice/#_1","title":"Splice","text":"<p>Example:</p> <p>var/list/L = list(\"apple\",\"banana\",\"orange\",\"pear\")</p> <p>// cuts \"banana\" and \"orange\" and inserts four new items L.Splice(2,4,\"firetruck\",\"camel\",\"joystick\",\"balloon\")</p> <p>// prints apple, firetruck, camel, joystick, balloon, pear for(var/item in L)  usr &lt;&lt; item</p> <p>As with</p> <p>Insert()</p> <p>, any items that are lists will insert their contents instead of themselves.</p> <p>Insert()</p> <p>The</p> <p>Start</p> <p>and</p> <p>End</p> <p>index values can be negative, which count backwards from the end of the list. If the index values are out of range, there will be no error; they will simply be clamped to the beginning or end of the list. If</p> <p>End</p> <p>comes before</p> <p>Start</p> <p>, the two values are swapped.</p> <p>Start</p> <p>End</p> <p>End</p> <p>Start</p> <p>Note: This proc doesn't work with many special lists such as  <code>contents</code>   or  <code>overlays</code>   .</p> <p><code>contents</code> <code>overlays</code></p>"},{"location":"list/proc/Swap/","title":"Swap","text":""},{"location":"list/proc/Swap/#swap-proc-list","title":"Swap proc (list)","text":"<p>See also: </p> <p>Cut proc (list) </p> <p>Copy proc (list) </p> <p>Insert proc (list) </p> <p>See also: </p> <p>See also:</p> <p>Cut proc (list) </p> <p>Copy proc (list) </p> <p>Insert proc (list) </p> <p>Cut proc (list)</p> <p>Copy proc (list) </p> <p>Insert proc (list) </p> <p>Copy proc (list)</p> <p>Insert proc (list) </p> <p>Insert proc (list)</p> <p>Format: </p> <p>list.Swap(Index1,Index2)</p> <p>Format: </p> <p>Format:</p> <p>list.Swap(Index1,Index2)</p> <p>Returns: </p> <p>Nothing.</p> <p>Returns: </p> <p>Returns:</p> <p>Nothing.</p> <p>Args: </p> <p>Index1: The index (1 to list.len) of one of the items to swap.</p> <p>Index2: The index of the other item.</p> <p>Args: </p> <p>Args:</p> <p>Index1: The index (1 to list.len) of one of the items to swap.</p> <p>Index2: The index of the other item.</p> <p>Index2: The index of the other item.</p> <p>Swap two items in a list. If the list has associated values, they will be preserved. This is most useful for user-defined sorting routines.</p>"},{"location":"list/proc/Swap/#_1","title":"Swap","text":"<p>Example:</p> <p>var/item var/list/L = list(\"orange\" = 3, \"green\" = 2, \"blue\" = 5) for(item in L) world &lt;&lt; \"[item] -&gt; [L[item]]\" world &lt;&lt; \"\" L.Swap(1, 3) for(item in L) world &lt;&lt; \"[item] -&gt; [L[item]]\"</p>"},{"location":"list/proc/Swap/#_2","title":"Swap","text":"<p>Result:</p> <p>orange -&gt; 3 green -&gt; 2 blue -&gt; 5</p> <p>blue -&gt; 5 green -&gt; 2 orange -&gt; 3</p> <p>Note: This proc doesn't work with many special lists such as  <code>contents</code>   or  <code>overlays</code>   .</p> <p><code>contents</code> <code>overlays</code></p>"},{"location":"matrix/operators/","title":"Operators","text":""},{"location":"matrix/operators/#matrix-operators","title":"matrix operators","text":"<p>See also: </p> <p>matrix </p> <p>matrix procs </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix procs </p> <p>matrix</p> <p>matrix procs </p> <p>matrix procs</p> <p>See also: </p> <p>+ operator </p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>See also: </p> <p>See also:</p> <p>+ operator </p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>+ operator</p> <p>+= operator </p> <p>- operator </p> <p>-= operator </p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>+= operator</p> <p>- operator </p> <p>-= operator </p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>- operator</p> <p>-= operator </p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>-= operator</p> <p>* operator </p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>* operator</p> <p>*= operator </p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>*= operator</p> <p>/ operator </p> <p>/= operator </p> <p>~ operator </p> <p>/ operator</p> <p>/= operator </p> <p>~ operator </p> <p>/= operator</p> <p>~ operator </p> <p>~ operator</p> <p>The operators listed above have special meaning when applied to matrices.</p> <p>The assignment operators will modify an existing matrix, and can also be used directly with atom.transform. Other operators will create a new matrix.</p>"},{"location":"matrix/proc/","title":"Proc","text":""},{"location":"matrix/proc/#matrix-procs","title":"matrix procs","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>turn proc (applied to a matrix) </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>turn proc (applied to a matrix) </p> <p>matrix</p> <p>matrix operators </p> <p>turn proc (applied to a matrix) </p> <p>matrix operators</p> <p>turn proc (applied to a matrix) </p> <p>turn proc (applied to a matrix)</p> <p>matrix/proc</p> <p>New </p> <p>Add </p> <p>Interpolate </p> <p>Invert </p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>matrix/proc</p> <p>New </p> <p>Add </p> <p>Interpolate </p> <p>Invert </p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>New</p> <p>Add </p> <p>Interpolate </p> <p>Invert </p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Add</p> <p>Interpolate </p> <p>Invert </p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Interpolate</p> <p>Invert </p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Invert</p> <p>Multiply </p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Multiply</p> <p>Scale </p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Scale</p> <p>Subtract </p> <p>Translate </p> <p>Turn </p> <p>Subtract</p> <p>Translate </p> <p>Turn </p> <p>Translate</p> <p>Turn </p> <p>Turn</p>"},{"location":"matrix/proc/Add/","title":"Add","text":""},{"location":"matrix/proc/Add/#add-proc-matrix","title":"Add proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>+= operator </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>+= operator </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>+= operator </p> <p>matrix operators</p> <p>matrix procs </p> <p>+= operator </p> <p>matrix procs</p> <p>+= operator </p> <p>+= operator</p> <p>Format: </p> <p>Add(Matrix2)</p> <p>Format: </p> <p>Format:</p> <p>Add(Matrix2)</p> <p>Args: </p> <p>Matrix2: another matrix</p> <p>Args: </p> <p>Args:</p> <p>Matrix2: another matrix</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>This adds Matrix2 to the current matrix.</p>"},{"location":"matrix/proc/Interpolate/","title":"Interpolate","text":""},{"location":"matrix/proc/Interpolate/#interpolate-proc-matrix","title":"Interpolate proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix operators</p> <p>matrix procs </p> <p>matrix procs</p> <p>Format: </p> <p>Interpolate(Matrix2, t)</p> <p>Format: </p> <p>Format:</p> <p>Interpolate(Matrix2, t)</p> <p>Args: </p> <p>Matrix2: Another matrix</p> <p>t: The interpolation factor: from 0 (src) to 1 (Matrix2). Usually this is a value between 0 and 1.</p> <p>Args: </p> <p>Args:</p> <p>Matrix2: Another matrix</p> <p>t: The interpolation factor: from 0 (src) to 1 (Matrix2). Usually this is a value between 0 and 1.</p> <p>t: The interpolation factor: from 0 (src) to 1 (Matrix2). Usually this is a value between 0 and 1.</p> <p>Calculates and returns a new matrix between src and Matrix2. If t is 0.5, then the result will be exactly halfway between both matrices.</p> <p>There are many ways to interpolate matrices. Whenever possible, DM will interpolate by doing scaling and/or shearing first, then rotation, then translation. This is done by trying to find the angle of rotation of each matrix first; a rotation of 180\u00b0 is counted as a flip rather than a rotation.</p> <p>It is not strictly necessary for t to be between 0 and 1. Using a value out of bounds will extrapolate a matrix, continuing the change as far as t.</p>"},{"location":"matrix/proc/Invert/","title":"Invert","text":""},{"location":"matrix/proc/Invert/#invert-proc-matrix","title":"Invert proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>~ operator </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>~ operator </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>~ operator </p> <p>matrix operators</p> <p>matrix procs </p> <p>~ operator </p> <p>matrix procs</p> <p>~ operator </p> <p>~ operator</p> <p>Format: </p> <p>Invert()</p> <p>Format: </p> <p>Format:</p> <p>Invert()</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>This inverts the current matrix, if possible.</p> <p>Not all matrices can be inverted. If it's not possible, the matrix is said to be degenerate. This happens if, for example, all of the values in the matrix are zero. A degenerate matrix will not be changed by this proc.</p>"},{"location":"matrix/proc/Multiply/","title":"Multiply","text":""},{"location":"matrix/proc/Multiply/#multiply-proc-matrix","title":"Multiply proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>*= operator </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>*= operator </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>*= operator </p> <p>matrix operators</p> <p>matrix procs </p> <p>*= operator </p> <p>matrix procs</p> <p>*= operator </p> <p>*= operator</p> <p>Format: </p> <p>Multiply(Matrix2)</p> <p>or </p> <p>Multiply(n)</p> <p>Format: </p> <p>Format:</p> <p>Multiply(Matrix2)</p> <p>or </p> <p>Multiply(n)</p> <p>or</p> <p>Multiply(n)</p> <p>Args: </p> <p>Matrix2: another matrix</p> <p>n: a number</p> <p>Args: </p> <p>Args:</p> <p>Matrix2: another matrix</p> <p>n: a number</p> <p>n: a number</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>This multiplies the current matrix by Matrix2 or n. If the n format is used, this is just like scaling the whole matrix. If another matrix is multiplied, then it is like doing the two transformations in order: src, then Matrix2.</p> <p>Multiplication of one matrix by another depends on the order. You may get a different result multiplying A * B vs. B * A.</p>"},{"location":"matrix/proc/Scale/","title":"Scale","text":""},{"location":"matrix/proc/Scale/#scale-proc-matrix","title":"Scale proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix operators</p> <p>matrix procs </p> <p>matrix procs</p> <p>Format: </p> <p>Scale(x,y)</p> <p>Format: </p> <p>Format:</p> <p>Scale(x,y)</p> <p>Args: </p> <p>x: The amount of scaling to do in the x direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>Args: </p> <p>Args:</p> <p>x: The amount of scaling to do in the x direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>The matrix is scaled by the appropriate amounts.</p> <p>If y is omitted, x is used for both. E.g., Scale(2) is equivalent to Scale(2,2).</p>"},{"location":"matrix/proc/Subtract/","title":"Subtract","text":""},{"location":"matrix/proc/Subtract/#subtract-proc-matrix","title":"Subtract proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>-= operator </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>-= operator </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>-= operator </p> <p>matrix operators</p> <p>matrix procs </p> <p>-= operator </p> <p>matrix procs</p> <p>-= operator </p> <p>-= operator</p> <p>Format: </p> <p>Subtract(Matrix2)</p> <p>Format: </p> <p>Format:</p> <p>Subtract(Matrix2)</p> <p>Args: </p> <p>Matrix2: another matrix</p> <p>Args: </p> <p>Args:</p> <p>Matrix2: another matrix</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>This subtracts Matrix2 from the current matrix.</p>"},{"location":"matrix/proc/Translate/","title":"Translate","text":""},{"location":"matrix/proc/Translate/#translate-proc-matrix","title":"Translate proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>matrix operators</p> <p>matrix procs </p> <p>matrix procs</p> <p>Format: </p> <p>Translate(x,y)</p> <p>Format: </p> <p>Format:</p> <p>Translate(x,y)</p> <p>Args: </p> <p>x: The amount of scaling to do in the x direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>Args: </p> <p>Args:</p> <p>x: The amount of scaling to do in the x direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>y: The amount of scaling to do in the y direction</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>The matrix is translated (moved) by the appropriate amounts. The x and y offsets applied by translation are in pixels.</p> <p>If y is omitted, x is used for both. E.g., Translate(2) is equivalent to Translate(2,2).</p>"},{"location":"matrix/proc/Turn/","title":"Turn","text":""},{"location":"matrix/proc/Turn/#turn-proc-matrix","title":"Turn proc (matrix)","text":"<p>See also: </p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>turn proc (applied to a matrix) </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>matrix operators </p> <p>matrix procs </p> <p>turn proc (applied to a matrix) </p> <p>matrix</p> <p>matrix operators </p> <p>matrix procs </p> <p>turn proc (applied to a matrix) </p> <p>matrix operators</p> <p>matrix procs </p> <p>turn proc (applied to a matrix) </p> <p>matrix procs</p> <p>turn proc (applied to a matrix) </p> <p>turn proc (applied to a matrix)</p> <p>Format: </p> <p>Turn(angle)</p> <p>Format: </p> <p>Format:</p> <p>Turn(angle)</p> <p>Args: </p> <p>angle: The angle of clockwise rotation, in degrees</p> <p>Args: </p> <p>Args:</p> <p>angle: The angle of clockwise rotation, in degrees</p> <p>Returns: </p> <p>src</p> <p>Returns: </p> <p>Returns:</p> <p>src</p> <p>The matrix is rotated clockwise, by the angle given.</p>"},{"location":"mob/proc/","title":"Proc","text":""},{"location":"mob/proc/#procs-mob","title":"procs (mob)","text":"<p>Built-in mob procs:</p> <p>mob/proc</p> <p>Bump </p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>mob/proc</p> <p>Bump </p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Bump</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Click</p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Cross proc</p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Crossed proc</p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>DblClick</p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Del</p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Enter</p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Entered</p> <p>Exit </p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exit</p> <p>Exited </p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exited</p> <p>Login </p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Login</p> <p>Logout </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Logout</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseUp</p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseWheel</p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Move</p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>New</p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Read</p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Stat</p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Topic</p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncross proc</p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncrossed proc</p> <p>Write </p> <p>Write</p>"},{"location":"mob/var/","title":"Var","text":""},{"location":"mob/var/#vars-mob","title":"vars (mob)","text":"<p>Built-in mob vars:</p> <p>mob/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mob/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance_flags</p> <p>blend_mode </p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>blend_mode</p> <p>ckey </p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>ckey</p> <p>client </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>client</p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>color</p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>contents</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>filters</p> <p>gender </p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>gender</p> <p>group </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>group</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon_state</p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>invisibility</p> <p>underlays </p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>underlays</p> <p>overlays </p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>overlays</p> <p>key </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>key</p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>layer</p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>luminosity</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_x</p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_y</p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>animate_movement</p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>loc</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>name</p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>opacity</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>parent_type</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_source</p> <p>render_target </p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_target</p> <p>see_infrared </p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>see_infrared</p> <p>see_invisible </p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>see_invisible</p> <p>see_in_dark </p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>see_in_dark</p> <p>sight </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>sight</p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>suffix</p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>tag</p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>text</p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>transform</p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>type</p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vars</p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>verbs</p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_contents</p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_flags</p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_locs</p> <p>x </p> <p>y </p> <p>z </p> <p>x</p> <p>y </p> <p>z </p> <p>y</p> <p>z </p> <p>z</p>"},{"location":"mob/proc/Login/","title":"Login","text":""},{"location":"mob/proc/Login/#login-proc-mob","title":"Login proc (mob)","text":"<p>See also: </p> <p>Logout proc (mob) </p> <p>client var (mob) </p> <p>See also: </p> <p>See also:</p> <p>Logout proc (mob) </p> <p>client var (mob) </p> <p>Logout proc (mob)</p> <p>client var (mob) </p> <p>client var (mob)</p> <p>Format: </p> <p>Login()</p> <p>Format: </p> <p>Format:</p> <p>Login()</p> <p>When: </p> <p>Called when a player's client tries to connect to a mob. This is called  by default from client.New(), when the player logs into the world.</p> <p>When: </p> <p>When:</p> <p>Called when a player's client tries to connect to a mob. This is called  by default from client.New(), when the player logs into the world.</p> <p>Default action: </p> <p>If the mob has no location, place it near (1,1,1) if possible. Change  the player's stat object (client.statobj) to the mob.</p> <p>Default action: </p> <p>Default action:</p> <p>If the mob has no location, place it near (1,1,1) if possible. Change  the player's stat object (client.statobj) to the mob.</p> <p>One can typically tell if a player is connecting to a fresh mob versus reconnecting to an existing one by testing if the mob's location is null.</p>"},{"location":"mob/proc/Logout/","title":"Logout","text":""},{"location":"mob/proc/Logout/#logout-proc-mob","title":"Logout proc (mob)","text":"<p>See also: </p> <p>Login proc (mob) </p> <p>client var (mob) </p> <p>key var (mob) </p> <p>See also: </p> <p>See also:</p> <p>Login proc (mob) </p> <p>client var (mob) </p> <p>key var (mob) </p> <p>Login proc (mob)</p> <p>client var (mob) </p> <p>key var (mob) </p> <p>client var (mob)</p> <p>key var (mob) </p> <p>key var (mob)</p> <p>Format: </p> <p>Logout()</p> <p>Format: </p> <p>Format:</p> <p>Logout()</p> <p>When: </p> <p>Called when a player's client has disconnected from a mob. This happens  in client.Del() when the player logs out of the world. It may also  happen when the player switches from one mob to another.</p> <p>When: </p> <p>When:</p> <p>Called when a player's client has disconnected from a mob. This happens  in client.Del() when the player logs out of the world. It may also  happen when the player switches from one mob to another.</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p> <p>One may wish to distinguish between a player who has disconnected from the game and one who is simply switching from one mob to another. In the case of a player switching to another mob, by the time  <code>Logout()</code>   is called, the original mob's key will be null, whereas the key will still be non-null in the case of a player disconnecting from the game.</p> <p><code>Logout()</code></p>"},{"location":"mutable_appearance/var/","title":"Var","text":""},{"location":"mutable_appearance/var/#vars-mutable-appearance","title":"vars (mutable appearance)","text":"<p>Built-in mutable appearance vars:</p> <p>mob/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mob/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>blend_mode</p> <p>color </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>color</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>filters</p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>gender</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>icon_state</p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>invisibility</p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>underlays</p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>overlays</p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>layer</p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>luminosity</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>maptext_x</p> <p>maptext_y </p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>maptext_y</p> <p>animate_movement </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>animate_movement</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>name</p> <p>opacity </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>opacity</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>render_source</p> <p>render_target </p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>render_target</p> <p>screen_loc </p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>screen_loc</p> <p>suffix </p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>suffix</p> <p>text </p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>text</p> <p>transform </p> <p>verbs </p> <p>vis_flags </p> <p>transform</p> <p>verbs </p> <p>vis_flags </p> <p>verbs</p> <p>vis_flags </p> <p>vis_flags</p>"},{"location":"obj/proc/","title":"Proc","text":""},{"location":"obj/proc/#procs-obj","title":"procs (obj)","text":"<p>Built-in obj procs:</p> <p>obj/proc</p> <p>Bump </p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>obj/proc</p> <p>Bump </p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Bump</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Click</p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Cross proc</p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Crossed proc</p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>DblClick</p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Del</p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Enter</p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Entered</p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exit</p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Exited</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseUp</p> <p>MouseWheel </p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>MouseWheel</p> <p>Move </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Move</p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>New</p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Read</p> <p>Stat </p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Stat</p> <p>Topic </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Topic</p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncross proc</p> <p>Uncrossed proc </p> <p>Write </p> <p>Uncrossed proc</p> <p>Write </p> <p>Write</p>"},{"location":"obj/var/","title":"Var","text":""},{"location":"obj/var/#vars-obj","title":"vars (obj)","text":"<p>Built-in obj vars:</p> <p>obj/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>obj/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>blend_mode</p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>color</p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>contents</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>filters</p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>gender</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon_state</p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>invisibility</p> <p>underlays </p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>underlays</p> <p>overlays </p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>overlays</p> <p>layer </p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>layer</p> <p>luminosity </p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>luminosity</p> <p>maptext </p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext</p> <p>maptext_width </p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_width</p> <p>maptext_height </p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_height</p> <p>maptext_x </p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_x</p> <p>maptext_y </p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>maptext_y</p> <p>animate_movement </p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>animate_movement</p> <p>loc </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>loc</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>name</p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>opacity</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>parent_type</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_source</p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_target</p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>suffix</p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>tag</p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>text</p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>transform</p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>type</p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vars</p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>verbs</p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_contents</p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_flags</p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_locs</p> <p>x </p> <p>y </p> <p>z </p> <p>x</p> <p>y </p> <p>z </p> <p>y</p> <p>z </p> <p>z</p>"},{"location":"operator/%21/","title":"!","text":""},{"location":"operator/%21/#operator","title":"! operator","text":"<p>See also: </p> <p>&amp;&amp; operator </p> <p>operators </p> <p>|| operator </p> <p>See also: </p> <p>See also:</p> <p>&amp;&amp; operator </p> <p>operators </p> <p>|| operator </p> <p>&amp;&amp; operator</p> <p>operators </p> <p>|| operator </p> <p>operators</p> <p>|| operator </p> <p>|| operator</p> <p>Format: </p> <p>!A</p> <p>Format: </p> <p>Format:</p> <p>!A</p> <p>Returns: </p> <p>1 if A is a false value (zero, an empty string, or null); 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is a false value (zero, an empty string, or null); 0 otherwise.</p>"},{"location":"operator/%21%3D/","title":"!=","text":""},{"location":"operator/%21%3D/#operator","title":"!= operator","text":"<p>See also: </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>&lt;&gt; operator </p> <p>== operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>&lt;&gt; operator </p> <p>== operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>&lt;&gt; operator </p> <p>== operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>&lt; operator</p> <p>&lt;&gt; operator </p> <p>== operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>&lt;&gt; operator</p> <p>== operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>== operator</p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>~= operator</p> <p>~! operator </p> <p>operators </p> <p>~! operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A != B</p> <p>Format: </p> <p>Format:</p> <p>A != B</p> <p>Returns: </p> <p>1 if A is not equal to B; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is not equal to B; 0 otherwise</p> <p>This is identical to the &lt;&gt; operator.</p> <p>To check if A and B are not equivalent, use the ~! operator.</p>"},{"location":"operator/%25/","title":"%","text":""},{"location":"operator/%25/#operator","title":"% operator","text":"<p>See also: </p> <p>%= operator </p> <p>%% operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>%= operator </p> <p>%% operator </p> <p>operators </p> <p>%= operator</p> <p>%% operator </p> <p>operators </p> <p>%% operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A % B</p> <p>Format: </p> <p>Format:</p> <p>A % B</p> <p>Returns: </p> <p>The remainder of A / B, where both A and B are integers.</p> <p>Returns: </p> <p>Returns:</p> <p>The remainder of A / B, where both A and B are integers.</p> <p>A % B</p> <p>is read \"A modulo B\", which stands for the remainder of A divided by B.</p> <p>A % B</p> <p>This operator only works with integer values, for legacy reasons. A and B are truncated to integers before the modulo operation. There are uses for the integer truncation, but if you don't want that and want the fractional modulo instead, you can now use the</p> <p>%%</p> <p>operator.</p> <p>%%</p>"},{"location":"operator/%2525%2525/","title":"%25%25","text":""},{"location":"operator/%2525%2525/#operator","title":"%% operator","text":"<p>See also: </p> <p>% operator </p> <p>%%= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>% operator </p> <p>%%= operator </p> <p>operators </p> <p>% operator</p> <p>%%= operator </p> <p>operators </p> <p>%%= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A %% B</p> <p>Format: </p> <p>Format:</p> <p>A %% B</p> <p>Returns: </p> <p>The remainder of A / B.</p> <p>Returns: </p> <p>Returns:</p> <p>The remainder of A / B.</p> <p>A %% B</p> <p>is read \"A modulo B\", which stands for the remainder of A divided by B.</p> <p>A %% B</p> <p>This is a newer version of the</p> <p>%</p> <p>operator that supports all numbers, not just integers. It is equivalent to</p> <p>B * fract(A / B)</p> <p>. The</p> <p>%</p> <p>operator does the same thing, but truncates A and B to integers first.</p> <p>%</p> <p>B * fract(A / B)</p> <p>%</p>"},{"location":"operator/%2525%2525%3D/","title":"%25%25=","text":""},{"location":"operator/%2525%2525%3D/#operator","title":"%%= operator","text":"<p>See also: </p> <p>%% operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>%% operator </p> <p>operators </p> <p>%% operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A %%= B</p> <p>Format: </p> <p>Format:</p> <p>A %%= B</p> <p>Set A equal to</p> <p>A %% B</p> <p>. It is shorthand for</p> <p>A = A %% B</p> <p>.</p> <p>A %% B</p> <p>A = A %% B</p> <p>A %% B</p> <p>is read \"A modulo B\", which stands for the remainder of A divided by B. This version of the operator works with fractional values for A and B.</p> <p>A %% B</p>"},{"location":"operator/%252e/","title":"%2e","text":""},{"location":"operator/%252e/#operator","title":". operator","text":"<p>See also: </p> <p>: operator </p> <p>?. operator </p> <p>?: operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>: operator </p> <p>?. operator </p> <p>?: operator </p> <p>operators </p> <p>: operator</p> <p>?. operator </p> <p>?: operator </p> <p>operators </p> <p>?. operator</p> <p>?: operator </p> <p>operators </p> <p>?: operator</p> <p>operators </p> <p>operators</p> <p>This is used to access the procs and vars of a prototyped object. The variable need not actually contain a value with the specified type, but must at least be a type with the specified variable or a runtime error will occur, causing the proc to crash.</p>"},{"location":"operator/%252e/#_1","title":"%2e","text":"<p>Example:</p> <p>var/mob/M = new M.name = \"futz\" // assign 'name' mob var M.Move(0) // call 'Move()' mob proc</p> <p>This is the same as the</p> <p>:</p> <p>operator, except that the compiler checks to see if the var type has this property, and throws a compiler error if not. It is good practice to use the</p> <p>.</p> <p>operator whenever possible, so more potential problems can be caught during compilation.</p> <p>:</p> <p>.</p> <p>If</p> <p>.</p> <p>follows a proc call, a list lookup, or a complex expression where the type can't be known, it will act like</p> <p>:</p> <p>instead.</p> <p>.</p> <p>:</p>"},{"location":"operator/%253c%253c/","title":"%3c%3c","text":""},{"location":"operator/%253c%253c/#operator","title":"&lt;&lt; operator","text":"<p>See also: </p> <p>&lt;&lt; operator (savefile) </p> <p>&lt;&lt; output operator </p> <p>&lt;&lt; shift operator </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; operator (savefile) </p> <p>&lt;&lt; output operator </p> <p>&lt;&lt; shift operator </p> <p>&lt;&lt; operator (savefile)</p> <p>&lt;&lt; output operator </p> <p>&lt;&lt; shift operator </p> <p>&lt;&lt; output operator</p> <p>&lt;&lt; shift operator </p> <p>&lt;&lt; shift operator</p>"},{"location":"operator/%253c%253c%3D/","title":"%3c%3c=","text":""},{"location":"operator/%253c%253c%3D/#operator","title":"&lt;&lt;= operator","text":"<p>See also: </p> <p>&gt;&gt;= operator </p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt;= operator </p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>&gt;&gt;= operator</p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>&lt;&lt; shift operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A &lt;&lt;= B</p> <p>Format: </p> <p>Format:</p> <p>A &lt;&lt;= B</p> <p>Set A equal to A &lt;&lt; B. It is shorthand for A = A &lt;&lt; B.</p>"},{"location":"operator/%253c%253e/","title":"%3c%3e","text":""},{"location":"operator/%253c%253e/#operator","title":"&lt;&gt; operator","text":"<p>See also: </p> <p>!= operator </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>!= operator </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>!= operator</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&lt; operator</p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>== operator</p> <p>operators </p> <p>sorttextEx proc </p> <p>operators</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>A &lt;&gt; B</p> <p>Format: </p> <p>Format:</p> <p>A &lt;&gt; B</p> <p>Returns: </p> <p>1 if A is not equal to B; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is not equal to B; 0 otherwise</p> <p>This is identical to the != operator.</p>"},{"location":"operator/%253c/","title":"%3c","text":""},{"location":"operator/%253c/#operator","title":"&lt; operator","text":"<p>See also: </p> <p>&lt;= operator </p> <p>&gt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;= operator </p> <p>&gt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&lt;= operator</p> <p>&gt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&gt; operator</p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>== operator</p> <p>operators </p> <p>sorttextEx proc </p> <p>operators</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>A &lt; B</p> <p>Format: </p> <p>Format:</p> <p>A &lt; B</p> <p>Returns: </p> <p>1 if A is less than B; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is less than B; 0 otherwise.</p> <p>If A and B are text strings, a case sensitive comparison is performed (like sorttextEx()).</p>"},{"location":"operator/%253c%3D/","title":"%3c=","text":""},{"location":"operator/%253c%3D/#operator","title":"&lt;= operator","text":"<p>See also: </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&lt; operator</p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>== operator</p> <p>operators </p> <p>sorttextEx proc </p> <p>operators</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>A &lt;= B</p> <p>Format: </p> <p>Format:</p> <p>A &lt;= B</p> <p>Returns: </p> <p>1 if A is less than or equal to B; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is less than or equal to B; 0 otherwise.</p> <p>If A and B are text strings, a case sensitive comparison is performed (like sorttextEx()).</p>"},{"location":"operator/%253e%253e/","title":"%3e%3e","text":""},{"location":"operator/%253e%253e/#operator","title":"&gt;&gt; operator","text":"<p>See also: </p> <p>&gt;&gt; input operator </p> <p>&gt;&gt; operator (savefile) </p> <p>&gt;&gt; shift operator </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; input operator </p> <p>&gt;&gt; operator (savefile) </p> <p>&gt;&gt; shift operator </p> <p>&gt;&gt; input operator</p> <p>&gt;&gt; operator (savefile) </p> <p>&gt;&gt; shift operator </p> <p>&gt;&gt; operator (savefile)</p> <p>&gt;&gt; shift operator </p> <p>&gt;&gt; shift operator</p>"},{"location":"operator/%253e%253e%3D/","title":"%3e%3e=","text":""},{"location":"operator/%253e%253e%3D/#operator","title":"&gt;&gt;= operator","text":"<p>See also: </p> <p>&gt;&gt; shift operator </p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; shift operator </p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>&gt;&gt; shift operator</p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>&lt;&lt;= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A &gt;&gt;= B</p> <p>Format: </p> <p>Format:</p> <p>A &gt;&gt;= B</p> <p>Set A equal to A &gt;&gt; B. It is shorthand for A = A &gt;&gt; B.</p>"},{"location":"operator/%253e/","title":"%3e","text":""},{"location":"operator/%253e/#operator","title":"&gt; operator","text":"<p>See also: </p> <p>&gt;= operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>&gt;= operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&gt;= operator</p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&lt; operator</p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>== operator</p> <p>operators </p> <p>sorttextEx proc </p> <p>operators</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>A &gt; B</p> <p>Format: </p> <p>Format:</p> <p>A &gt; B</p> <p>Returns: </p> <p>1 if A is greater than B; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is greater than B; 0 otherwise.</p> <p>If A and B are text strings, a case sensitive comparison is performed (like sorttextEx()).</p>"},{"location":"operator/%253e%3D/","title":"%3e=","text":""},{"location":"operator/%253e%3D/#operator","title":"&gt;= operator","text":"<p>See also: </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>&lt; operator</p> <p>== operator </p> <p>operators </p> <p>sorttextEx proc </p> <p>== operator</p> <p>operators </p> <p>sorttextEx proc </p> <p>operators</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>A &gt;= B</p> <p>Format: </p> <p>Format:</p> <p>A &gt;= B</p> <p>Returns: </p> <p>1 if A is greater or equal to B; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A is greater or equal to B; 0 otherwise.</p> <p>If A and B are text strings, a case sensitive comparison is performed (like sorttextEx()).</p>"},{"location":"operator/%253f%252e/","title":"%3f%2e","text":""},{"location":"operator/%253f%252e/#operator","title":"?. operator","text":"<p>See also: </p> <p>. operator </p> <p>: operator </p> <p>?: operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>. operator </p> <p>: operator </p> <p>?: operator </p> <p>operators </p> <p>. operator</p> <p>: operator </p> <p>?: operator </p> <p>operators </p> <p>: operator</p> <p>?: operator </p> <p>operators </p> <p>?: operator</p> <p>operators </p> <p>operators</p> <p>This is used to access the procs and vars of a prototyped object. It is just like the . operator, but if the object is null, the access does not happen and there will be no runtime error. (A runtime error can still happen if the object is valid but is a different type that doesn't have the property available.)</p> <p>When used in an expression to read a value or call a proc from a null object, the result of the expression is null. When used for assignment, the assignment will not happen, and the expression being assigned will not be evaluated, if the object is null.</p>"},{"location":"operator/%253f%252e/#_1","title":"%3f%2e","text":"<p>Example:</p> <p>var/mob/M // M is null by default M?.name = \"futz\" // assignment is skipped because M is null world &lt;&lt; M?.name // M?.name reads as null because M is null M?.Move(loc) // call Move() mob proc; again nothing happens</p> <p>M = new M?.name = \"futz\" // assignment is made because M is valid now world &lt;&lt; M?.name // outputs \"futz\" M?.Move(loc) // call Move() mob proc for M</p> <p>When reading  <code>A?.B</code>   , it's roughly equivalent to  <code>A &amp;&amp; A.B</code>   except that  <code>A</code>   is only evalulated once, even if it's a complex expression like a proc call. Making an assignment to  <code>A?.B</code>   is the same: A is evalulated only once, and if it's not null then an assignment is made to its B var.</p> <p><code>A?.B</code> <code>A &amp;&amp; A.B</code> <code>A</code> <code>A?.B</code></p> <p>For a version of this operator that doesn't check at compile time if the property is available, use the ?: operator instead.</p> <p>If ?. is used after a proc call, a list lookup, or a complex expression where the type can't be known, it will act like ?: instead.</p>"},{"location":"operator/%253f/","title":"%3f","text":""},{"location":"operator/%253f/#operator","title":"? operator","text":"<p>See also: </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>Expr ? TrueExpr : FalseExpr</p> <p>Format: </p> <p>Format:</p> <p>Expr ? TrueExpr : FalseExpr</p> <p>If Expr is true, this evaluates and returns TrueExpr. Otherwise, it evaluates and returns FalseExpr.</p>"},{"location":"operator/%253f%5B%5D/","title":"%3f[]","text":""},{"location":"operator/%253f%5B%5D/#operator","title":"?[] operator","text":"<p>See also: </p> <p>list </p> <p>operators </p> <p>[] operator </p> <p>?. operator </p> <p>?: operator </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>operators </p> <p>[] operator </p> <p>?. operator </p> <p>?: operator </p> <p>list</p> <p>operators </p> <p>[] operator </p> <p>?. operator </p> <p>?: operator </p> <p>operators</p> <p>[] operator </p> <p>?. operator </p> <p>?: operator </p> <p>[] operator</p> <p>?. operator </p> <p>?: operator </p> <p>?. operator</p> <p>?: operator </p> <p>?: operator</p> <p>This is the null-conditional list index operator. It is used to access an element of a list, IF that list is not null. If the list is null, then the access will not happen and the index expression inside the brackets won't be evaluated. If this is the left-hand side of an assignment operator, such as</p> <p>list?[index] = rhs</p> <p>, then</p> <p>rhs</p> <p>is also not evaluated when the list is null.</p> <p>list?[index] = rhs</p> <p>rhs</p>"},{"location":"operator/%253f%5B%5D/#_1","title":"%3f[]","text":"<p>Example:</p> <p>var/list/good = list(5,6,7) var/list/bad var/idx = 1</p> <p>// prints null because bad is null; idx is not changed world &lt;&lt; json_encode(bad?[idx++]) // prints 5 because good is not null, and good[1] is 5; idx changes to 2 world &lt;&lt; json_encode(good?[1])</p> <p>idx = 1 // reset idx</p> <p>// bad is null, so idx does not advance and myproc() is not called bad?[idx++] = myproc() // good is not null, so idx advances after read, and myproc() is called good?[idx++] = myproc()</p> <p>This operator cannot be overloaded, but overloads to the</p> <p>[]</p> <p>operator will apply to this operator as well.</p> <p>[]</p>"},{"location":"operator/%253f%7BFULLWIDTH%20COLON%7D/","title":"%3f{FULLWIDTH COLON}","text":""},{"location":"operator/%253f%7BFULLWIDTH%20COLON%7D/#operator","title":"?: operator","text":"<p>See also: </p> <p>. operator </p> <p>: operator </p> <p>?. operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>. operator </p> <p>: operator </p> <p>?. operator </p> <p>operators </p> <p>. operator</p> <p>: operator </p> <p>?. operator </p> <p>operators </p> <p>: operator</p> <p>?. operator </p> <p>operators </p> <p>?. operator</p> <p>operators </p> <p>operators</p> <p>This is used to access the procs and vars of an object. It is just like the : operator, but if the object is null, the access does not happen and there will be no runtime error. (A runtime error can still happen if the object is valid but the property is not available.)</p> <p>When used in an expression to read a value or call a proc from a null object, the result of the expression is null. When used for assignment, the assignment will not happen, and the expression being assigned will not be evaluated, if the object is null.</p>"},{"location":"operator/%253f%7BFULLWIDTH%20COLON%7D/#_1","title":"%3f{FULLWIDTH COLON}","text":"<p>Example:</p> <p>var/mob/M // M is null by default M?:name = \"futz\" // assignment is skipped because M is null world &lt;&lt; M?:name // M?:name reads as null because M is null M?:Move(loc) // call Move() mob proc; again nothing happens</p> <p>M = new M?:name = \"futz\" // assignment is made because M is valid now world &lt;&lt; M?:name // outputs \"futz\" M?:Move(loc) // call Move() mob proc for M</p> <p>When reading  <code>A?:B</code>   , it's roughly equivalent to  <code>A &amp;&amp; A:B</code>   except that  <code>A</code>   is only evalulated once, even if it's a complex expression like a proc call. Making an assignment to  <code>A?:B</code>   is the same: A is evalulated only once, and if it's not null then an assignment is made to its B var.</p> <p><code>A?:B</code> <code>A &amp;&amp; A:B</code> <code>A</code> <code>A?:B</code></p> <p>This is identical to the ?. operator, except that ?. will check at compile time if the property is valid for the object type (if known). For this reason ?. is usually safer.</p>"},{"location":"operator/%25%3D/","title":"%=","text":""},{"location":"operator/%25%3D/#operator","title":"%= operator","text":"<p>See also: </p> <p>% operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>% operator </p> <p>operators </p> <p>% operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A %= B</p> <p>Format: </p> <p>Format:</p> <p>A %= B</p> <p>Set A equal to</p> <p>A % B</p> <p>. It is shorthand for</p> <p>A = A % B</p> <p>.</p> <p>A % B</p> <p>A = A % B</p> <p>A % B</p> <p>is read \"A modulo B\", which stands for the remainder of A divided by B. A and B are truncated to integers before the modulo; use</p> <p>%%=</p> <p>instead to work with fractional values.</p> <p>A % B</p> <p>%%=</p>"},{"location":"operator/%26%26/","title":"&&","text":""},{"location":"operator/%26%26/#operator","title":"&amp;&amp; operator","text":"<p>See also: </p> <p>! operator </p> <p>operators </p> <p>|| operator </p> <p>See also: </p> <p>See also:</p> <p>! operator </p> <p>operators </p> <p>|| operator </p> <p>! operator</p> <p>operators </p> <p>|| operator </p> <p>operators</p> <p>|| operator </p> <p>|| operator</p> <p>Format: </p> <p>A &amp;&amp; B</p> <p>Format: </p> <p>Format:</p> <p>A &amp;&amp; B</p> <p>Returns: </p> <p>True value if both A and B are true (neither zero, an empty string, nor null); the first false value otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>True value if both A and B are true (neither zero, an empty string, nor null); the first false value otherwise</p> <p>The first false value from left to right completes the evaluation (a practice known as short-circuiting). The return value is equal to the last argument to be evaluated.</p>"},{"location":"operator/%26%26%3D/","title":"&&=","text":""},{"location":"operator/%26%26%3D/#operator","title":"&amp;&amp;= operator","text":"<p>See also: </p> <p>&amp;&amp; operator </p> <p>|| operator </p> <p>||= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&amp;&amp; operator </p> <p>|| operator </p> <p>||= operator </p> <p>operators </p> <p>&amp;&amp; operator</p> <p>|| operator </p> <p>||= operator </p> <p>operators </p> <p>|| operator</p> <p>||= operator </p> <p>operators </p> <p>||= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A &amp;&amp;= B</p> <p>Format: </p> <p>Format:</p> <p>A &amp;&amp;= B</p> <p>Returns: </p> <p>Value of</p> <p>(A &amp;&amp; B)</p> <p>after it has been assigned to A. This expression can stand by itself; its result does not need to be assigned to anything else.</p> <p>Returns: </p> <p>Returns:</p> <p>Value of</p> <p>(A &amp;&amp; B)</p> <p>after it has been assigned to A. This expression can stand by itself; its result does not need to be assigned to anything else.</p> <p>(A &amp;&amp; B)</p> <p>First A is evaluated. If its value is true, B will be evaluated and assigned to A. If A is false, B will not be evaluated and A will remain unchanged.</p> <p>Note that this is slightly different from</p> <p>if(A) A = B</p> <p>if A is a complex expression such as</p> <p>list[index++]</p> <p>, because the expression is only evaluated once.</p> <p>if(A) A = B</p> <p>list[index++]</p> <p>This operator cannot be overloaded.</p>"},{"location":"operator/%26/","title":"&","text":""},{"location":"operator/%26/#operator","title":"&amp; operator","text":"<p>See also: </p> <p>&amp;= operator </p> <p>operators </p> <p>| operator </p> <p>See also: </p> <p>See also:</p> <p>&amp;= operator </p> <p>operators </p> <p>| operator </p> <p>&amp;= operator</p> <p>operators </p> <p>| operator </p> <p>operators</p> <p>| operator </p> <p>| operator</p> <p>Format: </p> <p>A &amp; B</p> <p>Format: </p> <p>Format:</p> <p>A &amp; B</p> <p>Returns: </p> <p>The binary \"and\" of A and B.</p> <p>Returns: </p> <p>Returns:</p> <p>The binary \"and\" of A and B.</p> <p>A and B must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>If A and B are lists, the result is a list that contains only items that were in both lists, in the order of list A.</p> <p>If A is an icon or /icon datum, it is blended with B which can be either a color or another icon. This is identical to the + operator. Transparent areas in either icon will be transparent in the result.</p>"},{"location":"operator/%26%3D/","title":"&=","text":""},{"location":"operator/%26%3D/#operator","title":"&amp;= operator","text":"<p>See also: </p> <p>&amp; operator </p> <p>operators </p> <p>|= operator </p> <p>See also: </p> <p>See also:</p> <p>&amp; operator </p> <p>operators </p> <p>|= operator </p> <p>&amp; operator</p> <p>operators </p> <p>|= operator </p> <p>operators</p> <p>|= operator </p> <p>|= operator</p> <p>Format: </p> <p>A &amp;= B</p> <p>Format: </p> <p>Format:</p> <p>A &amp;= B</p> <p>Set A equal to A &amp; B. It is shorthand for A = A &amp; B.</p> <p>This is commonly used to turn off certain bitfields in a word.</p>"},{"location":"operator/%26%3D/#_1","title":"&=","text":"<p>Example:</p> <p>usr.sight &amp;= ~BLIND // turn off the blind bit</p> <p>If A and B are lists, items in A that are not in B are removed.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/%28%29/","title":"()","text":""},{"location":"operator/%28%29/#operator","title":"() operator","text":"<p>See also: </p> <p>operators </p> <p>procs </p> <p>verbs </p> <p>See also: </p> <p>See also:</p> <p>operators </p> <p>procs </p> <p>verbs </p> <p>operators</p> <p>procs </p> <p>verbs </p> <p>procs</p> <p>verbs </p> <p>verbs</p> <p>Parentheses may be used in expressions to change the order of operations. Whatever is inside a pair of parentheses will be evaluated first.</p>"},{"location":"operator/%28%29/#_1","title":"()","text":"<p>Example:</p> <p>usr &lt;&lt; 2 + 3 * 2 // 8 usr &lt;&lt; (2 + 3) * 2 // 10</p> <p>They are also used for calling procs or verbs, by placing the parentheses after the name of the proc. Any arguments that will be sent to the proc go inside the parentheses; multiple arguments are separated by commas, or the parentheses can be left empty if no arguments are sent. For the same reason, parentheses are also used when defining a new proc or verb and the arguments (if any) that will be used.</p>"},{"location":"operator/%28%29/#_2","title":"()","text":"<p>Example:</p> <p>// Defining a new proc proc/Distance(x, y)  // return straight-line distance from 0,0  return sqrt(x*x + y*y)</p>"},{"location":"operator/%2B%2B/","title":"++","text":""},{"location":"operator/%2B%2B/#operator","title":"++ operator","text":"<p>See also: </p> <p>+ operator </p> <p>+= operator </p> <p>-- operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>+ operator </p> <p>+= operator </p> <p>-- operator </p> <p>operators </p> <p>+ operator</p> <p>+= operator </p> <p>-- operator </p> <p>operators </p> <p>+= operator</p> <p>-- operator </p> <p>operators </p> <p>-- operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>++A // pre-increment</p> <p>A++ // post-increment</p> <p>Format: </p> <p>Format:</p> <p>++A // pre-increment</p> <p>A++ // post-increment</p> <p>A++ // post-increment</p> <p>The pre-increment has the value (A+1) and the effect of adding 1 to A.</p> <p>The post-increment has the value (A) and has the effect of adding 1 to A.</p>"},{"location":"operator/%2B%2B/#_1","title":"++","text":"<p>Example:</p> <p>var/A = 0 world &lt;&lt; \"A++ = [A++]\" // outputs \"A++ = 0\" world &lt;&lt; \"++A = [++A]\" // outputs \"++A = 2\"</p>"},{"location":"operator/%2B/","title":"+","text":""},{"location":"operator/%2B/#operator","title":"+ operator","text":"<p>See also: </p> <p>* operator </p> <p>+= operator </p> <p>- operator </p> <p>/ operator </p> <p>Add proc (list) </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>* operator </p> <p>+= operator </p> <p>- operator </p> <p>/ operator </p> <p>Add proc (list) </p> <p>operators </p> <p>* operator</p> <p>+= operator </p> <p>- operator </p> <p>/ operator </p> <p>Add proc (list) </p> <p>operators </p> <p>+= operator</p> <p>- operator </p> <p>/ operator </p> <p>Add proc (list) </p> <p>operators </p> <p>- operator</p> <p>/ operator </p> <p>Add proc (list) </p> <p>operators </p> <p>/ operator</p> <p>Add proc (list) </p> <p>operators </p> <p>Add proc (list)</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A + B</p> <p>Format: </p> <p>Format:</p> <p>A + B</p> <p>Returns: </p> <p>If A is a number, returns the sum of A and B.</p> <p>If A is null, returns B.</p> <p>If A is a list, a new list is returned with B appended to the contents  of A. If B is a list as well, its contents are appended rather than  the list itself.</p> <p>If A is a text string, returns a new string with A and B concatenated.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>Returns: </p> <p>Returns:</p> <p>If A is a number, returns the sum of A and B.</p> <p>If A is null, returns B.</p> <p>If A is a list, a new list is returned with B appended to the contents  of A. If B is a list as well, its contents are appended rather than  the list itself.</p> <p>If A is a text string, returns a new string with A and B concatenated.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>If A is null, returns B.</p> <p>If A is a list, a new list is returned with B appended to the contents  of A. If B is a list as well, its contents are appended rather than  the list itself.</p> <p>If A is a text string, returns a new string with A and B concatenated.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>If A is a list, a new list is returned with B appended to the contents  of A. If B is a list as well, its contents are appended rather than  the list itself.</p> <p>If A is a text string, returns a new string with A and B concatenated.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>If A is a text string, returns a new string with A and B concatenated.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  added. Areas that are transparent in either icon are transparent in  both; for more opacity use | (OR) instead. This works with the /icon  datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components added together.</p>"},{"location":"operator/%2B%3D/","title":"+=","text":""},{"location":"operator/%2B%3D/#operator","title":"+= operator","text":"<p>See also: </p> <p>*= operator </p> <p>+ operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>*= operator </p> <p>+ operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>*= operator</p> <p>+ operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>+ operator</p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>-= operator</p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>/= operator</p> <p>= operator </p> <p>operators </p> <p>= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A += B</p> <p>Format: </p> <p>Format:</p> <p>A += B</p> <p>Set A equal to A + B. It is shorthand for A = A + B.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/--/","title":"","text":""},{"location":"operator/--/#-operator","title":"-- operator","text":"<p>See also: </p> <p>++ operator </p> <p>- operator </p> <p>-= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>++ operator </p> <p>- operator </p> <p>-= operator </p> <p>operators </p> <p>++ operator</p> <p>- operator </p> <p>-= operator </p> <p>operators </p> <p>- operator</p> <p>-= operator </p> <p>operators </p> <p>-= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>--A // pre-decrement</p> <p>A-- // post-decrement</p> <p>Format: </p> <p>Format:</p> <p>--A // pre-decrement</p> <p>A-- // post-decrement</p> <p>A-- // post-decrement</p> <p>The pre-decrement has the value (A-1) and the effect of subtracting 1 from A.</p> <p>The post-decrement has the value (A) and has the effect of subtracting 1 from A.</p>"},{"location":"operator/--/#_1","title":"","text":"<p>Example:</p> <p>var/A = 0 world &lt;&lt; \"A-- = [A--]\" // outputs \"A = 0\" world &lt;&lt; \"--A = [--A]\" // outputs \"A = -2\"</p>"},{"location":"operator/-/","title":"","text":""},{"location":"operator/-/#-operator","title":"- operator","text":"<p>See also: </p> <p>* operator </p> <p>+ operator </p> <p>-= operator </p> <p>/ operator </p> <p>Remove proc (list) </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>* operator </p> <p>+ operator </p> <p>-= operator </p> <p>/ operator </p> <p>Remove proc (list) </p> <p>operators </p> <p>* operator</p> <p>+ operator </p> <p>-= operator </p> <p>/ operator </p> <p>Remove proc (list) </p> <p>operators </p> <p>+ operator</p> <p>-= operator </p> <p>/ operator </p> <p>Remove proc (list) </p> <p>operators </p> <p>-= operator</p> <p>/ operator </p> <p>Remove proc (list) </p> <p>operators </p> <p>/ operator</p> <p>Remove proc (list) </p> <p>operators </p> <p>Remove proc (list)</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A - B</p> <p>-B</p> <p>Format: </p> <p>Format:</p> <p>A - B</p> <p>-B</p> <p>-B</p> <p>Returns: </p> <p>If A is a number, returns A minus B.</p> <p>If A is a list, a new list is returned with B removed from the contents  of A. If B is a list as well, each of its contents are removed rather  than the list itself.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  subtracted. Areas that are transparent in either icon are transparent in  both. This works with the /icon datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components subtracted.</p> <p>Returns: </p> <p>Returns:</p> <p>If A is a number, returns A minus B.</p> <p>If A is a list, a new list is returned with B removed from the contents  of A. If B is a list as well, each of its contents are removed rather  than the list itself.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  subtracted. Areas that are transparent in either icon are transparent in  both. This works with the /icon datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components subtracted.</p> <p>If A is a list, a new list is returned with B removed from the contents  of A. If B is a list as well, each of its contents are removed rather  than the list itself.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  subtracted. Areas that are transparent in either icon are transparent in  both. This works with the /icon datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components subtracted.</p> <p>If A is an icon, returns a new icon with B (a color or another icon)  subtracted. Areas that are transparent in either icon are transparent in  both. This works with the /icon datum as well.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components subtracted.</p> <p>If A and B are both /matrix datums, returns a new matrix with their  components subtracted.</p>"},{"location":"operator/-%3D/","title":"=","text":""},{"location":"operator/-%3D/#-operator","title":"-= operator","text":"<p>See also: </p> <p>*= operator </p> <p>+= operator </p> <p>- operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>*= operator </p> <p>+= operator </p> <p>- operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>*= operator</p> <p>+= operator </p> <p>- operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>+= operator</p> <p>- operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>- operator</p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>/= operator</p> <p>= operator </p> <p>operators </p> <p>= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A -= B</p> <p>Format: </p> <p>Format:</p> <p>A -= B</p> <p>Set A equal to A - B. It is shorthand for A = A - B.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/%3D/","title":"=","text":""},{"location":"operator/%3D/#operator","title":"= operator","text":"<p>See also: </p> <p>*= operator </p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>*= operator </p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>*= operator</p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>+= operator</p> <p>-= operator </p> <p>/= operator </p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>-= operator</p> <p>/= operator </p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>/= operator</p> <p>%= operator </p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>%= operator</p> <p>|= operator </p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>|= operator</p> <p>&amp;= operator </p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&amp;= operator</p> <p>^= operator </p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>^= operator</p> <p>&lt;&lt;= operator </p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&lt;&lt;= operator</p> <p>&gt;&gt;= operator </p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&gt;&gt;= operator</p> <p>:= operator </p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>:= operator</p> <p>||= operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>||= operator</p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&amp;&amp;= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A = B</p> <p>Format: </p> <p>Format:</p> <p>A = B</p> <p>Set A equal to B.</p> <p>Note that this is not the same as the equality test (==), which tests if A is equal to B.</p> <p>All assignment operators, including calculate-and-assign (such as the += operator), can be chained together, and they are evaluated in right-to-left order. Therefore, a = b += c is a legal statement. It is equivalent to adding b and c, storing the result in b, then setting a to use the new value of b. (a = b) += c will, on the other hand, set a to equal b, then add c to a and store the result in a; b is never changed.</p>"},{"location":"operator/%3D%3D/","title":"==","text":""},{"location":"operator/%3D%3D/#operator","title":"== operator","text":"<p>See also: </p> <p>!= operator </p> <p>&gt;= operator </p> <p>&lt;= operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>!= operator </p> <p>&gt;= operator </p> <p>&lt;= operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>!= operator</p> <p>&gt;= operator </p> <p>&lt;= operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>&gt;= operator</p> <p>&lt;= operator </p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>&lt;= operator</p> <p>~= operator </p> <p>~! operator </p> <p>operators </p> <p>~= operator</p> <p>~! operator </p> <p>operators </p> <p>~! operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A == B</p> <p>Format: </p> <p>Format:</p> <p>A == B</p> <p>Returns: </p> <p>1 if A and B are equal; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A and B are equal; 0 otherwise</p> <p>Note that this is not the same as the assignment operator (=), which sets A equal to B.</p> <p>To check if A and B are equivalent, use the ~= operator.</p>"},{"location":"operator/%5B%5D/","title":"[]","text":""},{"location":"operator/%5B%5D/#operator","title":"[] operator","text":"<p>See also: </p> <p>list </p> <p>operators </p> <p>?[] operator </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>operators </p> <p>?[] operator </p> <p>list</p> <p>operators </p> <p>?[] operator </p> <p>operators</p> <p>?[] operator </p> <p>?[] operator</p> <p>This is used to access an element of a list.</p>"},{"location":"operator/%5B%5D/#_1","title":"[]","text":"<p>Example:</p> <p>var/L[2] // declares list of size 2 L[1] = 10 // assign first element</p> <p>If you want to use a datum like a list, you can  overload   the operator by defining an</p> <p>operator[]</p> <p>proc for reading a value, and</p> <p>operator[]=</p> <p>for writing a value. Those overloads also apply if you use the null-conditional</p> <p>?[]</p> <p>operator.</p> <p>overload</p> <p>operator[]</p> <p>operator[]=</p> <p>?[]</p>"},{"location":"operator/%5E/","title":"^","text":""},{"location":"operator/%5E/#operator","title":"^ operator","text":"<p>See also: </p> <p>^= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>^= operator </p> <p>operators </p> <p>^= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ^ B</p> <p>Format: </p> <p>Format:</p> <p>A ^ B</p> <p>Returns: </p> <p>The binary \"xor\" of A and B.</p> <p>Returns: </p> <p>Returns:</p> <p>The binary \"xor\" of A and B.</p> <p>A and B must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>If A and B are lists, the result is a list containing items that are in either list but not both. list(1,2) ^ list(2,3) is equivalent to list(1,3). The items found only in A come first in the result, followed by any items found only in B.</p>"},{"location":"operator/%5E%3D/","title":"^=","text":""},{"location":"operator/%5E%3D/#operator","title":"^= operator","text":"<p>See also: </p> <p>^ operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>^ operator </p> <p>operators </p> <p>^ operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ^= B</p> <p>Format: </p> <p>Format:</p> <p>A ^= B</p> <p>Set A equal to A ^ B. It is shorthand for A = A ^ B.</p> <p>If A and B are lists, any items that are found in both lists are removed from A, and then any items found only in B are added to A.</p>"},{"location":"operator/in/","title":"In","text":""},{"location":"operator/in/#in-operator","title":"in operator","text":"<p>See also: </p> <p>list </p> <p>operators </p> <p>! operator </p> <p>locate proc </p> <p>input proc </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>operators </p> <p>! operator </p> <p>locate proc </p> <p>input proc </p> <p>list</p> <p>operators </p> <p>! operator </p> <p>locate proc </p> <p>input proc </p> <p>operators</p> <p>! operator </p> <p>locate proc </p> <p>input proc </p> <p>! operator</p> <p>locate proc </p> <p>input proc </p> <p>locate proc</p> <p>input proc </p> <p>input proc</p> <p>Format: </p> <p>A in List</p> <p>Format: </p> <p>Format:</p> <p>A in List</p> <p>Returns: </p> <p>1 if A exists in List; 0 if not </p> <p>Returns: </p> <p>1 if A exists in List; 0 if not </p> <p>Returns:</p> <p>1 if A exists in List; 0 if not </p> <p>1 if A exists in List; 0 if not</p> <p>This is a relatively safe way to check if an item is in a list, because the value of</p> <p>List</p> <p>is allowed to be a non-list value, such as null. Compare to</p> <p>List.Find(A)</p> <p>which will fail if</p> <p>List</p> <p>is not an actual list.</p> <p>List</p> <p>List.Find(A)</p> <p>List</p> <p>List</p> <p>can also be an atom, in which case</p> <p>A in List</p> <p>is equivalent to</p> <p>A in List.contents</p> <p>.</p> <p>List</p> <p>A in List</p> <p>A in List.contents</p> <p>The</p> <p>in</p> <p>operator has a lower precedence than</p> <p>!</p> <p>, which can be a point of confusion. If you want to check if something is  not   in a list, it's a common mistake to try</p> <p>if(!A in List)</p> <p>. Unfortunately the</p> <p>!A</p> <p>part is evaluated first and becomes 0 or 1, so you're really asking if 0 or 1 is in the list. The correct way to check if something is not in a list is to wrap the</p> <p>in</p> <p>operator and its operands with parentheses, as in</p> <p>if(!(A in List))</p> <p>.</p> <p>Similarly, the assignment operators also have higher precedence than</p> <p>in</p> <p>, so</p> <p>has_thing = thing in src</p> <p>will not be interpreted as you might expect. Again the solution is to use parentheses, e.g.</p> <p>has_thing = (thing in src)</p> <p>.</p> <p>The</p> <p>in</p> <p>operator has a lower precedence than</p> <p>!</p> <p>, which can be a point of confusion. If you want to check if something is  not   in a list, it's a common mistake to try</p> <p>if(!A in List)</p> <p>. Unfortunately the</p> <p>!A</p> <p>part is evaluated first and becomes 0 or 1, so you're really asking if 0 or 1 is in the list. The correct way to check if something is not in a list is to wrap the</p> <p>in</p> <p>operator and its operands with parentheses, as in</p> <p>if(!(A in List))</p> <p>.</p> <p>in</p> <p>!</p> <p>not</p> <p>if(!A in List)</p> <p>!A</p> <p>in</p> <p>if(!(A in List))</p> <p>Similarly, the assignment operators also have higher precedence than</p> <p>in</p> <p>, so</p> <p>has_thing = thing in src</p> <p>will not be interpreted as you might expect. Again the solution is to use parentheses, e.g.</p> <p>has_thing = (thing in src)</p> <p>.</p> <p>in</p> <p>has_thing = thing in src</p> <p>has_thing = (thing in src)</p> <p>The</p> <p>in</p> <p>operator is also a modifier for some procs such as  locate()   and  input()   .</p> <p>in</p> <p>locate() input()</p> <p>Note: For  associative lists   there's a faster way to see if an item is in that list. The lookup of</p> <p>List[A]</p> <p>in an associative list is relatively fast, so if the associated value is always expected to be true (not null, 0, or an empty string), you can use</p> <p>List[A]</p> <p>instead of</p> <p>A in List</p> <p>in those situations.</p> <p>associative lists</p> <p>List[A]</p> <p>List[A]</p> <p>A in List</p>"},{"location":"operator/overload/","title":"Overload","text":""},{"location":"operator/overload/#operator-overloading","title":"operator overloading","text":"<p>See also: </p> <p>datum </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>datum </p> <p>operators </p> <p>datum</p> <p>operators </p> <p>operators</p> <p>DM allows you to overload most of the operators it uses when working with datums and other objects. This means that A + B can call a proc defined under A instead, with B as an argument, and the return value of that proc would be the result.</p> <p>The proc name for an overloaded operator is \"operator\" followed immediately by the operator itself, such as  <code>operator*</code>   to override the multiplication operator.</p> <p>A * B</p> <p>will call</p> <p>A.operator*(B)</p> <p>if the proc is available.</p> <p><code>operator*</code></p> <p>A * B</p> <p>A.operator*(B)</p>"},{"location":"operator/overload/#_1","title":"Overload","text":"<p>Example:</p> <p>complex // complex number a+bi  var/a as num  var/b as num</p> <p>New(_a,_b)  a = _a  b = _b</p> <p>proc/operator+(complex/C)  if(istype(C)) return new/complex(a+C.a, b+C.b)  if(isnum(C)) return new/complex(a+C, b)  return src</p> <p>proc/operator+=(complex/C)  if(istype(C))  a += C.a  b += C.b  else if(isnum(C)) a += C</p> <p>The following operators may be overloaded:</p> <p>|   Operators   |   Proc   |   Notes   | | --- | --- | --- | |   Arithmetic and binary (return new value)   | |   A + B   |   A.operator+(B)   |  | |   A - B   |   A.operator-(B)   |  | |   -A   |   A.operator-()   |   Same proc as subtraction, but has no arguments   | |   A * B   |   A.operator*(B)   |  | |   A / B   |   A.operator/(B)   |  | |   A % B   |   A.operator%(B)   |  | |   A %% B   |   A.operator%%(B)   |  | |   A ** B   |   A.operator**(B)   |  | |   A | B   |   A.operator|(B)   |  | |   A &amp; B   |   A.operator&amp;(B)   |  | |   A ^ B   |   A.operator^(B)   |  | |   ~A   |   A.operator~()   |  | |   A &lt;&lt; B (shift)   |   A.operator&lt;&lt;(B)   |  | |   A &gt;&gt; B (shift)   |   A.operator&gt;&gt;(B)   |  | |   A &lt;&lt; B (output)   |   A.operator&lt;&lt;(B,A,window)</p> <p>world.operator&lt;&lt;(B,target,window)   |   Ignores return value</p> <p>..() falls back on world proc, then default behavior   | |   A &gt;&gt; B (input)   |   A.operator&gt;&gt;(null,A)</p> <p>world.operator&gt;&gt;(null,source)   |   Return value is assigned to B</p> <p>..() falls back on world proc, then default behavior   | |   Comparisons (return true or false)   | |   A ~= B   |   A.operator~=(B)   |  | |   A ~! B   |   A.operator~!(B)   |  | |   A &lt; B   |   A.operator&lt;(B)   |  | |   A &gt;= B   |   A.operator&gt;=(B)   |  | |   A &gt; B   |   A.operator&gt;(B)   |  | |   A &lt;= B   |   A.operator&lt;=(B)   |  | |   Assignments with side effects (return value defaults to src)   | |   A += B   |   A.operator+=(B)   |  | |   A -= B   |   A.operator--(B)   |  | |   A *= B   |   A.operator*=(B)   |  | |   A /= B   |   A.operator/=(B)   |  | |   A %= B   |   A.operator%=(B)   |  | |   A %%= B   |   A.operator%%=(B)   |  | |   A |= B   |   A.operator|=(B)   |  | |   A &amp;= B   |   A.operator&amp;=(B)   |  | |   A ^= B   |   A.operator^=(B)   |  | |   A &lt;&lt;= B   |   A.operator&lt;&lt;=(B)   |  | |   A &gt;&gt;= B   |   A.operator&gt;&gt;=(B)   |  | |   A := B   |   A.operator:=(B)   |  | |   ++A   |   A.operator++()   |  | |   --A   |   A.operator--()   |  | |   A++   |   A.operator++(1)   |  | |   A--   |   A.operator--(1)   |  | |   List access   | |   A[idx]   |   A.operator   |   Used for reading a list value   | |   A[idx] = B   |   A.operator[]=(idx, B)   |   Used for writing a list value; ignores return value   | |   Other   | |   turn(A, B)   |   A.operator_turn(B)   |  | |   \"[A]\"   |   A.operator\"\"()   |   Specifies a custom way for converting A to text (see notes below)   |</p> <p>|   Operators   |   Proc   |   Notes   |</p> <p>Operators  |</p> <p>Proc  |</p> <p>Notes  | |   Arithmetic and binary (return new value)   |</p> <p>Arithmetic and binary (return new value)  | |   A + B   |   A.operator+(B)   |  |</p> <p>A + B  |</p> <p>A.operator+(B)  |   | |   A - B   |   A.operator-(B)   |  |</p> <p>A - B  |</p> <p>A.operator-(B)  |   | |   -A   |   A.operator-()   |   Same proc as subtraction, but has no arguments   |</p> <p>-A  |</p> <p>A.operator-()  |</p> <p>Same proc as subtraction, but has no arguments  | |   A * B   |   A.operator*(B)   |  |</p> <p>A * B  |</p> <p>A.operator*(B)  |   | |   A / B   |   A.operator/(B)   |  |</p> <p>A / B  |</p> <p>A.operator/(B)  |   | |   A % B   |   A.operator%(B)   |  |</p> <p>A % B  |</p> <p>A.operator%(B)  |   | |   A %% B   |   A.operator%%(B)   |  |</p> <p>A %% B  |</p> <p>A.operator%%(B)  |   | |   A ** B   |   A.operator**(B)   |  |</p> <p>A ** B  |</p> <p>A.operator**(B)  |   | |   A | B   |   A.operator|(B)   |  |</p> A B A.operator (B) A &amp; B A.operator&amp;(B) <p>A &amp; B  |</p> <p>A.operator&amp;(B)  |   | |   A ^ B   |   A.operator^(B)   |  |</p> <p>A ^ B  |</p> <p>A.operator^(B)  |   | |   ~A   |   A.operator~()   |  |</p> <p>~A  |</p> <p>A.operator~()  |   | |   A &lt;&lt; B (shift)   |   A.operator&lt;&lt;(B)   |  |</p> <p>A &lt;&lt; B (shift)  |</p> <p>A.operator&lt;&lt;(B)  |   | |   A &gt;&gt; B (shift)   |   A.operator&gt;&gt;(B)   |  |</p> <p>A &gt;&gt; B (shift)  |</p> <p>A.operator&gt;&gt;(B)  |   | |   A &lt;&lt; B (output)   |   A.operator&lt;&lt;(B,A,window)</p> <p>world.operator&lt;&lt;(B,target,window)   |   Ignores return value</p> <p>..() falls back on world proc, then default behavior   |</p> <p>A &lt;&lt; B (output)  |</p> <p>A.operator&lt;&lt;(B,A,window)</p> <p>world.operator&lt;&lt;(B,target,window)  |</p> <p>Ignores return value</p> <p>..() falls back on world proc, then default behavior  |</p> <p>|   A &gt;&gt; B (input)   |   A.operator&gt;&gt;(null,A)</p> <p>world.operator&gt;&gt;(null,source)   |   Return value is assigned to B</p> <p>..() falls back on world proc, then default behavior   |</p> <p>A &gt;&gt; B (input)  |</p> <p>A.operator&gt;&gt;(null,A)</p> <p>world.operator&gt;&gt;(null,source)  |</p> <p>Return value is assigned to B</p> <p>..() falls back on world proc, then default behavior  |</p> <p>|   Comparisons (return true or false)   |</p> <p>Comparisons (return true or false)  | |   A ~= B   |   A.operator~=(B)   |  |</p> <p>A ~= B  |</p> <p>A.operator~=(B)  |   | |   A ~! B   |   A.operator~!(B)   |  |</p> <p>A ~! B  |</p> <p>A.operator~!(B)  |   | |   A &lt; B   |   A.operator&lt;(B)   |  |</p> <p>A &lt; B  |</p> <p>A.operator&lt;(B)  |   | |   A &gt;= B   |   A.operator&gt;=(B)   |  |</p> <p>A &gt;= B  |</p> <p>A.operator&gt;=(B)  |   | |   A &gt; B   |   A.operator&gt;(B)   |  |</p> <p>A &gt; B  |</p> <p>A.operator&gt;(B)  |   | |   A &lt;= B   |   A.operator&lt;=(B)   |  |</p> <p>A &lt;= B  |</p> <p>A.operator&lt;=(B)  |   | |   Assignments with side effects (return value defaults to src)   |</p> <p>Assignments with side effects (return value defaults to src)  | |   A += B   |   A.operator+=(B)   |  |</p> <p>A += B  |</p> <p>A.operator+=(B)  |   | |   A -= B   |   A.operator--(B)   |  |</p> <p>A -= B  |</p> <p>A.operator--(B)  |   | |   A *= B   |   A.operator*=(B)   |  |</p> <p>A *= B  |</p> <p>A.operator*=(B)  |   | |   A /= B   |   A.operator/=(B)   |  |</p> <p>A /= B  |</p> <p>A.operator/=(B)  |   | |   A %= B   |   A.operator%=(B)   |  |</p> <p>A %= B  |</p> <p>A.operator%=(B)  |   | |   A %%= B   |   A.operator%%=(B)   |  |</p> <p>A %%= B  |</p> <p>A.operator%%=(B)  |   | |   A |= B   |   A.operator|=(B)   |  |</p> A = B A.operator =(B) A &amp;= B A.operator&amp;=(B) <p>A &amp;= B  |</p> <p>A.operator&amp;=(B)  |   | |   A ^= B   |   A.operator^=(B)   |  |</p> <p>A ^= B  |</p> <p>A.operator^=(B)  |   | |   A &lt;&lt;= B   |   A.operator&lt;&lt;=(B)   |  |</p> <p>A &lt;&lt;= B  |</p> <p>A.operator&lt;&lt;=(B)  |   | |   A &gt;&gt;= B   |   A.operator&gt;&gt;=(B)   |  |</p> <p>A &gt;&gt;= B  |</p> <p>A.operator&gt;&gt;=(B)  |   | |   A := B   |   A.operator:=(B)   |  |</p> <p>A := B  |</p> <p>A.operator:=(B)  |   | |   ++A   |   A.operator++()   |  |</p> <p>++A  |</p> <p>A.operator++()  |   | |   --A   |   A.operator--()   |  |</p> <p>--A  |</p> <p>A.operator--()  |   | |   A++   |   A.operator++(1)   |  |</p> <p>A++  |</p> <p>A.operator++(1)  |   | |   A--   |   A.operator--(1)   |  |</p> <p>A--  |</p> <p>A.operator--(1)  |   | |   List access   |</p> <p>List access  | |   A[idx]   |   A.operator   |   Used for reading a list value   |</p> <p>A[idx]  |</p> <p>A.operator  |</p> <p>Used for reading a list value  | |   A[idx] = B   |   A.operator[]=(idx, B)   |   Used for writing a list value; ignores return value   |</p> <p>A[idx] = B  |</p> <p>A.operator[]=(idx, B)  |</p> <p>Used for writing a list value; ignores return value  | |   Other   |</p> <p>Other  | |   turn(A, B)   |   A.operator_turn(B)   |  |</p> <p>turn(A, B)  |</p> <p>A.operator_turn(B)  |   | |   \"[A]\"   |   A.operator\"\"()   |   Specifies a custom way for converting A to text (see notes below)   |</p> <p>\"[A]\"  |</p> <p>A.operator\"\"()  |</p> <p>Specifies a custom way for converting A to text (see notes below)  |</p> <p>Some operators cannot be overloaded. The</p> <p>=</p> <p>operator for direct assignment is one. The</p> <p>!</p> <p>operator is another. The</p> <p>==</p> <p>and</p> <p>!=</p> <p>operators measure equality and can't be overloaded, but</p> <p>~=</p> <p>and</p> <p>~!</p> <p>for equivalence can be. It would also be meaningless to override the ternary</p> <p>? :</p> <p>operator pair, and the</p> <p>.</p> <p>and</p> <p>:</p> <p>family of operators for accessing vars and procs.</p> <p>=</p> <p>!</p> <p>==</p> <p>!=</p> <p>~=</p> <p>~!</p> <p>? :</p> <p>.</p> <p>:</p> <p>Comparison operators come in opposing pairs:</p> <p>~=</p> <p>vs.</p> <p>~!</p> <p>,</p> <p>&lt;</p> <p>vs.</p> <p>=</p> <p>,</p> <p>vs.</p> <p>&lt;=</p> <p>. You only need to override one operator from each pair; DM is smart enough to know that  <code>!(A ~= B)</code>   is the same as  <code>A ~! B</code>   .</p> <p>~=</p> <p>~!</p> <p>&lt;</p> <p>=</p> <p>&lt;=</p> <p><code>!(A ~= B)</code> <code>A ~! B</code></p> <p>By the same logic, you don't have to define the assign-with-side-effect operators like</p> <p>+=</p> <p>if you don't want to. For instance if you override</p> <p>+</p> <p>but not</p> <p>+=</p> <p>, then</p> <p>A += B</p> <p>will be handled internally as</p> <p>A = A + B</p> <p>, which means the value of</p> <p>A</p> <p>after the statement may be a different datum than</p> <p>A</p> <p>was before. The value of</p> <p>A</p> <p>can also change if you  do   overload</p> <p>+=</p> <p>but the proc returns a value other than null; its return value will be the new</p> <p>A</p> <p>.</p> <p>+=</p> <p>+</p> <p>+=</p> <p>A += B</p> <p>A = A + B</p> <p>A</p> <p>A</p> <p>A</p> <p>do</p> <p>+=</p> <p>A</p> <p>If an overloaded proc is not available for an operator you try to use on a datum, a runtime error may result.</p> <p>The output and input operators are given special treatment. If no overload is defined for the current left-hand-side value, the overload proc is looked up under  <code>world</code>   instead. The world overload proc is also a fallback if</p> <p>..()</p> <p>is called, and after that</p> <p>..()</p> <p>does the default behavior. These procs are always called with multiple arguments, to distinguish them from bitwise shift operators. The output version gets a third argument when the result</p> <p>output()</p> <p>is sent, since that can include a window reference.</p> <p><code>world</code></p> <p>..()</p> <p>..()</p> <p>output()</p>"},{"location":"operator/overload/#_2","title":"Overload","text":"<p>Example:</p> <p>// Send an effect to a player or list of players proc/DoEffect(target, effect/E)  if(istype(target, /list))  for(var/i in target) DoEffect(i, E)  return  if(target == world || target == world.contents)  for(var/client/C) DoEffect(C, E)  if(istype(target, /client))  DoEffect(target:mob)  if(istype(target, /mob))  if(target:client)  ... // do something here to show the effect</p> <p>world/proc/operator&lt;&lt;(out, target)  if(istype(target,/savefile)) return ..() // always save normally  if(istype(out, /effect)) DoEffect(target, out)  else ..()</p> <p>The list access operators are a special case as well, because reading to a list and writing to it are different things, so there are two procs for the purpose. The</p> <p>[]</p> <p>overload is for reading, and</p> <p>[]=</p> <p>is for writing.</p> <p>[]</p> <p>[]=</p> <p>There is also now an overload for converting a datum to text. By having</p> <p>operator\"\"</p> <p>return a text string, that text will automatically appear anywhere you embed the datum in a string, use</p> <p>json_encode()</p> <p>on the datum, or many other situations. It won't work for atoms being sent directly to output (e.g.,</p> <p>world &lt;&lt; obj</p> <p>) or other skin controls because the client has special handling for these situations and the client isn't given any info about the overloaded text. Likewise, the overloaded text won't appear for objects in an</p> <p>input()</p> <p>prompt list, which is also handled mainly on the client. Despite these limitations, the text overload offers greater flexibility.</p> <p>operator\"\"</p> <p>json_encode()</p> <p>world &lt;&lt; obj</p> <p>input()</p>"},{"location":"operator/path/","title":"Path","text":""},{"location":"operator/path/#path-operators","title":"path operators","text":"<p>See also: </p> <p>. path operator </p> <p>/ path operator </p> <p>: path operator </p> <p>procs </p> <p>vars </p> <p>See also: </p> <p>See also:</p> <p>. path operator </p> <p>/ path operator </p> <p>: path operator </p> <p>procs </p> <p>vars </p> <p>. path operator</p> <p>/ path operator </p> <p>: path operator </p> <p>procs </p> <p>vars </p> <p>/ path operator</p> <p>: path operator </p> <p>procs </p> <p>vars </p> <p>: path operator</p> <p>procs </p> <p>vars </p> <p>procs</p> <p>vars </p> <p>vars</p> <p>A \"path\" in DM is a constant value that identifies a particular definition in the code tree (i.e. an object, procedure, or variable definition). An example of this is the default mob type for new players  <code>/mob</code>   .</p> <p><code>/mob</code></p> <p>Paths are used in two contexts. One is to \"get to\" a particular point in the code tree in order to modify the definition. The other is to reference a particular definition made elsewhere in the code tree. The syntax of a path is similar in both cases.</p> <p>When you are making a definition, you simply put the path at the beginning of a line like this:</p> <p>obj/clothes/gloves</p> <p>That automatically creates that path in the code tree if it does not already exist. When starting at the beginning of the line (no indentation) there is no need to begin the path with '/', but that is perfectly acceptable.</p> <p>When making definitions, DM equates the path separator '/' with indentation, so the above example is really just a more compact way of writing:</p> <p>obj  clothing  gloves</p> <p>One generally uses indentation when you have several things to define with a common parent path:</p> <p>obj  clothing  gloves  sandals</p> <p>An important element of DM is that you can get to the same path in the code tree from multiple places in the source code. For example, given the above definition of  <code>gloves</code>   and  <code>sandals</code>   , you could modify a property of one of them from somewhere else using any path syntax you like:</p> <p><code>gloves</code> <code>sandals</code></p> <p>obj/clothing/sandals  name = \"Winged Sandals\"</p> <p>While that was not a useful thing to do in this case, it can be a very powerful tool when organizing source code in large projects. Also note that the use of \"/\" can save your source code from getting too deeply indented, which may sound mundane, but which is quite important!</p> <p>The above examples used paths to make definitions. The other time when you use paths is when you need to refer to a particular definition. Creation of an object is one example:</p> <p>mob/Login()  if(length(contents) == 0) //poor fellow has nothing  //create sandals in his contents list  new /obj/clothing/sandals (src)  return ..()</p> <p>Another common use of paths is to declare the data type of a variable. In DM, variable types do not affect what type of data the variable may contain\u2014variables that you define may contain any type of value. Instead, the variable type affects what properties of the data you can attempt to access.</p> <p>The following example defines variables for clothing that is occupying various positions on the body.</p> <p>mob  var/clothing  feet  hands  torso</p> <p>Since there were several variables of the same type, they were grouped under  <code>var/clothing</code>   . It can be done any number of ways, depending on the situation. The same path syntax applies to variable definitions as it does to anything else. This example produces the same effect:</p> <p><code>var/clothing</code></p> <p>mob/var/clothing/feet mob/var  clothing  hands  torso</p>"},{"location":"operator/path/#_1","title":"Path","text":"<p>Provisos</p> <p>Just do not make a mistake like the following:</p> <p>mob/var  /clothing/feet</p> <p>Beginning a path with '/' effectively ignores whatever indentation may precede it. That is why it is called an  absolute   path. The above example would therefore be the same as the following, which is not what you want:</p> <p>absolute</p> <p>mob/var //empty variable definition clothing/feet //definition of object type /clothing/feet</p> <p>On a related note, parameter definitions in procedures should not begin with a \"/\".</p> <p>mob/Move(atom/Dest) //correct  src &lt;&lt; \"Moving to [Dest.x],[Dest.y].\"  return ..()</p> <p>mob/Move(var/atom/Dest) //ok mob/Move(/atom/Dest) //WRONG</p> <p>Essentially, \"var/\" is prepended to each entry in the parameter list.</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D/","title":"{FULLWIDTH ASTERISK}","text":""},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D/#operator","title":"* operator","text":"<p>See also: </p> <p>*= operator </p> <p>+ operator </p> <p>- operator </p> <p>/ operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>*= operator </p> <p>+ operator </p> <p>- operator </p> <p>/ operator </p> <p>operators </p> <p>*= operator</p> <p>+ operator </p> <p>- operator </p> <p>/ operator </p> <p>operators </p> <p>+ operator</p> <p>- operator </p> <p>/ operator </p> <p>operators </p> <p>- operator</p> <p>/ operator </p> <p>operators </p> <p>/ operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A * B</p> <p>Format: </p> <p>Format:</p> <p>A * B</p> <p>Returns: </p> <p>The product of A and B.</p> <p>Returns: </p> <p>Returns:</p> <p>The product of A and B.</p> <p>If A is an icon, the result is a new icon with B (a number, color, or another icon) multiplied. This works with the /icon datum as well.</p> <p>If A is a /matrix datum, the result is a new matrix. B can be a number (which scales the whole matrix) or another matrix. Multiplying two matrices together can have different results depending on the order.</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D%3D/","title":"{FULLWIDTH ASTERISK}=","text":""},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D%3D/#operator","title":"*= operator","text":"<p>See also: </p> <p>* operator </p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>* operator </p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>* operator</p> <p>+= operator </p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>+= operator</p> <p>-= operator </p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>-= operator</p> <p>/= operator </p> <p>= operator </p> <p>operators </p> <p>/= operator</p> <p>= operator </p> <p>operators </p> <p>= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A *= B</p> <p>Format: </p> <p>Format:</p> <p>A *= B</p> <p>Set A equal to A * B. It is shorthand for A = A * B.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D%7BFULLWIDTH%20ASTERISK%7D/","title":"{FULLWIDTH ASTERISK}{FULLWIDTH ASTERISK}","text":""},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D%7BFULLWIDTH%20ASTERISK%7D/#operator","title":"** operator","text":"<p>See also: </p> <p>log proc </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>log proc </p> <p>operators </p> <p>log proc</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ** B</p> <p>Format: </p> <p>Format:</p> <p>A ** B</p> <p>Returns: </p> <p>A to the power of B.</p> <p>Returns: </p> <p>Returns:</p> <p>A to the power of B.</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D%7BFULLWIDTH%20ASTERISK%7D/#_1","title":"{FULLWIDTH ASTERISK}{FULLWIDTH ASTERISK}","text":"<p>Example:</p> <p>usr &lt;&lt; 2 ** 3 // outputs 8</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D/","title":"{FULLWIDTH COLON}","text":""},{"location":"operator/%7BFULLWIDTH%20COLON%7D/#operator","title":": operator","text":"<p>See also: </p> <p>. operator </p> <p>?. operator </p> <p>?: operator </p> <p>: path operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>. operator </p> <p>?. operator </p> <p>?: operator </p> <p>: path operator </p> <p>operators </p> <p>. operator</p> <p>?. operator </p> <p>?: operator </p> <p>: path operator </p> <p>operators </p> <p>?. operator</p> <p>?: operator </p> <p>: path operator </p> <p>operators </p> <p>?: operator</p> <p>: path operator </p> <p>operators </p> <p>: path operator</p> <p>operators </p> <p>operators</p> <p>This is the runtime search operator. It is used to access a property (var or proc) of a var that is not explicitly prototyped. If the variable doesn't have the specified variable or proc, a runtime error occurs.</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D/#_1","title":"{FULLWIDTH COLON}","text":"<p>Example:</p> <p>var/M M = usr M:name = \"futz\" // access a mob property from a non-mob var</p> <p>The</p> <p>.</p> <p>operator behaves the same way, but it checks at compile time whether the property is available. If the var is assigned a value that isn't the correct type and doesn't have this property, a runtime error will still occur.</p> <p>.</p> <p>Note: You should prefer the</p> <p>.</p> <p>operator in most situations, because it's better to catch a problem in the compiler instead of at runtime.</p> <p>.</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%3D/","title":"{FULLWIDTH COLON}=","text":""},{"location":"operator/%7BFULLWIDTH%20COLON%7D%3D/#operator","title":":= operator","text":"<p>See also: </p> <p>= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>= operator </p> <p>operators </p> <p>= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A := B</p> <p>Format: </p> <p>Format:</p> <p>A := B</p> <p>This is the \"assign into\" operator. The value of B is evaluated, then A. If A is a datum that has an</p> <p>operator:=</p> <p>proc overloading this operator, then that proc will be called with A as its src and B as its only argument. The return value of the proc (which defaults to its src, the old value of A) is assigned into the var that holds A.</p> <p>operator:=</p> <p>If A was not a datum, then B is assigned into the var as if this were an ordinary A = B assignment.</p> <p>A common use of this operator might be to copy another datum. This is basically just \"syntactic sugar\" to make certain datums easier to work with, and is intended mainly for situations where you've overloaded the operator.</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":""},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#operator","title":":: operator","text":"<p>See also: </p> <p>. path operator </p> <p>/ path operator </p> <p>: path operator </p> <p>operators </p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>See also: </p> <p>See also:</p> <p>. path operator </p> <p>/ path operator </p> <p>: path operator </p> <p>operators </p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>. path operator</p> <p>/ path operator </p> <p>: path operator </p> <p>operators </p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>/ path operator</p> <p>: path operator </p> <p>operators </p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>: path operator</p> <p>operators </p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>operators</p> <p>call proc </p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>call proc</p> <p>initial proc </p> <p>nameof proc </p> <p>istype proc </p> <p>initial proc</p> <p>nameof proc </p> <p>istype proc </p> <p>nameof proc</p> <p>istype proc </p> <p>istype proc</p> <p>Format: </p> <p>::A</p> <p>::A()</p> <p>A::B</p> <p>A::B() (proc reference, not a call; see below)</p> <p>Format: </p> <p>Format:</p> <p>::A</p> <p>::A()</p> <p>A::B</p> <p>A::B() (proc reference, not a call; see below)</p> <p>::A()</p> <p>A::B</p> <p>A::B() (proc reference, not a call; see below)</p> <p>A::B</p> <p>A::B() (proc reference, not a call; see below)</p> <p>A::B() (proc reference, not a call; see below)</p> <p>This is the scope operator. It has multiple uses.</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_1","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Global var and proc disambiguation</p> <p>::A</p> <p>is a shorthand for</p> <p>global.A</p> <p>, so if you have a local or object var with the same name this disambiguates to the global var. The same is true of</p> <p>:A()</p> <p>which will call</p> <p>global.A()</p> <p>with the arguments you give it.</p> <p>::A</p> <p>global.A</p> <p>:A()</p> <p>global.A()</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_2","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Static var disambiguation</p> <p>If</p> <p>A</p> <p>is a constant type and</p> <p>B</p> <p>is a static var,</p> <p>A::B</p> <p>refers to the static var. If you have a local var with the same name, this disambiguates to the static var. This is also the only case where</p> <p>A::B</p> <p>can be used as an Lvalue (modifiable expression).</p> <p>A</p> <p>B</p> <p>A::B</p> <p>A::B</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_3","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Initial value</p> <p>The most common use of the scope operator is to get the initial value for a var. If</p> <p>A::B</p> <p>isn't a static var, then it's equivalent to</p> <p>initial(A:B)</p> <p>. If</p> <p>A</p> <p>is a constant type path, the compiler will go even further by compiling this expression as the actual initial value instead of doing a runtime lookup.</p> <p>A::B</p> <p>initial(A:B)</p> <p>A</p> <p>This can also be used when defining a var that overrides its parent, by using the</p> <p>parent_type</p> <p>keyword for</p> <p>A</p> <p>. Multiple</p> <p>parent_type</p> <p>levels can be chained together. Similarly, in a static var definition,</p> <p>type</p> <p>can be used for</p> <p>A</p> <p>the same way.</p> <p>parent_type</p> <p>A</p> <p>parent_type</p> <p>type</p> <p>A</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_4","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Example:</p> <p>thing  var/price = 60  better  price = parent_type::price + 40</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_5","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Proc reference</p> <p>If</p> <p>B</p> <p>is a proc, then</p> <p>A::B()</p> <p>is a reference to the proc for type</p> <p>A</p> <p>, which can be used in</p> <p>call()</p> <p>. In this case the parentheses are just a cue for the compiler to know this is a proc reference; it doesn't actually call the proc. Currently,</p> <p>A</p> <p>must be a constant type for this usage.</p> <p>B</p> <p>A::B()</p> <p>A</p> <p>call()</p> <p>A</p>"},{"location":"operator/%7BFULLWIDTH%20COLON%7D%7BFULLWIDTH%20COLON%7D/#_6","title":"{FULLWIDTH COLON}{FULLWIDTH COLON}","text":"<p>Example:</p> <p>thing  proc/DoSomething()  world &lt;&lt; \"Did a thing\"  better  DoSomething()  world &lt;&lt; \"Did a better thing\"</p> <p>proc/Downgrade()  var/thing/better/T = new</p> <p>// will print \"Did a better thing\" because T is /thing/better  T.DoSomething()</p> <p>// deliberately calls /thing's original version; will print \"Did a thing\"  call(T, /thing::DoSomething())()</p>"},{"location":"operator/%7BFULLWIDTH%20SOLIDUS%7D/","title":"{FULLWIDTH SOLIDUS}","text":""},{"location":"operator/%7BFULLWIDTH%20SOLIDUS%7D/#operator","title":"/ operator","text":"<p>See also: </p> <p>* operator </p> <p>+ operator </p> <p>- operator </p> <p>/ path operator </p> <p>/= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>* operator </p> <p>+ operator </p> <p>- operator </p> <p>/ path operator </p> <p>/= operator </p> <p>operators </p> <p>* operator</p> <p>+ operator </p> <p>- operator </p> <p>/ path operator </p> <p>/= operator </p> <p>operators </p> <p>+ operator</p> <p>- operator </p> <p>/ path operator </p> <p>/= operator </p> <p>operators </p> <p>- operator</p> <p>/ path operator </p> <p>/= operator </p> <p>operators </p> <p>/ path operator</p> <p>/= operator </p> <p>operators </p> <p>/= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A / B</p> <p>Format: </p> <p>Format:</p> <p>A / B</p> <p>Returns: </p> <p>A divided by B.</p> <p>Returns: </p> <p>Returns:</p> <p>A divided by B.</p> <p>If A is an icon, the result is a new icon whose color values (except alpha) are divided by B, which must be a number. This works with the /icon datum as well.</p> <p>If A is a /matrix datum, the result is a new matrix. B can be a number (which scales the whole matrix) or another matrix. Dividing by matrix B is the same as multiplyng by its inverse. That is, A / B is identical to A * ~B.</p>"},{"location":"operator/%7BFULLWIDTH%20SOLIDUS%7D%3D/","title":"{FULLWIDTH SOLIDUS}=","text":""},{"location":"operator/%7BFULLWIDTH%20SOLIDUS%7D%3D/#operator","title":"/= operator","text":"<p>See also: </p> <p>*= operator </p> <p>+= operator </p> <p>-= operator </p> <p>/ operator </p> <p>= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>*= operator </p> <p>+= operator </p> <p>-= operator </p> <p>/ operator </p> <p>= operator </p> <p>operators </p> <p>*= operator</p> <p>+= operator </p> <p>-= operator </p> <p>/ operator </p> <p>= operator </p> <p>operators </p> <p>+= operator</p> <p>-= operator </p> <p>/ operator </p> <p>= operator </p> <p>operators </p> <p>-= operator</p> <p>/ operator </p> <p>= operator </p> <p>operators </p> <p>/ operator</p> <p>= operator </p> <p>operators </p> <p>= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A /= B</p> <p>Format: </p> <p>Format:</p> <p>A /= B</p> <p>Set A equal to A / B. It is shorthand for A = A / B.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D/","title":"{FULLWIDTH VERTICAL LINE}","text":""},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D/#operator","title":"| operator","text":"<p>See also: </p> <p>&amp; operator </p> <p>operators </p> <p>|= operator </p> <p>See also: </p> <p>See also:</p> <p>&amp; operator </p> <p>operators </p> <p>|= operator </p> <p>&amp; operator</p> <p>operators </p> <p>|= operator </p> <p>operators</p> <p>|= operator </p> <p>|= operator</p> <p>Format: </p> <p>A | B</p> <p>Format: </p> <p>Format:</p> <p>A | B</p> <p>Returns: </p> <p>The binary \"or\" of A and B.</p> <p>Returns: </p> <p>Returns:</p> <p>The binary \"or\" of A and B.</p> <p>A and B must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>If A and B are lists, the result is a list containing items that are in either list. list(1,2) | list(2,3) is equivalent to list(1,2,3). The items from A come first in the result, followed by any extra items from B.</p> <p>If A is an icon or /icon datum, it is blended with B which can be either a color or another icon. Unlike the + or &amp; operation, the result is transparent only in places where both icons were transparent.</p>"},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%3D/","title":"{FULLWIDTH VERTICAL LINE}=","text":""},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%3D/#operator","title":"|= operator","text":"<p>See also: </p> <p>&amp;= operator </p> <p>operators </p> <p>| operator </p> <p>See also: </p> <p>See also:</p> <p>&amp;= operator </p> <p>operators </p> <p>| operator </p> <p>&amp;= operator</p> <p>operators </p> <p>| operator </p> <p>operators</p> <p>| operator </p> <p>| operator</p> <p>Format: </p> <p>A |= B</p> <p>Format: </p> <p>Format:</p> <p>A |= B</p> <p>Set A equal to A | B. It is shorthand for A = A | B.</p> <p>This is commonly used to turn on certain bitfields in a word.</p>"},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%3D/#_1","title":"{FULLWIDTH VERTICAL LINE}=","text":"<p>Example:</p> <p>usr.sight |= BLIND // turn on the blind bit</p> <p>If A and B are lists, any items in B that are not already in A are added to A.</p> <p>If A is an /icon or /matrix datum, the datum will be changed rather than creating a new one and re-assigning it to A.</p>"},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%7BFULLWIDTH%20VERTICAL%20LINE%7D/","title":"{FULLWIDTH VERTICAL LINE}{FULLWIDTH VERTICAL LINE}","text":""},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%7BFULLWIDTH%20VERTICAL%20LINE%7D/#operator","title":"|| operator","text":"<p>See also: </p> <p>! operator </p> <p>&amp;&amp; operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>! operator </p> <p>&amp;&amp; operator </p> <p>operators </p> <p>! operator</p> <p>&amp;&amp; operator </p> <p>operators </p> <p>&amp;&amp; operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A || B</p> <p>Format: </p> <p>Format:</p> <p>A || B</p> <p>Returns: </p> <p>true value if either A or B is true (neither zero, an empty string, nor null); false value otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>true value if either A or B is true (neither zero, an empty string, nor null); false value otherwise</p> <p>The first true value from left to right completes the evaluation (a practice known as short-circuiting). The entire expression takes the value of the last argument to be evaluated.</p>"},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%7BFULLWIDTH%20VERTICAL%20LINE%7D%3D/","title":"{FULLWIDTH VERTICAL LINE}{FULLWIDTH VERTICAL LINE}=","text":""},{"location":"operator/%7BFULLWIDTH%20VERTICAL%20LINE%7D%7BFULLWIDTH%20VERTICAL%20LINE%7D%3D/#operator","title":"||= operator","text":"<p>See also: </p> <p>|| operator </p> <p>&amp;&amp; operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>|| operator </p> <p>&amp;&amp; operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>|| operator</p> <p>&amp;&amp; operator </p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&amp;&amp; operator</p> <p>&amp;&amp;= operator </p> <p>operators </p> <p>&amp;&amp;= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ||= B</p> <p>Format: </p> <p>Format:</p> <p>A ||= B</p> <p>Returns: </p> <p>Value of</p> <p>(A || B)</p> <p>after it has been assigned to A. This expression can stand by itself; its result does not need to be assigned to anything else.</p> <p>Returns: </p> <p>Returns:</p> <p>Value of</p> <p>(A || B)</p> <p>after it has been assigned to A. This expression can stand by itself; its result does not need to be assigned to anything else.</p> <p>(A || B)</p> <p>First A is evaluated. If its value is false, B will be evaluated and assigned to A. If A is true, B will not be evaluated and A will remain unchanged.</p> <p>Note that this is slightly different from</p> <p>if(!A) A = B</p> <p>if A is a complex expression such as</p> <p>list[index++]</p> <p>, because the expression is only evaluated once.</p> <p>if(!A) A = B</p> <p>list[index++]</p> <p>This operator cannot be overloaded.</p>"},{"location":"operator/~%21/","title":"~!","text":""},{"location":"operator/~%21/#operator","title":"~! operator","text":"<p>See also: </p> <p>~= operator </p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>~= operator </p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>~= operator</p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>== operator</p> <p>!= operator </p> <p>operators </p> <p>!= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ~! B</p> <p>Format: </p> <p>Format:</p> <p>A ~! B</p> <p>Returns: </p> <p>1 if A and B are not equivalent; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A and B are not equivalent; 0 otherwise</p> <p>Equivalence is a looser version of equality. See the  ~= operator   for more information.</p> <p>~= operator</p> <p>To check if A and B are not equal, use the != operator.</p>"},{"location":"operator/~/","title":"~","text":""},{"location":"operator/~/#operator","title":"~ operator","text":"<p>See also: </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>~ A</p> <p>Format: </p> <p>Format:</p> <p>~ A</p> <p>Returns: </p> <p>The binary \"not\" of A.</p> <p>Returns: </p> <p>Returns:</p> <p>The binary \"not\" of A.</p> <p>A must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>If A is a /matrix datum, the result is a new matrix which is the inverse of A.</p>"},{"location":"operator/~%3D/","title":"~=","text":""},{"location":"operator/~%3D/#operator","title":"~= operator","text":"<p>See also: </p> <p>~! operator </p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>~! operator </p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>~! operator</p> <p>== operator </p> <p>!= operator </p> <p>operators </p> <p>== operator</p> <p>!= operator </p> <p>operators </p> <p>!= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A ~= B</p> <p>Format: </p> <p>Format:</p> <p>A ~= B</p> <p>Returns: </p> <p>1 if A and B are equivalent; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if A and B are equivalent; 0 otherwise</p> <p>Equivalence is a looser version of equality:</p> <ul> <li>Two lists are equivalent if their contents are the same. (This is a shallow comparison, so it doesn't check if the Nth items are also equivalent, only equal.)</li> <li>Two  /matrix   datums are equivalent if their values are the same.</li> <li>Datums A and B are equivalent if A</li> </ul> <p>overloads   the ~= operator with a proc that returns true for B.</p> <ul> <li> <p>Two lists are equivalent if their contents are the same. (This is a shallow comparison, so it doesn't check if the Nth items are also equivalent, only equal.)</p> </li> <li> <p>Two  /matrix   datums are equivalent if their values are the same.</p> </li> </ul> <p>/matrix - Datums A and B are equivalent if A</p> <p>overloads   the ~= operator with a proc that returns true for B.</p> <p>overloads   the ~= operator with a proc that returns true for B.</p> <p>overloads</p> <p>To check if A and B are equal, use the == operator.</p>"},{"location":"operator/%253c%253c/output/","title":"Output","text":""},{"location":"operator/%253c%253c/output/#output-operator","title":"&lt;&lt; output operator","text":"<p>See also: </p> <p>&lt;&lt; operator (savefile) </p> <p>output proc </p> <p>browse proc </p> <p>browse_rsc proc </p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; operator (savefile) </p> <p>output proc </p> <p>browse proc </p> <p>browse_rsc proc </p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>&lt;&lt; operator (savefile)</p> <p>output proc </p> <p>browse proc </p> <p>browse_rsc proc </p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>output proc</p> <p>browse proc </p> <p>browse_rsc proc </p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>browse proc</p> <p>browse_rsc proc </p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>browse_rsc proc</p> <p>file proc </p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>file proc</p> <p>ftp proc </p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>ftp proc</p> <p>image proc </p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>image proc</p> <p>link proc </p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>link proc</p> <p>load_resource proc </p> <p>run proc </p> <p>sound proc </p> <p>load_resource proc</p> <p>run proc </p> <p>sound proc </p> <p>run proc</p> <p>sound proc </p> <p>sound proc</p> <p>Format: </p> <p>A &lt;&lt; B</p> <p>Format: </p> <p>Format:</p> <p>A &lt;&lt; B</p> <p>Cause the value B to be output to any players connected to mobs specified in A.</p> <p>B may be an image, sound, or text. A may be a mob, the whole world, or any list containing mobs.</p>"},{"location":"operator/%253c%253c/output/#_1","title":"Output","text":"<p>Example:</p> <p>usr &lt;&lt; \"Hi, [usr.name]\" view() &lt;&lt; \"To all in view\" world &lt;&lt; \"Hi everybody!\"</p> <p>usr &lt;&lt; 'giggle.wav' view() &lt;&lt; image(/obj/Fireball,usr)</p>"},{"location":"operator/%253c%253c/shift/","title":"Shift","text":""},{"location":"operator/%253c%253c/shift/#shift-operator","title":"&lt;&lt; shift operator","text":"<p>See also: </p> <p>&gt;&gt; operator </p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; operator </p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>&gt;&gt; operator</p> <p>&lt;&lt;= operator </p> <p>operators </p> <p>&lt;&lt;= operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A &lt;&lt; B</p> <p>Format: </p> <p>Format:</p> <p>A &lt;&lt; B</p> <p>Returns: </p> <p>The bits of A shifted left B times.</p> <p>Returns: </p> <p>Returns:</p> <p>The bits of A shifted left B times.</p> <p>A and B must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>Bits shifted beyond the 24 low bits are lost.</p>"},{"location":"operator/%253e%253e/input/","title":"Input","text":""},{"location":"operator/%253e%253e/input/#input-operator","title":"&gt;&gt; input operator","text":"<p>See also: </p> <p>&gt;&gt; operator (savefile) </p> <p>file proc </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; operator (savefile) </p> <p>file proc </p> <p>&gt;&gt; operator (savefile)</p> <p>file proc </p> <p>file proc</p> <p>Format: </p> <p>F &gt;&gt; Var</p> <p>Format: </p> <p>Format:</p> <p>F &gt;&gt; Var</p> <p>Cause input to be read from a file into a variable. The file may be a savefile or a file object corresponding to a text file.</p>"},{"location":"operator/%253e%253e/shift/","title":"Shift","text":""},{"location":"operator/%253e%253e/shift/#shift-operator","title":"&gt;&gt; shift operator","text":"<p>See also: </p> <p>&gt;&gt;= operator </p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt;= operator </p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>&gt;&gt;= operator</p> <p>&lt;&lt; shift operator </p> <p>operators </p> <p>&lt;&lt; shift operator</p> <p>operators </p> <p>operators</p> <p>Format: </p> <p>A &gt;&gt; B</p> <p>Format: </p> <p>Format:</p> <p>A &gt;&gt; B</p> <p>Returns: </p> <p>The bits of A shifted right B times.</p> <p>Returns: </p> <p>Returns:</p> <p>The bits of A shifted right B times.</p> <p>A and B must be between 0 and 2**24 - 1, giving an effective width of 24 bits.</p> <p>Bits shifted below the 24 low bits are lost.</p>"},{"location":"operator/%26/pointer/","title":"Pointer","text":""},{"location":"operator/%26/pointer/#pointer-operator","title":"&amp; pointer operator","text":"<p>See also: </p> <p>* operator (pointers) </p> <p>operators </p> <p>ispointer proc </p> <p>See also: </p> <p>See also:</p> <p>* operator (pointers) </p> <p>operators </p> <p>ispointer proc </p> <p>* operator (pointers)</p> <p>operators </p> <p>ispointer proc </p> <p>operators</p> <p>ispointer proc </p> <p>ispointer proc</p> <p>Format: </p> <p>&amp;A</p> <p>Format: </p> <p>Format:</p> <p>&amp;A</p> <p>Returns: </p> <p>A pointer to the var or list item A.</p> <p>Returns: </p> <p>Returns:</p> <p>A pointer to the var or list item A.</p> <p>Sometimes it is desirable to have easy access to a var without knowing its name, or send multiple items back from a proc. To do this, you can create a pointer to that var. Then you can use the</p> <p>*</p> <p>operator to refer to the value inside the pointer, or even to assign a value to it.</p> <p>*</p> <p>This operator is also called the reference operator, since it creates a reference to a var that you can use elsewhere.)</p>"},{"location":"operator/%26/pointer/#_1","title":"Pointer","text":"<p>Example:</p> <p>var/a=3, b=4 var/p = &amp;a world &lt;&lt; *p // same as world &lt;&lt; a *p = 5 // same as a = 5</p> <p>var/list/L = list(1, 2, 3) var/list/pl = &amp;L[2] *pl *= 10 // same as L[2] *= 10</p> <p>If you want the compiler to recognize that the item in your pointer var should be a certain type, you can give the pointer var that same type. Hence in the example above,</p> <p>pl</p> <p>is defined as a</p> <p>/list</p> <p>.</p> <p>pl</p> <p>/list</p> <p>You can also call procs this way. You can either wrap the pointer and the</p> <p>*</p> <p>operator in paretheses, like</p> <p>(*p).MyProc()</p> <p>, or you can skip the operator and just call</p> <p>p.MyProc()</p> <p>directly.</p> <p>*</p> <p>(*p).MyProc()</p> <p>p.MyProc()</p> <p>The same also applies to the list index operator</p> <p>[]</p> <p>. If</p> <p>p = &amp;list</p> <p>then you can use</p> <p>(*p)[index]</p> <p>or</p> <p>p[index]</p> <p>interchangeably.</p> <p>[]</p> <p>p = &amp;list</p> <p>(*p)[index]</p> <p>p[index]</p> <p>Pointers can be made for any of these kinds of vars:</p> <ul> <li>Vars belonging to an object</li> <li>Local vars in a proc, including</li> </ul> <p>src</p> <p>,</p> <p>usr</p> <p>, and the</p> <p>.</p> <p>var * Arguments in a proc * Global vars * An item in a list, including values in  associative lists</p> <ul> <li> <p>Vars belonging to an object</p> </li> <li> <p>Local vars in a proc, including</p> </li> </ul> <p>src</p> <p>,</p> <p>usr</p> <p>, and the</p> <p>.</p> <p>var</p> <p>src</p> <p>usr</p> <p>.</p> <ul> <li> <p>Arguments in a proc</p> </li> <li> <p>Global vars</p> </li> <li> <p>An item in a list, including values in  associative lists</p> </li> </ul> <p>associative lists</p> <p>One advantage of pointers is that you can use them to alter a value in a suspended (sleeping) proc.</p>"},{"location":"operator/path/%252e/","title":"%2e","text":""},{"location":"operator/path/%252e/#path-operator","title":". path operator","text":"<p>See also: </p> <p>/ path operator </p> <p>: path operator </p> <p>See also: </p> <p>See also:</p> <p>/ path operator </p> <p>: path operator </p> <p>/ path operator</p> <p>: path operator </p> <p>: path operator</p> <p>The dot operator may be used as a short-cut when specifying a path in the DM code tree. Instead of specifying the full path, you can start a path with a dot and the compiler will search up in the code tree for the following node. This is known as a relative path with an \"upward\" search.</p> <p>Here are the beginnings of a text MUD that allows you to walk around between rooms using the arrow keys. The links between rooms are created in this example by referencing the object type of the destination room. Since there could potentially be a lot of rooms, they are grouped into sub-classes, and to avoid lengthy type paths such as /area/Village/Square, they are referenced using a relative path from the point of reference.</p>"},{"location":"operator/path/%252e/#_1","title":"%2e","text":"<p>Example:</p> <p>area  var/area  north_exit  south_exit  east_exit  west_exit</p> <p>Entered(O)  O &lt;&lt; name  return ..()</p> <p>Castle  Main_Gate  north_exit = .Castle_Entryway  south_exit = .Moat_Bridge  Castle_Entryway  south_exit = .Main_Gate  Moat_Bridge  north_exit = .Main_Gate  south_exit = .Village/Guard_Post  Village  Guard_Post  north_exit = .Castle/Moat_Bridge  south_exit = .Square  Square  north_exit = .Guard_Post</p> <p>//handle movement client/Move(Dest,Dir)  var/area/room = usr.loc  if(istype(room)) //in a room  switch(Dir)  if(NORTH) Dest = room.north_exit  if(SOUTH) Dest = room.south_exit  if(EAST) Dest = room.east_exit  if(WEST) Dest = room.west_exit  return ..()</p> <p>//set the starting position for new logins mob/Login()  if(!loc) Move(locate(/area/Castle/Main_Gate))  return ..()</p>"},{"location":"operator/path/%7BFULLWIDTH%20COLON%7D/","title":"{FULLWIDTH COLON}","text":""},{"location":"operator/path/%7BFULLWIDTH%20COLON%7D/#path-operator","title":": path operator","text":"<p>See also: </p> <p>. path operator </p> <p>/ path operator </p> <p>See also: </p> <p>See also:</p> <p>. path operator </p> <p>/ path operator </p> <p>. path operator</p> <p>/ path operator </p> <p>/ path operator</p> <p>The colon operator may be used as a short-cut when specifying a path in the DM code tree. Instead of specifying the full path, you can insert a colon and the compiler will search down in the tree with the node you specify. This is known as a \"downward\" search. You should only use it when the target node is unique.</p> <p>The following example demonstrates the principle but it obviously doesn't save much typing!</p>"},{"location":"operator/path/%7BFULLWIDTH%20COLON%7D/#_1","title":"{FULLWIDTH COLON}","text":"<p>Example:</p> <p>world  mob = :player //short-cut to /mob/player</p> <p>mob/player  Login()  src &lt;&lt; \"Welcome, [name].\"</p>"},{"location":"operator/path/%7BFULLWIDTH%20SOLIDUS%7D/","title":"{FULLWIDTH SOLIDUS}","text":""},{"location":"operator/path/%7BFULLWIDTH%20SOLIDUS%7D/#path-operator","title":"/ path operator","text":"<p>See also: </p> <p>. path operator </p> <p>: path operator </p> <p>See also: </p> <p>See also:</p> <p>. path operator </p> <p>: path operator </p> <p>. path operator</p> <p>: path operator </p> <p>: path operator</p> <p>This is used to delimit paths in the DM code tree. A path beginning with '/' is an absolute path (which is independent of where in the code it is used). Otherwise, a path is relative, meaning it starts from the current position in the code.</p> <p>The following example uses a path in the code tree to define the type of object to create when leaving a corpse behind.</p>"},{"location":"operator/path/%7BFULLWIDTH%20SOLIDUS%7D/#_1","title":"{FULLWIDTH SOLIDUS}","text":"<p>Example:</p> <p>obj  var  poison  nutrition</p> <p>corpse  frog  nutrition = 10  spider  nutrition = 6  poison = 5 mob  var  corpse = /obj/corpse  Die()  new corpse(src.loc) //create the corpse here  del src</p> <p>spider  corpse = /obj/corpse/spider  frog  corpse = /obj/corpse/frog</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D/pointer/","title":"Pointer","text":""},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D/pointer/#pointer-operator","title":"* pointer operator","text":"<p>See also: </p> <p>&amp; pointer operator </p> <p>operators </p> <p>ispointer proc </p> <p>See also: </p> <p>See also:</p> <p>&amp; pointer operator </p> <p>operators </p> <p>ispointer proc </p> <p>&amp; pointer operator</p> <p>operators </p> <p>ispointer proc </p> <p>operators</p> <p>ispointer proc </p> <p>ispointer proc</p> <p>Format: </p> <p>*A</p> <p>Format: </p> <p>Format:</p> <p>*A</p> <p>Returns: </p> <p>The value pointed at by a pointer stored in A</p> <p>Returns: </p> <p>Returns:</p> <p>The value pointed at by a pointer stored in A</p> <p>When using the</p> <p>&amp;</p> <p>operator to get a reference pointer, you can access the value it points to with this version of the</p> <p>*</p> <p>operator. This can also be used on the left-hand side of assignment operations, for instance</p> <p>*A = B</p> <p>or</p> <p>*X += Y</p> <p>, to store the result in the place the pointer indicates.</p> <p>&amp;</p> <p>*</p> <p>*A = B</p> <p>*X += Y</p> <p>This operator is also called the dereference operator, since it takes a pointer reference and gives you the value within.)</p>"},{"location":"operator/%7BFULLWIDTH%20ASTERISK%7D/pointer/#_1","title":"Pointer","text":"<p>Example:</p> <p>atom/proc/PixelPos(px, py) // get an exact step position  *px = (x-1) * 32 // this code assumes a 32x32 icon size  *py = (y-1) * 32</p> <p>atom/movable/PixelPos(px, py) // get an exact step position  ..()  *px += (x-1) * 32 + step_x // this code assumes a 32x32 icon size  *py += (y-1) * 32 + step_y</p> <p>mob/verb/WhereAmI()  var/X, Y  PixelPos(&amp;X, &amp;Y)  usr &lt;&lt; \"You are at [X],[Y] on level [z]\"</p> <p>Note: If you try to read to or write from a pointer reference that is no longer valid, such as to a var inside a proc that has ended, the read or write will fail silently; reading will return a null value. (An exception is pointers to list items. If the index is out of bounds, you will get the expected error.)</p>"},{"location":"proc/%252e%252e/","title":"%2e%2e","text":""},{"location":"proc/%252e%252e/#proc","title":".. proc","text":"<p>See also: </p> <p>. proc </p> <p>See also: </p> <p>See also:</p> <p>. proc </p> <p>. proc</p> <p>Format: </p> <p>..(Args)</p> <p>Format: </p> <p>Format:</p> <p>..(Args)</p> <p>Returns: </p> <p>The return value of the parent proc.</p> <p>Returns: </p> <p>Returns:</p> <p>The return value of the parent proc.</p> <p>Args: </p> <p>The arguments to pass to the parent proc. This defaults to the  arguments to the current proc.</p> <p>Args: </p> <p>Args:</p> <p>The arguments to pass to the parent proc. This defaults to the  arguments to the current proc.</p> <p>If object O is derived from object P, P is called the parent of O. If a proc (or verb) is defined in both O and P, O can call P's version by using ..().</p>"},{"location":"proc/%252e%252e/#_1","title":"%2e%2e","text":"<p>Example:</p> <p>mob  P  verb/history()  world &lt;&lt; \"P\"</p> <p>O  history()  world &lt;&lt; \"O\"  ..() // call P.history()</p> <p>Here O is derived from P. When P calls \"history\", his name is displayed. When O calls \"history\", his name is displayed, followed by the name of his parent, P.</p> <p>If O overrides the same proc more than once, ..() will search for the previous version and use that. For instance, you could have two O.history() procs; the second overrides the first, but the original could still be called via ..(). The original in turn could call ..() to reach P.history(). Overriding the same proc more than once in the same type should be avoided wherever possible, because it incurs extra overhead, it makes the code harder to read, and it isn't always clear which one gets called first. (Usually, the only time you'll want this to happen is when using libraries.)</p> <p>..() can also be used for predefined procs.</p>"},{"location":"proc/%252e%252e/#_2","title":"%2e%2e","text":"<p>Example:</p> <p>mob/Move() // override proc  world &lt;&lt; \"moving...\"  return ..() // call default</p> <p>This proc will print \"moving...\" whenever the mob moves.</p>"},{"location":"proc/%252e/","title":"%2e","text":""},{"location":"proc/%252e/#proc","title":". proc","text":"<p>See also: </p> <p>.. proc </p> <p>See also: </p> <p>See also:</p> <p>.. proc </p> <p>.. proc</p> <p>Format: </p> <p>.(Args)</p> <p>Format: </p> <p>Format:</p> <p>.(Args)</p> <p>Returns: </p> <p>The return value of the current proc.</p> <p>Returns: </p> <p>Returns:</p> <p>The return value of the current proc.</p> <p>Args: </p> <p>The arguments to pass to the new invocation of the current proc. This  defaults to current arguments.</p> <p>Args: </p> <p>Args:</p> <p>The arguments to pass to the new invocation of the current proc. This  defaults to current arguments.</p> <p>Call the current proc. A proc that calls itself is said to be recursive.</p>"},{"location":"proc/%252e/#_1","title":"%2e","text":"<p>Example:</p> <p>proc/factorial(N as num)  if(N&lt;=0) return 1  return .(N-1)*N</p> <p>This computes the factorial N! by calling itself recursively.</p>"},{"location":"proc/ASSERT/","title":"ASSERT","text":""},{"location":"proc/ASSERT/#assert-proc","title":"ASSERT proc","text":"<p>See also: </p> <p>CRASH proc </p> <p>DEBUG definition </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>CRASH proc </p> <p>DEBUG definition </p> <p>stddef.dm file </p> <p>CRASH proc</p> <p>DEBUG definition </p> <p>stddef.dm file </p> <p>DEBUG definition</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>Format: </p> <p>ASSERT(expression)</p> <p>Format: </p> <p>Format:</p> <p>ASSERT(expression)</p> <p>Args: </p> <p>expression: an expression which should always be true</p> <p>Args: </p> <p>Args:</p> <p>expression: an expression which should always be true</p> <p>This is used to make a sanity check. If the given expression is false, the current procedure crashes, generating diagnostic debugging output, which includes the expression, a stack dump, and so forth.</p>"},{"location":"proc/CRASH/","title":"CRASH","text":""},{"location":"proc/CRASH/#crash-proc","title":"CRASH proc","text":"<p>See also: </p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>See also: </p> <p>See also:</p> <p>ASSERT proc </p> <p>DEBUG definition </p> <p>ASSERT proc</p> <p>DEBUG definition </p> <p>DEBUG definition</p> <p>Format: </p> <p>CRASH(msg)</p> <p>Format: </p> <p>Format:</p> <p>CRASH(msg)</p> <p>Crashes the current procedure, displaying the specified message and generating diagnostic debugging output, such as a stack dump.</p>"},{"location":"proc/EXCEPTION/","title":"EXCEPTION","text":""},{"location":"proc/EXCEPTION/#exception-proc","title":"EXCEPTION proc","text":"<p>See also: </p> <p>try and catch statements </p> <p>throw statement </p> <p>exception </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>try and catch statements </p> <p>throw statement </p> <p>exception </p> <p>stddef.dm file </p> <p>try and catch statements</p> <p>throw statement </p> <p>exception </p> <p>stddef.dm file </p> <p>throw statement</p> <p>exception </p> <p>stddef.dm file </p> <p>exception</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>Format: </p> <p>EXCEPTION(value)</p> <p>Format: </p> <p>Format:</p> <p>EXCEPTION(value)</p> <p>Args: </p> <p>value: A text string (such as an error message) or other value identifying the exception.</p> <p>Args: </p> <p>Args:</p> <p>value: A text string (such as an error message) or other value identifying the exception.</p> <p>This is used to create an /exception datum, and is shorthand for calling new/exception(value, __FILE__, __LINE__). The value you provide will be in exception.name.</p>"},{"location":"proc/REGEX_QUOTE/","title":"REGEX QUOTE","text":""},{"location":"proc/REGEX_QUOTE/#regex_quote-proc","title":"REGEX_QUOTE proc","text":"<p>See also: </p> <p>regex proc </p> <p>regex datum </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>regex proc </p> <p>regex datum </p> <p>stddef.dm file </p> <p>regex proc</p> <p>regex datum </p> <p>stddef.dm file </p> <p>regex datum</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>Format: </p> <p>REGEX_QUOTE(text)</p> <p>REGEX_QUOTE_REPLACEMENT(text)</p> <p>Format: </p> <p>Format:</p> <p>REGEX_QUOTE(text)</p> <p>REGEX_QUOTE_REPLACEMENT(text)</p> <p>REGEX_QUOTE_REPLACEMENT(text)</p> <p>Returns: </p> <p>REGEX_QUOTE: A version of the text with any special regular expression characters escaped by backslashes.</p> <p>REGEX_QUOTE_REPLACEMENT: A version of the text with $ characters escaped by a second $.</p> <p>Returns: </p> <p>Returns:</p> <p>REGEX_QUOTE: A version of the text with any special regular expression characters escaped by backslashes.</p> <p>REGEX_QUOTE_REPLACEMENT: A version of the text with $ characters escaped by a second $.</p> <p>REGEX_QUOTE_REPLACEMENT: A version of the text with $ characters escaped by a second $.</p> <p>Args: </p> <p>text: The text to escape</p> <p>Args: </p> <p>Args:</p> <p>text: The text to escape</p> <p>Quotes a piece of text so that it can be used inside a regular expression without fear of being treated as pattern instructions.</p>"},{"location":"proc/REGEX_QUOTE/#_1","title":"REGEX QUOTE","text":"<p>Example:</p> <p>proc/FindWord(text, word)  // The \\b pattern is a word break, to search for the word  // on its own instead of as part of another word.  var/regex/R = regex(\"\\b[REGEX_QUOTE(word)]\\b\", \"i\")  // find the pattern in the text  return R.Find(text)</p>"},{"location":"proc/abs/","title":"Abs","text":""},{"location":"proc/abs/#abs-proc","title":"abs proc","text":"<p>Format: </p> <p>abs(A)</p> <p>Format: </p> <p>Format:</p> <p>abs(A)</p> <p>Returns: </p> <p>The absolute value of A.</p> <p>Returns: </p> <p>Returns:</p> <p>The absolute value of A.</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p>"},{"location":"proc/abs/#_1","title":"Abs","text":"<p>Example:</p> <p>usr &lt;&lt; abs(1) // outputs 1 usr &lt;&lt; abs(-1) // outputs 1</p>"},{"location":"proc/addtext/","title":"Addtext","text":""},{"location":"proc/addtext/#addtext-proc","title":"addtext proc","text":"<p>See also: </p> <p>+ operator </p> <p>See also: </p> <p>See also:</p> <p>+ operator </p> <p>+ operator</p> <p>Format: </p> <p>addtext(Arg1,Arg2,...)</p> <p>Format: </p> <p>Format:</p> <p>addtext(Arg1,Arg2,...)</p> <p>Returns: </p> <p>A text string with the arguments concatenated.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string with the arguments concatenated.</p> <p>Args: </p> <p>Any number of text strings.</p> <p>Args: </p> <p>Args:</p> <p>Any number of text strings.</p> <p>This instruction returns text containing the first argument followed by the second, followed by the third, etc. The arguments may be constants or variables containing text.</p>"},{"location":"proc/addtext/#_1","title":"Addtext","text":"<p>Example:</p> <p>var/T T = \"1\" T = addtext(T,\"*1 = \",T) // T = \"1*1 = 1\" world &lt;&lt; \"The answer is: [T]\"</p> <p>This instruction exists primarily for backwards-compatibility. You can accomplish the same thing with the + operator or by using embedded expressions.</p>"},{"location":"proc/alert/","title":"Alert","text":""},{"location":"proc/alert/#alert-proc","title":"alert proc","text":"<p>See also: </p> <p>input proc </p> <p>See also: </p> <p>See also:</p> <p>input proc </p> <p>input proc</p> <p>Format: </p> <p>alert(Usr=usr,Message,Title,Button1=\"Ok\",Button2,Button3)</p> <p>Format: </p> <p>Format:</p> <p>alert(Usr=usr,Message,Title,Button1=\"Ok\",Button2,Button3)</p> <p>Returns: </p> <p>Selected button</p> <p>Returns: </p> <p>Returns:</p> <p>Selected button</p> <p>This sleeps the current proc until the user clicks one of the named buttons. As with input(), the first argument may be entirely left out.</p>"},{"location":"proc/alert/#_1","title":"Alert","text":"<p>Example:</p> <p>mob/verb/self_destruct()  alert(\"Prepare to die.\")  del usr</p> <p>A slightly more complicated example provides the user with a choice in the matter:</p>"},{"location":"proc/alert/#_2","title":"Alert","text":"<p>Example:</p> <p>mob/verb/self_destruct()  switch(alert(\"Would you like to die?\",,\"Yes\",\"No\",\"Maybe\"))  if(\"Yes\")  del usr  if(\"No\")  usr &lt;&lt; \"You have second thoughts.\"  if(\"Maybe\")  usr &lt;&lt; \"You flip a coin...\"  if(rand(0,1))  usr &lt;&lt; \"Heads -- you lose.\"  del usr  else  usr &lt;&lt; \"Tails -- you win!\"</p>"},{"location":"proc/animate/","title":"Animate","text":""},{"location":"proc/animate/#animate-proc","title":"animate proc","text":"<p>See also: </p> <p>vars (atom) </p> <p>See also: </p> <p>See also:</p> <p>vars (atom) </p> <p>vars (atom)</p> <p>Format: </p> <p>animate(Object, var1=new_value1, var2=new_value2, ..., time, loop, easing, flags, delay)</p> <p>animate(var1=new_value1, var2=new_value2, ..., time, easing, flags, delay)</p> <p>animate(Object)</p> <p>Format: </p> <p>Format:</p> <p>animate(Object, var1=new_value1, var2=new_value2, ..., time, loop, easing, flags, delay)</p> <p>animate(var1=new_value1, var2=new_value2, ..., time, easing, flags, delay)</p> <p>animate(Object)</p> <p>animate(var1=new_value1, var2=new_value2, ..., time, easing, flags, delay)</p> <p>animate(Object)</p> <p>animate(Object)</p> <p>Args: </p> <p>Object: The atom, image, or client to animate. (Leave out to do a following animation step on the same object.)</p> <p>var1=new_value1, var2=new_value2, ...: Vars to change in the animation step.</p> <p>time: Time of this step, in 1/10s. (may be a  named argument   )</p> <p>loop: Number of times to show the animation, or -1 to loop forever (may be a named argument)</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>Args: </p> <p>Args:</p> <p>Object: The atom, image, or client to animate. (Leave out to do a following animation step on the same object.)</p> <p>var1=new_value1, var2=new_value2, ...: Vars to change in the animation step.</p> <p>time: Time of this step, in 1/10s. (may be a  named argument   )</p> <p>loop: Number of times to show the animation, or -1 to loop forever (may be a named argument)</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>var1=new_value1, var2=new_value2, ...: Vars to change in the animation step.</p> <p>time: Time of this step, in 1/10s. (may be a  named argument   )</p> <p>loop: Number of times to show the animation, or -1 to loop forever (may be a named argument)</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>time: Time of this step, in 1/10s. (may be a  named argument   )</p> <p>loop: Number of times to show the animation, or -1 to loop forever (may be a named argument)</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>named argument</p> <p>loop: Number of times to show the animation, or -1 to loop forever (may be a named argument)</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>easing: The \"curve\" followed by this animation step (may be a  named argument   )</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>named argument</p> <p>flags: Flags that impact how the animation acts (may be a  named argument   )</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>named argument</p> <p>delay: Delay time for starting the first step in an animation chain (may be negative; may be a  named argument   )</p> <p>named argument</p> <p>This proc creates an animation sequence that will be displayed to players. Starting with an atom or image, you can change one or more vars that affect its apprearance. This change will take place immediately, but will be displayed to users as a gradual change over a period of time. The actual interpolation between frames is all done on the client.</p> <p>If the</p> <p>Object</p> <p>argument is left out, a new animation step will be created for the previously used animation seqeunce. If all other arguments are left out, this is tantamount to saying you want to start a new animation that does nothing, effectively ending the animation entirely.</p> <p>Object</p>"},{"location":"proc/animate/#_1","title":"Animate","text":"<p>Example:</p> <p>mob/proc/GrowAndFade()  // expand (scale by 2x2) and fade out over 1/2s  animate(src, transform = matrix()*2, alpha = 0, time = 5)</p> <p>obj/spell/proc/Spin()  // cast a spell on a monster: make the icon spin  // this animation takes 3s total (6 ticks * 5)  animate(src, transform = turn(matrix(), 120), time = 2, loop = 5)  animate(transform = turn(matrix(), 240), time = 2)  animate(transform = null, time = 2)</p> <p>The following vars will animate smoothly:</p> <ul> <li>alpha</li> <li>color</li> <li>glide_size</li> <li>infra_luminosity</li> <li>layer</li> <li>maptext_width, maptext_height, maptext_x, maptext_y</li> <li>luminosity</li> <li>pixel_x, pixel_y, pixel_w, pixel_z</li> <li> <p>transform</p> </li> <li> <p>alpha</p> </li> <li> <p>color</p> </li> <li> <p>glide_size</p> </li> <li> <p>infra_luminosity</p> </li> <li> <p>layer</p> </li> <li> <p>maptext_width, maptext_height, maptext_x, maptext_y</p> </li> <li> <p>luminosity</p> </li> <li> <p>pixel_x, pixel_y, pixel_w, pixel_z</p> </li> <li> <p>transform</p> </li> </ul> <p>These vars can be changed, but will change immediately on each step rather than smoothly:</p> <ul> <li>dir</li> <li>icon</li> <li>icon_state</li> <li>invisibility</li> <li>maptext</li> <li> <p>suffix</p> </li> <li> <p>dir</p> </li> <li> <p>icon</p> </li> <li> <p>icon_state</p> </li> <li> <p>invisibility</p> </li> <li> <p>maptext</p> </li> <li> <p>suffix</p> </li> </ul> <p>Other vars may apply:</p> <ul> <li> <p>space: A named var for the  color space   , if animating color; only applies to non-matrix color values.</p> </li> <li> <p>space: A named var for the  color space   , if animating color; only applies to non-matrix color values.</p> </li> </ul> <p>color space</p> <p>For convenience, you can use an  associative list   , appearance, or  mutable appearance   in place of the appearance vars. You can use</p> <p>appearance</p> <p>itself as a name for this argument, or leave the argument unnamed.</p> <p>associative list mutable appearance</p> <p>appearance</p>"},{"location":"proc/animate/#_2","title":"Animate","text":"<p>Easing</p> <p>Animation doesn't have to be strictly linear. Some changes look much better if they follow a curve. A cubic curve, for instance, will start slow, accelerate very quickly in the middle, and slow down again at the end. A sine curve could be used with a flip transformation to make a coin appear to spin. A text bubble can jump into place and bounce a little before it settles. The choice of curve you use is called easing, and you have several good choices to pick from.</p> <p>function easing(t,ease,doubled) {  var _in=(ease&amp;64), _out=(ease&amp;128), b; ease &amp;= 63;  t = Math.max(0,Math.min(1,t)); // clamp t  if(!ease) return t; // linear case, simplest of all  if(!_in &amp;&amp; !_out) { // default case  switch(ease) {  case 4: case 5: case 8: _out = true; break; // bounce, elastic, jump  default: _in = _out = true; break; // all other cases  }  }  if(_in &amp;&amp; _out) {  if(ease == 8) return t &lt;= 0.5 ? 0 : 1; // jump is a special case  return ((t &lt;= 0.5) ? easing(t*2,ease|64,true) : easing(t*2-1,ease|128,true)+1) / 2;  }  if(_in) return 1-easing(1-t,ease|128,doubled);  switch(ease) { // all out cases  case 1: // sine  return Math.sin(t*Math.PI/2);  case 2: // circular  t = 1-t; return Math.sqrt(1 - t*t);  case 3: // cubic  t = 1-t; return 1 - t*t*t;  case 4: // bounce  b = t*2.75;  if(b&lt;1) return b*b; // 1st arc  if(b&lt;2) {b-=1.5; return b*b + 0.75;} // bounce #1  if(b&lt;2.5) {b-=2.25; return b*b + 0.9375;} // bounce #2  b-=2.625; return b*b + 0.984375; // final bounce  case 5: // elastic  return 1 - Math.pow(2,-10*t) * Math.cos(t*Math.PI/0.15);  case 6: // back  b = doubled ? 2.59491 : 1.70158;  t = 1-t; return 1 - t*t*((b+1)*t - b);  case 7: // quad  t = 1-t; return 1 - t*t;  case 8: // jump  return (t&lt;1) ? 0 : 1;  default: return t;  } } function drawEasing() {  var canvas = document.querySelector('#easing_canvas');  var ease = document.querySelector('#easing_type').value;  if(document.querySelector('#ease_in').checked) ease |= 64;  if(document.querySelector('#ease_out').checked) ease |= 128;  var ctx=canvas.getContext(\"2d\"), t, y, w=ctx.canvas.width, h=ctx.canvas.height, margin=5, miny=0, maxy=1, s;  ctx.fillStyle = 'white';  ctx.fillRect(0,0,w,h);  ctx.fillStyle = 'transparent';</p> <p>w -= margin*2+1; h -= margin*2+1;  for(x=0,y=[]; x&lt;=w; ++x) {  y[x] = easing(x/w,ease);  if(y[x] &lt; miny) miny = y[x];  else if(y[x] &gt; maxy) maxy = y[x];  }  s = h / (maxy-miny);</p> <p>ctx.beginPath();  ctx.setLineDash([3,3]); ctx.strokeStyle = 'rgba(0,128,0,0.5)'; ctx.strokeWidth = 1;  ctx.moveTo(margin, margin+h+miny*s); ctx.lineTo(margin+w, margin+h+miny*s);  ctx.stroke();</p> <p>ctx.beginPath();  ctx.strokeStyle = 'rgba(0,128,255,0.5)';  ctx.moveTo(margin, margin+(maxy-1)*s); ctx.lineTo(margin+w, margin+(maxy-1)*s);  ctx.stroke();</p> <p>ctx.beginPath();  ctx.setLineDash([]); ctx.strokeStyle = 'black';  ctx.moveTo(margin, margin+h+miny*s);  for(x=1; x&lt;=w; ++x) ctx.lineTo(margin+x, margin+h+(miny-y[x])*s);  ctx.stroke(); }</p> <p>function easing(t,ease,doubled) {  var _in=(ease&amp;64), _out=(ease&amp;128), b; ease &amp;= 63;  t = Math.max(0,Math.min(1,t)); // clamp t  if(!ease) return t; // linear case, simplest of all  if(!_in &amp;&amp; !_out) { // default case  switch(ease) {  case 4: case 5: case 8: _out = true; break; // bounce, elastic, jump  default: _in = _out = true; break; // all other cases  }  }  if(_in &amp;&amp; _out) {  if(ease == 8) return t &lt;= 0.5 ? 0 : 1; // jump is a special case  return ((t &lt;= 0.5) ? easing(t*2,ease|64,true) : easing(t*2-1,ease|128,true)+1) / 2;  }  if(_in) return 1-easing(1-t,ease|128,doubled);  switch(ease) { // all out cases  case 1: // sine  return Math.sin(t*Math.PI/2);  case 2: // circular  t = 1-t; return Math.sqrt(1 - t*t);  case 3: // cubic  t = 1-t; return 1 - t*t*t;  case 4: // bounce  b = t*2.75;  if(b&lt;1) return b*b; // 1st arc  if(b&lt;2) {b-=1.5; return b*b + 0.75;} // bounce #1  if(b&lt;2.5) {b-=2.25; return b*b + 0.9375;} // bounce #2  b-=2.625; return b*b + 0.984375; // final bounce  case 5: // elastic  return 1 - Math.pow(2,-10*t) * Math.cos(t*Math.PI/0.15);  case 6: // back  b = doubled ? 2.59491 : 1.70158;  t = 1-t; return 1 - t*t*((b+1)*t - b);  case 7: // quad  t = 1-t; return 1 - t*t;  case 8: // jump  return (t&lt;1) ? 0 : 1;  default: return t;  } } function drawEasing() {  var canvas = document.querySelector('#easing_canvas');  var ease = document.querySelector('#easing_type').value;  if(document.querySelector('#ease_in').checked) ease |= 64;  if(document.querySelector('#ease_out').checked) ease |= 128;  var ctx=canvas.getContext(\"2d\"), t, y, w=ctx.canvas.width, h=ctx.canvas.height, margin=5, miny=0, maxy=1, s;  ctx.fillStyle = 'white';  ctx.fillRect(0,0,w,h);  ctx.fillStyle = 'transparent';</p> <p>w -= margin*2+1; h -= margin*2+1;  for(x=0,y=[]; x&lt;=w; ++x) {  y[x] = easing(x/w,ease);  if(y[x] &lt; miny) miny = y[x];  else if(y[x] &gt; maxy) maxy = y[x];  }  s = h / (maxy-miny);</p> <p>ctx.beginPath();  ctx.setLineDash([3,3]); ctx.strokeStyle = 'rgba(0,128,0,0.5)'; ctx.strokeWidth = 1;  ctx.moveTo(margin, margin+h+miny*s); ctx.lineTo(margin+w, margin+h+miny*s);  ctx.stroke();</p> <p>ctx.beginPath();  ctx.strokeStyle = 'rgba(0,128,255,0.5)';  ctx.moveTo(margin, margin+(maxy-1)*s); ctx.lineTo(margin+w, margin+(maxy-1)*s);  ctx.stroke();</p> <p>ctx.beginPath();  ctx.setLineDash([]); ctx.strokeStyle = 'black';  ctx.moveTo(margin, margin+h+miny*s);  for(x=1; x&lt;=w; ++x) ctx.lineTo(margin+x, margin+h+(miny-y[x])*s);  ctx.stroke(); }</p> <p>In this play area, you can test different easing functions to see how they work.</p> <p>The horizontal axis from left to right represents the time of the animation from beginning to end. The vertical axis, from bottom to top, is how the animation will be interpolated; the lower green line represents the starting appearance, and the upper blue line is the ending appearance.</p> <p>Progress \u2192</p> <p>|   | |  |   Time \u2192   |</p> <p>LINEAR_EASING</p> <p>SINE_EASING</p> <p>CIRCULAR_EASING</p> <p>CUBIC_EASING</p> <p>BOUNCE_EASING</p> <p>ELASTIC_EASING</p> <p>BACK_EASING</p> <p>QUAD_EASING</p> <p>JUMP_EASING</p> <p>EASE_IN</p> <p>EASE_OUT</p> <p>In this play area, you can test different easing functions to see how they work.</p> <p>The horizontal axis from left to right represents the time of the animation from beginning to end. The vertical axis, from bottom to top, is how the animation will be interpolated; the lower green line represents the starting appearance, and the upper blue line is the ending appearance.</p> <p>Progress \u2192</p> <p>|   | |  |   Time \u2192   |</p> <p>LINEAR_EASING</p> <p>SINE_EASING</p> <p>CIRCULAR_EASING</p> <p>CUBIC_EASING</p> <p>BOUNCE_EASING</p> <p>ELASTIC_EASING</p> <p>BACK_EASING</p> <p>QUAD_EASING</p> <p>JUMP_EASING</p> <p>EASE_IN</p> <p>EASE_OUT</p> <p>Progress \u2192</p> <p>|   | |  |   Time \u2192   |</p> <p>| </p> <p>Progress \u2192</p> <p>Progress \u2192</p> <p>|</p> <p>Progress \u2192</p> <p>Progress \u2192</p> <p>|</p> <p>|  |   Time \u2192   |</p> <p>|</p> <p>Time \u2192   |</p> <p>Time \u2192</p> <p>LINEAR_EASING</p> <p>SINE_EASING</p> <p>CIRCULAR_EASING</p> <p>CUBIC_EASING</p> <p>BOUNCE_EASING</p> <p>ELASTIC_EASING</p> <p>BACK_EASING</p> <p>QUAD_EASING</p> <p>JUMP_EASING</p> <p>EASE_IN</p> <p>EASE_OUT</p> <p>LINEAR_EASING</p> <p>SINE_EASING</p> <p>CIRCULAR_EASING</p> <p>CUBIC_EASING</p> <p>BOUNCE_EASING</p> <p>ELASTIC_EASING</p> <p>BACK_EASING</p> <p>QUAD_EASING</p> <p>JUMP_EASING</p> <p>LINEAR_EASING</p> <p>SINE_EASING</p> <p>CIRCULAR_EASING</p> <p>CUBIC_EASING</p> <p>BOUNCE_EASING</p> <p>ELASTIC_EASING</p> <p>BACK_EASING</p> <p>QUAD_EASING</p> <p>JUMP_EASING</p> <p>EASE_IN</p> <p>EASE_OUT</p> <p>LINEAR_EASING</p> <p>Default. Go from one value to another at a constant rate.</p> <p>SINE_EASING</p> <p>The animation follows a sine curve, so it starts off and finishes slowly, with a quicker transition in the middle.</p> <p>CIRCULAR_EASING</p> <p>Similar to a sine curve, but each half of the curve is shaped like a quarter circle.</p> <p>QUAD_EASING</p> <p>A quadratic curve, good for gravity effects.</p> <p>CUBIC_EASING</p> <p>A cubic curve, a little more pronounced than a sine curve.</p> <p>BOUNCE_EASING</p> <p>This transitions quickly like a falling object, and bounces a few times.</p> <p>Uses</p> <p>EASE_OUT</p> <p>unless otherwise specified.</p> <p>ELASTIC_EASING</p> <p>This transitions quickly and overshoots, rebounds, and finally settles down.</p> <p>Uses</p> <p>EASE_OUT</p> <p>unless otherwise specified.</p> <p>BACK_EASING</p> <p>Goes a little bit backward at first, and overshoots a little at the end.</p> <p>JUMP_EASING</p> <p>Jumps suddenly from the beginning state to the end. With the default or</p> <p>EASE_OUT</p> <p>, this happens at the end of the time slice. With</p> <p>EASE_IN</p> <p>, the jump happens at the beginning. With both flags set, the jump happens at the halfway point.</p> <p>LINEAR_EASING</p> <p>Default. Go from one value to another at a constant rate.</p> <p>SINE_EASING</p> <p>The animation follows a sine curve, so it starts off and finishes slowly, with a quicker transition in the middle.</p> <p>CIRCULAR_EASING</p> <p>Similar to a sine curve, but each half of the curve is shaped like a quarter circle.</p> <p>QUAD_EASING</p> <p>A quadratic curve, good for gravity effects.</p> <p>CUBIC_EASING</p> <p>A cubic curve, a little more pronounced than a sine curve.</p> <p>BOUNCE_EASING</p> <p>This transitions quickly like a falling object, and bounces a few times.</p> <p>Uses</p> <p>EASE_OUT</p> <p>unless otherwise specified.</p> <p>EASE_OUT</p> <p>ELASTIC_EASING</p> <p>This transitions quickly and overshoots, rebounds, and finally settles down.</p> <p>Uses</p> <p>EASE_OUT</p> <p>unless otherwise specified.</p> <p>EASE_OUT</p> <p>BACK_EASING</p> <p>Goes a little bit backward at first, and overshoots a little at the end.</p> <p>JUMP_EASING</p> <p>Jumps suddenly from the beginning state to the end. With the default or</p> <p>EASE_OUT</p> <p>, this happens at the end of the time slice. With</p> <p>EASE_IN</p> <p>, the jump happens at the beginning. With both flags set, the jump happens at the halfway point.</p> <p>EASE_OUT</p> <p>EASE_IN</p> <p>These can be combined with</p> <p>EASE_IN</p> <p>or</p> <p>EASE_OUT</p> <p>using the</p> <p>|</p> <p>operator, to use just the first or last part of the curve.</p> <p>EASE_IN</p> <p>EASE_OUT</p> <p>|</p>"},{"location":"proc/animate/#_3","title":"Animate","text":"<p>Example:</p> <p>obj/coin/proc/Spin()  var/matrix/M = matrix()  M.Scale(-1, 1) // flip horizontally  animate(src, transform = M, time = 5, loop = 5, easing = SINE_EASING)  animate(transform = null, time = 5, easing = SINE_EASING)</p> <p>obj/speech_bubble/New(newloc, msg)  icon = 'bubble.dmi'</p> <p>var/obj/O = new  O.maptext = msg  O.maptext_width = width  O.maptext_height = height  overlays = O</p> <p>// start below final position and jump into place  pixel_z = -100  alpha = 0  animate(src, pixel_z = 0, alpha = 255, time = 10, easing = ELASTIC_EASING)</p> <p>Some easing functions may overshoot one line or the other, so it's fully possible to have a</p> <p>pixel_w</p> <p>value, for instance, animate from 0 to 100 but actually end up briefly outside of that range during the animation.</p> <p>pixel_w</p>"},{"location":"proc/animate/#_4","title":"Animate","text":"<p>Flags</p> <p>Any combination of these flags may be used for animation (use</p> <p>+</p> <p>or</p> <p>|</p> <p>to combine them):</p> <p>+</p> <p>|</p> <p>ANIMATION_END_NOW</p> <p>Normally if you interrupt another animation, it transitions from its  current state. This flag will start the new animation fresh by bringing  the old one to its conclusion. It is only meaningful on the first step  of a new animation.</p> <p>ANIMATION_LINEAR_TRANSFORM</p> <p>The transform var is interpolated in a way that preserves size during  rotation, by pulling the rotation step out. This flag forces linear  interpolation, which may be more desirable for things like beam effects,  mechanical arms, etc.</p> <p>ANIMATION_PARALLEL</p> <p>Start a parallel animation sequence that runs alongside the current  animation sequence. The difference between where the parallel sequence  started, and its current appearance, is added to the result of any  previous animations. For instance, you could use this to animate pixel_y  separately from pixel_x with different timing and easing. You could also  use this to apply a rotational transform after a previous animation  sequence did a translate. (When using this flag, the src var may be  included, but it is optional.)</p> <p>ANIMATION_RELATIVE</p> <p>The vars specified are relative to the current state. This works for  maptext_x/y/width/height, pixel_x/y/w/z, luminosity, layer, alpha,  transform, and color. For transform and color, the current value is  multiplied by the new one. Vars not in this list are simply changed as  if this flag is not present. (If you supply an appearance instead of  individual vars, this flag is meaningless.)</p> <p>ANIMATION_CONTINUE</p> <p>This flag is equivalent to leaving out the</p> <p>Object</p> <p>argument.  It exists to make it easier to define an animation using a  for loop   . If</p> <p>Object</p> <p>differs from the  previous sequence, this flag will be ignored and a new sequence will  start.</p> <p>ANIMATION_SLICE</p> <p>Following a series of</p> <p>animate()</p> <p>calls, you can view just a  portion of the animation by using</p> <p>animate(object, delay=start,  time=duration, flags=ANIMATION_SLICE)</p> <p>. The</p> <p>loop</p> <p>parameter  may optionally be included. The</p> <p>delay</p> <p>is the start time of the  slice, relative to the beginning of all the active animations on the  object. (That is, earlier animations that have concluded will not be  included.) You can call the proc again with a different slice if you  want to see a different portion of the animation. A negative value for</p> <p>time</p> <p>will remove the slice and finish any existing animations.</p> <p>ANIMATION_END_NOW</p> <p>ANIMATION_END_NOW</p> <p>Normally if you interrupt another animation, it transitions from its  current state. This flag will start the new animation fresh by bringing  the old one to its conclusion. It is only meaningful on the first step  of a new animation.</p> <p>ANIMATION_LINEAR_TRANSFORM</p> <p>ANIMATION_LINEAR_TRANSFORM</p> <p>The transform var is interpolated in a way that preserves size during  rotation, by pulling the rotation step out. This flag forces linear  interpolation, which may be more desirable for things like beam effects,  mechanical arms, etc.</p> <p>ANIMATION_PARALLEL</p> <p>ANIMATION_PARALLEL</p> <p>Start a parallel animation sequence that runs alongside the current  animation sequence. The difference between where the parallel sequence  started, and its current appearance, is added to the result of any  previous animations. For instance, you could use this to animate pixel_y  separately from pixel_x with different timing and easing. You could also  use this to apply a rotational transform after a previous animation  sequence did a translate. (When using this flag, the src var may be  included, but it is optional.)</p> <p>ANIMATION_RELATIVE</p> <p>ANIMATION_RELATIVE</p> <p>The vars specified are relative to the current state. This works for  maptext_x/y/width/height, pixel_x/y/w/z, luminosity, layer, alpha,  transform, and color. For transform and color, the current value is  multiplied by the new one. Vars not in this list are simply changed as  if this flag is not present. (If you supply an appearance instead of  individual vars, this flag is meaningless.)</p> <p>ANIMATION_CONTINUE</p> <p>ANIMATION_CONTINUE</p> <p>This flag is equivalent to leaving out the</p> <p>Object</p> <p>argument.  It exists to make it easier to define an animation using a  for loop   . If</p> <p>Object</p> <p>differs from the  previous sequence, this flag will be ignored and a new sequence will  start.</p> <p>Object</p> <p>for loop</p> <p>Object</p> <p>ANIMATION_SLICE</p> <p>ANIMATION_SLICE</p> <p>Following a series of</p> <p>animate()</p> <p>calls, you can view just a  portion of the animation by using</p> <p>animate(object, delay=start,  time=duration, flags=ANIMATION_SLICE)</p> <p>. The</p> <p>loop</p> <p>parameter  may optionally be included. The</p> <p>delay</p> <p>is the start time of the  slice, relative to the beginning of all the active animations on the  object. (That is, earlier animations that have concluded will not be  included.) You can call the proc again with a different slice if you  want to see a different portion of the animation. A negative value for</p> <p>time</p> <p>will remove the slice and finish any existing animations.</p> <p>animate()</p> <p>animate(object, delay=start,  time=duration, flags=ANIMATION_SLICE)</p> <p>loop</p> <p>delay</p> <p>time</p>"},{"location":"proc/animate/#_5","title":"Animate","text":"<p>Filters</p> <p>Filters   can be animated too. If you want to animate a filter, you need to specify the filter to be animated. If the last call to</p> <p>animate()</p> <p>used the same object as this filter, or a different filter for that object, then this will be treated as a new step in the same animation sequece. Likewise, if the last</p> <p>animate()</p> <p>call was to a filter, and this call is for the object that filter belonged to, again it will be treated as a continuation of the sequence.</p> <p>Filters</p> <p>animate()</p> <p>animate()</p>"},{"location":"proc/animate/#_6","title":"Animate","text":"<p>Example:</p> <p>atom/proc/BlurFade()  filters += filter(type = \"blur\", size = 0)  // Animating a filter of src  animate(filters[filters.len], size = 5, time = 10)  // Switching back to src to animate the next step  animate(src, alpha = 0, time = 2.5)</p>"},{"location":"proc/arccos/","title":"Arccos","text":""},{"location":"proc/arccos/#arccos-proc","title":"arccos proc","text":"<p>See also: </p> <p>arcsin proc </p> <p>arctan proc </p> <p>cos proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arcsin proc </p> <p>arctan proc </p> <p>cos proc </p> <p>turn proc </p> <p>arcsin proc</p> <p>arctan proc </p> <p>cos proc </p> <p>turn proc </p> <p>arctan proc</p> <p>cos proc </p> <p>turn proc </p> <p>cos proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>arccos(X)</p> <p>Format: </p> <p>Format:</p> <p>arccos(X)</p> <p>Returns: </p> <p>The inverse cosine of X in degrees.</p> <p>Returns: </p> <p>Returns:</p> <p>The inverse cosine of X in degrees.</p>"},{"location":"proc/arccos/#_1","title":"Arccos","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; arccos(0) // 90  usr &lt;&lt; arccos(0.707107) // 45  usr &lt;&lt; arccos(1) // 0</p>"},{"location":"proc/arcsin/","title":"Arcsin","text":""},{"location":"proc/arcsin/#arcsin-proc","title":"arcsin proc","text":"<p>See also: </p> <p>arccos proc </p> <p>arctan proc </p> <p>sin proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arccos proc </p> <p>arctan proc </p> <p>sin proc </p> <p>turn proc </p> <p>arccos proc</p> <p>arctan proc </p> <p>sin proc </p> <p>turn proc </p> <p>arctan proc</p> <p>sin proc </p> <p>turn proc </p> <p>sin proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>arcsin(X)</p> <p>Format: </p> <p>Format:</p> <p>arcsin(X)</p> <p>Returns: </p> <p>The inverse sine of X in degrees.</p> <p>Returns: </p> <p>Returns:</p> <p>The inverse sine of X in degrees.</p>"},{"location":"proc/arcsin/#_1","title":"Arcsin","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; arcsin(0) // 0  usr &lt;&lt; arcsin(0.707107) // 45  usr &lt;&lt; arcsin(1) // 90</p>"},{"location":"proc/arctan/","title":"Arctan","text":""},{"location":"proc/arctan/#arctan-proc","title":"arctan proc","text":"<p>See also: </p> <p>arcsin proc </p> <p>arccos proc </p> <p>tan proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arcsin proc </p> <p>arccos proc </p> <p>tan proc </p> <p>turn proc </p> <p>arcsin proc</p> <p>arccos proc </p> <p>tan proc </p> <p>turn proc </p> <p>arccos proc</p> <p>tan proc </p> <p>turn proc </p> <p>tan proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>arctan(A)</p> <p>arctan(x, y)</p> <p>Format: </p> <p>Format:</p> <p>arctan(A)</p> <p>arctan(x, y)</p> <p>arctan(x, y)</p> <p>Returns: </p> <p>The inverse tangent of A in degrees; or for x,y, the polar coordinate angle.</p> <p>Returns: </p> <p>Returns:</p> <p>The inverse tangent of A in degrees; or for x,y, the polar coordinate angle.</p> <p>When</p> <p>arctan</p> <p>is called with just one argument, the resulting angle can range from -90 to 90.</p> <p>arctan</p> <p>The two-argument form uses the polar angle. This angle starts at 0\u00b0 for due east, and increases counter-clockwise from there. Therefore 1,0 has an arctangent of 0\u00b0, 0,1 is 90\u00b0, -1,0 is 180\u00b0, and so on. At point 0,0 the angle is undefined since it could be any angle, but</p> <p>arctan</p> <p>will return 0.</p> <p>arctan</p>"},{"location":"proc/arctan/#_1","title":"Arctan","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; arctan(0) // 0  usr &lt;&lt; arctan(1) // 45  usr &lt;&lt; arctan(sqrt(3)) // 60</p> <p>// polar coordinates  usr &lt;&lt; arctan(3, 4) // 53.1301  usr &lt;&lt; arctan(-1, 1) // 135  usr &lt;&lt; arctan(0, -5) // 270</p> <p>Here's another example, in which a rotating turret points to a target on another tile.</p> <p>mob/turret  proc/PointAt(atom/target)  if(!target) return  var/dx = target.x - x  var/dy = target.y - y  // turret's icon normally faces east  transform = matrix().Turn(-arctan(dx, dy))</p>"},{"location":"proc/arglist/","title":"Arglist","text":""},{"location":"proc/arglist/#arglist-proc","title":"arglist proc","text":"<p>See also: </p> <p>arguments (proc) </p> <p>call proc </p> <p>call_ext proc </p> <p>list proc </p> <p>See also: </p> <p>See also:</p> <p>arguments (proc) </p> <p>call proc </p> <p>call_ext proc </p> <p>list proc </p> <p>arguments (proc)</p> <p>call proc </p> <p>call_ext proc </p> <p>list proc </p> <p>call proc</p> <p>call_ext proc </p> <p>list proc </p> <p>call_ext proc</p> <p>list proc </p> <p>list proc</p> <p>Format: </p> <p>arglist(List)</p> <p>Format: </p> <p>Format:</p> <p>arglist(List)</p> <p>Args: </p> <p>List: a list to be used as the arguments to a procedure</p> <p>Args: </p> <p>Args:</p> <p>List: a list to be used as the arguments to a procedure</p> <p>Normally, if you were to pass a list directly to a procedure, it would only come through as a singe argument to that procedure. In some cases, you might instead want the items in the list to become the arguments to the procedure. That is what  <code>arglist()</code>   achieves.</p> <p><code>arglist()</code></p> <p>If the items in the list are associations, these are treated as  named arguments   . Each such list item is matched against the names of the procedure arguments and its associated value is assigned to that parameter.</p> <p>named arguments</p> <p>Most built-in DM instructions do not support use of  <code>arglist()</code>   , but all user-defined procedures automatically support it. The built-in instructions which support named arguments will also support  <code>arglist()</code>   .</p> <p><code>arglist()</code> <code>arglist()</code></p> <p>The following example shows how to use  <code>arglist()</code>   with both positional parameters and named arguments. Both of these examples could be replaced by a much simpler direct call without need for a list to hold the arguments; this is just to illustrate the syntax.</p> <p><code>arglist()</code></p>"},{"location":"proc/arglist/#_1","title":"Arglist","text":"<p>Example:</p> <p>proc/MyProc(a,b)  usr &lt;&lt; \"MyProc([a],[b])\"</p> <p>mob/verb/test()  var/lst = list(1,2)  MyProc(arglist(lst)) //MyProc(1,2)</p> <p>lst = list(b=2,a=1) //just to illustrate that order does not matter  MyProc(arglist(lst)) //MyProc(b=2,a=1) --&gt; MyProc(1,2)</p>"},{"location":"proc/arguments/","title":"Arguments","text":""},{"location":"proc/arguments/#arguments-proc","title":"arguments (proc)","text":"<p>See also: </p> <p>named arguments (proc) </p> <p>path operators </p> <p>arglist proc </p> <p>args var (proc) </p> <p>See also: </p> <p>See also:</p> <p>named arguments (proc) </p> <p>path operators </p> <p>arglist proc </p> <p>args var (proc) </p> <p>named arguments (proc)</p> <p>path operators </p> <p>arglist proc </p> <p>args var (proc) </p> <p>path operators</p> <p>arglist proc </p> <p>args var (proc) </p> <p>arglist proc</p> <p>args var (proc) </p> <p>args var (proc)</p> <p>The parameters to a proc are referred to as arguments. To define argument variables, place them inside the ()'s in the proc definition. A default value may be specified. Otherwise, arguments default to null.</p>"},{"location":"proc/arguments/#_1","title":"Arguments","text":"<p>Example:</p> <p>proc/Sum(a,b)  return a + b</p>"},{"location":"proc/arguments/#_2","title":"Arguments","text":"<p>Example:</p> <p>proc/set_mob_desc(mob/M,desc=\"big and bad\")  M.desc = desc  world &lt;&lt; \"The new desc for [M] is [desc].\"</p> <p>Note how the variable type may be specified. It is just like any other variable definition, except \"  <code>var/</code>   \" is implicit and does not need to be typed.</p> <p><code>var/</code></p>"},{"location":"proc/ascii2text/","title":"Ascii2text","text":""},{"location":"proc/ascii2text/#ascii2text-proc","title":"ascii2text proc","text":"<p>See also: </p> <p>entities (text) </p> <p>text2ascii proc </p> <p>See also: </p> <p>See also:</p> <p>entities (text) </p> <p>text2ascii proc </p> <p>entities (text)</p> <p>text2ascii proc </p> <p>text2ascii proc</p> <p>Format: </p> <p>ascii2text(N)</p> <p>Format: </p> <p>Format:</p> <p>ascii2text(N)</p> <p>Returns: </p> <p>A text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string.</p> <p>Args: </p> <p>N: A number.</p> <p>Args: </p> <p>Args:</p> <p>N: A number.</p> <p>ASCII codes are numerical values corresponding to keyboard and special characters. Among other things, they are used to represent many symbols in HTML. This proc converts an ASCII code to its corresponding text representation.</p>"},{"location":"proc/ascii2text/#_1","title":"Ascii2text","text":"<p>Example:</p> <p>T = ascii2text(65) // = \"A\"</p> <p>BYOND now supports  Unicode   via UTF-8 encoding, so you can use the character code for any valid Unicode character, not just ASCII.</p> <p>Unicode</p>"},{"location":"proc/block/","title":"Block","text":""},{"location":"proc/block/#block-proc","title":"block proc","text":"<p>See also: </p> <p>list </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>list</p> <p>Format: </p> <p>block(Start,End)</p> <p>block(StartX,StartY,StartZ, EndX=StartX,EndY=StartY,EndZ=StartZ)</p> <p>Format: </p> <p>Format:</p> <p>block(Start,End)</p> <p>block(StartX,StartY,StartZ, EndX=StartX,EndY=StartY,EndZ=StartZ)</p> <p>block(StartX,StartY,StartZ, EndX=StartX,EndY=StartY,EndZ=StartZ)</p> <p>Returns: </p> <p>The list of turfs in the 3D block defined by Start and End (inclusive).</p> <p>Returns: </p> <p>Returns:</p> <p>The list of turfs in the 3D block defined by Start and End (inclusive).</p> <p>Args: </p> <p>Start: A turf to be the lower-left corner of the block.</p> <p>End: A turf to be the upper-right corner of the block.</p> <p>StartX, StartY, StartZ: XYZ coordinates of the lower-left corner of the block.</p> <p>EndX, EndY, EndZ: XYZ coordinates of the upper-right corner of the block.</p> <p>Args: </p> <p>Args:</p> <p>Start: A turf to be the lower-left corner of the block.</p> <p>End: A turf to be the upper-right corner of the block.</p> <p>StartX, StartY, StartZ: XYZ coordinates of the lower-left corner of the block.</p> <p>EndX, EndY, EndZ: XYZ coordinates of the upper-right corner of the block.</p> <p>End: A turf to be the upper-right corner of the block.</p> <p>StartX, StartY, StartZ: XYZ coordinates of the lower-left corner of the block.</p> <p>EndX, EndY, EndZ: XYZ coordinates of the upper-right corner of the block.</p> <p>StartX, StartY, StartZ: XYZ coordinates of the lower-left corner of the block.</p> <p>EndX, EndY, EndZ: XYZ coordinates of the upper-right corner of the block.</p> <p>EndX, EndY, EndZ: XYZ coordinates of the upper-right corner of the block.</p> <p>The following example shows how to loop over a block of turfs.</p>"},{"location":"proc/block/#_1","title":"Block","text":"<p>Example:</p> <p>world  maxx = 20  maxy = 20</p> <p>mob/verb/block_test()  var/turf/T  for(T in block(locate(1,1,1), locate(10,10,1)))  T.text = \" \"</p> <p>In the version that uses coordinates directly instead of two turfs, you can leave any of the EndX, EndY, or EndZ values as null, and omit the last arguments entirely; they will default to using the corresponding StartX, StartY, or StartZ. Therefore this example is equivalent to the one above:</p>"},{"location":"proc/block/#_2","title":"Block","text":"<p>Example:</p> <p>world  maxx = 20  maxy = 20</p> <p>mob/verb/block_test()  var/turf/T  for(T in block(1,1,1, 10,10))  T.text = \" \"</p>"},{"location":"proc/bounds/","title":"Bounds","text":""},{"location":"proc/bounds/#bounds-proc","title":"bounds proc","text":"<p>See also: </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>See also: </p> <p>See also:</p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>bound_x var (movable atom)</p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>bound_y var (movable atom)</p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>bound_width var (movable atom)</p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>bound_height var (movable atom)</p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>step_x var (movable atom)</p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>step_y var (movable atom)</p> <p>locs list var (movable atom) </p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>locs list var (movable atom)</p> <p>obounds proc </p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>obounds proc</p> <p>Pixel movement </p> <p>bounds var (client) </p> <p>Pixel movement</p> <p>bounds var (client) </p> <p>bounds var (client)</p> <p>Format: </p> <p>bounds(Ref=src, Dist=0)</p> <p>bounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>bounds(x, y, width, height, z)</p> <p>Format: </p> <p>Format:</p> <p>bounds(Ref=src, Dist=0)</p> <p>bounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>bounds(x, y, width, height, z)</p> <p>bounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>bounds(x, y, width, height, z)</p> <p>bounds(x, y, width, height, z)</p> <p>Returns: </p> <p>A list of atoms within the given bounding box.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of atoms within the given bounding box.</p> <p>Args: </p> <p>Ref: A turf, obj, or mob.</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>Args: </p> <p>Args:</p> <p>Ref: A turf, obj, or mob.</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>x, y, z: Lower left corner of bounding box in absolute coords; x=1,y=1 is lower left of map</p> <p>width, height: Size of bounding box in absolute coords</p> <p>width, height: Size of bounding box in absolute coords</p> <p>To leave Ref out of the results, use obounds() instead.</p> <p>Calling bounds() will default to bounds(src,0), if src is a turf, obj, or mob. This returns all turfs, objs, and mobs (including src) within src's bounding box.</p> <p>Changing the distance will return all objects within that distance from the bounding box. E.g., bounds(turf,12) will show you everything within 12 pixels of that turf.</p> <p>An object's bounding box can also be offset. bounds(src,-6,0) shows what src would touching if it moved 6 pixels west. bounds(turf,-12,-12,24,24) is equivalent to bounds(turf,12).</p> <p>In the final form, bounds() can use absolute coordinates and does not need an object to be Ref. Absolute coordinates start at 1,1 at the lower left corner of the map, by tradition.</p>"},{"location":"proc/bounds_dist/","title":"Bounds dist","text":""},{"location":"proc/bounds_dist/#bounds_dist-proc","title":"bounds_dist proc","text":"<p>See also: </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>See also: </p> <p>See also:</p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>bound_x var (movable atom)</p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>bound_y var (movable atom)</p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>bound_width var (movable atom)</p> <p>bound_height var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>bound_height var (movable atom)</p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>step_x var (movable atom)</p> <p>step_y var (movable atom) </p> <p>bounds proc </p> <p>Pixel movement </p> <p>step_y var (movable atom)</p> <p>bounds proc </p> <p>Pixel movement </p> <p>bounds proc</p> <p>Pixel movement </p> <p>Pixel movement</p> <p>Format: </p> <p>bounds_dist(Ref, Target)</p> <p>Format: </p> <p>Format:</p> <p>bounds_dist(Ref, Target)</p> <p>Returns: </p> <p>The distance, in pixels, between Ref's and Target's bounding boxes.</p> <p>Returns: </p> <p>Returns:</p> <p>The distance, in pixels, between Ref's and Target's bounding boxes.</p> <p>Args: </p> <p>Ref: A turf, obj, or mob.</p> <p>Target: A turf, obj, or mob.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A turf, obj, or mob.</p> <p>Target: A turf, obj, or mob.</p> <p>Target: A turf, obj, or mob.</p> <p>The value returned by bounds_dist() is the number of pixels that the two objects would have to move closer together (if this is even possible, of course) to be touching but not overlapping.</p> <p>A return value of 12 for instance means the two objects have a gap of 12 pixels between them.</p> <p>A return value of 0 means the two objects are not overlapping, but their bounding boxes touch.</p> <p>A return value of -2 means the two objects are overlapping by 2 pixels; they would have to move 2 pixels apart to separate.</p>"},{"location":"proc/break/","title":"Break","text":""},{"location":"proc/break/#break-statement","title":"break statement","text":"<p>See also: </p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>See also: </p> <p>See also:</p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>continue statement</p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>do proc</p> <p>for loop proc </p> <p>while proc </p> <p>for loop proc</p> <p>while proc </p> <p>while proc</p> <p>Format: </p> <p>break</p> <p>break Label</p> <p>Format: </p> <p>Format:</p> <p>break</p> <p>break Label</p> <p>break Label</p> <p>Terminate the loop with the given label. If no label is specified, the innermost loop containing the  <code>break</code>   statement is assumed.</p> <p><code>break</code></p>"},{"location":"proc/break/#_1","title":"Break","text":"<p>Example:</p> <p>obj/zapper  verb/use()  var/mob/M</p> <p>for(M in view())  if(!M.key) break</p> <p>if(!M) M = usr  M &lt;&lt; \"ZAP!\"  del(M)</p> <p>The zapper object kills the first mob it finds that doesn't belong to a player. If none can be found, it kills the user. Be careful! Note how this code takes advantage of the fact that the loop variable</p> <p>M</p> <p>will be  <code>null</code>   if the loop terminates normally.</p> <p>M</p> <p><code>null</code></p> <p>For an example of how to use labeled loops, see the reference section for the  <code>continue</code>   statement.</p> <p><code>continue</code></p>"},{"location":"proc/browse/","title":"Browse","text":""},{"location":"proc/browse/#browse-proc","title":"browse proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>browse_rsc proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>output proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>browse_rsc proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>output proc </p> <p>&lt;&lt; output operator</p> <p>browse_rsc proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>output proc </p> <p>browse_rsc proc</p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>output proc </p> <p>file proc</p> <p>link proc </p> <p>run proc </p> <p>output proc </p> <p>link proc</p> <p>run proc </p> <p>output proc </p> <p>run proc</p> <p>output proc </p> <p>output proc</p> <p>Format: </p> <p>usr &lt;&lt; browse(Body,Options)</p> <p>Format: </p> <p>Format:</p> <p>usr &lt;&lt; browse(Body,Options)</p> <p>Args: </p> <p>Body: html text, file, or null to close the browser.</p> <p>Options: optional parameters</p> <p>Args: </p> <p>Args:</p> <p>Body: html text, file, or null to close the browser.</p> <p>Options: optional parameters</p> <p>Options: optional parameters</p> <p>This sends the html text or file to the user and optionally displays it in the web browser. The default action is to use the embedded browser panel in the Dream Seeker window; specifying an alternate window name (see below) causes it to appear in a popup window. Passing in 'null' for the html text causes the browser panel or named window to be closed.</p> <p>The option parameters should either be omitted or they should be in a text string of the following format:  `\"</p> <p>window</p> <p>=name;</p> <p>file</p> <p>=name;</p> <p>display</p> <p>=1;</p> <p>size</p> <p>=300x300;</p> <p>border</p> <p>=0;</p> <p>can_close</p> <p>=1;</p> <p>can_resize</p> <p>=1;</p> <p>can_minimize</p> <p>=1;</p> <p>titlebar</p> <p>=1\"` </p> <p>`\"</p> <p>window</p> <p>=name;</p> <p>file</p> <p>=name;</p> <p>display</p> <p>=1;</p> <p>size</p> <p>=300x300;</p> <p>border</p> <p>=0;</p> <p>can_close</p> <p>=1;</p> <p>can_resize</p> <p>=1;</p> <p>can_minimize</p> <p>=1;</p> <p>titlebar</p> <p>=1\"`</p> <p>window</p> <p>file</p> <p>display</p> <p>size</p> <p>border</p> <p>can_close</p> <p>can_resize</p> <p>can_minimize</p> <p>titlebar</p> <p>You may use commas (,), ampersands (&amp;), or semicolons (;) as the delimiter. Any or all of the parameters may be specified and they may be included in any order.</p>"},{"location":"proc/browse/#_1","title":"Browse","text":"<p>General options</p> <p>window</p> <p>This is the name used to identify the popup window. It is not visible to the user. Multiple calls to browse() with the same window name overwrite previous contents of the same popup window. If window is not specified, the embedded browser panel will be used.</p> <p>file</p> <p>When this is unspecified, the client will store the generated html file in the user's byond \"cache\" directory with an appropriate name. If Body is a text string, the client will generate a unique name. If it is a file, it will use the name of the file. You can override this by setting this parameter. This is only useful when you need to reference the file later, typically in tandem with the display setting below.</p> <p>display</p> <p>This controls whether the browser actually displays Body in the web browser or not. If it is turned off (display=0), the text or file is simply sent to the user and expected to be referenced later. This might be useful, for instance, to first send an image to a user and then display a web page that uses that image:</p> <p>usr &lt;&lt; browse('monster.png',\"display=0\") usr &lt;&lt; browse(\"    A scary monster appears from the mist!\")</p> <p>Note that this performs the same function as the  browse_rsc   proc (preserved for legacy reasons). It is a little more powerful because you can use it to send html text as well as files. In that case, you'll have to also supply the file=name argument so that you can reference the html text from within a later browse().</p> <p>When display=0, all of the other arguments besides file are ignored.</p> <p>window</p> <p>This is the name used to identify the popup window. It is not visible to the user. Multiple calls to browse() with the same window name overwrite previous contents of the same popup window. If window is not specified, the embedded browser panel will be used.</p> <p>file</p> <p>When this is unspecified, the client will store the generated html file in the user's byond \"cache\" directory with an appropriate name. If Body is a text string, the client will generate a unique name. If it is a file, it will use the name of the file. You can override this by setting this parameter. This is only useful when you need to reference the file later, typically in tandem with the display setting below.</p> <p>display</p> <p>This controls whether the browser actually displays Body in the web browser or not. If it is turned off (display=0), the text or file is simply sent to the user and expected to be referenced later. This might be useful, for instance, to first send an image to a user and then display a web page that uses that image:</p> <p>usr &lt;&lt; browse('monster.png',\"display=0\") usr &lt;&lt; browse(\"    A scary monster appears from the mist!\")</p> <p>Note that this performs the same function as the  browse_rsc   proc (preserved for legacy reasons). It is a little more powerful because you can use it to send html text as well as files. In that case, you'll have to also supply the file=name argument so that you can reference the html text from within a later browse().</p> <p>When display=0, all of the other arguments besides file are ignored.</p> <p>usr &lt;&lt; browse('monster.png',\"display=0\") usr &lt;&lt; browse(\"    A scary monster appears from the mist!\")</p> <p> browse_rsc</p> <p>When display=0, all of the other arguments besides file are ignored.</p>"},{"location":"proc/browse/#_2","title":"Browse","text":"<p>Popup options</p> <p>border</p> <p>This is the width of the border between the edges of the dialogue and the window content. The default value is 0, meaning that the entire window is filled with html content.</p> <p>size</p> <p>This is the size of the popup window in pixels. The format is  <code>WIDTHxHEIGHT</code>   .</p> <p>can_close</p> <p>This specifies whether the window should be closable. The default value is 1, which enables the standard \"X\" button for closing.</p> <p>can_resize</p> <p>This controls whether the window is resizable. The default value is 1, enabling resizing and maximizing.</p> <p>can_minimize</p> <p>This controls whether the window is minimizable. The default value is 1, enabling the standard minimization button.</p> <p>titlebar</p> <p>The default titlebar=1 enables the standard bar at the top of the window. Turning it off disables can_close and can_minimize.</p> <p>border</p> <p>This is the width of the border between the edges of the dialogue and the window content. The default value is 0, meaning that the entire window is filled with html content.</p> <p>size</p> <p>This is the size of the popup window in pixels. The format is  <code>WIDTHxHEIGHT</code>   .</p> <p><code>WIDTHxHEIGHT</code></p> <p>can_close</p> <p>This specifies whether the window should be closable. The default value is 1, which enables the standard \"X\" button for closing.</p> <p>can_resize</p> <p>This controls whether the window is resizable. The default value is 1, enabling resizing and maximizing.</p> <p>can_minimize</p> <p>This controls whether the window is minimizable. The default value is 1, enabling the standard minimization button.</p> <p>titlebar</p> <p>The default titlebar=1 enables the standard bar at the top of the window. Turning it off disables can_close and can_minimize.</p> <p>Note also that many display options can be controlled through the html itself. For instance, to turn off the scrollbars, you can do:  <code>&lt;body scroll=no&gt;</code>   ; to add a title, you can do:  <code>&lt;head&gt;&lt;title&gt;My Title&lt;/title&gt;&lt;/head&gt;</code>   ; and so forth.</p> <p><code>&lt;body scroll=no&gt;</code> <code>&lt;head&gt;&lt;title&gt;My Title&lt;/title&gt;&lt;/head&gt;</code></p> <p>The following example displays a help page in a popup window.</p>"},{"location":"proc/browse/#_3","title":"Browse","text":"<p>Example:</p> <p>var/const/help = {\"</p> <p>Help!</p> <p>You are beyond help!</p> <p>\"} client/verb/help()  usr &lt;&lt; browse(help,\"window=help\")</p> <p>Help!</p> <p>output() winset()</p>"},{"location":"proc/browse/#_4","title":"Browse","text":"<p>Example:</p> <p>client/verb/more_help()  usr &lt;&lt; output(\"You are still beyond help!\", \"help.browser\")</p>"},{"location":"proc/browse_rsc/","title":"Browse rsc","text":""},{"location":"proc/browse_rsc/#browse_rsc-proc","title":"browse_rsc proc","text":"<p>See also: </p> <p>browse proc </p> <p>See also: </p> <p>See also:</p> <p>browse proc </p> <p>browse proc</p> <p>Format: </p> <p>usr &lt;&lt; browse_rsc(File,FileName)</p> <p>Format: </p> <p>Format:</p> <p>usr &lt;&lt; browse_rsc(File,FileName)</p> <p>Args: </p> <p>File: a resource file (such as an image)</p> <p>FileName: name of file (if different from source file)</p> <p>Args: </p> <p>Args:</p> <p>File: a resource file (such as an image)</p> <p>FileName: name of file (if different from source file)</p> <p>FileName: name of file (if different from source file)</p> <p>This sends the specified resource file to usr (or anybody else) and stores it in their  <code>cache</code>   directory with the specified name. In subsequent  <code>browse()</code>   output, you can then refer to that file.</p> <p><code>cache</code> <code>browse()</code></p> <p>If your world is always running on the internet, you can save yourself the trouble and simply link to the image files through a web server. However, if it may be played offline, you can compile in the resource files and manually send them to players with  <code>browse_rsc()</code>   .</p> <p><code>browse_rsc()</code></p> <p>Note that no data is transmitted if it already exists in the user's cache, so there is little overhead in calling this every time you are about to use  <code>browse()</code>   .</p> <p><code>browse()</code></p>"},{"location":"proc/browse_rsc/#_1","title":"Browse rsc","text":"<p>Example:</p> <p>area  var  room_graphic = 'cozy_room.jpg'  Enter(O)  . = ..() //do default checks  if(.) //if we got clearance to enter  O &lt;&lt; browse_rsc(room_graphic,\"room.jpg\")  O &lt;&lt; browse(\"</p> <p></p> <p>[desc]\")</p> <p></p> <p></p>"},{"location":"proc/call/","title":"Call","text":""},{"location":"proc/call/#call-proc","title":"call proc","text":"<p>See also: </p> <p>arglist proc </p> <p>call_ext proc </p> <p>hascall proc </p> <p>path operators </p> <p>See also: </p> <p>See also:</p> <p>arglist proc </p> <p>call_ext proc </p> <p>hascall proc </p> <p>path operators </p> <p>arglist proc</p> <p>call_ext proc </p> <p>hascall proc </p> <p>path operators </p> <p>call_ext proc</p> <p>hascall proc </p> <p>path operators </p> <p>hascall proc</p> <p>path operators </p> <p>path operators</p> <p>Format: </p> <p>call(ProcRef)(Arguments)</p> <p>call(Object,ProcName)(Arguments)</p> <p>call(LibName,FuncName)(Arguments) (use</p> <p>call_ext()</p> <p>instead)</p> <p>Format: </p> <p>Format:</p> <p>call(ProcRef)(Arguments)</p> <p>call(Object,ProcName)(Arguments)</p> <p>call(LibName,FuncName)(Arguments) (use</p> <p>call_ext()</p> <p>instead)</p> <p>call(Object,ProcName)(Arguments)</p> <p>call(LibName,FuncName)(Arguments) (use</p> <p>call_ext()</p> <p>instead)</p> <p>call(LibName,FuncName)(Arguments) (use</p> <p>call_ext()</p> <p>instead)</p> <p>call_ext()</p> <p>Args: </p> <p>ProcRef: path of proc (/proc/MyProc)</p> <p>Object: source of proc or verb</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>Args: </p> <p>Args:</p> <p>ProcRef: path of proc (/proc/MyProc)</p> <p>Object: source of proc or verb</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>Object: source of proc or verb</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>Returns: </p> <p>The return value of the proc being called.</p> <p>Returns: </p> <p>Returns:</p> <p>The return value of the proc being called.</p> <p>This instruction exists in order to call procs dynamically, since the proc reference or name may be an expression rather than a hard-coded value. This may serve the same purpose as a \"function pointer\" in C programs.</p> <p>The following examples do not demonstrate why you would want to do this, but the syntax is illustrated. The first one calls a specific procedure by using a path reference to that procedure.</p>"},{"location":"proc/call/#_1","title":"Call","text":"<p>Example:</p> <p>/proc/MyProc(Arg)  usr &lt;&lt; \"MyProc([Arg])\" mob  var  MyProc = /proc/MyProc  verb  call_myproc()  call(MyProc)(\"Hello, world!\")</p> <p>The next example calls an object procedure (or verb) by name, rather than by path.</p>"},{"location":"proc/call/#_2","title":"Call","text":"<p>Example:</p> <p>mob  proc  Proc1(Arg)  usr &lt;&lt; \"Proc1([Arg])\"  Proc2(Arg)  usr &lt;&lt; \"Proc2([Arg])\"  verb  call_proc(Proc in list(\"Proc1\",\"Proc2\"))  call(src,Proc)(\"Hello, world!\")</p> <p>In prior versions,</p> <p>call()</p> <p>was also used to access third-party libraries (.DLL files on Windows, .SO files on Unix), but this has been moved to</p> <p>call_ext()</p> <p>for clarity.</p> <p>call()</p> <p>call_ext()</p>"},{"location":"proc/call_ext/","title":"Call ext","text":""},{"location":"proc/call_ext/#call_ext-proc","title":"call_ext proc","text":"<p>See also: </p> <p>arglist proc </p> <p>call proc </p> <p>path operators </p> <p>See also: </p> <p>See also:</p> <p>arglist proc </p> <p>call proc </p> <p>path operators </p> <p>arglist proc</p> <p>call proc </p> <p>path operators </p> <p>call proc</p> <p>path operators </p> <p>path operators</p> <p>Format: </p> <p>call_ext(LibName,FuncName)(Arguments)</p> <p>Format: </p> <p>Format:</p> <p>call_ext(LibName,FuncName)(Arguments)</p> <p>Args: </p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>Args: </p> <p>Args:</p> <p>LibName: name of external library (\"test.DLL\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>FuncName: name of function in external library (\"func\")</p> <p>Returns: </p> <p>The return value of the external library function.</p> <p>Returns: </p> <p>Returns:</p> <p>The return value of the external library function.</p> <p>This instruction exists in order to access third-party libraries (.DLL files on Windows, .SO files on Unix), as long as the one or more of the following conditions is met:</p> <ul> <li>The library is located in the BYOND user</li> </ul> <p>bin/</p> <p>folder (</p> <p>~/.byond/bin</p> <p>on Unix, typically</p> <p>%APPDATA%/Documents/BYOND/bin/</p> <p>on Windows). This is intended to allow the user to install permanently \"trusted\" libraries.  OR * The server is run in</p> <p>-trusted</p> <p>mode.  OR * The server grants permission to access the library at runtime, through a prompt query.</p> <ul> <li>The library is located in the BYOND user</li> </ul> <p>bin/</p> <p>folder (</p> <p>~/.byond/bin</p> <p>on Unix, typically</p> <p>%APPDATA%/Documents/BYOND/bin/</p> <p>on Windows). This is intended to allow the user to install permanently \"trusted\" libraries.  OR</p> <p>bin/</p> <p>~/.byond/bin</p> <p>%APPDATA%/Documents/BYOND/bin/</p> <p>OR OR - The server is run in</p> <p>-trusted</p> <p>mode.  OR</p> <p>-trusted</p> <p>OR OR - The server grants permission to access the library at runtime, through a prompt query.</p> <p>These functions must be prototyped in the DLL as:</p> <pre><code>extern \"C\" char *func(int argc, char *argv[]);\n// argc = #arguments, argv[] = array of arguments\n\n</code></pre>"},{"location":"proc/call_ext/#_1","title":"Call ext","text":"<p>Example:</p> <pre><code>// test.dll, a win32 C++ library compiled in VC++:\n#include &lt;string.h&gt;\n// This is an example of an exported function.\n// windows requires __declspec(dllexport) to be used to \n// declare public symbols\n// the name of the function from within the dll may be compiler-dependent\n// (in this case it will usually be \"merge\" or \"_merge)\n// Google \"name decoration\" for more information on this exciting topic.\nextern \"C\" __declspec(dllexport) char *merge(int n, char *v[]) \n{\n   static char buf[500]; \n   *buf=0;\n   for(int i=0;i&lt;n;i++) {\n      strcat(buf,v[i]); // we should bounds-check but it's a stupid example!\n   }\n   return buf;\n}\n\n</code></pre> <p>// DM code to use test.dll mob/verb/test()  usr &lt;&lt; call_ext(\"test.dll\",\"merge\")(\"fee\",\"fi\",\"fo\") // returns \"feefifo\"</p> <p>// As with the other call() versions, arglist() may be used to do runtime arguments: mob/verb/argtest()  var/L = list(\"fee\",\"fi\",\"fo\")  usr &lt;&lt; call_ext(\"test.dll\",\"func\")(arglist(L)) // returns \"feefifo\"</p> <p>As the library prototype is</p> <p>char**</p> <p>, the</p> <p>call_ext()</p> <p>arguments must be strings. Other types (like numbers) will be passed as the empty string (</p> <p>\"\"</p> <p>) into the library function.</p> <p>char**</p> <p>call_ext()</p> <p>\"\"</p> <p>Note for advanced users: on Windows,</p> <p>call_ext()</p> <p>uses the</p> <p>__cdecl</p> <p>convention by default. If you are designing or linking to a DLL that uses the</p> <p>__stdcall</p> <p>convention instead, you can inform</p> <p>call_ext()</p> <p>by prefacing the function name with the</p> <p>\"@\"</p> <p>symbol. E.g.,</p> <p>call_ext(\"test.dll\",\"@merge\")</p> <p>would call a version of</p> <p>merge</p> <p>declared with the</p> <p>__stdcall</p> <p>convention. Typically these names are further decorated by the linker (in VC++,</p> <p>\"merge\"</p> <p>would be</p> <p>\"</p> <p>[email\u00a0protected]</p> <p>\"</p> <p>, so it'd be accessed with</p> <p>call_ext(\"test.dll\",@</p> <p>[email\u00a0protected]</p> <p>\"))</p> <p>.</p> <p>call_ext()</p> <p>__cdecl</p> <p>__stdcall</p> <p>call_ext()</p> <p>\"@\"</p> <p>call_ext(\"test.dll\",\"@merge\")</p> <p>merge</p> <p>__stdcall</p> <p>\"merge\"</p> <p>\"</p> <p>[email\u00a0protected]</p> <p>\"</p> <p>[email\u00a0protected]</p> <p>call_ext(\"test.dll\",@</p> <p>[email\u00a0protected]</p> <p>\"))</p> <p>[email\u00a0protected]</p>"},{"location":"proc/ceil/","title":"Ceil","text":""},{"location":"proc/ceil/#ceil-proc","title":"ceil proc","text":"<p>See also: </p> <p>floor proc </p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>See also: </p> <p>See also:</p> <p>floor proc </p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>floor proc</p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>round proc</p> <p>trunc proc </p> <p>fract proc </p> <p>trunc proc</p> <p>fract proc </p> <p>fract proc</p> <p>Format: </p> <p>ceil(A)</p> <p>Format: </p> <p>Format:</p> <p>ceil(A)</p> <p>Returns: </p> <p>the ceiling of A</p> <p>Returns: </p> <p>Returns:</p> <p>the ceiling of A</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p> <p>Returns the ceiling of A (the largest integer greater than or equal to A).</p>"},{"location":"proc/ceil/#_1","title":"Ceil","text":"<p>Example:</p> <p>usr &lt;&lt; ceil(1.45) // outputs 2</p> <p>usr &lt;&lt; ceil(-1.45) // outputs -1</p>"},{"location":"proc/ckey/","title":"Ckey","text":""},{"location":"proc/ckey/#ckey-proc","title":"ckey proc","text":"<p>See also: </p> <p>ckeyEx proc </p> <p>ckey var (mob) </p> <p>savefile </p> <p>See also: </p> <p>See also:</p> <p>ckeyEx proc </p> <p>ckey var (mob) </p> <p>savefile </p> <p>ckeyEx proc</p> <p>ckey var (mob) </p> <p>savefile </p> <p>ckey var (mob)</p> <p>savefile </p> <p>savefile</p> <p>Format: </p> <p>ckey(Key)</p> <p>Format: </p> <p>Format:</p> <p>ckey(Key)</p> <p>Args: </p> <p>Key: The player key to convert to canonical form.</p> <p>Args: </p> <p>Args:</p> <p>Key: The player key to convert to canonical form.</p> <p>Returns: </p> <p>The key in canonical form. To do this, it strips all punctuation and  space from the key and converts to lowercase. The result is still  unique for each different key.</p> <p>Returns: </p> <p>Returns:</p> <p>The key in canonical form. To do this, it strips all punctuation and  space from the key and converts to lowercase. The result is still  unique for each different key.</p> <p>The result could be used as a unique directory name in a server-side save file. Each player could be stored in a separate directory. By converting to canonical form, possible problems resulting from punctuation (like the path delimiter '/') in the key would be avoided. If players are saved in stand-alone files, it could be equally useful for generating a unique file name.</p> <p>Note that this may be used on any text string. It is not just limited to keys.</p>"},{"location":"proc/ckey/#_1","title":"Ckey","text":"<p>Example:</p> <p>var/savefile/SaveFile = new(\"world.sav\") proc/SavePlayer(mob/M)  var/keydir = ckey(M.key)  SaveFile.cd = \"/players\"  SaveFile.cd = keydir  M.Write(SaveFile)</p> <p>proc/LoadPlayer(mob/M)  var/keydir = ckey(M.key)  SaveFile.cd = \"/players\"  if(!SaveFile.Find(keydir)) return 0  SaveFile.cd = keydir  M.Read(SaveFile)  return 1</p> <p>This example defines two procs for saving and loading players to a server-side file. These could be called in mob.Login() and mob.Logout(). Notice that instead of calling SaveFile.Write(M), this example instead calls M.Write(SaveFile) directly. The difference is that in this example we did not want a new mob to be created when loading the player but instead wanted to load information into an existing mob.</p> <p>In this example, the ckey() proc was used, but it would be more efficient to use mob.ckey, which is the same value precomputed.</p>"},{"location":"proc/ckeyEx/","title":"ckeyEx","text":""},{"location":"proc/ckeyEx/#ckeyex-proc","title":"ckeyEx proc","text":"<p>See also: </p> <p>ckey proc </p> <p>See also: </p> <p>See also:</p> <p>ckey proc </p> <p>ckey proc</p> <p>Format: </p> <p>ckeyEx(Text)</p> <p>Format: </p> <p>Format:</p> <p>ckeyEx(Text)</p> <p>Args: </p> <p>Text: The text string to convert to case-sensitive canonical key form.</p> <p>Args: </p> <p>Args:</p> <p>Text: The text string to convert to case-sensitive canonical key form.</p> <p>Returns: </p> <p>The same text stripped of all punctuation and space. Unlike, ckey(),  case is preserved as are the '-' and '_' characters.</p> <p>Returns: </p> <p>Returns:</p> <p>The same text stripped of all punctuation and space. Unlike, ckey(),  case is preserved as are the '-' and '_' characters.</p> <p>The true canonical form of a key is in all lowercase, but occasionally, it is nice to preserve case when stripping a key (or other text) of any special characters.</p> <p>Note: This proc used to be named</p> <p>cKey</p> <p>, like</p> <p>ckey</p> <p>but with a capital k. To avoid confusion it has been renamed, but old code will still compile with a warning.</p> <p>cKey</p> <p>ckey</p>"},{"location":"proc/clamp/","title":"Clamp","text":""},{"location":"proc/clamp/#clamp-proc","title":"clamp proc","text":"<p>See also: </p> <p>min proc </p> <p>max proc </p> <p>See also: </p> <p>See also:</p> <p>min proc </p> <p>max proc </p> <p>min proc</p> <p>max proc </p> <p>max proc</p> <p>Format: </p> <p>clamp(Number, Low, High)</p> <p>clamp(List, Low, High)</p> <p>Format: </p> <p>Format:</p> <p>clamp(Number, Low, High)</p> <p>clamp(List, Low, High)</p> <p>clamp(List, Low, High)</p> <p>Args: </p> <p>Number: A number (or null, treated as 0).</p> <p>List: A list of numbers.</p> <p>Low: The lowest value that can be returned.</p> <p>High: The highest value that can be returned.</p> <p>Args: </p> <p>Args:</p> <p>Number: A number (or null, treated as 0).</p> <p>List: A list of numbers.</p> <p>Low: The lowest value that can be returned.</p> <p>High: The highest value that can be returned.</p> <p>List: A list of numbers.</p> <p>Low: The lowest value that can be returned.</p> <p>High: The highest value that can be returned.</p> <p>Low: The lowest value that can be returned.</p> <p>High: The highest value that can be returned.</p> <p>High: The highest value that can be returned.</p> <p>Returns: </p> <p>The original Number, constrained between Low and High.</p> <p>The original List, whose contents have all been clamped.</p> <p>Returns: </p> <p>Returns:</p> <p>The original Number, constrained between Low and High.</p> <p>The original List, whose contents have all been clamped.</p> <p>The original List, whose contents have all been clamped.</p> <p>\"Clamps\" a number to a given allowable range from</p> <p>Low</p> <p>to</p> <p>High</p> <p>. If the number is already in that range, it is unchanged. Otherwise, the closer of</p> <p>Low</p> <p>or</p> <p>High</p> <p>is returned.</p> <p>Low</p> <p>High</p> <p>Low</p> <p>High</p> <p>This is effectively equivalent to</p> <p>min(max(Number, Low), High)</p> <p>, but with some slight differences. For one thing,</p> <p>clamp()</p> <p>is forgiving if you accidentally swap</p> <p>Low</p> <p>and</p> <p>High</p> <p>; it will just swap them back so</p> <p>Low</p> <p>is always lower. Also, because this is a single proc call it's slightly faster.</p> <p>min(max(Number, Low), High)</p> <p>clamp()</p> <p>Low</p> <p>High</p> <p>Low</p>"},{"location":"proc/clamp/#_1","title":"Clamp","text":"<p>Example:</p> <p>usr &lt;&lt; clamp(5, 0, 10) // 5; it falls between 0 and 10 usr &lt;&lt; clamp(-1, 0, 10) // 0; it is less than 0 usr &lt;&lt; clamp(20, 0, 10) // 10; it is more than 10</p> <p>The list format will accept a list in place of a number as the first argument, and it behaves as if you looped through the entire list and ran</p> <p>clamp()</p> <p>on each number or null value. Please note the original list will be modified. If you want to leave the original list alone, use the  [Copy()</p> <p>proc](#/list/proc/Copy)   to pass a copy to</p> <p>clamp()</p> <p>instead.</p> <p>clamp()</p> <p>[Copy()</p> <p>proc](#/list/proc/Copy)</p> <p>Copy()</p> <p>clamp()</p>"},{"location":"proc/cmptext/","title":"Cmptext","text":""},{"location":"proc/cmptext/#cmptext-proc","title":"cmptext proc","text":"<p>See also: </p> <p>cmptextEx proc </p> <p>See also: </p> <p>See also:</p> <p>cmptextEx proc </p> <p>cmptextEx proc</p> <p>Format: </p> <p>cmptext(T1,T2,...)</p> <p>Format: </p> <p>Format:</p> <p>cmptext(T1,T2,...)</p> <p>Returns: </p> <p>1 if all arguments are equal; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all arguments are equal; 0 otherwise.</p> <p>Args: </p> <p>Any number of text strings to compare.</p> <p>Args: </p> <p>Args:</p> <p>Any number of text strings to compare.</p> <p>This instruction is NOT sensitive to case. It also ignores the  <code>\\proper</code>   and  <code>\\improper</code>   text macros. The case-sensitive version is cmptextEx().</p> <p><code>\\proper</code> <code>\\improper</code></p>"},{"location":"proc/cmptext/#_1","title":"Cmptext","text":"<p>Example:</p> <p>if(cmptext(\"Hi\",\"HI\"))  world &lt;&lt; \"Equal!\" else  world &lt;&lt; \"Not equal!\"</p> <p>This outputs \"Equal!\" since \"Hi\" and \"HI\" are the same, ignoring case.</p>"},{"location":"proc/cmptextEx/","title":"cmptextEx","text":""},{"location":"proc/cmptextEx/#cmptextex-proc","title":"cmptextEx proc","text":"<p>See also: </p> <p>cmptext proc </p> <p>See also: </p> <p>See also:</p> <p>cmptext proc </p> <p>cmptext proc</p> <p>Format: </p> <p>cmptextEx(T1,T2,...)</p> <p>Format: </p> <p>Format:</p> <p>cmptextEx(T1,T2,...)</p> <p>Returns: </p> <p>1 if all arguments are equal; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all arguments are equal; 0 otherwise.</p> <p>Args: </p> <p>Any number of text strings to compare.</p> <p>Args: </p> <p>Args:</p> <p>Any number of text strings to compare.</p> <p>This instruction is sensitive to case. The case-insensitive version is cmptext().</p> <p>Because identical text is internally combined to conserve memory, cmptextEx(T1,T2) is equivalent to (T1 == T2).</p>"},{"location":"proc/cmptextEx/#_1","title":"cmptextEx","text":"<p>Example:</p> <p>if(cmptextEx(\"Hi\",\"HI\"))  world &lt;&lt; \"Equal!\" else  world &lt;&lt; \"Not equal!\"</p> <p>This outputs \"Not equal!\" since \"Hi\" and \"HI\" are different when taking case into account.</p> <p>Note: This proc used to be named cmpText, like cmptext but with a capital T. To avoid confusion it has been renamed, but old code will still compile.</p>"},{"location":"proc/continue/","title":"Continue","text":""},{"location":"proc/continue/#continue-statement","title":"continue statement","text":"<p>See also: </p> <p>break statement </p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>See also: </p> <p>See also:</p> <p>break statement </p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>break statement</p> <p>do proc </p> <p>for loop proc </p> <p>while proc </p> <p>do proc</p> <p>for loop proc </p> <p>while proc </p> <p>for loop proc</p> <p>while proc </p> <p>while proc</p> <p>Format: </p> <p>continue</p> <p>continue Label</p> <p>Format: </p> <p>Format:</p> <p>continue</p> <p>continue Label</p> <p>continue Label</p> <p>Begins the next iteration of the loop with the given label. If no label is specified, the innermost loop containing the continue statement is assumed.</p> <p>In a</p> <p>for(Init,Test,Inc)</p> <p>loop, the</p> <p>continue</p> <p>statement will jump to the</p> <p>Inc</p> <p>portion (if any) and move on to the conditional</p> <p>Test</p> <p>. In a</p> <p>for(item in list)</p> <p>loop, it will skip to the next item in the list. In a</p> <p>while</p> <p>or</p> <p>do-while</p> <p>loop,</p> <p>continue</p> <p>jumps to the condition in the</p> <p>while</p> <p>statement.</p> <p>for(Init,Test,Inc)</p> <p>continue</p> <p>Inc</p> <p>Test</p> <p>for(item in list)</p> <p>while</p> <p>do-while</p> <p>continue</p> <p>while</p>"},{"location":"proc/continue/#_1","title":"Continue","text":"<p>Example:</p> <p>client/verb/who()  var/mob/M  usr &lt;&lt; \"Players:\"  for(M in world)  if(M == usr) continue  if(M.key) usr &lt;&lt; M.key</p> <p>This displays a list of players who have a mob in the world. The  <code>continue</code>   statement is used here to avoid including the user in the list. The same thing could have been achieved by using only the  <code>if</code>   statement. In more complicated situations, however, very long conditional expressions and deeply nested  <code>if</code>   statements can be avoided by using  <code>continue</code>   and its companion  <code>break</code>   .</p> <p><code>continue</code> <code>if</code> <code>if</code> <code>continue</code> <code>break</code></p> <p>Here is an example using a label to continue an outer loop from inside an inner one:</p> <p>client/verb/loners()  var/mob/M  var/mob/G</p> <p>usr &lt;&lt; \"Loners:\"  finding_loners:  for(M in world)  for(G in world)  if(M in G.group) continue finding_loners</p> <p>//found a loner  usr &lt;&lt; M.name</p> <p>This displays a list of mobs who do not belong in anyone else's group. Notice the syntax for labeling a list. The name of the block is simply placed in the code followed by a colon and its contents are indented inside it.</p>"},{"location":"proc/copytext/","title":"Copytext","text":""},{"location":"proc/copytext/#copytext-proc","title":"copytext proc","text":"<p>See also: </p> <p>splicetext proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>trimtext proc </p> <p>Copy proc (list) </p> <p>See also: </p> <p>See also:</p> <p>splicetext proc </p> <p>findtext proc </p> <p>splittext proc </p> <p>trimtext proc </p> <p>Copy proc (list) </p> <p>splicetext proc</p> <p>findtext proc </p> <p>splittext proc </p> <p>trimtext proc </p> <p>Copy proc (list) </p> <p>findtext proc</p> <p>splittext proc </p> <p>trimtext proc </p> <p>Copy proc (list) </p> <p>splittext proc</p> <p>trimtext proc </p> <p>Copy proc (list) </p> <p>trimtext proc</p> <p>Copy proc (list) </p> <p>Copy proc (list)</p> <p>Format: </p> <p>copytext(T,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>copytext(T,Start=1,End=0)</p> <p>Returns: </p> <p>A text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string.</p> <p>Args: </p> <p>T: A text string.</p> <p>Start: The text byte position in which to begin the copy.</p> <p>End: The text byte position immediately following the last character to be copied.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>Start: The text byte position in which to begin the copy.</p> <p>End: The text byte position immediately following the last character to be copied.</p> <p>Start: The text byte position in which to begin the copy.</p> <p>End: The text byte position immediately following the last character to be copied.</p> <p>End: The text byte position immediately following the last character to be copied.</p> <p>Copy characters in T between Start and End. The default end position of 0 stands for</p> <p>length(T)+1</p> <p>, so by default the entire text string is copied.</p> <p>length(T)+1</p>"},{"location":"proc/copytext/#_1","title":"Copytext","text":"<p>Example:</p> <p>pre = copytext(\"Hi there\",1,3))// = \"Hi\" post = copytext(\"Hi there\",4)) // = \"there\"</p> <p>If the start or end position is negative, it counts backwards from the end of the string.</p>"},{"location":"proc/copytext/#_2","title":"Copytext","text":"<p>Example:</p> <p>post = copytext(\"Hi there\",-5)) // = \"there\"</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>copytext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>copytext_char()</p> <p>Unicode</p>"},{"location":"proc/cos/","title":"Cos","text":""},{"location":"proc/cos/#cos-proc","title":"cos proc","text":"<p>See also: </p> <p>arccos proc </p> <p>sin proc </p> <p>tan proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arccos proc </p> <p>sin proc </p> <p>tan proc </p> <p>turn proc </p> <p>arccos proc</p> <p>sin proc </p> <p>tan proc </p> <p>turn proc </p> <p>sin proc</p> <p>tan proc </p> <p>turn proc </p> <p>tan proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>cos(X)</p> <p>Format: </p> <p>Format:</p> <p>cos(X)</p> <p>Returns: </p> <p>The cosine of X, where X is in degrees.</p> <p>Returns: </p> <p>Returns:</p> <p>The cosine of X, where X is in degrees.</p>"},{"location":"proc/cos/#_1","title":"Cos","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; cos(0) // 1  usr &lt;&lt; cos(45) // 0.707...  usr &lt;&lt; cos(90) // 0</p>"},{"location":"proc/del/","title":"Del","text":""},{"location":"proc/del/#del-proc","title":"del proc","text":"<p>See also: </p> <p>Del proc (datum) </p> <p>garbage collection </p> <p>refcount proc </p> <p>See also: </p> <p>See also:</p> <p>Del proc (datum) </p> <p>garbage collection </p> <p>refcount proc </p> <p>Del proc (datum)</p> <p>garbage collection </p> <p>refcount proc </p> <p>garbage collection</p> <p>refcount proc </p> <p>refcount proc</p> <p>Format: </p> <p>del Object</p> <p>Format: </p> <p>Format:</p> <p>del Object</p> <p>Args: </p> <p>Object: Any data object (datum, savefile, world, you name it)</p> <p>Args: </p> <p>Args:</p> <p>Object: Any data object (datum, savefile, world, you name it)</p> <p>Destroy an object and null out all references to it. Procs that are executing with  <code>src</code>   equal to that object are silently killed, causing execution to return to the caller. If that is not what you want, you should detach the proc from the source object by setting  <code>src</code>   to  <code>null</code>   .</p> <p><code>src</code> <code>src</code> <code>null</code></p> <p>When an object is deleted, its Del() procedure is called. Currently, if the Del() procedure does not execute the default action (by calling ..()), then the deletion of the object is aborted. You should not depend on this, as it may change. In other words, be sure to always call the default handler after doing your own stuff.</p>"},{"location":"proc/del/#_1","title":"Del","text":"<p>Example:</p> <p>mob/Del()  src &lt;&lt; \"Aaaaaaaah!\"  ..() mob/verb/self_destruct()  del usr</p> <p>While manual object deletion is useful in many cases, the search for live references to an object does take some time. The more active objects in the world, and the more variables in those objects, the longer the search will take. For larger projects, this search time can become significant. In these cases, as a best practice, manual deletion should be avoided by ensuring that all references to an object are taken care of when the need for object destruction arises. Objects that have no references are deleted automatically without the need for a search. See  garbage collection   for more details.</p> <p>garbage collection</p>"},{"location":"proc/do/","title":"Do","text":""},{"location":"proc/do/#do-proc","title":"do proc","text":"<p>See also: </p> <p>break statement </p> <p>continue statement </p> <p>for loop proc </p> <p>while proc </p> <p>See also: </p> <p>See also:</p> <p>break statement </p> <p>continue statement </p> <p>for loop proc </p> <p>while proc </p> <p>break statement</p> <p>continue statement </p> <p>for loop proc </p> <p>while proc </p> <p>continue statement</p> <p>for loop proc </p> <p>while proc </p> <p>for loop proc</p> <p>while proc </p> <p>while proc</p> <p>Format: </p> <p>do Statement while( E )</p> <p>Format: </p> <p>Format:</p> <p>do Statement while( E )</p> <p>Execute Statement. If E is true (non-zero) do it over again. Continue until E is false (zero).</p> <p>Statement may be a block of code or a single statement.</p>"},{"location":"proc/do/#_1","title":"Do","text":"<p>Example:</p> <p>var/i = 3 do  world &lt;&lt; i-- while(i)</p> <p>This outputs:</p> <p>3 2 1</p>"},{"location":"proc/fcopy/","title":"Fcopy","text":""},{"location":"proc/fcopy/#fcopy-proc","title":"fcopy proc","text":"<p>See also: </p> <p>fcopy_rsc proc </p> <p>shell proc </p> <p>See also: </p> <p>See also:</p> <p>fcopy_rsc proc </p> <p>shell proc </p> <p>fcopy_rsc proc</p> <p>shell proc </p> <p>shell proc</p> <p>Format: </p> <p>fcopy(Src,Dst)</p> <p>Format: </p> <p>Format:</p> <p>fcopy(Src,Dst)</p> <p>Args: </p> <p>Src: file to copy</p> <p>Dst: new copy to make</p> <p>Args: </p> <p>Args:</p> <p>Src: file to copy</p> <p>Dst: new copy to make</p> <p>Dst: new copy to make</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Src may be either a cache file, a savefile, or the name of an external file. Cache files are specified in single quotes and external files are in double quotes. If the path to the destination file does not already exist, it will be created.</p> <p>If the source and target are paths ending in \"/\", the contents of the source directory (including sub-directories) will be copied to the target path.</p> <p>This instruction could be useful when players upload files (like code) that you might want to dump to an external file.</p>"},{"location":"proc/fcopy/#_1","title":"Fcopy","text":"<p>Example:</p> <p>mob/verb/change_world(F as file)  fcopy(F,\"world.dm\")  shell(\"DreamMaker world\")  world.Reboot()</p> <p>This (somewhat dangerous) example allows players to upload code, recompile, and reboot the world. It assumes that DreamMaker is in the path where the shell looks for executable files and also that the name of the running world is world.dmb.</p>"},{"location":"proc/fcopy_rsc/","title":"Fcopy rsc","text":""},{"location":"proc/fcopy_rsc/#fcopy_rsc-proc","title":"fcopy_rsc proc","text":"<p>See also: </p> <p>cache </p> <p>fcopy proc </p> <p>file proc </p> <p>load_resource proc </p> <p>See also: </p> <p>See also:</p> <p>cache </p> <p>fcopy proc </p> <p>file proc </p> <p>load_resource proc </p> <p>cache</p> <p>fcopy proc </p> <p>file proc </p> <p>load_resource proc </p> <p>fcopy proc</p> <p>file proc </p> <p>load_resource proc </p> <p>file proc</p> <p>load_resource proc </p> <p>load_resource proc</p> <p>Format: </p> <p>fcopy_rsc(File)</p> <p>Format: </p> <p>Format:</p> <p>fcopy_rsc(File)</p> <p>Args: </p> <p>File: file to copy into the resource cache</p> <p>Args: </p> <p>Args:</p> <p>File: file to copy into the resource cache</p> <p>Returns: </p> <p>reference to the file as a cache entry</p> <p>Returns: </p> <p>Returns:</p> <p>reference to the file as a cache entry</p> <p>The file to copy may either be a file name (text string) or the return value of file() operating on the same. If a cache entry is passed as the argument, it will simply be returned with no action necessary.</p> <p>Once a file has been copied into the resource cache (i.e. the world's .rsc file), it may be used as an icon or a sound or whatever is appropriate. Most internal operations involving resource files automatically perform this operation when you try to use an external file in place of a cache entry. For example, when assigning a file() object to atom.icon, fcopy_rsc() is implicitly invoked.</p> <p>The main reason you would ever want to call this explicitly is if you are storing references to resource files in your own data structures and you want to ensure that all values are converted to cache entries so they may be directly compared to one another.</p>"},{"location":"proc/fdel/","title":"Fdel","text":""},{"location":"proc/fdel/#fdel-proc","title":"fdel proc","text":"<p>See also: </p> <p>shell proc </p> <p>See also: </p> <p>See also:</p> <p>shell proc </p> <p>shell proc</p> <p>Format: </p> <p>fdel(File)</p> <p>Format: </p> <p>Format:</p> <p>fdel(File)</p> <p>Args: </p> <p>File: name of file to delete</p> <p>Args: </p> <p>Args:</p> <p>File: name of file to delete</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>If the specified file ends in '  <code>/</code>   ', it is treated as a directory. Any contents (including sub-directories) are deleted as well.</p> <p><code>/</code></p> <p>Be careful!</p>"},{"location":"proc/fexists/","title":"Fexists","text":""},{"location":"proc/fexists/#fexists-proc","title":"fexists proc","text":"<p>See also: </p> <p>flist proc </p> <p>ftime proc </p> <p>length proc </p> <p>See also: </p> <p>See also:</p> <p>flist proc </p> <p>ftime proc </p> <p>length proc </p> <p>flist proc</p> <p>ftime proc </p> <p>length proc </p> <p>ftime proc</p> <p>length proc </p> <p>length proc</p> <p>Format: </p> <p>fexists(File)</p> <p>Format: </p> <p>Format:</p> <p>fexists(File)</p> <p>Args: </p> <p>File: name of file to test</p> <p>Args: </p> <p>Args:</p> <p>File: name of file to test</p> <p>Returns: </p> <p>1 if file exists; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if file exists; 0 otherwise.</p>"},{"location":"proc/file/","title":"File","text":""},{"location":"proc/file/#file-proc","title":"file proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>fcopy_rsc proc </p> <p>ftp proc </p> <p>isfile proc </p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>fcopy_rsc proc </p> <p>ftp proc </p> <p>isfile proc </p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>&lt;&lt; output operator</p> <p>fcopy_rsc proc </p> <p>ftp proc </p> <p>isfile proc </p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>fcopy_rsc proc</p> <p>ftp proc </p> <p>isfile proc </p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>ftp proc</p> <p>isfile proc </p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>isfile proc</p> <p>link proc </p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>link proc</p> <p>run proc </p> <p>savefile </p> <p>sound proc </p> <p>run proc</p> <p>savefile </p> <p>sound proc </p> <p>savefile</p> <p>sound proc </p> <p>sound proc</p> <p>Format: </p> <p>file(Path)</p> <p>Format: </p> <p>Format:</p> <p>file(Path)</p> <p>Returns a file object corresponding to the named file. This file object can then be used in a variety of ways. One would be to send it to a player to view using the browse() instruction. Output may also be appended to the file using the &lt;&lt; operator.</p> <p>Note that the file exists in the external filesystem (ie the hard disk) and not the cache. That means the path is specified in double quotes and will be evaluated at run-time rather than compile-time. The file need not exist at compile time and may even be modified at a later date. This is the principle reason for using a file in the filesystem rather than a cached resource file (specified in single quotes).</p>"},{"location":"proc/file/#_1","title":"File","text":"<p>Example:</p> <p>mob/verb/help()  usr &lt;&lt; browse(file(\"help.html\"))</p> <p>Many DM instructions that deal with files treat file(\"name\") and \"name\" the same. There are cases such as browse() where a simple text string is not interpreted as a filename; it is in those situations where file() is really necessary.</p>"},{"location":"proc/file2text/","title":"File2text","text":""},{"location":"proc/file2text/#file2text-proc","title":"file2text proc","text":"<p>See also: </p> <p>shell proc </p> <p>text2file proc </p> <p>See also: </p> <p>See also:</p> <p>shell proc </p> <p>text2file proc </p> <p>shell proc</p> <p>text2file proc </p> <p>text2file proc</p> <p>Format: </p> <p>file2text(File)</p> <p>Format: </p> <p>Format:</p> <p>file2text(File)</p> <p>Args: </p> <p>File: file to read</p> <p>Args: </p> <p>Args:</p> <p>File: file to read</p> <p>Returns: </p> <p>the contents of the file.</p> <p>Returns: </p> <p>Returns:</p> <p>the contents of the file.</p> <p>This can be useful when interacting with external applications that generate output in a text file. For example, you might have an external program that mimics conversation:</p>"},{"location":"proc/file2text/#_1","title":"File2text","text":"<p>Example:</p> <p>mob/oracle/verb/tell(T as text)  text2file(T,\"talk.in\")  shell(\"talk &lt; talk.in &gt; talk.out\")  usr &lt;&lt; file2text(\"talk.out\")</p>"},{"location":"proc/filter/","title":"Filter","text":""},{"location":"proc/filter/#filter-proc","title":"filter proc","text":"<p>See also: </p> <p>filters var (atom) </p> <p>Filter effects </p> <p>See also: </p> <p>See also:</p> <p>filters var (atom) </p> <p>Filter effects </p> <p>filters var (atom)</p> <p>Filter effects </p> <p>Filter effects</p> <p>Format: </p> <p>filter(type = Type, parameter = Value, ...)</p> <p>Format: </p> <p>Format:</p> <p>filter(type = Type, parameter = Value, ...)</p> <p>Creates a graphical filter that can be assigned or added to a list of filters on an atom or image.</p> <p>This proc uses named arguments, and the \"type\" value must always be included. To see which types of filters are available and what parameters they accept, see  Filter effects   .</p> <p>Filter effects</p>"},{"location":"proc/filter/#_1","title":"Filter","text":"<p>Example:</p> <p>atom/proc/Highlight(apply)  if(apply)  filters = filter(type=\"outline\", size=1, color=rgb(255,0,0))  else  filters = null</p> <p>A filter created with this proc is an  abstract   filter; it is not associated with any atom. When you add it to atom's filters, the atom gets a copy of this filter, so changing the abstract filter's values afterward will not change the atom's filters. For the same reason, an abstract filter can't be animated.</p> <p>abstract</p> <p>A filter that is part of an atom's filters list, like obj.filters[1], is an  attached   filter. Changing the values for an attached filter will change how that atom is displayed, and attached filters can be animated.</p> <p>attached</p>"},{"location":"proc/findlasttext/","title":"Findlasttext","text":""},{"location":"proc/findlasttext/#findlasttext-proc","title":"findlasttext proc","text":"<p>See also: </p> <p>findtext proc </p> <p>findtextEx proc </p> <p>findlasttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>findtextEx proc </p> <p>findlasttextEx proc </p> <p>findtext proc</p> <p>findtextEx proc </p> <p>findlasttextEx proc </p> <p>findtextEx proc</p> <p>findlasttextEx proc </p> <p>findlasttextEx proc</p> <p>Format: </p> <p>findlasttext(Haystack,Needle,Start=0,End=1)</p> <p>Format: </p> <p>Format:</p> <p>findlasttext(Haystack,Needle,Start=0,End=1)</p> <p>Returns: </p> <p>The last position of Needle in Haystack; 0 if not found.</p> <p>Returns: </p> <p>Returns:</p> <p>The last position of Needle in Haystack; 0 if not found.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>This instruction is NOT sensitive to the case of Haystack or Needle. The case-sensitive version is findlasttextEx().</p> <p>If the start or end position is negative, the position is counted backwards from the end of the string. E.g., findlasttext(\"Banana\", \"na\", -3) starts three characters from the end and will skip over the last \"na\".</p> <p>Note: Unlike findtext(), a regular expression may NOT be used as the Needle. Searching backwards is simply too complex for the regular expression engine.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>findlasttext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>findlasttext_char()</p> <p>Unicode</p>"},{"location":"proc/findlasttextEx/","title":"findlasttextEx","text":""},{"location":"proc/findlasttextEx/#findlasttextex-proc","title":"findlasttextEx proc","text":"<p>See also: </p> <p>findtext proc </p> <p>findtextEx proc </p> <p>findlasttext proc </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>findtextEx proc </p> <p>findlasttext proc </p> <p>findtext proc</p> <p>findtextEx proc </p> <p>findlasttext proc </p> <p>findtextEx proc</p> <p>findlasttext proc </p> <p>findlasttext proc</p> <p>Format: </p> <p>findlasttextEx(Haystack,Needle,Start=0,End=1)</p> <p>Format: </p> <p>Format:</p> <p>findlasttextEx(Haystack,Needle,Start=0,End=1)</p> <p>Returns: </p> <p>The last position of Needle in Haystack; 0 if not found.</p> <p>Returns: </p> <p>Returns:</p> <p>The last position of Needle in Haystack; 0 if not found.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Needle: The sub-text to search for.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>Start: The text byte position in Haystack in which to begin the search.  Because this searches backwards, the default is the end of the string (0).</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>End: The earliest position in Haystack that can be matched as a result.</p> <p>This instruction is sensitive to the case of Haystack and Needle. The case-insensitive version is findlasttext().</p> <p>If the start or end position is negative, the position is counted backwards from the end of the string.</p> <p>Note: Unlike findtextEx(), a regular expression may NOT be used as the Needle. Searching backwards is simply too complex for the regular expression engine.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>findlasttextEx_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>findlasttextEx_char()</p> <p>Unicode</p>"},{"location":"proc/findtext/","title":"Findtext","text":""},{"location":"proc/findtext/#findtext-proc","title":"findtext proc","text":"<p>See also: </p> <p>findlasttext proc </p> <p>findtextEx proc </p> <p>replacetext proc </p> <p>Regular expressions </p> <p>See also: </p> <p>See also:</p> <p>findlasttext proc </p> <p>findtextEx proc </p> <p>replacetext proc </p> <p>Regular expressions </p> <p>findlasttext proc</p> <p>findtextEx proc </p> <p>replacetext proc </p> <p>Regular expressions </p> <p>findtextEx proc</p> <p>replacetext proc </p> <p>Regular expressions </p> <p>replacetext proc</p> <p>Regular expressions </p> <p>Regular expressions</p> <p>Format: </p> <p>findtext(Haystack,Needle,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>findtext(Haystack,Needle,Start=1,End=0)</p> <p>Returns: </p> <p>The first position of Needle in Haystack; 0 if not found.</p> <p>Returns: </p> <p>Returns:</p> <p>The first position of Needle in Haystack; 0 if not found.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>When Needle is text, this instruction is NOT sensitive to the case of Haystack or Needle. The case-sensitive version is findtextEx().</p>"},{"location":"proc/findtext/#_1","title":"Findtext","text":"<p>Example:</p> <p>if(findtext(\"Hi There\",\"there\")==0)  world &lt;&lt; \"Not found!\" else  world &lt;&lt; \"Found!\"</p> <p>This outputs \"Found!\", since \"there\" is a part of the string \"Hi There\", ignoring case.</p> <p>If the start or end position is negative, the position is counted backwards from the end of the string. E.g., findtext(\"Banana\", \"na\", -3) starts three characters from the end and only searches the final \"ana\".</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>findtext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>findtext_char()</p> <p>Unicode</p>"},{"location":"proc/findtextEx/","title":"findtextEx","text":""},{"location":"proc/findtextEx/#findtextex-proc","title":"findtextEx proc","text":"<p>See also: </p> <p>findtext proc </p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>findtext proc</p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>replacetextEx proc</p> <p>Regular expressions </p> <p>Regular expressions</p> <p>Format: </p> <p>findtextEx(Haystack,Needle,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>findtextEx(Haystack,Needle,Start=1,End=0)</p> <p>Returns: </p> <p>The position of Needle in Haystack; 0 if not found.</p> <p>Returns: </p> <p>Returns:</p> <p>The position of Needle in Haystack; 0 if not found.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>When Needle is text, this instruction is sensitive to the case of Haystack and Needle. The case-insensitive version is findtext().</p>"},{"location":"proc/findtextEx/#_1","title":"findtextEx","text":"<p>Example:</p> <p>if(findtextEx(\"Hi There\",\"there\")==0)  world &lt;&lt; \"Not found!\" else  world &lt;&lt; \"Found!\"</p> <p>This outputs \"Not found!\", since \"there\" is not a part of the string \"Hi There\", taking into account case.</p> <p>If the start or end position is negative, the position is counted backwards from the end of the string. E.g., findtextEx(\"Banana\", \"na\", -3) starts three characters from the end and only searches the final \"ana\".</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>findtextEx_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>findtextEx_char()</p> <p>Unicode</p> <p>Note: This proc used to be named</p> <p>findText</p> <p>, like</p> <p>findtext</p> <p>but with a capital T. To avoid confusion it has been renamed, but old code will still compile.</p> <p>findText</p> <p>findtext</p>"},{"location":"proc/flick/","title":"Flick","text":""},{"location":"proc/flick/#flick-proc","title":"flick proc","text":"<p>See also: </p> <p>icon_state var (atom) </p> <p>See also: </p> <p>See also:</p> <p>icon_state var (atom) </p> <p>icon_state var (atom)</p> <p>Format: </p> <p>flick(Icon,Object)</p> <p>Format: </p> <p>Format:</p> <p>flick(Icon,Object)</p> <p>Args: </p> <p>Icon: An icon file or state name.</p> <p>Object: The target object.</p> <p>Args: </p> <p>Args:</p> <p>Icon: An icon file or state name.</p> <p>Object: The target object.</p> <p>Object: The target object.</p> <p>Cause the icon attached to Object to be temporarily replaced with the specified icon or icon state for the duration of the animation. This is a purely visual effect and does not effect the actual value of the object's icon variable.</p>"},{"location":"proc/flick/#_1","title":"Flick","text":"<p>Example:</p> <p>flick('blink.dmi',usr) //show another icon flick(\"fight\",usr) //show usr's fight state</p> <p>The target object may be any atom or image.</p>"},{"location":"proc/flist/","title":"Flist","text":""},{"location":"proc/flist/#flist-proc","title":"flist proc","text":"<p>See also: </p> <p>fexists proc </p> <p>See also: </p> <p>See also:</p> <p>fexists proc </p> <p>fexists proc</p> <p>Format: </p> <p>flist(Path)</p> <p>Format: </p> <p>Format:</p> <p>flist(Path)</p> <p>Args: </p> <p>Path: The path in the filesystem to get a listing of.</p> <p>Args: </p> <p>Args:</p> <p>Path: The path in the filesystem to get a listing of.</p> <p>Returns: </p> <p>A list of files contained in the specified directory and whose names  begin with the specified text. The names of sub-directories are listed  too, and are marked by a trailing \"/\".</p> <p>Returns: </p> <p>Returns:</p> <p>A list of files contained in the specified directory and whose names  begin with the specified text. The names of sub-directories are listed  too, and are marked by a trailing \"/\".</p> <p>The path is of the form \"dir1/dir2/.../file\". Only files beginning with the \"file\" part are listed, so be sure to end a directory name with \"/\" if you wish to see its contents. Otherwise you will just get that directory name back with a \"/\" appended.</p> <p>Only files and sub-directories directly contained in the specified path are listed (ie not the contents of the sub-directories too). The file names in the list do not include the path information but just the bare file name.</p>"},{"location":"proc/floor/","title":"Floor","text":""},{"location":"proc/floor/#floor-proc","title":"floor proc","text":"<p>See also: </p> <p>ceil proc </p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>See also: </p> <p>See also:</p> <p>ceil proc </p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>ceil proc</p> <p>round proc </p> <p>trunc proc </p> <p>fract proc </p> <p>round proc</p> <p>trunc proc </p> <p>fract proc </p> <p>trunc proc</p> <p>fract proc </p> <p>fract proc</p> <p>Format: </p> <p>floor(A)</p> <p>Format: </p> <p>Format:</p> <p>floor(A)</p> <p>Returns: </p> <p>the floor of A</p> <p>Returns: </p> <p>Returns:</p> <p>the floor of A</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p> <p>Returns the floor of A (the largest integer less than or equal to A).</p>"},{"location":"proc/floor/#_1","title":"Floor","text":"<p>Example:</p> <p>usr &lt;&lt; floor(1.45) // outputs 1</p> <p>usr &lt;&lt; floor(-1.45) // outputs -2</p>"},{"location":"proc/for/","title":"For","text":""},{"location":"proc/for/#for-proc","title":"for proc","text":"<p>See also: </p> <p>for list proc </p> <p>for loop proc </p> <p>See also: </p> <p>See also:</p> <p>for list proc </p> <p>for loop proc </p> <p>for list proc</p> <p>for loop proc </p> <p>for loop proc</p> <p>The for proc can be used to iterate values over a fixed range or list. Consult the appropriate entry for more information.</p>"},{"location":"proc/fract/","title":"Fract","text":""},{"location":"proc/fract/#fract-proc","title":"fract proc","text":"<p>See also: </p> <p>trunc proc </p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>See also: </p> <p>See also:</p> <p>trunc proc </p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>trunc proc</p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>floor proc</p> <p>ceil proc </p> <p>round proc </p> <p>ceil proc</p> <p>round proc </p> <p>round proc</p> <p>Format: </p> <p>fract(A)</p> <p>Format: </p> <p>Format:</p> <p>fract(A)</p> <p>Returns: </p> <p>fractional part of A</p> <p>Returns: </p> <p>Returns:</p> <p>fractional part of A</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p> <p>Returns the fractional part of the number A, with the same sign. This is everything after the decimal point.</p>"},{"location":"proc/fract/#_1","title":"Fract","text":"<p>Example:</p> <p>usr &lt;&lt; fract(1.45) // outputs 0.45</p> <p>usr &lt;&lt; fract(-1.45) // outputs -0.45</p>"},{"location":"proc/ftime/","title":"Ftime","text":""},{"location":"proc/ftime/#ftime-proc","title":"ftime proc","text":"<p>See also: </p> <p>time2text proc </p> <p>flist proc </p> <p>fexists proc </p> <p>length proc </p> <p>See also: </p> <p>See also:</p> <p>time2text proc </p> <p>flist proc </p> <p>fexists proc </p> <p>length proc </p> <p>time2text proc</p> <p>flist proc </p> <p>fexists proc </p> <p>length proc </p> <p>flist proc</p> <p>fexists proc </p> <p>length proc </p> <p>fexists proc</p> <p>length proc </p> <p>length proc</p> <p>Format: </p> <p>ftime(File, IsCreationTime)</p> <p>Format: </p> <p>Format:</p> <p>ftime(File, IsCreationTime)</p> <p>Args: </p> <p>File: name of file to test</p> <p>IsCreationTime (optional): true to return file creation time, false (default) to return last-modified time</p> <p>Args: </p> <p>Args:</p> <p>File: name of file to test</p> <p>IsCreationTime (optional): true to return file creation time, false (default) to return last-modified time</p> <p>IsCreationTime (optional): true to return file creation time, false (default) to return last-modified time</p> <p>Returns: </p> <p>A time value that can be sent to time2text().</p> <p>Returns: </p> <p>Returns:</p> <p>A time value that can be sent to time2text().</p>"},{"location":"proc/ftp/","title":"Ftp","text":""},{"location":"proc/ftp/#ftp-proc","title":"ftp proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>browse proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>sound proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>browse proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>sound proc </p> <p>&lt;&lt; output operator</p> <p>browse proc </p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>sound proc </p> <p>browse proc</p> <p>file proc </p> <p>link proc </p> <p>run proc </p> <p>sound proc </p> <p>file proc</p> <p>link proc </p> <p>run proc </p> <p>sound proc </p> <p>link proc</p> <p>run proc </p> <p>sound proc </p> <p>run proc</p> <p>sound proc </p> <p>sound proc</p> <p>Format: </p> <p>target &lt;&lt; ftp(File, Name)</p> <p>Format: </p> <p>Format:</p> <p>target &lt;&lt; ftp(File, Name)</p> <p>Sends a file to the target with the (optional) suggested name for saving to disk. The file may be a cache file (loaded at compile time) or an external file (accessed at run-time). Cache files are specified in single quotes, and external files are in double quotes.</p> <p>This function could be used to distribute source code, supplementary documentation, or anything.</p>"},{"location":"proc/ftp/#_1","title":"Ftp","text":"<p>Example:</p> <p>mob/verb/geticon(O in view())  usr &lt;&lt; ftp(O:icon)</p> <p>This example allows the user to download the icons from other objects in the game.</p>"},{"location":"proc/generator/","title":"Generator","text":""},{"location":"proc/generator/#generator-proc","title":"generator proc","text":"<p>See also: </p> <p>Generators </p> <p>Particle effects </p> <p>color var (atom) </p> <p>Color matrix </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>Generators </p> <p>Particle effects </p> <p>color var (atom) </p> <p>Color matrix </p> <p>stddef.dm file </p> <p>Generators</p> <p>Particle effects </p> <p>color var (atom) </p> <p>Color matrix </p> <p>stddef.dm file </p> <p>Particle effects</p> <p>color var (atom) </p> <p>Color matrix </p> <p>stddef.dm file </p> <p>color var (atom)</p> <p>Color matrix </p> <p>stddef.dm file </p> <p>Color matrix</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>Format: </p> <p>generator(type, A, B, rand)</p> <p>Format: </p> <p>Format:</p> <p>generator(type, A, B, rand)</p> <p>Args: </p> <p>type: The type of generator object, which determines what kind of results it produces</p> <p>A: One extreme of the generator results</p> <p>B: The other extreme</p> <p>rand: Type of random distribution used</p> <p>Args: </p> <p>Args:</p> <p>type: The type of generator object, which determines what kind of results it produces</p> <p>A: One extreme of the generator results</p> <p>B: The other extreme</p> <p>rand: Type of random distribution used</p> <p>A: One extreme of the generator results</p> <p>B: The other extreme</p> <p>rand: Type of random distribution used</p> <p>B: The other extreme</p> <p>rand: Type of random distribution used</p> <p>rand: Type of random distribution used</p> <p>Creates a generator that can be used to produce a random value. This generator can be used in client-side particle effects, or it can be used in proc code. The types of values it can produce are numbers, 3D vectors (list of 3 numbers), or colors (a text string like \"#rrggbb\" or a color matrix).</p> <p>|   Generator type   |   Result type   |   Description   | | --- | --- | --- | |   num   |   num   |   A random number between A and B.   | |   vector   |   vector   |   A random vector on a line between A and B.   | |   box   |   vector   |   A random vector within a box whose corners are at A and B.   | |   color   |   color (string) or color matrix   |   Result type depends on whether A or B are matrices or not. The result is interpolated between A and B; components are not randomized separately.   | |   circle   |   vector   |   A random XY-only vector in a ring between radius A and B, centered at 0,0.   | |   sphere   |   vector   |   A random vector in a spherical shell between radius A and B, centered at 0,0,0.   | |   square   |   vector   |   A random XY-only vector between squares of sizes A and B. (The length of the square is between A*2 and B*2, centered at 0,0.)   | |   cube   |   vector   |   A random vector between cubes of sizes A and B. (The length of the cube is between A*2 and B*2, centered at 0,0,0.)   |</p> <p>|   Generator type   |   Result type   |   Description   |</p> <p>Generator type  |</p> <p>Result type  |</p> <p>Description  | |   num   |   num   |   A random number between A and B.   |</p> <p>num  |</p> <p>num  |</p> <p>A random number between A and B.  | |   vector   |   vector   |   A random vector on a line between A and B.   |</p> <p>vector  |</p> <p>vector  |</p> <p>A random vector on a line between A and B.  | |   box   |   vector   |   A random vector within a box whose corners are at A and B.   |</p> <p>box  |</p> <p>vector  |</p> <p>A random vector within a box whose corners are at A and B.  | |   color   |   color (string) or color matrix   |   Result type depends on whether A or B are matrices or not. The result is interpolated between A and B; components are not randomized separately.   |</p> <p>color  |</p> <p>color (string) or color matrix  |</p> <p>Result type depends on whether A or B are matrices or not. The result is interpolated between A and B; components are not randomized separately.  | |   circle   |   vector   |   A random XY-only vector in a ring between radius A and B, centered at 0,0.   |</p> <p>circle  |</p> <p>vector  |</p> <p>A random XY-only vector in a ring between radius A and B, centered at 0,0.  | |   sphere   |   vector   |   A random vector in a spherical shell between radius A and B, centered at 0,0,0.   |</p> <p>sphere  |</p> <p>vector  |</p> <p>A random vector in a spherical shell between radius A and B, centered at 0,0,0.  | |   square   |   vector   |   A random XY-only vector between squares of sizes A and B. (The length of the square is between A*2 and B*2, centered at 0,0.)   |</p> <p>square  |</p> <p>vector  |</p> <p>A random XY-only vector between squares of sizes A and B. (The length of the square is between A*2 and B*2, centered at 0,0.)  | |   cube   |   vector   |   A random vector between cubes of sizes A and B. (The length of the cube is between A*2 and B*2, centered at 0,0,0.)   |</p> <p>cube  |</p> <p>vector  |</p> <p>A random vector between cubes of sizes A and B. (The length of the cube is between A*2 and B*2, centered at 0,0,0.)  |</p> <p>The optional</p> <p>rand</p> <p>argument determines the type of random distribution.</p> <p>rand</p> UNIFORM_RAND Default. Random values are uniformly likely to be chosen. NORMAL_RAND Approximates a Gaussian normal distribution, but on a finite interval. Values closest to the mean are more likely to be chosen, while the extremes are much less likely. LINEAR_RAND The probabiliy of choosing a number is proportional to its absolute value. SQUARE_RAND The probabiliy of choosing a number is proportional to its square. <p>|   UNIFORM_RAND   |   Default. Random values are uniformly likely to be chosen.   |</p> <p>UNIFORM_RAND  |</p> <p>Default. Random values are uniformly likely to be chosen.  | |   NORMAL_RAND   |   Approximates a Gaussian normal distribution, but on a finite interval. Values closest to the mean are more likely to be chosen, while the extremes are much less likely.   |</p> <p>NORMAL_RAND  |</p> <p>Approximates a Gaussian normal distribution, but on a finite interval. Values closest to the mean are more likely to be chosen, while the extremes are much less likely.  | |   LINEAR_RAND   |   The probabiliy of choosing a number is proportional to its absolute value.   |</p> <p>LINEAR_RAND  |</p> <p>The probabiliy of choosing a number is proportional to its absolute value.  | |   SQUARE_RAND   |   The probabiliy of choosing a number is proportional to its square.   |</p> <p>SQUARE_RAND  |</p> <p>The probabiliy of choosing a number is proportional to its square.  |</p> <p>The result of calling</p> <p>generator()</p> <p>is a datum of type</p> <p>/generator</p> <p>and you can get a random value from it by calling its</p> <p>Rand()</p> <p>proc.</p> <p>generator()</p> <p>/generator</p> <p>Rand()</p>"},{"location":"proc/generator/#_1","title":"Generator","text":"<p>Example:</p> <p>var/generator/G = generator(\"num\", -1, 1) // generates a random number between -1 and 1 world &lt;&lt; G.Rand() // generate a number and output it to world</p>"},{"location":"proc/get_dir/","title":"Get dir","text":""},{"location":"proc/get_dir/#get_dir-proc","title":"get_dir proc","text":"<p>See also: </p> <p>dir var (atom) </p> <p>See also: </p> <p>See also:</p> <p>dir var (atom) </p> <p>dir var (atom)</p> <p>Format: </p> <p>get_dir(Loc1, Loc2)</p> <p>Format: </p> <p>Format:</p> <p>get_dir(Loc1, Loc2)</p> <p>Returns: </p> <p>The direction from Loc1 to Loc2. Possible results are</p> <p>NORTH</p> <p>,</p> <p>SOUTH</p> <p>,</p> <p>EAST</p> <p>,</p> <p>WEST</p> <p>,</p> <p>NORTHEAST</p> <p>,</p> <p>NORTHWEST</p> <p>,</p> <p>SOUTHEAST</p> <p>, and</p> <p>SOUTHWEST</p> <p>.</p> <p>Returns: </p> <p>Returns:</p> <p>The direction from Loc1 to Loc2. Possible results are</p> <p>NORTH</p> <p>,</p> <p>SOUTH</p> <p>,</p> <p>EAST</p> <p>,</p> <p>WEST</p> <p>,</p> <p>NORTHEAST</p> <p>,</p> <p>NORTHWEST</p> <p>,</p> <p>SOUTHEAST</p> <p>, and</p> <p>SOUTHWEST</p> <p>.</p> <p>NORTH</p> <p>SOUTH</p> <p>EAST</p> <p>WEST</p> <p>NORTHEAST</p> <p>NORTHWEST</p> <p>SOUTHEAST</p> <p>SOUTHWEST</p> <p>Args: </p> <p>Loc1: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Loc1: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>If the direction is not directly lying along one of the four primary cardinal directions, the result will become the nearest diagonal direction (eg. if</p> <p>Loc2</p> <p>is mostly north but a little to the east of</p> <p>Loc1</p> <p>, the direction returned will be</p> <p>NORTHEAST</p> <p>).</p> <p>Loc2</p> <p>Loc1</p> <p>NORTHEAST</p>"},{"location":"proc/get_dist/","title":"Get dist","text":""},{"location":"proc/get_dist/#get_dist-proc","title":"get_dist proc","text":"<p>See also: </p> <p>bounds_dist proc </p> <p>See also: </p> <p>See also:</p> <p>bounds_dist proc </p> <p>bounds_dist proc</p> <p>Format: </p> <p>get_dist(Loc1, Loc2)</p> <p>Format: </p> <p>Format:</p> <p>get_dist(Loc1, Loc2)</p> <p>Returns: </p> <p>The distance between</p> <p>Loc1</p> <p>and</p> <p>Loc2</p> <p>, in tiles. This is the number of full-tile movements (disregarding any obstacles and allowing diagonal moves  including across Z levels   ) required to go from one to the other. You can think of it as the max of their x, y, and z distances.</p> <p>Returns: </p> <p>Returns:</p> <p>The distance between</p> <p>Loc1</p> <p>and</p> <p>Loc2</p> <p>, in tiles. This is the number of full-tile movements (disregarding any obstacles and allowing diagonal moves  including across Z levels   ) required to go from one to the other. You can think of it as the max of their x, y, and z distances.</p> <p>Loc1</p> <p>Loc2</p> <p>including across Z levels</p> <p>Args: </p> <p>Loc1: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Loc1: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>Loc2: An object on the map.</p> <p>At this time,</p> <p>get_dist()</p> <p>never returns a value greater than 127.</p> <p>get_dist()</p> <p>For a distance in pixels, use</p> <p>bounds_dist()</p> <p>.</p> <p>bounds_dist()</p> <p>get_dist()</p> <p>will return -1 in error conditions, such as when</p> <p>Loc1</p> <p>and</p> <p>Loc2</p> <p>are the same object.</p> <p>get_dist()</p> <p>Loc1</p> <p>Loc2</p>"},{"location":"proc/get_step/","title":"Get step","text":""},{"location":"proc/get_step/#get_step-proc","title":"get_step proc","text":"<p>See also: </p> <p>step proc </p> <p>walk proc </p> <p>See also: </p> <p>See also:</p> <p>step proc </p> <p>walk proc </p> <p>step proc</p> <p>walk proc </p> <p>walk proc</p> <p>Format: </p> <p>get_step(Ref, Dir)</p> <p>Format: </p> <p>Format:</p> <p>get_step(Ref, Dir)</p> <p>Returns: </p> <p>The location of the new position.</p> <p>Returns: </p> <p>Returns:</p> <p>The location of the new position.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Dir: One of</p> <p>NORTH</p> <p>,</p> <p>SOUTH</p> <p>,</p> <p>EAST</p> <p>,</p> <p>WEST</p> <p>,</p> <p>NORTHEAST</p> <p>,</p> <p>NORTHWEST</p> <p>,</p> <p>SOUTHEAST</p> <p>,</p> <p>SOUTHWEST</p> <p>.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Dir: One of</p> <p>NORTH</p> <p>,</p> <p>SOUTH</p> <p>,</p> <p>EAST</p> <p>,</p> <p>WEST</p> <p>,</p> <p>NORTHEAST</p> <p>,</p> <p>NORTHWEST</p> <p>,</p> <p>SOUTHEAST</p> <p>,</p> <p>SOUTHWEST</p> <p>.</p> <p>Dir: One of</p> <p>NORTH</p> <p>,</p> <p>SOUTH</p> <p>,</p> <p>EAST</p> <p>,</p> <p>WEST</p> <p>,</p> <p>NORTHEAST</p> <p>,</p> <p>NORTHWEST</p> <p>,</p> <p>SOUTHEAST</p> <p>,</p> <p>SOUTHWEST</p> <p>.</p> <p>NORTH</p> <p>SOUTH</p> <p>EAST</p> <p>WEST</p> <p>NORTHEAST</p> <p>NORTHWEST</p> <p>SOUTHEAST</p> <p>SOUTHWEST</p> <p>Calculate the position of a step from</p> <p>Ref</p> <p>in the direction</p> <p>Dir</p> <p>.</p> <p>Ref</p> <p>Dir</p>"},{"location":"proc/get_step_away/","title":"Get step away","text":""},{"location":"proc/get_step_away/#get_step_away-proc","title":"get_step_away proc","text":"<p>See also: </p> <p>step_away proc </p> <p>walk_away proc </p> <p>See also: </p> <p>See also:</p> <p>step_away proc </p> <p>walk_away proc </p> <p>step_away proc</p> <p>walk_away proc </p> <p>walk_away proc</p> <p>Format: </p> <p>get_step_away(Ref, Trg, Max=5)</p> <p>Format: </p> <p>Format:</p> <p>get_step_away(Ref, Trg, Max=5)</p> <p>Returns: </p> <p>The location of the new position, or 0 if no change.</p> <p>Returns: </p> <p>Returns:</p> <p>The location of the new position, or 0 if no change.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Calculate position of a step from</p> <p>Ref</p> <p>on a path away from</p> <p>Trg</p> <p>, taking obstacles into account. If</p> <p>Ref</p> <p>is farther than</p> <p>Max</p> <p>steps from</p> <p>Trg</p> <p>, 0 will be returned.</p> <p>Ref</p> <p>Trg</p> <p>Ref</p> <p>Max</p> <p>Trg</p>"},{"location":"proc/get_step_rand/","title":"Get step rand","text":""},{"location":"proc/get_step_rand/#get_step_rand-proc","title":"get_step_rand proc","text":"<p>See also: </p> <p>step_rand proc </p> <p>walk_rand proc </p> <p>See also: </p> <p>See also:</p> <p>step_rand proc </p> <p>walk_rand proc </p> <p>step_rand proc</p> <p>walk_rand proc </p> <p>walk_rand proc</p> <p>Format: </p> <p>get_step_rand(Ref)</p> <p>Format: </p> <p>Format:</p> <p>get_step_rand(Ref)</p> <p>Returns: </p> <p>The location of the new position, or 0 if no change.</p> <p>Returns: </p> <p>Returns:</p> <p>The location of the new position, or 0 if no change.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Calculate position of a step from</p> <p>Ref</p> <p>in random motion.</p> <p>Ref</p>"},{"location":"proc/get_step_to/","title":"Get step to","text":""},{"location":"proc/get_step_to/#get_step_to-proc","title":"get_step_to proc","text":"<p>See also: </p> <p>step_to proc </p> <p>walk_to proc </p> <p>get_steps_to proc </p> <p>See also: </p> <p>See also:</p> <p>step_to proc </p> <p>walk_to proc </p> <p>get_steps_to proc </p> <p>step_to proc</p> <p>walk_to proc </p> <p>get_steps_to proc </p> <p>walk_to proc</p> <p>get_steps_to proc </p> <p>get_steps_to proc</p> <p>Format: </p> <p>get_step_to(Ref, Trg, Min=0)</p> <p>Format: </p> <p>Format:</p> <p>get_step_to(Ref, Trg, Min=0)</p> <p>Returns: </p> <p>The location of the new position, or 0 if no change.</p> <p>Returns: </p> <p>Returns:</p> <p>The location of the new position, or 0 if no change.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Calculate the position of a step from</p> <p>Ref</p> <p>on a path to</p> <p>Trg</p> <p>, taking obstacles into account.</p> <p>Ref</p> <p>Trg</p> <p>If</p> <p>Ref</p> <p>is within</p> <p>Min</p> <p>steps of</p> <p>Trg</p> <p>, no step is computed. This is also true if the target is too far away (more than twice</p> <p>world.view</p> <p>steps). In either case, null is returned.</p> <p>Ref</p> <p>Min</p> <p>Trg</p> <p>world.view</p>"},{"location":"proc/get_step_towards/","title":"Get step towards","text":""},{"location":"proc/get_step_towards/#get_step_towards-proc","title":"get_step_towards proc","text":"<p>See also: </p> <p>step_towards proc </p> <p>walk_towards proc </p> <p>See also: </p> <p>See also:</p> <p>step_towards proc </p> <p>walk_towards proc </p> <p>step_towards proc</p> <p>walk_towards proc </p> <p>walk_towards proc</p> <p>Format: </p> <p>get_step_towards(Ref, Trg)</p> <p>Format: </p> <p>Format:</p> <p>get_step_towards(Ref, Trg)</p> <p>Returns: </p> <p>The location of the new position.</p> <p>Returns: </p> <p>Returns:</p> <p>The location of the new position.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Trg: An object on the map.</p> <p>Calculate the position of a step from</p> <p>Ref</p> <p>in the direction of</p> <p>Trg</p> <p>.</p> <p>Ref</p> <p>Trg</p>"},{"location":"proc/get_steps_to/","title":"Get steps to","text":""},{"location":"proc/get_steps_to/#get_steps_to-proc","title":"get_steps_to proc","text":"<p>See also: </p> <p>step proc </p> <p>step_to proc </p> <p>walk_to proc </p> <p>get_step_to proc </p> <p>See also: </p> <p>See also:</p> <p>step proc </p> <p>step_to proc </p> <p>walk_to proc </p> <p>get_step_to proc </p> <p>step proc</p> <p>step_to proc </p> <p>walk_to proc </p> <p>get_step_to proc </p> <p>step_to proc</p> <p>walk_to proc </p> <p>get_step_to proc </p> <p>walk_to proc</p> <p>get_step_to proc </p> <p>get_step_to proc</p> <p>Format: </p> <p>get_steps_to(Ref, Trg, Min=0)</p> <p>Format: </p> <p>Format:</p> <p>get_steps_to(Ref, Trg, Min=0)</p> <p>Returns: </p> <p>A list of directions to step.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of directions to step.</p> <p>Args: </p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Args: </p> <p>Args:</p> <p>Ref: Starting point or object.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Calculate a set of steps from</p> <p>Ref</p> <p>on a path to</p> <p>Trg</p> <p>, taking obstacles into account. The result of the proc is a list of directions that can be used with</p> <p>step()</p> <p>, or null if a path could not be found.</p> <p>Ref</p> <p>Trg</p> <p>step()</p> <p>If</p> <p>Ref</p> <p>is within</p> <p>Min</p> <p>steps of</p> <p>Trg</p> <p>, no steps are computed. This is also true if the target is too far away (more than twice</p> <p>world.view</p> <p>steps). In either case, null is returned.</p> <p>Ref</p> <p>Min</p> <p>Trg</p> <p>world.view</p>"},{"location":"proc/goto/","title":"Goto","text":""},{"location":"proc/goto/#goto-proc","title":"goto proc","text":"<p>See also: </p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>for list proc </p> <p>while proc </p> <p>See also: </p> <p>See also:</p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>for list proc </p> <p>while proc </p> <p>break statement</p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>for list proc </p> <p>while proc </p> <p>continue statement</p> <p>do proc </p> <p>for loop proc </p> <p>for list proc </p> <p>while proc </p> <p>do proc</p> <p>for loop proc </p> <p>for list proc </p> <p>while proc </p> <p>for loop proc</p> <p>for list proc </p> <p>while proc </p> <p>for list proc</p> <p>while proc </p> <p>while proc</p> <p>Format: </p> <p>goto node</p> <p>Format: </p> <p>Format:</p> <p>goto node</p> <p>Jump to the specified node in the current proc.</p>"},{"location":"proc/goto/#_1","title":"Goto","text":"<p>Example:</p> <p>goto End world &lt;&lt; \"ERR\" End world &lt;&lt; \"The end\"</p> <p>This displays \"The end\".</p> <p>Note:</p> <p>goto</p> <p>should be used judiciously. It's easy to fall into the trap of \"spaghetti logic\" where</p> <p>goto</p> <p>is relied on so much that it becomes too difficult to follow how the flow of code execution will proceed. Normally, you'll want to use a construct like</p> <p>while()</p> <p>or</p> <p>for()</p> <p>loops, and</p> <p>break</p> <p>and</p> <p>continue</p> <p>statements.</p> <p>goto</p> <p>is for more complex situations that aren't readily handled by any of these.</p> <p>goto</p> <p>goto</p> <p>while()</p> <p>for()</p> <p>break</p> <p>continue</p> <p>goto</p>"},{"location":"proc/gradient/","title":"Gradient","text":""},{"location":"proc/gradient/#gradient-proc","title":"gradient proc","text":"<p>See also: </p> <p>Color gradient </p> <p>rgb proc </p> <p>rgb2num proc </p> <p>Color space </p> <p>See also: </p> <p>See also:</p> <p>Color gradient </p> <p>rgb proc </p> <p>rgb2num proc </p> <p>Color space </p> <p>Color gradient</p> <p>rgb proc </p> <p>rgb2num proc </p> <p>Color space </p> <p>rgb proc</p> <p>rgb2num proc </p> <p>Color space </p> <p>rgb2num proc</p> <p>Color space </p> <p>Color space</p> <p>Format: </p> <p>gradient(Item1, Item2, ..., index)</p> <p>gradient(Gradient, index)</p> <p>Format: </p> <p>Format:</p> <p>gradient(Item1, Item2, ..., index)</p> <p>gradient(Gradient, index)</p> <p>gradient(Gradient, index)</p> <p>Args: </p> <p>Gradient: A  color gradient   list</p> <p>Item1, Item2...: Elements of a  color gradient   list</p> <p>index: The index along the gradient where the interpolation is done.</p> <p>Args: </p> <p>Args:</p> <p>Gradient: A  color gradient   list</p> <p>Item1, Item2...: Elements of a  color gradient   list</p> <p>index: The index along the gradient where the interpolation is done.</p> <p>color gradient</p> <p>Item1, Item2...: Elements of a  color gradient   list</p> <p>index: The index along the gradient where the interpolation is done.</p> <p>color gradient</p> <p>index: The index along the gradient where the interpolation is done.</p> <p>Returns: </p> <p>A color, represented by a text string in #RRGGBB or #RRGGBBAA format</p> <p>Returns: </p> <p>Returns:</p> <p>A color, represented by a text string in #RRGGBB or #RRGGBBAA format</p> <p>Interpolates between two or more colors along a  color gradient   . By default, gradients extend from an index of 0 to 1, but they are allowed to go beyond that if you choose.</p> <p>color gradient</p> <p>The simplest way to use this proc is to interpolate between two colors:</p>"},{"location":"proc/gradient/#_1","title":"Gradient","text":"<p>Example:</p> <p>// 20% of the way from red to black // prints #cc0000 which is rgb(204,0,0) src &lt;&lt; gradient(\"red\", \"black\", 0.2)</p> <p>Anything that applies to color gradients can be used in this proc, so you can have a looping gradient, or a gradient that uses a color space other than RGB.</p> <p>In the first format where you specify all the items separately, you can use  named arguments   for</p> <p>index</p> <p>and</p> <p>space</p> <p>(the gradient's color space). If you don't specify an argument called \"index\", the last argument is assumed to be the index.</p> <p>named arguments</p> <p>index</p> <p>space</p>"},{"location":"proc/gradient/#_2","title":"Gradient","text":"<p>Example:</p> <p>// This gradient loops through all the hues and goes from 0 to 6. // Because this is a looping gradient, index=10 becomes index=4. // In HSL, this will give you blue (#0000ff). src &lt;&lt; gradient(0, \"#f00\", 3, \"#0ff\", 6, \"#f00\", \"loop\", space=COLORSPACE_HSL, index=10)</p> <p>The</p> <p>gradient(Gradient, index)</p> <p>format is used for cases where you want to pass an existing gradient to the proc.</p> <p>gradient(Gradient, index)</p>"},{"location":"proc/gradient/#_3","title":"Gradient","text":"<p>Example:</p> <p>var/candy_cane_gradient = list(0.5,\"red\",0.5,\"white\",\"loop\")</p> <p>// the color output alternates between red and white depending on the current time src &lt;&lt; gradient(candy_cane_gradient, world.time/100)</p>"},{"location":"proc/hascall/","title":"Hascall","text":""},{"location":"proc/hascall/#hascall-proc","title":"hascall proc","text":"<p>See also: </p> <p>call proc </p> <p>See also: </p> <p>See also:</p> <p>call proc </p> <p>call proc</p> <p>Format: </p> <p>hascall(Object,ProcName)</p> <p>Format: </p> <p>Format:</p> <p>hascall(Object,ProcName)</p> <p>Args: </p> <p>Object: source of proc or verb</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>Args: </p> <p>Args:</p> <p>Object: source of proc or verb</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>ProcName: name of proc or verb (\"MyProc\")</p> <p>Returns: </p> <p>1 if object has such a proc or verb; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if object has such a proc or verb; 0 otherwise</p>"},{"location":"proc/hearers/","title":"Hearers","text":""},{"location":"proc/hearers/#hearers","title":"hearers","text":"<p>See also: </p> <p>ohearers </p> <p>view proc </p> <p>viewers </p> <p>See also: </p> <p>See also:</p> <p>ohearers </p> <p>view proc </p> <p>viewers </p> <p>ohearers</p> <p>view proc </p> <p>viewers </p> <p>view proc</p> <p>viewers </p> <p>viewers</p> <p>Format: </p> <p>hearers(Depth=world.view,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>hearers(Depth=world.view,Center=usr)</p> <p>This is just like  <code>viewers()</code>   , but it is a list of mobs that can hear the center object. Currently, this is computed on the assumption that opaque objects block sound, just like they block light.</p> <p><code>viewers()</code></p>"},{"location":"proc/html_decode/","title":"Html decode","text":""},{"location":"proc/html_decode/#html_decode-proc","title":"html_decode proc","text":"<p>See also: </p> <p>html_encode proc </p> <p>See also: </p> <p>See also:</p> <p>html_encode proc </p> <p>html_encode proc</p> <p>Format: </p> <p>html_decode(HtmlText)</p> <p>Format: </p> <p>Format:</p> <p>html_decode(HtmlText)</p> <p>Args: </p> <p>HtmlText: text to be \"unescaped\"</p> <p>Args: </p> <p>Args:</p> <p>HtmlText: text to be \"unescaped\"</p> <p>Returns: </p> <p>unescaped text</p> <p>Returns: </p> <p>Returns:</p> <p>unescaped text</p> <p>Special characters such as &lt; and &gt; are not displayed literally in html and may produce garbled output. To display these characters literally, they must be \"escaped\". For example, &lt; is produced by the code  <code>&amp;lt;</code>   and &gt; is produced by the code  <code>&amp;gt;</code>   .</p> <p><code>&amp;lt;</code> <code>&amp;gt;</code></p> <p>The  <code>html_decode()</code>   instruction takes a text string containing such escaped symbols and turns them into their literal counterparts. The more useful function is  <code>html_encode()</code>   which does the reverse.</p> <p><code>html_decode()</code> <code>html_encode()</code></p>"},{"location":"proc/html_encode/","title":"Html encode","text":""},{"location":"proc/html_encode/#html_encode-proc","title":"html_encode proc","text":"<p>See also: </p> <p>html_decode proc </p> <p>See also: </p> <p>See also:</p> <p>html_decode proc </p> <p>html_decode proc</p> <p>Format: </p> <p>html_encode(PlainText)</p> <p>Format: </p> <p>Format:</p> <p>html_encode(PlainText)</p> <p>Args: </p> <p>PlainText: text to be html \"escaped\"</p> <p>Args: </p> <p>Args:</p> <p>PlainText: text to be html \"escaped\"</p> <p>Returns: </p> <p>escaped text</p> <p>Returns: </p> <p>Returns:</p> <p>escaped text</p> <p>Special characters such as &lt; and &gt; are not displayed literally in html and may produce garbled output. If you want to ensure that an entire text string is displayed literally, you can \"escape\" those characters. For example, &lt; is produced by the code  <code>&amp;lt;</code>   and &gt; is produced by the code  <code>&amp;gt;</code>   .</p> <p><code>&amp;lt;</code> <code>&amp;gt;</code></p> <p>The  <code>html_encode()</code>   instruction does this for you automatically. If you wanted to disallow html input from players, you could use this to force their text to be displayed literally:</p> <p><code>html_encode()</code></p>"},{"location":"proc/html_encode/#_1","title":"Html encode","text":"<p>Example:</p> <p>mob/verb/say(T as text)  view() &lt;&lt; \"[usr] says, '[html_encode(T)]'\"</p> <p>If a URL is included in the text, special characters like &amp; that are part of the URL will be skipped. This keeps automatically created links in the output from being broken.</p> <p>Note for BYOND oldies: the old-style formatting codes such as \"\\red\" which are still parsed but not encouraged are completely stripped out by html_encode().</p>"},{"location":"proc/icon/","title":"Icon","text":""},{"location":"proc/icon/#icon-proc","title":"icon proc","text":"<p>See also: </p> <p>file proc </p> <p>icon_states proc </p> <p>icons </p> <p>See also: </p> <p>See also:</p> <p>file proc </p> <p>icon_states proc </p> <p>icons </p> <p>file proc</p> <p>icon_states proc </p> <p>icons </p> <p>icon_states proc</p> <p>icons </p> <p>icons</p> <p>Format: </p> <p>icon(icon,state,dir,frame,moving)</p> <p>(supports  named arguments   )</p> <p>Format: </p> <p>Format:</p> <p>icon(icon,state,dir,frame,moving)</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>named arguments</p> <p>Args: </p> <p>icon: an icon file or /icon object</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>Args: </p> <p>Args:</p> <p>icon: an icon file or /icon object</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>icon_state: an optional text string, specifying a single icon state to load</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>dir: an optional direction to extract</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>frame: an optional animation frame to extract</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>moving: Non-zero to extract only movement states, 0 for non-movement states,  or null (default) for both</p> <p>This is equivalent to new/icon(). It creates an /icon object, which is initialized to contain the same graphical data as the given file. If an icon state or direction are specified, only those parts of the original icon will be included in the new icon object.</p>"},{"location":"proc/icon_states/","title":"Icon states","text":""},{"location":"proc/icon_states/#icon_states-proc","title":"icon_states proc","text":"<p>See also: </p> <p>icons </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>See also: </p> <p>See also:</p> <p>icons </p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icons</p> <p>icon_size var (world) </p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>icon_size var (world)</p> <p>map_format var (world) </p> <p>Big icons </p> <p>Tiled icons </p> <p>map_format var (world)</p> <p>Big icons </p> <p>Tiled icons </p> <p>Big icons</p> <p>Tiled icons </p> <p>Tiled icons</p> <p>Format: </p> <p>icon_states(Icon, mode=0)</p> <p>Format: </p> <p>Format:</p> <p>icon_states(Icon, mode=0)</p> <p>Returns: </p> <p>A list of text strings.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of text strings.</p> <p>Args: </p> <p>Icon: the icon being accessed</p> <p>mode: applies to icons larger than one tile when using map_format=TILED_ICON_MAP; see below</p> <p>Args: </p> <p>Args:</p> <p>Icon: the icon being accessed</p> <p>mode: applies to icons larger than one tile when using map_format=TILED_ICON_MAP; see below</p> <p>mode: applies to icons larger than one tile when using map_format=TILED_ICON_MAP; see below</p> <p>Icons may have one or more internal states, which are identified by name. The state \"\" is the default.</p> <p>If you are not using the TILED_ICON_MAP value for world.map_format, you can ignore the mode argument.</p> <p>When graphics bigger than world.icon_size are used as an icon, and the map_format in use is TILED_ICON_MAP, they are internally broken up into tiles, one per icon state. The</p> <p>mode</p> <p>argument was added for big icons that get split into several smaller tiles. Those icons have several smaller states per true icon_state. For example if your 64\u00d764 icon has a state named \"open\", it will contain states \"open\", \"open 0,0\", \"open 1,0\", \"open 0,1\", and \"open 1,1\" which are all used internally. (If the state name is blank, the sub-states are just \"0,0\", etc.) When using the TILED_ICON_MAP format, you need these for displaying the icon over several different atoms.</p> <p>mode</p> <p>mode=0 will only show the sub-states (\"open 0,0\" and so on), all of which can be safely extracted in a single-tile icon via the</p> <p>icon()</p> <p>proc. mode=1 will show the main state names (\"open\"); any time you work with that state name you're working with the full-size icon. mode=2 will show all of the states.</p> <p>icon()</p>"},{"location":"proc/if/","title":"If","text":""},{"location":"proc/if/#if-proc","title":"if proc","text":"<p>See also: </p> <p>goto proc </p> <p>See also: </p> <p>See also:</p> <p>goto proc </p> <p>goto proc</p> <p>Format: </p> <p>if( E ) Statement1</p> <p>else if( E2 ) Statement2</p> <p>else Statement3</p> <p>Format: </p> <p>Format:</p> <p>if( E ) Statement1</p> <p>else if( E2 ) Statement2</p> <p>else Statement3</p> <p>else if( E2 ) Statement2</p> <p>else Statement3</p> <p>else Statement3</p> <p>If the expression E is true (non-zero) then execute Statement1. Otherwise, test E2, etc. Finally, if none of the expressions are true, execute Statement3. The else nodes are all optional.</p> <p>Statement1, Statement2, and Statement3 may be a single statement or a code block with optional braces: {}.</p>"},{"location":"proc/if/#_1","title":"If","text":"<p>Example:</p> <p>if(T==1) world &lt;&lt; \"TRUE\" else world &lt;&lt; \"FALSE\"</p> <p>This will display \"TRUE\" if T has value 1, and \"FALSE\" otherwise.</p>"},{"location":"proc/image/","title":"Image","text":""},{"location":"proc/image/#image-proc","title":"image proc","text":"<p>See also: </p> <p>&lt;&lt; operator </p> <p>del proc </p> <p>icon </p> <p>image objects </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; operator </p> <p>del proc </p> <p>icon </p> <p>image objects </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>&lt;&lt; operator</p> <p>del proc </p> <p>icon </p> <p>image objects </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>del proc</p> <p>icon </p> <p>image objects </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>icon</p> <p>image objects </p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>image objects</p> <p>images var (client) </p> <p>overlays var (atom) </p> <p>images var (client)</p> <p>overlays var (atom) </p> <p>overlays var (atom)</p> <p>Format: </p> <p>image(icon,loc,icon_state,layer,dir)</p> <p>(supports  named arguments   )</p> <p>Format: </p> <p>Format:</p> <p>image(icon,loc,icon_state,layer,dir)</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>(supports  named arguments   )</p> <p>named arguments</p> <p>Returns: </p> <p>An image reference on success; 0 on failure.</p> <p>Returns: </p> <p>Returns:</p> <p>An image reference on success; 0 on failure.</p> <p>Args: </p> <p>icon: An icon, object prototype, object instance, or other image.</p> <p>loc: The location at which to display the image.</p> <p>icon_state: The icon state to use.</p> <p>layer: The drawing layer to use.</p> <p>dir: The direction to orient the image.</p> <p>Args: </p> <p>Args:</p> <p>icon: An icon, object prototype, object instance, or other image.</p> <p>loc: The location at which to display the image.</p> <p>icon_state: The icon state to use.</p> <p>layer: The drawing layer to use.</p> <p>dir: The direction to orient the image.</p> <p>loc: The location at which to display the image.</p> <p>icon_state: The icon state to use.</p> <p>layer: The drawing layer to use.</p> <p>dir: The direction to orient the image.</p> <p>icon_state: The icon state to use.</p> <p>layer: The drawing layer to use.</p> <p>dir: The direction to orient the image.</p> <p>layer: The drawing layer to use.</p> <p>dir: The direction to orient the image.</p> <p>dir: The direction to orient the image.</p> <p>Images are \"virtual\" objects, which have a purely visual effect. Once created, they can be made to appear to selected players. The image() instruction is simply a short-hand for new/image().</p> <p>The image remains attached to the location specified by</p> <p>loc</p> <p>. For example, if</p> <p>loc</p> <p>is a mob, the image will appear above the mob until it is destroyed.</p> <p>loc</p> <p>loc</p> <p>The arguments</p> <p>icon_state</p> <p>,</p> <p>layer</p> <p>, and</p> <p>dir</p> <p>may be used to override the settings associated with the icon or object used to create the image. For example, the default drawing layer for an plain icon is FLY_LAYER (above all other objects), but you could change this to OBJ_LAYER to make it appear under mobs on the map.</p> <p>icon_state</p> <p>layer</p> <p>dir</p>"},{"location":"proc/image/#_1","title":"Image","text":"<p>Example:</p> <p>var/Box Box = image ('highlight.dmi', usr) usr &lt;&lt; Box ... del(Box) //when done, remove image</p> <p>Another common use of images is in making an overlay:</p> <p>overlays += image('pants.dmi',icon_state = \"red\")</p> <p>Since the  <code>loc</code>   argument could never be a text string, the above statement can be further shortened:</p> <p><code>loc</code></p> <p>overlays += image('pants.dmi',\"red\")</p> <p>This is much preferable to achieving the same effect with  <code>icon('pants.dmi',\"red\")</code>   , since that involves the overhead of creating a new icon file, which should only be done when it is really necessary.</p> <p><code>icon('pants.dmi',\"red\")</code></p>"},{"location":"proc/initial/","title":"Initial","text":""},{"location":"proc/initial/#initial-proc","title":"initial proc","text":"<p>See also: </p> <p>:: operator </p> <p>issaved proc </p> <p>vars list var (datum) </p> <p>See also: </p> <p>See also:</p> <p>:: operator </p> <p>issaved proc </p> <p>vars list var (datum) </p> <p>:: operator</p> <p>issaved proc </p> <p>vars list var (datum) </p> <p>issaved proc</p> <p>vars list var (datum) </p> <p>vars list var (datum)</p> <p>Format: </p> <p>initial(Var)</p> <p>Format: </p> <p>Format:</p> <p>initial(Var)</p> <p>Args: </p> <p>Var: A variable to find the initial value of.</p> <p>Args: </p> <p>Args:</p> <p>Var: A variable to find the initial value of.</p> <p>This returns the original compile-time value of a variable. It could be used to reset a variable to its default value or to check if a variable has changed.</p>"},{"location":"proc/initial/#_1","title":"Initial","text":"<p>Example:</p> <p>obj/verb/set_icon(I as null|icon)  if(!I) I = initial(icon)  icon = I</p>"},{"location":"proc/input/","title":"Input","text":""},{"location":"proc/input/#input-proc","title":"input proc","text":"<p>See also: </p> <p>alert proc </p> <p>arguments (verb) </p> <p>See also: </p> <p>See also:</p> <p>alert proc </p> <p>arguments (verb) </p> <p>alert proc</p> <p>arguments (verb) </p> <p>arguments (verb)</p> <p>Format: </p> <p>input(Recipient=usr,Message,Title,Default) as Type in List</p> <p>Format: </p> <p>Format:</p> <p>input(Recipient=usr,Message,Title,Default) as Type in List</p> <p>Returns: </p> <p>User's response.</p> <p>Returns: </p> <p>Returns:</p> <p>User's response.</p> <p>Args: </p> <p>Recipient: The user who will see this input prompt.</p> <p>Message: A message in the prompt, to tell the user what it's asking for.</p> <p>Title: The title of the prompt window.</p> <p>Default: Default value if the user cancels the input.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>Args: </p> <p>Args:</p> <p>Recipient: The user who will see this input prompt.</p> <p>Message: A message in the prompt, to tell the user what it's asking for.</p> <p>Title: The title of the prompt window.</p> <p>Default: Default value if the user cancels the input.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>Message: A message in the prompt, to tell the user what it's asking for.</p> <p>Title: The title of the prompt window.</p> <p>Default: Default value if the user cancels the input.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>Title: The title of the prompt window.</p> <p>Default: Default value if the user cancels the input.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>Default: Default value if the user cancels the input.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>Type: A verb input type, such as</p> <p>text</p> <p>,</p> <p>message</p> <p>,</p> <p>num</p> <p>,</p> <p>anything</p> <p>. If you omit \"as Type\", the type defaults to</p> <p>text</p> <p>.</p> <p>List: An optional list of items to choose from.</p> <p>text</p> <p>message</p> <p>num</p> <p>anything</p> <p>text</p> <p>List: An optional list of items to choose from.</p> <p>Creates a prompt dialog that asks the user for a response. The current proc sleeps until they respond.</p> <p>The only required argument is the message. The type may be any combination of input types allowed for verb arguments, which can be combined with the</p> <p>|</p> <p>operator. The</p> <p>null</p> <p>type will allow the user to cancel, e.g.</p> <p>as null | anything in contents</p> <p>.</p> <p>|</p> <p>null</p> <p>as null | anything in contents</p>"},{"location":"proc/input/#_1","title":"Input","text":"<p>Example:</p> <p>mob/verb/create_character()  usr.name = input(\"Choose a name for your character.\",  \"Your Name\",  usr.name)</p> <p>usr.gender = input(\"Select a gender for your character.\",  \"Your Gender\",  usr.gender) in list(\"male\",\"female\",\"neuter\")</p> <p>If the target of the input prompt is not a player, the result will be the default value. If no default value is specified and null is allowed by the input type, null will be returned. Otherwise, an error will result, crashing the proc that called</p> <p>input()</p> <p>.</p> <p>input()</p> <p>A more common use for</p> <p>input()</p> <p>is to give a player a list of things to choose from. For example, this is a simple shopkeeper NPC, where the shopkeeper's inventory is its contents.</p> <p>input()</p>"},{"location":"proc/input/#_2","title":"Input","text":"<p>Example:</p> <p>mob/shopkeeper/verb/Buy()  var/list/options = list()  var/obj/item  for(item in src)  // show a pretty list of options with prices included  options[\"[item]: $[item.price]\"] = item  var/choice = input(\"Buy something!\", \"Shop\") as null|anything in options  item = options[choice]  if(!item) return // user canceled  if(item.price &gt; usr.gold)  usr &lt;&lt; \"You can't afford that.\"  else  // give the buyer a copy of the item  var/t = item.type  new t(usr)  usr.gold -= item.price  usr &lt;&lt; \"You bought \\a [item] for $[item.price].\"</p> <p>Using</p> <p>as num</p> <p>is another popular input choice, which you might use for haggling, deciding how many of an item to pick up or drop, etc.</p> <p>as num</p> <p>This next part is important! Always validate input from a user to make sure it's correct.</p> <p>You should be sure to sanitize any user input to make sure the value is valid. For instance, if you have a verb that gives gold to another player, you should check that the amount isn't negative and doesn't contain any fractions, and isn't more than they have.</p>"},{"location":"proc/input/#_3","title":"Input","text":"<p>Example:</p> <p>mob/player/verb/Give_Gold()  set src in oview(1)  var/amount = input(\"How much?\", \"Give gold\") as null|num  if(isnull(amount)) return  amount = floor(amount) // round down to a whole number  amount = min(amount, usr.gold) // don't give more than you have  if(amount &lt;= 0) return // ignore negatives and 0  gold += amount  usr.gold -= amount  usr &lt;&lt; \"You gave [src] $[amount].\"  src &lt;&lt; \"[src] gave you $[amount].\"</p> <p>Likewise if you're allowing a user to input text, it too should be sanitized. If they shouldn't enter multi-line text, you should strip out</p> <p>\"\\n\"</p> <p>characters. If they're putting in something like a character name, strip out any HTML via</p> <p>html_encode()</p> <p>, or you can simply reject anything that contains invalid characters and make them do it again.</p> <p>\"\\n\"</p> <p>html_encode()</p>"},{"location":"proc/isarea/","title":"Isarea","text":""},{"location":"proc/isarea/#isarea-proc","title":"isarea proc","text":"<p>See also: </p> <p>isloc proc </p> <p>See also: </p> <p>See also:</p> <p>isloc proc </p> <p>isloc proc</p> <p>Format: </p> <p>isarea(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>isarea(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid areas; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid areas; 0 otherwise</p>"},{"location":"proc/isfile/","title":"Isfile","text":""},{"location":"proc/isfile/#isfile-proc","title":"isfile proc","text":"<p>See also: </p> <p>cache </p> <p>file proc </p> <p>isicon proc </p> <p>See also: </p> <p>See also:</p> <p>cache </p> <p>file proc </p> <p>isicon proc </p> <p>cache</p> <p>file proc </p> <p>isicon proc </p> <p>file proc</p> <p>isicon proc </p> <p>isicon proc</p> <p>Format: </p> <p>isfile(File)</p> <p>Format: </p> <p>Format:</p> <p>isfile(File)</p> <p>Args: </p> <p>File: the value to test</p> <p>Args: </p> <p>Args:</p> <p>File: the value to test</p> <p>This returns a true value when given a file. Both objects returned by file() and files stored in the resource cache qualify.</p>"},{"location":"proc/isicon/","title":"Isicon","text":""},{"location":"proc/isicon/#isicon-proc","title":"isicon proc","text":"<p>See also: </p> <p>cache </p> <p>icon </p> <p>isfile proc </p> <p>See also: </p> <p>See also:</p> <p>cache </p> <p>icon </p> <p>isfile proc </p> <p>cache</p> <p>icon </p> <p>isfile proc </p> <p>icon</p> <p>isfile proc </p> <p>isfile proc</p> <p>Format: </p> <p>isicon(Icon)</p> <p>Format: </p> <p>Format:</p> <p>isicon(Icon)</p> <p>Args: </p> <p>Icon: the value to test</p> <p>Args: </p> <p>Args:</p> <p>Icon: the value to test</p> <p>Returns: </p> <p>1 if the value is a valid icon; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the value is a valid icon; 0 otherwise.</p> <p>This returns a true value when given an icon. Both</p> <p>/icon</p> <p>memory objects and icon files stored in the resource cache qualify.</p> <p>/icon</p>"},{"location":"proc/isinf/","title":"Isinf","text":""},{"location":"proc/isinf/#isinf-proc","title":"isinf proc","text":"<p>See also: </p> <p>isnum proc </p> <p>isnan proc </p> <p>Numbers </p> <p>See also: </p> <p>See also:</p> <p>isnum proc </p> <p>isnan proc </p> <p>Numbers </p> <p>isnum proc</p> <p>isnan proc </p> <p>Numbers </p> <p>isnan proc</p> <p>Numbers </p> <p>Numbers</p> <p>Format: </p> <p>isinf(n)</p> <p>Format: </p> <p>Format:</p> <p>isinf(n)</p> <p>Args: </p> <p>n: A number</p> <p>Args: </p> <p>Args:</p> <p>n: A number</p> <p>Returns: </p> <p>1 if this is an infinite numeric value, either positive or negative; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if this is an infinite numeric value, either positive or negative; 0 otherwise</p>"},{"location":"proc/islist/","title":"Islist","text":""},{"location":"proc/islist/#islist-proc","title":"islist proc","text":"<p>See also: </p> <p>list </p> <p>list proc </p> <p>See also: </p> <p>See also:</p> <p>list </p> <p>list proc </p> <p>list</p> <p>list proc </p> <p>list proc</p> <p>Format: </p> <p>islist(Object)</p> <p>Format: </p> <p>Format:</p> <p>islist(Object)</p> <p>Args: </p> <p>Object: The value to test</p> <p>Args: </p> <p>Args:</p> <p>Object: The value to test</p> <p>Returns: </p> <p>1 if the object is a valid list; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the object is a valid list; 0 otherwise.</p> <p>Tests whether an object is a list. This includes user-defined lists, special lists like</p> <p>contents</p> <p>and</p> <p>overlays</p> <p>, and more.</p> <p>contents</p> <p>overlays</p>"},{"location":"proc/isloc/","title":"Isloc","text":""},{"location":"proc/isloc/#isloc-proc","title":"isloc proc","text":"<p>Format: </p> <p>isloc(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>isloc(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid locs; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid locs; 0 otherwise.</p> <p>Tests validity of a location. If all arguments are mobs, objs, turfs, or areas, this returns 1.</p> <p>For a single argument this is equivalent to:</p> <p>(ismob(Loc) || isobj(Loc) || isturf(Loc) || isarea(Loc))</p> <p>.</p> <p>(ismob(Loc) || isobj(Loc) || isturf(Loc) || isarea(Loc))</p>"},{"location":"proc/ismob/","title":"Ismob","text":""},{"location":"proc/ismob/#ismob-proc","title":"ismob proc","text":"<p>See also: </p> <p>isloc proc </p> <p>ismovable proc </p> <p>See also: </p> <p>See also:</p> <p>isloc proc </p> <p>ismovable proc </p> <p>isloc proc</p> <p>ismovable proc </p> <p>ismovable proc</p> <p>Format: </p> <p>ismob(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>ismob(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid mobs; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid mobs; 0 otherwise</p>"},{"location":"proc/ismovable/","title":"Ismovable","text":""},{"location":"proc/ismovable/#ismovable-proc","title":"ismovable proc","text":"<p>See also: </p> <p>isloc proc </p> <p>isobj proc </p> <p>ismob proc </p> <p>See also: </p> <p>See also:</p> <p>isloc proc </p> <p>isobj proc </p> <p>ismob proc </p> <p>isloc proc</p> <p>isobj proc </p> <p>ismob proc </p> <p>isobj proc</p> <p>ismob proc </p> <p>ismob proc</p> <p>Format: </p> <p>ismovable(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>ismovable(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid objs or mobs; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid objs or mobs; 0 otherwise</p> <p>Movable atoms are either objs or mobs, so this combines the</p> <p>isobj</p> <p>and</p> <p>ismob</p> <p>tests into a single proc.</p> <p>isobj</p> <p>ismob</p>"},{"location":"proc/isnan/","title":"Isnan","text":""},{"location":"proc/isnan/#isnan-proc","title":"isnan proc","text":"<p>See also: </p> <p>isnum proc </p> <p>isinf proc </p> <p>Numbers </p> <p>See also: </p> <p>See also:</p> <p>isnum proc </p> <p>isinf proc </p> <p>Numbers </p> <p>isnum proc</p> <p>isinf proc </p> <p>Numbers </p> <p>isinf proc</p> <p>Numbers </p> <p>Numbers</p> <p>Format: </p> <p>isnan(n)</p> <p>Format: </p> <p>Format:</p> <p>isnan(n)</p> <p>Args: </p> <p>n: A number</p> <p>Args: </p> <p>Args:</p> <p>n: A number</p> <p>Returns: </p> <p>1 if this is a numeric value but is an invalid \"not a number\" (NaN); 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if this is a numeric value but is an invalid \"not a number\" (NaN); 0 otherwise</p> <p>Some math operations return the special number</p> <p>NaN</p> <p>if they're undefined, such as dividing 0 by 0. This tells you if a number is that type.</p> <p>NaN</p> <p>NaN is never greater than, less than, or equal to another number, even itself.</p>"},{"location":"proc/isnull/","title":"Isnull","text":""},{"location":"proc/isnull/#isnull-proc","title":"isnull proc","text":"<p>See also: </p> <p>null </p> <p>See also: </p> <p>See also:</p> <p>null </p> <p>null</p> <p>Format: </p> <p>isnull(Val)</p> <p>Format: </p> <p>Format:</p> <p>isnull(Val)</p> <p>Returns: </p> <p>1 if Val is null; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if Val is null; 0 otherwise</p>"},{"location":"proc/isnum/","title":"Isnum","text":""},{"location":"proc/isnum/#isnum-proc","title":"isnum proc","text":"<p>See also: </p> <p>isinf proc </p> <p>isnan proc </p> <p>Numbers </p> <p>See also: </p> <p>See also:</p> <p>isinf proc </p> <p>isnan proc </p> <p>Numbers </p> <p>isinf proc</p> <p>isnan proc </p> <p>Numbers </p> <p>isnan proc</p> <p>Numbers </p> <p>Numbers</p> <p>Format: </p> <p>isnum(Val)</p> <p>Format: </p> <p>Format:</p> <p>isnum(Val)</p> <p>Returns: </p> <p>1 if Val is a number; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if Val is a number; 0 otherwise</p>"},{"location":"proc/isobj/","title":"Isobj","text":""},{"location":"proc/isobj/#isobj-proc","title":"isobj proc","text":"<p>See also: </p> <p>isloc proc </p> <p>ismovable proc </p> <p>See also: </p> <p>See also:</p> <p>isloc proc </p> <p>ismovable proc </p> <p>isloc proc</p> <p>ismovable proc </p> <p>ismovable proc</p> <p>Format: </p> <p>isobj(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>isobj(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid objs; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid objs; 0 otherwise</p>"},{"location":"proc/ispath/","title":"Ispath","text":""},{"location":"proc/ispath/#ispath-proc","title":"ispath proc","text":"<p>See also: </p> <p>typesof proc </p> <p>See also: </p> <p>See also:</p> <p>typesof proc </p> <p>typesof proc</p> <p>Format: </p> <p>ispath(Val)</p> <p>ispath(Val,Type)</p> <p>Format: </p> <p>Format:</p> <p>ispath(Val)</p> <p>ispath(Val,Type)</p> <p>ispath(Val,Type)</p> <p>Returns: </p> <p>single-argument: 1 if Val is a type path</p> <p>double-argument: 1 if Val is a type path derived from Type; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>single-argument: 1 if Val is a type path</p> <p>double-argument: 1 if Val is a type path derived from Type; 0 otherwise.</p> <p>double-argument: 1 if Val is a type path derived from Type; 0 otherwise.</p> <p>Args: </p> <p>Val: A type path.</p> <p>Type: A type path or instance.</p> <p>Args: </p> <p>Args:</p> <p>Val: A type path.</p> <p>Type: A type path or instance.</p> <p>Type: A type path or instance.</p>"},{"location":"proc/ispath/#_1","title":"Ispath","text":"<p>Example:</p> <p>var/M M = /mob/ugly/duckling if(ispath(M,/mob/ugly)) //true if(ispath(M)) //true if(ispath(new/mob)) //false</p>"},{"location":"proc/ispointer/","title":"Ispointer","text":""},{"location":"proc/ispointer/#ispointer-proc","title":"ispointer proc","text":"<p>See also: </p> <p>* operator (pointers) </p> <p>&amp; operator (pointers) </p> <p>See also: </p> <p>See also:</p> <p>* operator (pointers) </p> <p>&amp; operator (pointers) </p> <p>* operator (pointers)</p> <p>&amp; operator (pointers) </p> <p>&amp; operator (pointers)</p> <p>Format: </p> <p>ispointer(Value)</p> <p>Format: </p> <p>Format:</p> <p>ispointer(Value)</p> <p>Args: </p> <p>Value: The value to test</p> <p>Args: </p> <p>Args:</p> <p>Value: The value to test</p> <p>Returns: </p> <p>1 if the value is a pointer; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the value is a pointer; 0 otherwise.</p> <p>Tests whether an value is a pointer.</p> <p>Note: This does not check if the pointer is still valid, like for instance if the object it belongs to has been deleted, or if it points to a list index that is now out of bounds.</p>"},{"location":"proc/issaved/","title":"Issaved","text":""},{"location":"proc/issaved/#issaved-proc","title":"issaved proc","text":"<p>See also: </p> <p>initial proc </p> <p>savefile </p> <p>tmp vars </p> <p>vars list var (datum) </p> <p>See also: </p> <p>See also:</p> <p>initial proc </p> <p>savefile </p> <p>tmp vars </p> <p>vars list var (datum) </p> <p>initial proc</p> <p>savefile </p> <p>tmp vars </p> <p>vars list var (datum) </p> <p>savefile</p> <p>tmp vars </p> <p>vars list var (datum) </p> <p>tmp vars</p> <p>vars list var (datum) </p> <p>vars list var (datum)</p> <p>Format: </p> <p>issaved(Var)</p> <p>Format: </p> <p>Format:</p> <p>issaved(Var)</p> <p>Args: </p> <p>Var: The variable to test.</p> <p>Args: </p> <p>Args:</p> <p>Var: The variable to test.</p> <p>This returns 1 if the given variable should be automatically saved when writing an object to a savefile and 0 otherwise. Variables which are not global, const, or tmp will return 1.</p>"},{"location":"proc/istext/","title":"Istext","text":""},{"location":"proc/istext/#istext-proc","title":"istext proc","text":"<p>Format: </p> <p>istext(Val)</p> <p>Format: </p> <p>Format:</p> <p>istext(Val)</p> <p>Returns: </p> <p>1 if Val is text; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if Val is text; 0 otherwise</p>"},{"location":"proc/isturf/","title":"Isturf","text":""},{"location":"proc/isturf/#isturf-proc","title":"isturf proc","text":"<p>See also: </p> <p>isloc proc </p> <p>See also: </p> <p>See also:</p> <p>isloc proc </p> <p>isloc proc</p> <p>Format: </p> <p>isturf(Loc1, Loc2 ...)</p> <p>Format: </p> <p>Format:</p> <p>isturf(Loc1, Loc2 ...)</p> <p>Args: </p> <p>Any number of locations to test.</p> <p>Args: </p> <p>Args:</p> <p>Any number of locations to test.</p> <p>Returns: </p> <p>1 if all args are valid turfs; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if all args are valid turfs; 0 otherwise</p>"},{"location":"proc/istype/","title":"Istype","text":""},{"location":"proc/istype/#istype-proc","title":"istype proc","text":"<p>See also: </p> <p>ispath proc </p> <p>locate proc </p> <p>typesof proc </p> <p>See also: </p> <p>See also:</p> <p>ispath proc </p> <p>locate proc </p> <p>typesof proc </p> <p>ispath proc</p> <p>locate proc </p> <p>typesof proc </p> <p>locate proc</p> <p>typesof proc </p> <p>typesof proc</p> <p>Format: </p> <p>istype(Val,Type)</p> <p>istype(Val)</p> <p>Format: </p> <p>Format:</p> <p>istype(Val,Type)</p> <p>istype(Val)</p> <p>istype(Val)</p> <p>Returns: </p> <p>1 if Val is derived from Type; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if Val is derived from Type; 0 otherwise.</p> <p>Args: </p> <p>Val: An object instance.</p> <p>Type: An object prototype or instance. If no type is specified and a  variable was passed in as the first argument, it will default to the  declared type of the variable.</p> <p>Args: </p> <p>Args:</p> <p>Val: An object instance.</p> <p>Type: An object prototype or instance. If no type is specified and a  variable was passed in as the first argument, it will default to the  declared type of the variable.</p> <p>Type: An object prototype or instance. If no type is specified and a  variable was passed in as the first argument, it will default to the  declared type of the variable.</p> <p>If you don't have an object instance to test, but just want to see if one prototype derives from another one, use  ispath()   instead.</p> <p>ispath()</p>"},{"location":"proc/istype/#_1","title":"Istype","text":"<p>Example:</p> <p>var/M M = new/mob/ugly/duckling() if(istype(M,/mob/ugly)) //this will be true  usr &lt;&lt; \"[M] is ugly!\"</p> <p>Using implicit types, that same example can be rewritten as follows:</p> <p>var/mob/ugly/M M = new/mob/ugly/duckling() if(istype(M)) //this will be true  usr &lt;&lt; \"[M] is ugly!\"</p>"},{"location":"proc/jointext/","title":"Jointext","text":""},{"location":"proc/jointext/#jointext-proc","title":"jointext proc","text":"<p>See also: </p> <p>splittext proc </p> <p>Join proc (list) </p> <p>See also: </p> <p>See also:</p> <p>splittext proc </p> <p>Join proc (list) </p> <p>splittext proc</p> <p>Join proc (list) </p> <p>Join proc (list)</p> <p>Format: </p> <p>jointext(List,Glue,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>jointext(List,Glue,Start=1,End=0)</p> <p>Returns: </p> <p>A text string made up of the items in List, joined together by Glue.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string made up of the items in List, joined together by Glue.</p> <p>Args: </p> <p>List: The list to be joined.</p> <p>Glue: The text that will go between each item.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Args: </p> <p>Args:</p> <p>List: The list to be joined.</p> <p>Glue: The text that will go between each item.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Glue: The text that will go between each item.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Start: The list item on which to begin.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>End: The list item immediately following the last item to be joined.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Any items in List that are not already text will be converted to text. The Glue string only goes between two items, so a single-item list is the same as converting that one item to text, and an empty list becomes an empty string.</p>"},{"location":"proc/jointext/#_1","title":"Jointext","text":"<p>Example:</p> <p>var/list/items = list(\"apples\", \"oranges\", \"bananas\") usr &lt;&lt; jointext(items, \", \")</p> <p>If the start or end position is negative, the position is counted backwards from the end of the list.</p> <p>Calling List.Join(Glue,Start,End) is the same thing, as long as List is a valid list.</p>"},{"location":"proc/json_decode/","title":"Json decode","text":""},{"location":"proc/json_decode/#json_decode-proc","title":"json_decode proc","text":"<p>See also: </p> <p>json_encode proc </p> <p>See also: </p> <p>See also:</p> <p>json_encode proc </p> <p>json_encode proc</p> <p>Format: </p> <p>json_decode(JSON)</p> <p>json_decode(JSON, flags)</p> <p>Format: </p> <p>Format:</p> <p>json_decode(JSON)</p> <p>json_decode(JSON, flags)</p> <p>json_decode(JSON, flags)</p> <p>Returns: </p> <p>A value interpreted from a JSON-formatted text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A value interpreted from a JSON-formatted text string.</p> <p>Args: </p> <p>JSON: The JSON-formatted text to decode.</p> <p>flags: A set of flags that tell the decoder how to act.</p> <p>Args: </p> <p>Args:</p> <p>JSON: The JSON-formatted text to decode.</p> <p>flags: A set of flags that tell the decoder how to act.</p> <p>flags: A set of flags that tell the decoder how to act.</p> <p>Arrays like</p> <p>[1,2,3]</p> <p>will be converted to regular lists like</p> <p>list(1,2,3)</p> <p>.</p> <p>[1,2,3]</p> <p>list(1,2,3)</p> <p>Object literals like</p> <p>{\"a\":1}</p> <p>will be converted to associative lists such as</p> <p>list(\"a\"=1)</p> <p>. Each item in the list is also decoded. Except in strict mode, non-string values are allowed as the \"keys\" in an associaitve list, even though that's not valid JSON, and strings used as keys can be left unquoted. BYOND doesn't care, as long as it can understand the formatted text it's given. The only exception is that a number isn't allowed to be an associative list key, and will be converted to a string instead, so</p> <p>{1:2}</p> <p>becomes</p> <p>list(\"1\"=2)</p> <p>.</p> <p>{\"a\":1}</p> <p>list(\"a\"=1)</p> <p>{1:2}</p> <p>list(\"1\"=2)</p> <p>Special numbers</p> <p>NaN</p> <p>and</p> <p>Infinity</p> <p>are recognized correctly (these are case-sensitive). All other numbers are parsed and stored in the regular BYOND format (32-bit floating point).</p> <p>NaN</p> <p>Infinity</p> <p>Since BYOND doesn't have dedicated boolean values,</p> <p>true</p> <p>and</p> <p>false</p> <p>are interpreted as 1 and 0, respectively.</p> <p>true</p> <p>false</p> <p>The</p> <p>JSON_STRICT</p> <p>flag uses stricter JSON parsing rules and will not allow some things. In strict mode:</p> <p>JSON_STRICT</p> <ul> <li>All strings must be double-quoted.</li> <li>Special numbers</li> </ul> <p>NaN</p> <p>and</p> <p>Infinity</p> <p>are not allowed, but  the</p> <p>{__number__:\"NaN\"}</p> <p>format used by</p> <p>json_encode()</p> <p>is  recognized as a number. * Keys in an associative list must always be strings, and must be  double-quoted.</p> <ul> <li> <p>All strings must be double-quoted.</p> </li> <li> <p>Special numbers</p> </li> </ul> <p>NaN</p> <p>and</p> <p>Infinity</p> <p>are not allowed, but  the</p> <p>{__number__:\"NaN\"}</p> <p>format used by</p> <p>json_encode()</p> <p>is  recognized as a number.</p> <p>NaN</p> <p>Infinity</p> <p>{__number__:\"NaN\"}</p> <p>json_encode()</p> <ul> <li>Keys in an associative list must always be strings, and must be  double-quoted.</li> </ul> <p>The</p> <p>JSON_ALLOW_COMMENTS</p> <p>flag allows you to include</p> <p>//</p> <p>single-line comments and</p> <p>/* ... */</p> <p>long-form comments in the text to be decoded. This can be mixed with the strict flag. This flag is now used by default.</p> <p>JSON_ALLOW_COMMENTS</p> <p>//</p> <p>/* ... */</p>"},{"location":"proc/json_encode/","title":"Json encode","text":""},{"location":"proc/json_encode/#json_encode-proc","title":"json_encode proc","text":"<p>See also: </p> <p>json_decode proc </p> <p>See also: </p> <p>See also:</p> <p>json_decode proc </p> <p>json_decode proc</p> <p>Format: </p> <p>json_encode(Value)</p> <p>json_encode(Value, flags)</p> <p>Format: </p> <p>Format:</p> <p>json_encode(Value)</p> <p>json_encode(Value, flags)</p> <p>json_encode(Value, flags)</p> <p>Returns: </p> <p>A JSON-formatted text string representing Value.</p> <p>Returns: </p> <p>Returns:</p> <p>A JSON-formatted text string representing Value.</p> <p>Args: </p> <p>Value: The value to encode.</p> <p>flags: A set of flags that tell the encoder how to act.</p> <p>Args: </p> <p>Args:</p> <p>Value: The value to encode.</p> <p>flags: A set of flags that tell the encoder how to act.</p> <p>flags: A set of flags that tell the encoder how to act.</p> <p>If Value is a simple list or a matrix, the result will be formatted as a JSON array, and each item in the list is encoded.</p> <p>If Value is an associative list, the result will be formatted as a JSON object literal, and each item and associated value is encoded. (The keys in the object literal don't have to be strings. Even though that isn't valid JSON, BYOND doesn't care. Be aware however that strict JSON parsers  will   care.)</p> <p>will</p> <p>Datums are  not   serialized, but are converted to the equivalent of</p> <p>\"[Value]\"</p> <p>instead.</p> <p>not</p> <p>\"[Value]\"</p> <p>The special numbers NaN and infinity will be encoded as object literals in a form like</p> <p>{\"__number__\":\"NaN\"}</p> <p>.</p> <p>{\"__number__\":\"NaN\"}</p>"},{"location":"proc/json_encode/#_1","title":"Json encode","text":"<p>Example:</p> <p>var/list/info = list(\"name\"=\"fridge\", \"power\"=12) // send {\"name\":\"fridge\",\"power\":12} to a JavaScript function usr &lt;&lt; output(url_encode(json_encode(info)), \"mybrowser:myJSfunction\")</p> <p>BYOND formatting such as \\red is removed from encoded strings.</p> <p>Situations where a list has a reference to itself will cause the nested version to print a null value instead.</p> <p>The</p> <p>JSON_PRETTY_PRINT</p> <p>flag introduces spacing into the output for improved readibility. Spaces will be added after colons and commas. Non-empty arrays and object literals will have a line break and tabs before each item, and a line break with one fewer tab before the closing bracket or brace. (The special formatting for numbers like Infinity, or the list form for matrices, will not be given tabs and line breaks.)</p> <p>JSON_PRETTY_PRINT</p>"},{"location":"proc/length/","title":"Length","text":""},{"location":"proc/length/#length-proc","title":"length proc","text":"<p>Format: </p> <p>length(E)</p> <p>Format: </p> <p>Format:</p> <p>length(E)</p> <p>Returns: </p> <p>The length of the data associated with E.</p> <p>Returns: </p> <p>Returns:</p> <p>The length of the data associated with E.</p> <p>Args: </p> <p>E: a text, list, or file</p> <p>Args: </p> <p>Args:</p> <p>E: a text, list, or file</p>"},{"location":"proc/length/#_1","title":"Length","text":"<p>Example:</p> <p>world &lt;&lt; length(\"Hi\")</p> <p>This outputs, \"2\", the length of the string \"Hi\".</p>"},{"location":"proc/length/#_2","title":"Length","text":"<p>Example:</p> <p>world &lt;&lt; length(list(1,2,3))</p> <p>This outputs, \"3\", the length of the list.</p>"},{"location":"proc/length/#_3","title":"Length","text":"<p>Example:</p> <p>world &lt;&lt; length(file(\"test.txt\"))</p> <p>This outputs the length of the file.</p> <p>Note: In strings containing non-ASCII characters, this is the length in bytes, not characters; a character may span multiple bytes. Use</p> <p>length_char()</p> <p>to work with character counts instead of bytes. See the  Unicode   section for more information.</p> <p>length_char()</p> <p>Unicode</p>"},{"location":"proc/lentext/","title":"Lentext","text":""},{"location":"proc/lentext/#lentext-proc","title":"lentext proc","text":"<p>See also: </p> <p>length proc </p> <p>See also: </p> <p>See also:</p> <p>length proc </p> <p>length proc</p> <p>Format: </p> <p>lentext(T)</p> <p>Format: </p> <p>Format:</p> <p>lentext(T)</p> <p>Returns: </p> <p>The length of text T.</p> <p>Returns: </p> <p>Returns:</p> <p>The length of text T.</p> <p>Args: </p> <p>T: A text string.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>Deprecated. Use  length()   instead.</p> <p>length()</p>"},{"location":"proc/link/","title":"Link","text":""},{"location":"proc/link/#link-proc","title":"link proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>Topic proc (client) </p> <p>file proc </p> <p>run proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>Topic proc (client) </p> <p>file proc </p> <p>run proc </p> <p>&lt;&lt; output operator</p> <p>Topic proc (client) </p> <p>file proc </p> <p>run proc </p> <p>Topic proc (client)</p> <p>file proc </p> <p>run proc </p> <p>file proc</p> <p>run proc </p> <p>run proc</p> <p>Format: </p> <p>O &lt;&lt; link(url)</p> <p>Format: </p> <p>Format:</p> <p>O &lt;&lt; link(url)</p> <p>This causes the recipient (O) to view the specified url. The url could be a web or BYOND address. In the latter case, the player will disconnect from the current world and connect to the specified one.</p> <p>The format of a BYOND url is as follows:</p> <p>byond://address:port?TopicData</p> <p>To access a registered world, address:port may be replaced by the registered name in the hub. The optional topic data is processed by the world once the player has connected. If only a topic is specified, the current world processes it.</p>"},{"location":"proc/link/#_1","title":"Link","text":"<p>Example:</p> <p>usr &lt;&lt; link(\"byond://byond.com:6000\") //BYOND address usr &lt;&lt; link(\"http://www.byond.com\") //web address usr &lt;&lt; link(\"?myTopic\") //topic</p>"},{"location":"proc/list/","title":"List","text":""},{"location":"proc/list/#list-proc","title":"list proc","text":"<p>See also: </p> <p>arglist proc </p> <p>list </p> <p>list associations </p> <p>See also: </p> <p>See also:</p> <p>arglist proc </p> <p>list </p> <p>list associations </p> <p>arglist proc</p> <p>list </p> <p>list associations </p> <p>list</p> <p>list associations </p> <p>list associations</p> <p>Format: </p> <p>list(A,B,C,...)</p> <p>or</p> <p>list(A=a,B=b,C=c,...)</p> <p>Format: </p> <p>Format:</p> <p>list(A,B,C,...)</p> <p>or</p> <p>list(A=a,B=b,C=c,...)</p> <p>or</p> <p>list(A=a,B=b,C=c,...)</p> <p>list(A=a,B=b,C=c,...)</p> <p>Returns: </p> <p>A new list with contents A, B, C, and (optional) associated values a, b, c.</p> <p>Returns: </p> <p>Returns:</p> <p>A new list with contents A, B, C, and (optional) associated values a, b, c.</p> <p>Args: </p> <p>Arbitrary number of elements to be inserted into the list.</p> <p>Args: </p> <p>Args:</p> <p>Arbitrary number of elements to be inserted into the list.</p> <p>Assign elements to a list.</p>"},{"location":"proc/list/#_1","title":"List","text":"<p>Example:</p> <p>var/L[] L = list(1,2,3)</p> <p>This creates a new list 'L' that initially contains elements 1, 2, and 3. The length of L is 3.</p> <p>The  <code>list()</code>   instruction may also be used to create associative lists.</p> <p><code>list()</code></p>"},{"location":"proc/list/#_2","title":"List","text":"<p>Example:</p> <p>var/list/lst = list(\"player\" = \"James Byond\", \"score\" = 2000)</p> <p>That creates a list with contents (\"player, \"score\") and associated values (\"James Byond\", 2000) respectively.</p> <p>The index values should be constants, and that usually means text constants. When these index values happen to be text strings that satisfy all the requirements for variable names, this may also be written in a convenient short-hand without the double quotes:</p> <p>var/list/lst = list(player = \"James Byond\", score = 2000)</p> <p>In other words, this is exactly the same syntax as for  named arguments   .</p> <p>named arguments</p>"},{"location":"proc/list2params/","title":"List2params","text":""},{"location":"proc/list2params/#list2params-proc","title":"list2params proc","text":"<p>See also: </p> <p>Topic proc (client) </p> <p>list associations </p> <p>params var (world) </p> <p>params2list proc </p> <p>text2num proc </p> <p>See also: </p> <p>See also:</p> <p>Topic proc (client) </p> <p>list associations </p> <p>params var (world) </p> <p>params2list proc </p> <p>text2num proc </p> <p>Topic proc (client)</p> <p>list associations </p> <p>params var (world) </p> <p>params2list proc </p> <p>text2num proc </p> <p>list associations</p> <p>params var (world) </p> <p>params2list proc </p> <p>text2num proc </p> <p>params var (world)</p> <p>params2list proc </p> <p>text2num proc </p> <p>params2list proc</p> <p>text2num proc </p> <p>text2num proc</p> <p>Format: </p> <p>list2params(List)</p> <p>Format: </p> <p>Format:</p> <p>list2params(List)</p> <p>Args: </p> <p>List: List to encode as a text string.</p> <p>Args: </p> <p>Args:</p> <p>List: List to encode as a text string.</p> <p>This instruction converts a list of parameter names and associated values into a single text string suitable for use in a URL or similar situation. The format of the resulting text string is:</p> <p>\"name1=value1&amp;name2=value2&amp;...\"</p> <p>Special characters such as '=' and '&amp;' inside the parameter names or values are written in the form:  <code>%xx</code>   where  <code>xx</code>   are two hexadecimal digits representing the ASCII value of the character. For  Unicode   characters, their UTF-8 encoding will be processed this way, which may make up multiple  <code>%xx</code>   sequences. In addition, spaces are converted to</p> <p>+</p> <p>.</p> <p><code>%xx</code> <code>xx</code> Unicode <code>%xx</code></p> <p>+</p> <p>This parameter format is the same one used by most HTML forms and is known by the MIME type</p> <p>application/x-www-form-urlencoded</p> <p>. It is often used in DM to pack information into topic links.</p> <p>application/x-www-form-urlencoded</p> <p>The original list has items</p> <p>\"name1\"</p> <p>,</p> <p>\"name2\"</p> <p>, and so on. These in turn are associated with the corresponding values</p> <p>\"value1\"</p> <p>,</p> <p>\"value2\"</p> <p>, and so on.</p> <p>\"name1\"</p> <p>\"name2\"</p> <p>\"value1\"</p> <p>\"value2\"</p>"},{"location":"proc/list2params/#_1","title":"List2params","text":"<p>Example:</p> <p>var/plist[0]</p> <p>plist[\"offense\"] = \"jwalk\" plist[\"time\"] = \"10:00\"</p> <p>usr &lt;&lt; list2params(plist)</p> <p>The above example creates a simple parameter list which associates the item \"offense\" with the value \"jwalk\" and the item \"time\" with the value \"10:00\". This will produce the text string \"offense=jwalk&amp;time=10:00\".</p> <p>Object values in the list (like say a mob) get turned into references in the parameter text, just as though you had embedded them with \"\\ref[Object]\". When read back in with params2list(), you could convert these values back into real references by using locate().</p>"},{"location":"proc/load_resource/","title":"Load resource","text":""},{"location":"proc/load_resource/#load_resource-proc","title":"load_resource proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>&lt;&lt; output operator</p> <p>Format: </p> <p>Player &lt;&lt; load_resource(File)</p> <p>Player &lt;&lt; load_resource(File, KeepTime)</p> <p>Player &lt;&lt; load_resource(File1, File2..., KeepTime1, File3, File4..., KeepTime2...)</p> <p>Format: </p> <p>Format:</p> <p>Player &lt;&lt; load_resource(File)</p> <p>Player &lt;&lt; load_resource(File, KeepTime)</p> <p>Player &lt;&lt; load_resource(File1, File2..., KeepTime1, File3, File4..., KeepTime2...)</p> <p>Player &lt;&lt; load_resource(File, KeepTime)</p> <p>Player &lt;&lt; load_resource(File1, File2..., KeepTime1, File3, File4..., KeepTime2...)</p> <p>Player &lt;&lt; load_resource(File1, File2..., KeepTime1, File3, File4..., KeepTime2...)</p> <p>Args: </p> <p>Player: A mob or client, a list of them, or world</p> <p>File: A resource file (image or sound)</p> <p>KeepTime: Minimum time (in seconds) to keep the file loaded; 0=default, -1=forever</p> <p>Args: </p> <p>Args:</p> <p>Player: A mob or client, a list of them, or world</p> <p>File: A resource file (image or sound)</p> <p>KeepTime: Minimum time (in seconds) to keep the file loaded; 0=default, -1=forever</p> <p>File: A resource file (image or sound)</p> <p>KeepTime: Minimum time (in seconds) to keep the file loaded; 0=default, -1=forever</p> <p>KeepTime: Minimum time (in seconds) to keep the file loaded; 0=default, -1=forever</p> <p>Tells the player's client (or multiple players) to load the specified resources now, and how long to keep them. If you do not specify a keep time, 0 is used which will use the default time.</p> <p>This may be useful for loading sounds into memory before they play, or to load an icon as soon as possible even if it hasn't been displayed yet. This can avoid delays later on when the resources are needed.</p> <p>Dream Seeker keeps most assets loaded for at least 5 minutes (300 seconds) after their last use. However if you think a more appropriate time is closer to half an hour, you can set a keep time of 1800 seconds. Or if you want them to stay loaded indefinitely, set a keep time of -1.</p>"},{"location":"proc/load_resource/#_1","title":"Load resource","text":"<p>Example:</p> <p>mob/Login()  ..()  // load up these songs now and keep them loaded indefinitely  src &lt;&lt; load_resource('music1.ogg', 'music2.ogg', 'music3.ogg', -1)</p> <p>In cases of extreme memory duress, Dream Seeker's garbage collector will get more aggressive and can still override your choices if need be.</p>"},{"location":"proc/locate/","title":"Locate","text":""},{"location":"proc/locate/#locate-proc","title":"locate proc","text":"<p>See also: </p> <p>istype proc </p> <p>tag var (datum) </p> <p>See also: </p> <p>See also:</p> <p>istype proc </p> <p>tag var (datum) </p> <p>istype proc</p> <p>tag var (datum) </p> <p>tag var (datum)</p> <p>Format: </p> <p>locate(Type) in Container</p> <p>locate(X,Y,Z)</p> <p>locate(Tag)</p> <p>locate(TextRef)</p> <p>Format: </p> <p>Format:</p> <p>locate(Type) in Container</p> <p>locate(X,Y,Z)</p> <p>locate(Tag)</p> <p>locate(TextRef)</p> <p>locate(X,Y,Z)</p> <p>locate(Tag)</p> <p>locate(TextRef)</p> <p>locate(Tag)</p> <p>locate(TextRef)</p> <p>locate(TextRef)</p> <p>Returns: </p> <p>An object of the specified type or the turf at the given coordinates.  If a text string is given in place of an object type, the object with  the same tag is found. If a container is given, only objects  directly within that object are searched.</p> <p>Returns: </p> <p>Returns:</p> <p>An object of the specified type or the turf at the given coordinates.  If a text string is given in place of an object type, the object with  the same tag is found. If a container is given, only objects  directly within that object are searched.</p> <p>Args: </p> <p>Type: An object prototype or tag. If locate() is being used in an assignment to a variable with a declared type, this argument is optional and will default to the type of the variable being assigned.</p> <p>Container: An optional container object. (The default is  <code>world</code>   .)</p> <p>X,Y,Z: A set of numerical coordinates.</p> <p>Tag: The value of an object's tag variable (must be unique).</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p>Args: </p> <p>Args:</p> <p>Type: An object prototype or tag. If locate() is being used in an assignment to a variable with a declared type, this argument is optional and will default to the type of the variable being assigned.</p> <p>Container: An optional container object. (The default is  <code>world</code>   .)</p> <p>X,Y,Z: A set of numerical coordinates.</p> <p>Tag: The value of an object's tag variable (must be unique).</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p>Container: An optional container object. (The default is  <code>world</code>   .)</p> <p>X,Y,Z: A set of numerical coordinates.</p> <p>Tag: The value of an object's tag variable (must be unique).</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p><code>world</code></p> <p>X,Y,Z: A set of numerical coordinates.</p> <p>Tag: The value of an object's tag variable (must be unique).</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p>Tag: The value of an object's tag variable (must be unique).</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p>TextRef: An embedded object reference created by the \\ref text macro.</p> <p>Types are matched in the same manner as istype(). In other words, locate(/obj) could return an instance of something derived from /obj, such as /obj/armor.</p> <p>If there is more than one instance of the specified type, the first one found will be chosen.</p>"},{"location":"proc/locate/#_1","title":"Locate","text":"<p>Example:</p> <p>var/mob/shopkeeper/M = locate() if(M)  usr &lt;&lt; \"Found the shopkeeper.\" else  usr &lt;&lt; \"Could not find the shopkeeper.\"</p> <p>This looks for a mob of a type /mob/shopkeeper in the world (world.contents).</p>"},{"location":"proc/locate/#_2","title":"Locate","text":"<p>Example:</p> <p>usr.Move(locate(/turf/Home))</p> <p>This \"teleports\" the usr to a turf of the type /turf/Home.</p>"},{"location":"proc/locate/#_3","title":"Locate","text":"<p>Example:</p> <p>usr.Move(locate(1,2,3))</p> <p>This moves the usr to the turf at coordinates (x,y,z) = (1,2,3).</p>"},{"location":"proc/log/","title":"Log","text":""},{"location":"proc/log/#log-proc","title":"log proc","text":"<p>See also: </p> <p>** operator </p> <p>See also: </p> <p>See also:</p> <p>** operator </p> <p>** operator</p> <p>Format: </p> <p>log(X,Y)</p> <p>log(Y)</p> <p>Format: </p> <p>Format:</p> <p>log(X,Y)</p> <p>log(Y)</p> <p>log(Y)</p> <p>Returns: </p> <p>The logarithm (base X) of Y. If X is not specified, a natural logarithm is computed (base 2.718...).</p> <p>Returns: </p> <p>Returns:</p> <p>The logarithm (base X) of Y. If X is not specified, a natural logarithm is computed (base 2.718...).</p> <p>The logarithm is the power to which you have to raise X in order to get Y. In other words, the following is true (ignoring round-off error):</p> <p>X ** log(X,Y) == Y</p> <p>One nice property of this function is that it gradually increases, with a slope that continuously tapers off. In other words, it can be useful to represent diminishing returns from some input, such as money, experience points, and so forth.</p>"},{"location":"proc/lowertext/","title":"Lowertext","text":""},{"location":"proc/lowertext/#lowertext-proc","title":"lowertext proc","text":"<p>See also: </p> <p>uppertext proc </p> <p>See also: </p> <p>See also:</p> <p>uppertext proc </p> <p>uppertext proc</p> <p>Format: </p> <p>lowertext(T)</p> <p>Format: </p> <p>Format:</p> <p>lowertext(T)</p> <p>Returns: </p> <p>A lowercase text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A lowercase text string.</p> <p>Args: </p> <p>T: A text string.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>Make all of the characters of T lowercase.</p>"},{"location":"proc/lowertext/#_1","title":"Lowertext","text":"<p>Example:</p> <p>L = lowertext(\"HI THERE\") // = \"hi there\"</p>"},{"location":"proc/matrix/","title":"Matrix","text":""},{"location":"proc/matrix/#matrix-proc","title":"matrix proc","text":"<p>See also: </p> <p>matrix </p> <p>transform var (atom) </p> <p>See also: </p> <p>See also:</p> <p>matrix </p> <p>transform var (atom) </p> <p>matrix</p> <p>transform var (atom) </p> <p>transform var (atom)</p> <p>Format: </p> <p>matrix()</p> <p>matrix(Matrix)</p> <p>matrix(a, b, c, d, e, f)</p> <p>Format: </p> <p>Format:</p> <p>matrix()</p> <p>matrix(Matrix)</p> <p>matrix(a, b, c, d, e, f)</p> <p>matrix(Matrix)</p> <p>matrix(a, b, c, d, e, f)</p> <p>matrix(a, b, c, d, e, f)</p> <p>Returns: </p> <p>A new matrix.</p> <p>Returns: </p> <p>Returns:</p> <p>A new matrix.</p> <p>Args: </p> <p>Matrix: a matrix to copy</p> <p>a - f: The individual matrix components</p> <p>Args: </p> <p>Args:</p> <p>Matrix: a matrix to copy</p> <p>a - f: The individual matrix components</p> <p>a - f: The individual matrix components</p> <p>If no arguments are provided, a new default (identity) matrix is created.</p>"},{"location":"proc/max/","title":"Max","text":""},{"location":"proc/max/#max-proc","title":"max proc","text":"<p>See also: </p> <p>min proc </p> <p>clamp proc </p> <p>See also: </p> <p>See also:</p> <p>min proc </p> <p>clamp proc </p> <p>min proc</p> <p>clamp proc </p> <p>clamp proc</p> <p>Format: </p> <p>max(A,B,C,...)</p> <p>Format: </p> <p>Format:</p> <p>max(A,B,C,...)</p> <p>Returns: </p> <p>the maximum of the arguments.</p> <p>Returns: </p> <p>Returns:</p> <p>the maximum of the arguments.</p>"},{"location":"proc/max/#_1","title":"Max","text":"<p>Example:</p> <p>usr &lt;&lt; max(1,2,3)</p> <p>This example displays 3.</p> <p>If a single argument is specified, this is expected to be a list and the maximum item from the list is returned. Items to be compared may be numbers, text strings, or null, but numbers and text strings may not be mixed.</p>"},{"location":"proc/md5/","title":"Md5","text":""},{"location":"proc/md5/#md5-proc","title":"md5 proc","text":"<p>See also: </p> <p>sha1 proc </p> <p>file proc </p> <p>See also: </p> <p>See also:</p> <p>sha1 proc </p> <p>file proc </p> <p>sha1 proc</p> <p>file proc </p> <p>file proc</p> <p>Format: </p> <p>md5(T)</p> <p>md5(F)</p> <p>Format: </p> <p>Format:</p> <p>md5(T)</p> <p>md5(F)</p> <p>md5(F)</p> <p>Returns: </p> <p>text or null.</p> <p>Returns: </p> <p>Returns:</p> <p>text or null.</p> <p>Args: </p> <p>T: A text string.</p> <p>F: A file.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>F: A file.</p> <p>F: A file.</p> <p>This proc implements MD5 hashing. A hash function is a one-way process that compacts information to a short value: a hash. The same value will always have the same hash. Among other uses, most computers use hashing to store passwords. By storing just the hash, the password file contains very little sensitive information, but the password can still be verified by confirming that  <code>md5(password)==hash</code>   . MD5 is a widely-used hash function.</p> <p><code>md5(password)==hash</code></p>"},{"location":"proc/md5/#_1","title":"Md5","text":"<p>Example:</p> <p>mob/var/hash</p> <p>mob/Read(savefile/S)  ..()  // hash was saved in the file along with other values  if(md5(\"[level]/[exp]/[exp_needed]\") != hash)  src &lt;&lt; \"Cheater!\"  del(src)</p> <p>In the example, a few vars belonging to a mob were saved along with a hash of those values. When the mob is loaded again, the game compares the hash to the values to make sure it's still accurate. If the values or hash had been changed by a sneaky player, they wouldn't match. (But a sneaky player could still calculate  <code>hash</code>   themselves if they knew the exact text used to make it, so this should be kept secret.)</p> <p><code>hash</code></p> <p>If the argument is a file,</p> <p>md5()</p> <p>will read the file and return the MD5 hash of the file's entire contents. If the file doesn't exist, it returns null. The file may be a cache file or an external file.</p> <p>md5()</p>"},{"location":"proc/md5/#_2","title":"Md5","text":"<p>Examples:</p> <p>var/hash = \"(insert hash value here)\" // Compute this ahead of time</p> <p>// Check that the cached default icon is still the same if (md5('default.dmi') != hash)  world &lt;&lt; \"The default icon has been modified!\"</p> <p>// Or check that the entire game resource file is pristine if (md5(file(\"mygame.rsc\")) != hash)  world &lt;&lt; \"The game resources have been modified!\"</p> <p>Note that you must pass the result of  file()   in order to compute the hash of an external file's contents at runtime. Otherwise</p> <p>md5()</p> <p>will treat the filename as text and return the hash of the name only.</p> <p>file()</p> <p>md5()</p> <p>If</p> <p>T</p> <p>is anything but a text string or file, the proc returns null.</p> <p>T</p>"},{"location":"proc/min/","title":"Min","text":""},{"location":"proc/min/#min-proc","title":"min proc","text":"<p>See also: </p> <p>max proc </p> <p>clamp proc </p> <p>See also: </p> <p>See also:</p> <p>max proc </p> <p>clamp proc </p> <p>max proc</p> <p>clamp proc </p> <p>clamp proc</p> <p>Format: </p> <p>min(A,B,C,...)</p> <p>Format: </p> <p>Format:</p> <p>min(A,B,C,...)</p> <p>Returns: </p> <p>the minimum of the arguments.</p> <p>Returns: </p> <p>Returns:</p> <p>the minimum of the arguments.</p>"},{"location":"proc/min/#_1","title":"Min","text":"<p>Example:</p> <p>usr &lt;&lt; min(1,2,3)</p> <p>This example displays 1.</p> <p>If a single argument is specified, this is expected to be a list and the minimum item from the list is returned. Items to be compared may be numbers, text strings, or null, but numbers and text strings may not be mixed.</p>"},{"location":"proc/missile/","title":"Missile","text":""},{"location":"proc/missile/#missile-proc","title":"missile proc","text":"<p>Format: </p> <p>missile(Type, Start, End)</p> <p>Format: </p> <p>Format:</p> <p>missile(Type, Start, End)</p> <p>Args: </p> <p>Type: An object prototype or icon file.</p> <p>Start: The starting location.</p> <p>End: The ending location.</p> <p>Args: </p> <p>Args:</p> <p>Type: An object prototype or icon file.</p> <p>Start: The starting location.</p> <p>End: The ending location.</p> <p>Start: The starting location.</p> <p>End: The ending location.</p> <p>End: The ending location.</p> <p>Send a missile of the given Type between two locations. The effect is purely visual. When Type is an object, its icon is used for the missile.</p>"},{"location":"proc/missile/#_1","title":"Missile","text":"<p>Example:</p> <p>missile(/obj/fireball, usr, loc)</p>"},{"location":"proc/nameof/","title":"Nameof","text":""},{"location":"proc/nameof/#nameof-proc","title":"nameof proc","text":"<p>See also: </p> <p>:: operator </p> <p>See also: </p> <p>See also:</p> <p>:: operator </p> <p>:: operator</p> <p>Format: </p> <p>nameof(Var)</p> <p>nameof(ProcRef)</p> <p>nameof(Path)</p> <p>Format: </p> <p>Format:</p> <p>nameof(Var)</p> <p>nameof(ProcRef)</p> <p>nameof(Path)</p> <p>nameof(ProcRef)</p> <p>nameof(Path)</p> <p>nameof(Path)</p> <p>Args: </p> <p>Var: A variable, e.g. src.density or foo::bar.</p> <p>ProcRef: A proc reference, e.g. /mob::Enter().</p> <p>Path: A type path, e.g. /obj/item/barrel.</p> <p>Args: </p> <p>Args:</p> <p>Var: A variable, e.g. src.density or foo::bar.</p> <p>ProcRef: A proc reference, e.g. /mob::Enter().</p> <p>Path: A type path, e.g. /obj/item/barrel.</p> <p>ProcRef: A proc reference, e.g. /mob::Enter().</p> <p>Path: A type path, e.g. /obj/item/barrel.</p> <p>Path: A type path, e.g. /obj/item/barrel.</p> <p>This returns the name of a var or proc, or the last part of a type path. This proc only exists at compile-time.</p> <p>The main purpose of this proc is to turn a proc reference into a name, which is useful in some esoteric situations.</p>"},{"location":"proc/nameof/#_1","title":"Nameof","text":"<p>Example:</p> <p>var/list/event_queue</p> <p>proc/CallLater(object, procref, a, b, c)  var/list/forlater = list(object, nameof(procref), a, b, c)  event_queue ||= list()  event_queue[++event_queue.len] = forlater</p> <p>world/Tick()  while(length(event_queue))  var/list/forlater = event_queue[1]  event_queue.Cut(1,2)  var/object = forlater[1]  var/procname = forlater[2]  var/a = forlater[3]  var/b = forlater[4]  var/c = forlater[5]  call(object, procname)(a, b, c)</p>"},{"location":"proc/new/","title":"New","text":""},{"location":"proc/new/#new-proc","title":"new proc","text":"<p>See also: </p> <p>New proc (atom) </p> <p>New proc (datum) </p> <p>New proc (icon) </p> <p>newlist proc </p> <p>path operators </p> <p>See also: </p> <p>See also:</p> <p>New proc (atom) </p> <p>New proc (datum) </p> <p>New proc (icon) </p> <p>newlist proc </p> <p>path operators </p> <p>New proc (atom)</p> <p>New proc (datum) </p> <p>New proc (icon) </p> <p>newlist proc </p> <p>path operators </p> <p>New proc (datum)</p> <p>New proc (icon) </p> <p>newlist proc </p> <p>path operators </p> <p>New proc (icon)</p> <p>newlist proc </p> <p>path operators </p> <p>newlist proc</p> <p>path operators </p> <p>path operators</p> <p>Format: </p> <p>new Type(Args)</p> <p>Format: </p> <p>Format:</p> <p>new Type(Args)</p> <p>Returns: </p> <p>A reference to a new instance of Type.</p> <p>Returns: </p> <p>Returns:</p> <p>A reference to a new instance of Type.</p> <p>Args: </p> <p>Type: The type of object to create.</p> <p>Args: Arguments for the Type.New() proc.</p> <p>Args: </p> <p>Args:</p> <p>Type: The type of object to create.</p> <p>Args: Arguments for the Type.New() proc.</p> <p>Args: Arguments for the Type.New() proc.</p> <p>A new instance of Type is created. The arguments (Args) are passed to its New() proc. A handy short-cut: if Type is not specified and new() is being used in an assignment, the variable type of the left-hand-side will be used as the default type.</p> <p>The atom types /area, /turf, /obj, and /mob all take a location argument specifying the initial position. If not specified, it defaults to null.</p> <p>Newly created areas or turfs replace any existing area or turf at the specified location.</p>"},{"location":"proc/new/#_1","title":"New","text":"<p>Example:</p> <p>obj/stick mob/verb/magic_stick()  var/obj/stick/S = new(src) //create a stick in my inventory  S.desc = \"This is no ordinary stick!\"  view() &lt;&lt; \"[src] creates \\an [S] from thin air!\"</p>"},{"location":"proc/newlist/","title":"Newlist","text":""},{"location":"proc/newlist/#newlist-proc","title":"newlist proc","text":"<p>See also: </p> <p>list proc </p> <p>new proc </p> <p>See also: </p> <p>See also:</p> <p>list proc </p> <p>new proc </p> <p>list proc</p> <p>new proc </p> <p>new proc</p> <p>Format: </p> <p>newlist(A,B,C,...)</p> <p>Format: </p> <p>Format:</p> <p>newlist(A,B,C,...)</p> <p>Returns: </p> <p>A list of new objects, just as though you had done  <code>list(new A,new B,new C,...)</code>   .</p> <p>Returns: </p> <p>Returns:</p> <p>A list of new objects, just as though you had done  <code>list(new A,new B,new C,...)</code>   .</p> <p><code>list(new A,new B,new C,...)</code></p> <p>Args: </p> <p>Arbitrary number of types to be created in the list.</p> <p>Args: </p> <p>Args:</p> <p>Arbitrary number of types to be created in the list.</p>"},{"location":"proc/newlist/#_1","title":"Newlist","text":"<p>Example:</p> <p>mob/contents = newlist(/obj/scroll/readme)</p> <p>This causes new mobs to be created with a readme scroll in their inventory.</p> <p>It is possible to make simple initializations when you want variables to have values other than the default for the particular type you are creating.</p>"},{"location":"proc/newlist/#_2","title":"Newlist","text":"<p>Example:</p> <p>mob/contents = newlist(  /obj/scroll/readme {  name = \"Introduction\"  desc = \"The fate of Bracolia depends on you ...\"  } )</p> <p>This is the most common use of \"modified types\", but it is not specific to the newlist instruction. Anywhere a type value may be used in DM, it may be followed by a list of initializations. The general syntax for a modified types is:</p> <p>path   {  var1   =  val1   ;  var2   =  val2   }</p> <p>path var1 val1 var2 val2</p> <p>The semicolon is necessary if you put several variable assignments on the same line. The braces are necessary, even though they are generally optional in DM (since the compiler looks at your indentation). The reason is that the path + initializations must be parsed as a single expression, which is a different context from the usual use of braces in DM when you are defining a true type. Also, indentation inside of an argument list is always ignored anyway.</p>"},{"location":"proc/noise_hash/","title":"Noise hash","text":""},{"location":"proc/noise_hash/#noise_hash-proc","title":"noise_hash proc","text":"<p>See also: </p> <p>rand proc </p> <p>rand_seed proc </p> <p>See also: </p> <p>See also:</p> <p>rand proc </p> <p>rand_seed proc </p> <p>rand proc</p> <p>rand_seed proc </p> <p>rand_seed proc</p> <p>Format: </p> <p>noise_hash(num1, num2, num3...)</p> <p>noise_hash(list_of_nums)</p> <p>noise_hash(hash_name, num1, num2, num3...)</p> <p>noise_hash(hash_name, list_of_nums)</p> <p>Format: </p> <p>Format:</p> <p>noise_hash(num1, num2, num3...)</p> <p>noise_hash(list_of_nums)</p> <p>noise_hash(hash_name, num1, num2, num3...)</p> <p>noise_hash(hash_name, list_of_nums)</p> <p>noise_hash(list_of_nums)</p> <p>noise_hash(hash_name, num1, num2, num3...)</p> <p>noise_hash(hash_name, list_of_nums)</p> <p>noise_hash(hash_name, num1, num2, num3...)</p> <p>noise_hash(hash_name, list_of_nums)</p> <p>noise_hash(hash_name, list_of_nums)</p> <p>Returns: </p> <p>A number between 0 and 1 (excluding 1 itself)</p> <p>Returns: </p> <p>Returns:</p> <p>A number between 0 and 1 (excluding 1 itself)</p> <p>Args: </p> <p>num1, num2, num3...: Numbers to be hashed (at least one)</p> <p>list_of_nums: A list containing the numbers to hash</p> <p>hash_name: A text string indicating the hash type (reserved for future use)</p> <p>Args: </p> <p>Args:</p> <p>num1, num2, num3...: Numbers to be hashed (at least one)</p> <p>list_of_nums: A list containing the numbers to hash</p> <p>hash_name: A text string indicating the hash type (reserved for future use)</p> <p>list_of_nums: A list containing the numbers to hash</p> <p>hash_name: A text string indicating the hash type (reserved for future use)</p> <p>hash_name: A text string indicating the hash type (reserved for future use)</p> <p>For some games using concepts of procedural generation, it's nice to be able to reliably create pseudo-random numbers in a repeatable, reliable way. This proc takes all the numbers put into it and hashes them together to get a value from 0 to 1. That output value will be the same for any given set of input numbers. This can be used on its own or as part of a more in-depth noise algorithm.</p> <p>If the first argument is a string, that may be used in future versions to specify the type of hash to use. For now it is not used.</p> <p>Non-numbers provided to the proc will be interpreted arbitrarily. Don't do that.</p>"},{"location":"proc/nonspantext/","title":"Nonspantext","text":""},{"location":"proc/nonspantext/#nonspantext-proc","title":"nonspantext proc","text":"<p>See also: </p> <p>findtext proc </p> <p>spantext proc </p> <p>splittext proc </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>spantext proc </p> <p>splittext proc </p> <p>findtext proc</p> <p>spantext proc </p> <p>splittext proc </p> <p>spantext proc</p> <p>splittext proc </p> <p>splittext proc</p> <p>Format: </p> <p>nonspantext(Haystack,Needles,Start=1)</p> <p>Format: </p> <p>Format:</p> <p>nonspantext(Haystack,Needles,Start=1)</p> <p>Returns: </p> <p>The number of consecutive characters, from the start position, that do NOT match the characters in Needles.</p> <p>Returns: </p> <p>Returns:</p> <p>The number of consecutive characters, from the start position, that do NOT match the characters in Needles.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needles: A text string with all the characters that should not match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needles: A text string with all the characters that should not match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Needles: A text string with all the characters that should not match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>This proc is case-sensitive. A common use for this proc is in parsing. For instance nonspantext(\"apples, oranges\",\", \") will return 6, because the first 6 characters don't match a comma or a space.</p> <p>If the start position is negative, the position is counted backwards from the end of the string.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>nonspantext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>nonspantext_char()</p> <p>Unicode</p>"},{"location":"proc/num2text/","title":"Num2text","text":""},{"location":"proc/num2text/#num2text-proc","title":"num2text proc","text":"<p>See also: </p> <p>isnum proc </p> <p>text2num proc </p> <p>See also: </p> <p>See also:</p> <p>isnum proc </p> <p>text2num proc </p> <p>isnum proc</p> <p>text2num proc </p> <p>text2num proc</p> <p>Format: </p> <p>num2text(N, SigFig=6)</p> <p>num2text(N, Digits, Radix)</p> <p>Format: </p> <p>Format:</p> <p>num2text(N, SigFig=6)</p> <p>num2text(N, Digits, Radix)</p> <p>num2text(N, Digits, Radix)</p> <p>Returns: </p> <p>A text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A text string.</p> <p>Args: </p> <p>N: A number.</p> <p>SigFig: Number of significant digits.</p> <p>Digits: Minimum number of digits</p> <p>Radix: The base of the number, e.g. 16 is hexadecimal.</p> <p>Args: </p> <p>Args:</p> <p>N: A number.</p> <p>SigFig: Number of significant digits.</p> <p>Digits: Minimum number of digits</p> <p>Radix: The base of the number, e.g. 16 is hexadecimal.</p> <p>SigFig: Number of significant digits.</p> <p>Digits: Minimum number of digits</p> <p>Radix: The base of the number, e.g. 16 is hexadecimal.</p> <p>Digits: Minimum number of digits</p> <p>Radix: The base of the number, e.g. 16 is hexadecimal.</p> <p>Radix: The base of the number, e.g. 16 is hexadecimal.</p> <p>Get the text string for a number. The number of significant digits determines when scientific notation is used. The default is 6, so scientific notation will only be used when there are more than 6 digits.</p>"},{"location":"proc/num2text/#_1","title":"Num2text","text":"<p>Example:</p> <p>T = num2text(12) // = \"12\" T = num2text(12,1) // = \"1.2e1\"</p> <p>The Radix format is intended for converting numbers to bases other than 10, although you can still use 10. In this format, Digits represents the minimum number of digits to use, and the result will be left-padded with zeroes if necessary. Also, in this form only the integer part of the number is used, and it can't be any larger than what a 32-bit integer could store (about 4 billion). These limitations may be lessened or removed in the future, but this format was mainly intended for simple conversions.</p>"},{"location":"proc/num2text/#_2","title":"Num2text","text":"<p>Example:</p> <p>world &lt;&lt; num2text(11, 2, 16) // \"0b\" world &lt;&lt; num2text(343, 0, 7) // \"1000\"</p>"},{"location":"proc/obounds/","title":"Obounds","text":""},{"location":"proc/obounds/#obounds-proc","title":"obounds proc","text":"<p>See also: </p> <p>bounds proc </p> <p>See also: </p> <p>See also:</p> <p>bounds proc </p> <p>bounds proc</p> <p>Format: </p> <p>obounds(Ref=src, Dist=0)</p> <p>obounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>Format: </p> <p>Format:</p> <p>obounds(Ref=src, Dist=0)</p> <p>obounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>obounds(Ref, x_offset, y_offset, extra_width=0, extra_height=0)</p> <p>Returns: </p> <p>A list of atoms within the given bounding box, excluding Ref.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of atoms within the given bounding box, excluding Ref.</p> <p>Args: </p> <p>Ref: A turf, obj, or mob.</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>Args: </p> <p>Args:</p> <p>Ref: A turf, obj, or mob.</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>Dist: A number (distance in pixels).</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>x_offset, y_offset: Shift to bounding box position (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>extra_width, extra_height: Adjustment to bounding box size (from Ref's bounding box)</p> <p>The results from obounds() are identical to bounds(), but obounds() leaves Ref out of the results.</p>"},{"location":"proc/ohearers/","title":"Ohearers","text":""},{"location":"proc/ohearers/#ohearers","title":"ohearers","text":"<p>See also: </p> <p>hearers </p> <p>oview proc </p> <p>oviewers </p> <p>See also: </p> <p>See also:</p> <p>hearers </p> <p>oview proc </p> <p>oviewers </p> <p>hearers</p> <p>oview proc </p> <p>oviewers </p> <p>oview proc</p> <p>oviewers </p> <p>oviewers</p> <p>Format: </p> <p>ohearers(Depth=world.view,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>ohearers(Depth=world.view,Center=usr)</p> <p>This is just like  <code>hearers()</code>   , but it excludes the center object and its contents from the list. It is a list of all other mobs that can hear the center object.</p> <p><code>hearers()</code></p>"},{"location":"proc/orange/","title":"Orange","text":""},{"location":"proc/orange/#orange-proc","title":"orange proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>block </p> <p>oview proc </p> <p>range proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>block </p> <p>oview proc </p> <p>range proc </p> <p>&lt;&lt; output operator</p> <p>block </p> <p>oview proc </p> <p>range proc </p> <p>block</p> <p>oview proc </p> <p>range proc </p> <p>oview proc</p> <p>range proc </p> <p>range proc</p> <p>Format: </p> <p>orange(Dist,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>orange(Dist,Center=usr)</p> <p>Returns: </p> <p>A list of objects within Dist tiles of Center, excluding Center.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of objects within Dist tiles of Center, excluding Center.</p> <p>Args: </p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Center: An object on the map.</p> <p>This instruction is identical to oview() except visibility is ignored. All objects are included in the list whether they are visible or not. The center object and its contents are excluded.</p>"},{"location":"proc/output/","title":"Output","text":""},{"location":"proc/output/#output-proc","title":"output proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>winclone proc </p> <p>winset proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>winclone proc </p> <p>winset proc </p> <p>&lt;&lt; output operator</p> <p>winclone proc </p> <p>winset proc </p> <p>winclone proc</p> <p>winset proc </p> <p>winset proc</p> <p>Format: </p> <p>output(msg, control)</p> <p>Format: </p> <p>Format:</p> <p>output(msg, control)</p> <p>Args: </p> <p>msg: Text, an atom, a file, or null</p> <p>control: The ID of a control in the player's skin, or null for the default</p> <p>Args: </p> <p>Args:</p> <p>msg: Text, an atom, a file, or null</p> <p>control: The ID of a control in the player's skin, or null for the default</p> <p>control: The ID of a control in the player's skin, or null for the default</p> <p>This is used in conjunction with the &lt;&lt; output operator to send output to a particular control in the player's skin. If null is sent, the control will be cleared.</p>"},{"location":"proc/output/#_1","title":"Output","text":"<p>Example:</p> <p>usr &lt;&lt; output(\"Your score is [score].\", \"scorepane.output\")</p> <p>As with</p> <p>winset()</p> <p>, the control name may be in the form</p> <p>\":[type]\"</p> <p>which sends to the default control of that type, e.g.</p> <p>\":output\"</p> <p>.</p> <p>winset()</p> <p>\":[type]\"</p> <p>\":output\"</p> <p>The control ID can be followed by a colon and extra info such as a name or a grid cell, which can send the output to the control in a different way. In a grid, this can output directly to a specific grid cell, like so:</p>"},{"location":"proc/output/#_2","title":"Output","text":"<p>Example:</p> <p>usr &lt;&lt; output(\"Column 3, Row 2\", \"examplegrid:3,2\")</p> <p>For a browser control, the extra info is a JavaScript function. The format for sending a script to the browser control is</p> <p>output(\"[params]\",\"[control]:[scriptname]\")</p> <p>where \"[params]\" is a URL-encoded list of string arguments to the javascript function, as formatted by  list2params()   .</p> <p>output(\"[params]\",\"[control]:[scriptname]\")</p> <p>list2params()</p>"},{"location":"proc/output/#_3","title":"Output","text":"<p>Example:</p> <p>mob/Login()  . = ..()  usr &lt;&lt; output(\\ {\"</p> <p>function replace(v) {  document.getElementById('foo').innerHTML =  v.replace(/&amp;/g, '&amp;').replace(/&lt;/g, '&lt;'); }</p> <p>This text can change.</p> <p>And this can't.</p> <p>\"},  \":browser\");</p>"},{"location":"proc/output/#define-lpstr-list2paramsliststr","title":"define LP(str) list2params(list(str))","text":"<p>mob/verb/newtext(T as text)  usr &lt;&lt; output(LP(T), \":browser:replace\")</p> <p>function replace(v) {  document.getElementById('foo').innerHTML =  v.replace(/&amp;/g, '&amp;').replace(/&lt;/g, '&lt;'); }</p> <p>This text can change.</p> <p>And this can't.</p> <p>This allows for the creation of more dynamic interfaces, since javascript provides access to many client-side operations and flicker-free updates.</p>"},{"location":"proc/oview/","title":"Oview","text":""},{"location":"proc/oview/#oview-proc","title":"oview proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>orange proc </p> <p>view proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>orange proc </p> <p>view proc </p> <p>&lt;&lt; output operator</p> <p>orange proc </p> <p>view proc </p> <p>orange proc</p> <p>view proc </p> <p>view proc</p> <p>Format: </p> <p>oview(Dist,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>oview(Dist,Center=usr)</p> <p>Returns: </p> <p>A list of visible objects within Dist tiles of Center, excluding Center.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of visible objects within Dist tiles of Center, excluding Center.</p> <p>Args: </p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Center: An object on the map.</p> <p>This instruction is just like view() except it doesn't include Center or its contents in the list.</p>"},{"location":"proc/oview/#_1","title":"Oview","text":"<p>Example:</p> <p>oview() &lt;&lt; \"to others in sight of [usr]\"</p>"},{"location":"proc/oviewers/","title":"Oviewers","text":""},{"location":"proc/oviewers/#oviewers","title":"oviewers","text":"<p>See also: </p> <p>hearers </p> <p>oview proc </p> <p>oviewers </p> <p>See also: </p> <p>See also:</p> <p>hearers </p> <p>oview proc </p> <p>oviewers </p> <p>hearers</p> <p>oview proc </p> <p>oviewers </p> <p>oview proc</p> <p>oviewers </p> <p>oviewers</p> <p>Format: </p> <p>oviewers(Depth=world.view,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>oviewers(Depth=world.view,Center=usr)</p> <p>This is just like  <code>viewers()</code>   , but it excludes the center object and its contents from the list. It is a list of all other mobs that can see the center object.</p> <p><code>viewers()</code></p>"},{"location":"proc/params2list/","title":"Params2list","text":""},{"location":"proc/params2list/#params2list-proc","title":"params2list proc","text":"<p>See also: </p> <p>Topic proc (client) </p> <p>list associations </p> <p>list2params proc </p> <p>params var (world) </p> <p>text2num proc </p> <p>See also: </p> <p>See also:</p> <p>Topic proc (client) </p> <p>list associations </p> <p>list2params proc </p> <p>params var (world) </p> <p>text2num proc </p> <p>Topic proc (client)</p> <p>list associations </p> <p>list2params proc </p> <p>params var (world) </p> <p>text2num proc </p> <p>list associations</p> <p>list2params proc </p> <p>params var (world) </p> <p>text2num proc </p> <p>list2params proc</p> <p>params var (world) </p> <p>text2num proc </p> <p>params var (world)</p> <p>text2num proc </p> <p>text2num proc</p> <p>Format: </p> <p>params2list(Params)</p> <p>Format: </p> <p>Format:</p> <p>params2list(Params)</p> <p>Args: </p> <p>Params: Text string of parameter values.</p> <p>Args: </p> <p>Args:</p> <p>Params: Text string of parameter values.</p> <p>Returns: </p> <p>An associative list of parameter names and values.</p> <p>Returns: </p> <p>Returns:</p> <p>An associative list of parameter names and values.</p> <p>This instruction converts a parameter text string to a list of individual parameters and associated values. The format of the parameter text is:</p> <p>\"name1=value1&amp;name2=value2&amp;...\"</p> <p>The field separator</p> <p>;</p> <p>may be used in place of</p> <p>&amp;</p> <p>.</p> <p>;</p> <p>&amp;</p> <p>Special characters such as</p> <p>=</p> <p>,</p> <p>;</p> <p>, and</p> <p>&amp;</p> <p>inside the parameter names or values should be written in the form  <code>%xx</code>   , where  <code>xx</code>   are two hexadecimal digits representing the ASCII value of the character. (For  Unicode   characters, this may be several  <code>%xx</code>   sequences using UTF-8 encoding.) For example,</p> <p>=</p> <p>would be written  <code>%3d</code>   ,</p> <p>;</p> <p>would be  <code>%3b</code>   ,</p> <p>&amp;</p> <p>would be  <code>%26</code>   , and</p> <p>%</p> <p>would be  <code>%25</code>   . These \"escaped\" codes are automatically translated into the corresponding character when read by</p> <p>params2list()</p> <p>.</p> <p>=</p> <p>;</p> <p>&amp;</p> <p><code>%xx</code> <code>xx</code> Unicode <code>%xx</code></p> <p>=</p> <p><code>%3d</code></p> <p>;</p> <p><code>%3b</code></p> <p>&amp;</p> <p><code>%26</code></p> <p>%</p> <p><code>%25</code></p> <p>params2list()</p> <p>This parameter format is the same one used by most HTML forms and is known by the MIME type</p> <p>application/x-www-form-urlencoded</p> <p>. It is often used in DM to pack information into topic links. Though DM does not require it, the standard format is for newlines to be written as CR LF pairs (  <code>%0d%0a</code>   ) and spaces to be written as</p> <p>+</p> <p>characters. That means if you want to write a</p> <p>+</p> <p>symbol, you will have to use  <code>%2b</code>   .</p> <p>application/x-www-form-urlencoded</p> <p><code>%0d%0a</code></p> <p>+</p> <p>+</p> <p><code>%2b</code></p> <p>The list produced from the parameter text has items</p> <p>\"name1\"</p> <p>,</p> <p>\"name2\"</p> <p>, and so on. To access the values associated with these, you use the parameter name as the list index.</p> <p>\"name1\"</p> <p>\"name2\"</p>"},{"location":"proc/params2list/#_1","title":"Params2list","text":"<p>Example:</p> <p>var/ptext = \"offense=jwalk&amp;time=10:00\" var/plist[] = params2list(ptext)</p> <p>var/p for(p in plist)  usr &lt;&lt; \"[p] = [plist[p]]\"</p> <p>The above example defines a simple parameter text string containing two parameters:</p> <p>\"offense\"</p> <p>and</p> <p>\"time\"</p> <p>. These are associated with the values</p> <p>\"jwalk\"</p> <p>and</p> <p>\"10:00\"</p> <p>. The  <code>for</code>   loop illustrates how one might loop through the list and print out each setting.</p> <p>\"offense\"</p> <p>\"time\"</p> <p>\"jwalk\"</p> <p>\"10:00\"</p> <p><code>for</code></p> <p>Note that all values are stored as text strings in the list. If you wish to perform a numerical operation (such as addition), you should convert the value to a number first using</p> <p>text2num()</p> <p>. If the value is an object text reference, you can convert that into the object itself by using</p> <p>locate()</p> <p>.</p> <p>text2num()</p> <p>locate()</p> <p>If you have multiple items with the same name, they will be combined into a list of text strings. For example,</p> <p>\"key=value1;key=value2\"</p> <p>would set</p> <p>list[\"key\"]</p> <p>to a list containing</p> <p>\"value1\"</p> <p>and</p> <p>\"value2\"</p> <p>, not necessarily in that order.</p> <p>\"key=value1;key=value2\"</p> <p>list[\"key\"]</p> <p>\"value1\"</p> <p>\"value2\"</p>"},{"location":"proc/pick/","title":"Pick","text":""},{"location":"proc/pick/#pick-proc","title":"pick proc","text":"<p>See also: </p> <p>prob proc </p> <p>See also: </p> <p>See also:</p> <p>prob proc </p> <p>prob proc</p> <p>Format: </p> <p>pick(Val1,Val2,...)</p> <p>pick(List)</p> <p>Format: </p> <p>Format:</p> <p>pick(Val1,Val2,...)</p> <p>pick(List)</p> <p>pick(List)</p> <p>Returns: </p> <p>One of the given values randomly chosen.</p> <p>Returns: </p> <p>Returns:</p> <p>One of the given values randomly chosen.</p> <p>Randomly chooses an item from a list or from the arguments provided. If only one argument is included and it is a list, then the item is chosen from that list.</p> <p>When not using the list form, you can make a particular value more or less likely to be chosen by providing a relative probability like this:</p> <p>prob(P); Val  Or P; Val</p> <p>A value for P of 200 makes it twice as likely as the norm, 50 half as likely, and so on.</p>"},{"location":"proc/pick/#_1","title":"Pick","text":"<p>Example:</p> <p>obj/food  verb/eat()  usr &lt;&lt; pick (  \"[usr] eats \\a [src].\",  prob(50)  \"[usr] devours \\a [src].\",  prob(25)  \"[usr] wolfs down \\a [src].\"  )  del(src)</p> <p>There is no analogous weighted format for the list version of this proc.</p>"},{"location":"proc/prob/","title":"Prob","text":""},{"location":"proc/prob/#prob-proc","title":"prob proc","text":"<p>See also: </p> <p>pick proc </p> <p>rand proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>See also: </p> <p>See also:</p> <p>pick proc </p> <p>rand proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>pick proc</p> <p>rand proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>rand proc</p> <p>rand_seed proc </p> <p>roll proc </p> <p>rand_seed proc</p> <p>roll proc </p> <p>roll proc</p> <p>Format: </p> <p>prob(P)</p> <p>Format: </p> <p>Format:</p> <p>prob(P)</p> <p>Returns: </p> <p>1 with probability P percent; otherwise 0</p> <p>Returns: </p> <p>Returns:</p> <p>1 with probability P percent; otherwise 0</p> <p>Args: </p> <p>P: A number.</p> <p>Args: </p> <p>Args:</p> <p>P: A number.</p>"},{"location":"proc/rand/","title":"Rand","text":""},{"location":"proc/rand/#rand-proc","title":"rand proc","text":"<p>See also: </p> <p>pick proc </p> <p>prob proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>See also: </p> <p>See also:</p> <p>pick proc </p> <p>prob proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>pick proc</p> <p>prob proc </p> <p>rand_seed proc </p> <p>roll proc </p> <p>prob proc</p> <p>rand_seed proc </p> <p>roll proc </p> <p>rand_seed proc</p> <p>roll proc </p> <p>roll proc</p> <p>Format: </p> <p>rand(L=0,H) or rand()</p> <p>Format: </p> <p>Format:</p> <p>rand(L=0,H) or rand()</p> <p>Returns: </p> <p>A random integer between L and H inclusive; or a random number from 0 up to 1 if L and H are omitted.</p> <p>Returns: </p> <p>Returns:</p> <p>A random integer between L and H inclusive; or a random number from 0 up to 1 if L and H are omitted.</p> <p>Args: </p> <p>L: A number for the lower-bound.</p> <p>H: A number for the upper-bound.</p> <p>Args: </p> <p>Args:</p> <p>L: A number for the lower-bound.</p> <p>H: A number for the upper-bound.</p> <p>H: A number for the upper-bound.</p>"},{"location":"proc/rand_seed/","title":"Rand seed","text":""},{"location":"proc/rand_seed/#rand_seed-proc","title":"rand_seed proc","text":"<p>See also: </p> <p>pick proc </p> <p>prob proc </p> <p>rand proc </p> <p>roll proc </p> <p>See also: </p> <p>See also:</p> <p>pick proc </p> <p>prob proc </p> <p>rand proc </p> <p>roll proc </p> <p>pick proc</p> <p>prob proc </p> <p>rand proc </p> <p>roll proc </p> <p>prob proc</p> <p>rand proc </p> <p>roll proc </p> <p>rand proc</p> <p>roll proc </p> <p>roll proc</p> <p>Format: </p> <p>rand_seed(Seed)</p> <p>Format: </p> <p>Format:</p> <p>rand_seed(Seed)</p> <p>Args: </p> <p>Seed: An integer used to initialize the random number generator.</p> <p>Args: </p> <p>Args:</p> <p>Seed: An integer used to initialize the random number generator.</p> <p>Many DM procedures make use of a pseudo-random number generator. You can use rand_seed() to initialize the generator. The sequence returned by the generator is identical each time it is initialized with the same seed, so you could use this to reproduce the same output from an algorithm that uses the random number generator. If you never call rand_seed(), the generator is initialized with a seed from the system clock, so it is effectively random.</p> <p>Note that with multiple realtime algorithms making calls to the generator at unpredictable times, you are likely not to get the same result even when using the same seed. The overall sequence will be the same, but individual sub-components of your world might call it in a different order.</p> <p>The pseudo-random number generator is system dependent, so do not expect the sequence generated from a particular seed to be identical on two different machines or operating systems.</p>"},{"location":"proc/range/","title":"Range","text":""},{"location":"proc/range/#range-proc","title":"range proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>block </p> <p>view proc </p> <p>orange proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>block </p> <p>view proc </p> <p>orange proc </p> <p>&lt;&lt; output operator</p> <p>block </p> <p>view proc </p> <p>orange proc </p> <p>block</p> <p>view proc </p> <p>orange proc </p> <p>view proc</p> <p>orange proc </p> <p>orange proc</p> <p>Format: </p> <p>range(Dist,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>range(Dist,Center=usr)</p> <p>Returns: </p> <p>A list of objects within Dist tiles of Center.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of objects within Dist tiles of Center.</p> <p>Args: </p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Center: An object on the map.</p> <p>This instruction is identical to view() except visibility is ignored. All objects are included in the list whether they are visible or not.</p> <p>A Dist of 0 includes Center, the contents of Center (normally usr.contents), its location (normally the turf a mob is standing on), and any other contents of that location. A value of 1 extends the region to the neighboring squares on the map and so on. You can also use a rectangular box size using a text string such as \"13x11\". Both arguments are optional and may be passed in any order.</p>"},{"location":"proc/ref/","title":"Ref","text":""},{"location":"proc/ref/#ref-proc","title":"ref proc","text":"<p>See also: </p> <p>\\ref text macro </p> <p>locate proc </p> <p>See also: </p> <p>See also:</p> <p>\\ref text macro </p> <p>locate proc </p> <p>\\ref text macro</p> <p>locate proc </p> <p>locate proc</p> <p>Format: </p> <p>ref(Object)</p> <p>Format: </p> <p>Format:</p> <p>ref(Object)</p> <p>Args: </p> <p>Object: The object to get a reference for</p> <p>Args: </p> <p>Args:</p> <p>Object: The object to get a reference for</p> <p>Returns: </p> <p>A string containing a reference ID.</p> <p>Returns: </p> <p>Returns:</p> <p>A string containing a reference ID.</p> <p>This is a shortcut for</p> <p>\"\\ref[Object]\"</p> <p>.</p> <p>\"\\ref[Object]\"</p>"},{"location":"proc/refcount/","title":"Refcount","text":""},{"location":"proc/refcount/#refcount-proc","title":"refcount proc","text":"<p>See also: </p> <p>garbage collection </p> <p>See also: </p> <p>See also:</p> <p>garbage collection </p> <p>garbage collection</p> <p>Format: </p> <p>refcount(Object)</p> <p>Format: </p> <p>Format:</p> <p>refcount(Object)</p> <p>Args: </p> <p>Object: The object to get a reference count for</p> <p>Args: </p> <p>Args:</p> <p>Object: The object to get a reference count for</p> <p>Returns: </p> <p>A count of references for the object.</p> <p>Returns: </p> <p>Returns:</p> <p>A count of references for the object.</p> <p>This gets a reference count for a value, not including the reference that was placed on the stack while evaluating this proc.</p> <p>A return value of 0 can mean one of several things: Either this was the last reference and the object was subsequently deleted after refcount(), or the value doesn't support reference counting.</p> <p>Note: A nonzero return value does not necessarily mean the object will be deleted when its count reaches zero; mobs for instance will not be soft-deleted by the garbage collector if their</p> <p>key</p> <p>var is set, and some objects like clients and areas never soft-delete. A zero value also does not necessarily mean the object is immortal; it may be transient, like the</p> <p>args</p> <p>list in a proc that only lives as long as that copy of the proc lives.</p> <p>key</p> <p>args</p>"},{"location":"proc/regex/","title":"Regex","text":""},{"location":"proc/regex/#regex-proc","title":"regex proc","text":"<p>See also: </p> <p>Regular expressions </p> <p>regex datum </p> <p>regex procs </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>See also: </p> <p>See also:</p> <p>Regular expressions </p> <p>regex datum </p> <p>regex procs </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>Regular expressions</p> <p>regex datum </p> <p>regex procs </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>regex datum</p> <p>regex procs </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>regex procs</p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc</p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>replacetext proc</p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>splittext proc</p> <p>REGEX_QUOTE proc </p> <p>REGEX_QUOTE proc</p> <p>Format: </p> <p>regex(pattern, flags)</p> <p>regex(Regex)</p> <p>Format: </p> <p>Format:</p> <p>regex(pattern, flags)</p> <p>regex(Regex)</p> <p>regex(Regex)</p> <p>Returns: </p> <p>A new /regex datum.</p> <p>Returns: </p> <p>Returns:</p> <p>A new /regex datum.</p> <p>Args: </p> <p>pattern: The pattern string to search for</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>Args: </p> <p>Args:</p> <p>pattern: The pattern string to search for</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>Regex: an existing /regex datum to copy</p> <p>Creates a  regular expression   , stored in a /regex datum, that can be used for searching and/or replacing text.</p> <p>regular expression</p>"},{"location":"proc/replacetext/","title":"Replacetext","text":""},{"location":"proc/replacetext/#replacetext-proc","title":"replacetext proc","text":"<p>See also: </p> <p>findtext proc </p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>findtext proc</p> <p>replacetextEx proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>replacetextEx proc</p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>Regular expressions</p> <p>Replace proc (regex) </p> <p>Replace proc (regex)</p> <p>Format: </p> <p>replacetext(Haystack,Needle,Replacement,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>replacetext(Haystack,Needle,Replacement,Start=1,End=0)</p> <p>Returns: </p> <p>The Haystack text with all cases of Needle replaced by Replacement</p> <p>Returns: </p> <p>Returns:</p> <p>The Haystack text with all cases of Needle replaced by Replacement</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>When Needle is text, this instruction is NOT sensitive to the case of Haystack or Needle. The case-sensitive version is replacetextEx(). If the Needle is a lowercase word, the replacement will be changed to uppercase or all caps if the found text is uppercase or all caps.</p>"},{"location":"proc/replacetext/#_1","title":"Replacetext","text":"<p>Example:</p> <p>world &lt;&lt; replacetext(\"One on one\", \"one\", \"two\")</p> <p>This outputs \"Two on two\", where the first case's \"One\" is identified as uppercase.</p> <p>You may use a proc as the Replacement value. In that case, the proc will be called with the found text as an argument, and its return value will be the replacement. There will be no automatic correction to uppercase or all caps in this case.</p> <p>When the Needle value is a regular expression, this proc behaves identically to the  regex Replace()   proc. Case-sensitivity, and whether one match or all are replaced, depend on the regular expression.</p> <p>regex Replace()</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>replacetext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>replacetext_char()</p> <p>Unicode</p>"},{"location":"proc/replacetextEx/","title":"replacetextEx","text":""},{"location":"proc/replacetextEx/#replacetextex-proc","title":"replacetextEx proc","text":"<p>See also: </p> <p>findtextEx proc </p> <p>replacetext proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>See also: </p> <p>See also:</p> <p>findtextEx proc </p> <p>replacetext proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>findtextEx proc</p> <p>replacetext proc </p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>replacetext proc</p> <p>Regular expressions </p> <p>Replace proc (regex) </p> <p>Regular expressions</p> <p>Replace proc (regex) </p> <p>Replace proc (regex)</p> <p>Format: </p> <p>replacetextEx(Haystack,Needle,Replacement,Start=1,End=0)</p> <p>Format: </p> <p>Format:</p> <p>replacetextEx(Haystack,Needle,Replacement,Start=1,End=0)</p> <p>Returns: </p> <p>The Haystack text with all cases of Needle replaced by Replacement</p> <p>Returns: </p> <p>Returns:</p> <p>The Haystack text with all cases of Needle replaced by Replacement</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Needle: The sub-text to search for. May be a regular expression (regex).</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Replacement: The replacement text, or a proc.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>End: The text byte position in Haystack immediately following the last  character to search.</p> <p>When Needle is text, this instruction is sensitive to the case of Haystack and Needle. The case-insensitive version is replacetext().</p>"},{"location":"proc/replacetextEx/#_1","title":"replacetextEx","text":"<p>Example:</p> <p>world &lt;&lt; replacetext(\"One on one\", \"one\", \"two\")</p> <p>This outputs \"Two on two\", where the first case's \"One\" is identified as uppercase.</p> <p>You may use a proc as the Replacement value. In that case, the proc will be called with the found text as an argument, and its return value will be the replacement. There will be no automatic correction to uppercase or all caps in this case.</p> <p>When the Needle value is a regular expression, this proc behaves identically to the  regex Replace()   proc. Case-sensitivity, and whether one match or all are replaced, depend on the regular expression.</p> <p>regex Replace()</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>replacetextEx_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>replacetextEx_char()</p> <p>Unicode</p>"},{"location":"proc/return/","title":"Return","text":""},{"location":"proc/return/#return-statement","title":"return statement","text":"<p>See also: </p> <p>. var (proc) </p> <p>See also: </p> <p>See also:</p> <p>. var (proc) </p> <p>. var (proc)</p> <p>Format: </p> <p>return E</p> <p>Format: </p> <p>Format:</p> <p>return E</p> <p>Stop execution of the current proc and return the value of E to the caller. If no value is specified, the value of</p> <p>.</p> <p>will be returned, which defaults to null.</p> <p>.</p>"},{"location":"proc/rgb/","title":"Rgb","text":""},{"location":"proc/rgb/#rgb-proc","title":"rgb proc","text":"<p>See also: </p> <p>rgb2num proc </p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>See also: </p> <p>See also:</p> <p>rgb2num proc </p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>rgb2num proc</p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>gradient proc</p> <p>Color space </p> <p>HTML colors </p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>Color space</p> <p>HTML colors </p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>HTML colors</p> <p>color var (atom) </p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>color var (atom)</p> <p>Blend proc (icon) </p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>Blend proc (icon)</p> <p>Color matrix </p> <p>Color matrix filter </p> <p>Particle effects </p> <p>Color matrix</p> <p>Color matrix filter </p> <p>Particle effects </p> <p>Color matrix filter</p> <p>Particle effects </p> <p>Particle effects</p> <p>Format: </p> <p>rgb(R,G,B)</p> <p>rgb(R,G,B,A)</p> <p>rgb(x,y,z,space=  color space   )</p> <p>rgb(x,y,z,a,space)</p> <p>Format: </p> <p>Format:</p> <p>rgb(R,G,B)</p> <p>rgb(R,G,B,A)</p> <p>rgb(x,y,z,space=  color space   )</p> <p>rgb(x,y,z,a,space)</p> <p>rgb(R,G,B,A)</p> <p>rgb(x,y,z,space=  color space   )</p> <p>rgb(x,y,z,a,space)</p> <p>rgb(x,y,z,space=  color space   )</p> <p>rgb(x,y,z,a,space)</p> <p>color space</p> <p>rgb(x,y,z,a,space)</p> <p>Args: </p> <p>R,G,B: Numbers from 0-255 corresponding to the red, green, and blue components of a color.</p> <p>A: Optional alpha component; 0 is transparent, 255 is opaque.</p> <p>x,y,z: Color components for a different color space</p> <p>space:  Color space   ; defaults to</p> <p>COLORSPACE_RGB</p> <p>Args: </p> <p>Args:</p> <p>R,G,B: Numbers from 0-255 corresponding to the red, green, and blue components of a color.</p> <p>A: Optional alpha component; 0 is transparent, 255 is opaque.</p> <p>x,y,z: Color components for a different color space</p> <p>space:  Color space   ; defaults to</p> <p>COLORSPACE_RGB</p> <p>A: Optional alpha component; 0 is transparent, 255 is opaque.</p> <p>x,y,z: Color components for a different color space</p> <p>space:  Color space   ; defaults to</p> <p>COLORSPACE_RGB</p> <p>x,y,z: Color components for a different color space</p> <p>space:  Color space   ; defaults to</p> <p>COLORSPACE_RGB</p> <p>space:  Color space   ; defaults to</p> <p>COLORSPACE_RGB</p> <p>Color space</p> <p>COLORSPACE_RGB</p> <p>Returns: </p> <p>A color, represented by a text string in #RRGGBB or #RRGGBBAA format</p> <p>Returns: </p> <p>Returns:</p> <p>A color, represented by a text string in #RRGGBB or #RRGGBBAA format</p> <p>A way of representing a color to be used in conjunction with icon arithmetic, atom.color, or other effects. The colors</p> <p>rgb(0,0,0)</p> <p>and</p> <p>rgb(255,255,255)</p> <p>represent black and white, two corners of the \"color cube\".</p> <p>rgb(0,0,0)</p> <p>rgb(255,255,255)</p>"},{"location":"proc/rgb/#_1","title":"Rgb","text":"<p>Example:</p> <p>mob/proc/hurtme() // make a mob look damaged by adding red to its icon  src.icon += rgb(20,0,0)</p> <p>This proc returns a text string in the form used by HTML (#RRGGBB). rgb(255,0,128) for example becomes \"#ff0080\". If you use an alpha component, the format is #RRGGBBAA. You can use strings like this in most procs that use colors such as icon blending operations, and you can also use the short form</p>"},{"location":"proc/rgb/#rgb-or-rgba-so-if-you-know-in-advance-that-you-want-to-use-the-color","title":"RGB or #RGBA. So if you know in advance that you want to use the color","text":"<p>white, you can simply use\"#fff\" instead of rgb(255,255,255).</p> <p>You can create colors other ways by specifying a different  color space   . A color space can be specified by using a  named   \"space\" argument, or by using a 5-argument format (you can leave the alpha value blank or null to skip it), or by using named arguments for the other components.</p> <p>color space named</p>"},{"location":"proc/rgb/#_2","title":"Rgb","text":"<p>Example:</p> <p>// All of these lines are equivalent. // They create (0,100,50) in HSL which is red (#ff0000). src &lt;&lt; rgb(0, 100, 50, space=COLORSPACE_HSL) src &lt;&lt; rgb(0, 100, 50, , COLORSPACE_HSL) src &lt;&lt; rgb(h=0, s=100, l=50)</p> <p>Named arguments that are valid in</p> <p>rgb()</p> <p>are:</p> <p>rgb()</p> <ul> <li>space</li> <li>red</li> <li>green</li> <li>blue</li> <li>alpha</li> <li>hue</li> <li>saturation</li> <li>chroma</li> <li>value</li> <li>luminance</li> <li>y</li> </ul> <p>(HCY luminance)</p> <ul> <li>space</li> </ul> <p>space</p> <ul> <li>red</li> </ul> <p>red</p> <ul> <li>green</li> </ul> <p>green</p> <ul> <li>blue</li> </ul> <p>blue</p> <ul> <li>alpha</li> </ul> <p>alpha</p> <ul> <li>hue</li> </ul> <p>hue</p> <ul> <li>saturation</li> </ul> <p>saturation</p> <ul> <li>chroma</li> </ul> <p>chroma</p> <ul> <li>value</li> </ul> <p>value</p> <ul> <li>luminance</li> </ul> <p>luminance</p> <ul> <li>y</li> </ul> <p>(HCY luminance)</p> <p>y</p> <p>With the exception of</p> <p>space</p> <p>, only the first letter of the argument name matters, so</p> <p>r</p> <p>and</p> <p>red</p> <p>are the same thing.</p> <p>space</p> <p>r</p> <p>red</p>"},{"location":"proc/rgb2num/","title":"Rgb2num","text":""},{"location":"proc/rgb2num/#rgb2num-proc","title":"rgb2num proc","text":"<p>See also: </p> <p>rgb proc </p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>See also: </p> <p>See also:</p> <p>rgb proc </p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>rgb proc</p> <p>gradient proc </p> <p>Color space </p> <p>HTML colors </p> <p>gradient proc</p> <p>Color space </p> <p>HTML colors </p> <p>Color space</p> <p>HTML colors </p> <p>HTML colors</p> <p>Format: </p> <p>rgb2num(color)</p> <p>rgb2num(color, space)</p> <p>Format: </p> <p>Format:</p> <p>rgb2num(color)</p> <p>rgb2num(color, space)</p> <p>rgb2num(color, space)</p> <p>Args: </p> <p>color: A color value (see  HTML colors   )</p> <p>space:  Color space   ; default is</p> <p>COLORSPACE_RGB</p> <p>Args: </p> <p>Args:</p> <p>color: A color value (see  HTML colors   )</p> <p>space:  Color space   ; default is</p> <p>COLORSPACE_RGB</p> <p>HTML colors</p> <p>space:  Color space   ; default is</p> <p>COLORSPACE_RGB</p> <p>Color space</p> <p>COLORSPACE_RGB</p> <p>Returns: </p> <p>A list with the components of this color</p> <p>Returns: </p> <p>Returns:</p> <p>A list with the components of this color</p> <p>Parses a color into a list with 3 or 4 component values; the 4th value is alpha, if it's part of the color provided.</p>"},{"location":"proc/rgb2num/#_1","title":"Rgb2num","text":"<p>Example:</p> <p>var/list/RGB = rgb2num(\"#ff8000\") src &lt;&lt; RGB[1] // red (255) src &lt;&lt; RGB[2] // green (128) src &lt;&lt; RGB[3] // blue (0)</p> <p>By specifying a different color space, you can convert a color into a different format.</p>"},{"location":"proc/rgb2num/#_2","title":"Rgb2num","text":"<p>Example:</p> <p>var/list/HSL = rgb2num(\"#5af\", COLORSPACE_HSL) src &lt;&lt; HSL[1] // hue (210) src &lt;&lt; HSL[2] // saturation (100) src &lt;&lt; HSL[3] // luminance (66.6667)</p>"},{"location":"proc/roll/","title":"Roll","text":""},{"location":"proc/roll/#roll-proc","title":"roll proc","text":"<p>See also: </p> <p>rand proc </p> <p>See also: </p> <p>See also:</p> <p>rand proc </p> <p>rand proc</p> <p>Format: </p> <p>roll(ndice=1,sides)</p> <p>roll(dice)</p> <p>Format: </p> <p>Format:</p> <p>roll(ndice=1,sides)</p> <p>roll(dice)</p> <p>roll(dice)</p> <p>Returns: </p> <p>The sum of the rolled dice.</p> <p>Returns: </p> <p>Returns:</p> <p>The sum of the rolled dice.</p> <p>Args: </p> <p>ndice: number of dice to role.</p> <p>sides: number of sides to the dice.</p> <p>dice: a text string encoding both ndice and sides (see below).</p> <p>Args: </p> <p>Args:</p> <p>ndice: number of dice to role.</p> <p>sides: number of sides to the dice.</p> <p>dice: a text string encoding both ndice and sides (see below).</p> <p>sides: number of sides to the dice.</p> <p>dice: a text string encoding both ndice and sides (see below).</p> <p>dice: a text string encoding both ndice and sides (see below).</p> <p>The sides of the dice are numbered 1 through the total number of sides and each is equally likely.</p> <p>An alternate form takes the dice parameters in a single text value such as \"3d4\". This may be useful when you want to store the dice information in a single variable. You can even specify an offset, such as \"3d4+5\". That adds 5 to the sum of 3 dice having 4 sides each.</p>"},{"location":"proc/roll/#_1","title":"Roll","text":"<p>Example:</p> <p>obj/potion/healing  var/dice = \"3d6\"  verb/drink()  var/h = roll(dice)  if(h&gt;15) usr &lt;&lt; \"Very refreshing!\"  else usr &lt;&lt; \"You feel better.\"</p>"},{"location":"proc/round/","title":"Round","text":""},{"location":"proc/round/#round-proc","title":"round proc","text":"<p>See also: </p> <p>floor proc </p> <p>ceil proc </p> <p>trunc proc </p> <p>fract proc </p> <p>See also: </p> <p>See also:</p> <p>floor proc </p> <p>ceil proc </p> <p>trunc proc </p> <p>fract proc </p> <p>floor proc</p> <p>ceil proc </p> <p>trunc proc </p> <p>fract proc </p> <p>ceil proc</p> <p>trunc proc </p> <p>fract proc </p> <p>trunc proc</p> <p>fract proc </p> <p>fract proc</p> <p>Format: </p> <p>round(A)</p> <p>round(A,B)</p> <p>Format: </p> <p>Format:</p> <p>round(A)</p> <p>round(A,B)</p> <p>round(A,B)</p> <p>Returns: </p> <p>rounded A</p> <p>Returns: </p> <p>Returns:</p> <p>rounded A</p> <p>Args: </p> <p>A: A number.</p> <p>B: The nearest multiple to round A.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p> <p>B: The nearest multiple to round A.</p> <p>B: The nearest multiple to round A.</p> <p>The first format returns the floor of A (the largest integer less than or equal to A), and has been deprecated in favor of</p> <p>floor(A)</p> <p>. The second format rounds A to the nearest multiple of B.</p> <p>floor(A)</p>"},{"location":"proc/round/#_1","title":"Round","text":"<p>Example:</p> <p>usr &lt;&lt; round(1.45) // outputs 1</p> <p>usr &lt;&lt; round(-1.45) // outputs -2</p> <p>usr &lt;&lt; round(1.45,1.5) // outputs 1.5</p>"},{"location":"proc/run/","title":"Run","text":""},{"location":"proc/run/#run-proc","title":"run proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>file proc </p> <p>link proc </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>file proc </p> <p>link proc </p> <p>&lt;&lt; output operator</p> <p>file proc </p> <p>link proc </p> <p>file proc</p> <p>link proc </p> <p>link proc</p> <p>Format: </p> <p>O &lt;&lt; run(File)</p> <p>Format: </p> <p>Format:</p> <p>O &lt;&lt; run(File)</p> <p>This is similar to link() but instead of a URL, you can pass a file to be viewed directly. The file may be a cache file or an external file.</p>"},{"location":"proc/run/#_1","title":"Run","text":"<p>Example:</p> <p>mob/var/picture = 'mob.jpg' mob/verb/view_pic(mob/M as mob in view())  usr &lt;&lt; run(M.picture)</p> <p>mob/verb/set_pic(F as file)  usr.picture = F</p> <p>This example defines a picture to be associated with each mob and a verb for viewing another mob's picture. Players can also configure their own pictures.</p>"},{"location":"proc/set/","title":"Set","text":""},{"location":"proc/set/#settings-proc","title":"settings (proc)","text":"<p>proc settings:  ```` verb/set   name desc category hidden popup_menu instant invisibility src background waitfor</p> <p>verb/set   name desc category hidden popup_menu instant invisibility src background waitfor</p> <p>````</p> <pre><code>verb/set\n  [name](#/verb/set/name)\n  [desc](#/verb/set/desc)\n  [category](#/verb/set/category)\n  [hidden](#/verb/set/hidden)\n  [popup\\_menu](#/verb/set/popup_menu)\n  [instant](#/verb/set/instant)\n  [invisibility](#/verb/set/invisibility)\n  [src](#/verb/set/src)\n  [background](#/proc/set/background)\n  [waitfor](#/proc/set/waitfor)\n\n</code></pre> <p>name desc category hidden popup_menu instant invisibility src background waitfor</p> <p>Procs and verbs are the same \"type\" so these attributes may be set for both procs and verbs; most of them only apply to verbs, so they only take effect if the proc is invoked as a verb (by adding it to a verb list).</p>"},{"location":"proc/sha1/","title":"Sha1","text":""},{"location":"proc/sha1/#sha1-proc","title":"sha1 proc","text":"<p>See also: </p> <p>md5 proc </p> <p>file proc </p> <p>See also: </p> <p>See also:</p> <p>md5 proc </p> <p>file proc </p> <p>md5 proc</p> <p>file proc </p> <p>file proc</p> <p>Format: </p> <p>sha1(T)</p> <p>sha1(F)</p> <p>Format: </p> <p>Format:</p> <p>sha1(T)</p> <p>sha1(F)</p> <p>sha1(F)</p> <p>Returns: </p> <p>text or null.</p> <p>Returns: </p> <p>Returns:</p> <p>text or null.</p> <p>Args: </p> <p>T: A text string.</p> <p>F: A file.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>F: A file.</p> <p>F: A file.</p> <p>This proc implements SHA1 hashing. A hash function is a one-way process that compacts information to a short value: a hash. The same value will always have the same hash. Among other uses, most computers use hashing to store passwords. By storing just the hash, the password file contains very little sensitive information, but the password can still be verified by confirming that  <code>sha1(password)==hash</code>   . SHA1 is a widely-used hash function.</p> <p><code>sha1(password)==hash</code></p>"},{"location":"proc/sha1/#_1","title":"Sha1","text":"<p>Example:</p> <p>mob/var/hash</p> <p>mob/Read(savefile/S)  ..()  // hash was saved in the file along with other values  if(sha1(\"[level]/[exp]/[exp_needed]\") != hash)  src &lt;&lt; \"Cheater!\"  del(src)</p> <p>In the example, a few vars belonging to a mob were saved along with a hash of those values. When the mob is loaded again, the game compares the hash to the values to make sure it's still accurate. If the values or hash had been changed by a sneaky player, they wouldn't match. (But a sneaky player could still calculate  <code>hash</code>   themselves if they knew the exact text used to make it, so this should be kept secret.)</p> <p><code>hash</code></p> <p>If the argument is a file,</p> <p>sha1()</p> <p>will read the file and return the SHA1 hash of the file's entire contents. If the file doesn't exist, it returns null. The file may be a cache file or an external file.</p> <p>sha1()</p>"},{"location":"proc/sha1/#_2","title":"Sha1","text":"<p>Examples:</p> <p>var/hash = \"(insert hash value here)\" // Compute this ahead of time</p> <p>// Check that the cached default icon is still the same if (sha1('default.dmi') != hash)  world &lt;&lt; \"The default icon has been modified!\"</p> <p>// Or check that the entire game resource file is pristine if (sha1(file(\"mygame.rsc\")) != hash)  world &lt;&lt; \"The game resources have been modified!\"</p> <p>Note that you must pass the result of  file()   in order to compute the hash of an external file's contents at runtime. Otherwise</p> <p>sha1()</p> <p>will treat the filename as text and return the hash of the name only.</p> <p>file()</p> <p>sha1()</p> <p>If</p> <p>T</p> <p>is anything but a text string or file, the proc returns null.</p> <p>T</p>"},{"location":"proc/shell/","title":"Shell","text":""},{"location":"proc/shell/#shell-proc","title":"shell proc","text":"<p>See also: </p> <p>fcopy proc </p> <p>fdel proc </p> <p>file2text proc </p> <p>process var (world) </p> <p>system_type var (world) </p> <p>text2file proc </p> <p>See also: </p> <p>See also:</p> <p>fcopy proc </p> <p>fdel proc </p> <p>file2text proc </p> <p>process var (world) </p> <p>system_type var (world) </p> <p>text2file proc </p> <p>fcopy proc</p> <p>fdel proc </p> <p>file2text proc </p> <p>process var (world) </p> <p>system_type var (world) </p> <p>text2file proc </p> <p>fdel proc</p> <p>file2text proc </p> <p>process var (world) </p> <p>system_type var (world) </p> <p>text2file proc </p> <p>file2text proc</p> <p>process var (world) </p> <p>system_type var (world) </p> <p>text2file proc </p> <p>process var (world)</p> <p>system_type var (world) </p> <p>text2file proc </p> <p>system_type var (world)</p> <p>text2file proc </p> <p>text2file proc</p> <p>Format: </p> <p>shell(Command)</p> <p>Format: </p> <p>Format:</p> <p>shell(Command)</p> <p>Args: </p> <p>Command: system command to run</p> <p>Args: </p> <p>Args:</p> <p>Command: system command to run</p> <p>Returns: </p> <p>null on failure to execute command</p> <p>exit code of command otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>null on failure to execute command</p> <p>exit code of command otherwise</p> <p>exit code of command otherwise</p> <p>This function is used to run an external program. The syntax of Command depends on the server machine's operating system. Be sure to redirect input and output to files if there is any. Also realize that the command will fail if the program you try to run is not in the path where the shell expects to find executable files (unless you specify a full path).</p> <p>Since shell() allows arbitrary access to the system, each call requires authorization from the person hosting the world, unless running in trusted mode. Authorization is only sought when running in Dream Seeker, since Dream Daemon is intended to be non-interactive. Calling shell() with no arguments is a way of checking if it is allowed by the current safety settings. It will return true if running in Dream Seeker (regardless of safety mode) or if running in Dream Daemon in trusted mode.</p> <p>The calling proc will sleep until the command is finished executing.</p>"},{"location":"proc/shell/#_1","title":"Shell","text":"<p>Example:</p> <p>mob/verb/dir(Path as text)  shell(\"dir [Path] &gt; dir.out\")  usr &lt;&lt; file2text(\"dir.out\")</p> <p>This example displays the output of the \"dir\" command to the user.</p>"},{"location":"proc/shutdown/","title":"Shutdown","text":""},{"location":"proc/shutdown/#shutdown-proc","title":"shutdown proc","text":"<p>See also: </p> <p>Export proc (world) </p> <p>startup proc </p> <p>See also: </p> <p>See also:</p> <p>Export proc (world) </p> <p>startup proc </p> <p>Export proc (world)</p> <p>startup proc </p> <p>startup proc</p> <p>Format: </p> <p>shutdown(Addr,Natural=0)</p> <p>Format: </p> <p>Format:</p> <p>shutdown(Addr,Natural=0)</p> <p>Args: </p> <p>Addr: This is the address of the child world returned by startup().</p> <p>Natural: Specifies whether to wait for the child world to die  naturally, or whether it should be killed with the \"Del\" world topic.  The default value of 0 kills the child, and a value of 1 waits for the  child to exit of its own accord.</p> <p>Args: </p> <p>Args:</p> <p>Addr: This is the address of the child world returned by startup().</p> <p>Natural: Specifies whether to wait for the child world to die  naturally, or whether it should be killed with the \"Del\" world topic.  The default value of 0 kills the child, and a value of 1 waits for the  child to exit of its own accord.</p> <p>Natural: Specifies whether to wait for the child world to die  naturally, or whether it should be killed with the \"Del\" world topic.  The default value of 0 kills the child, and a value of 1 waits for the  child to exit of its own accord.</p> <p>If no address is specified, the current world is shut down.</p>"},{"location":"proc/sin/","title":"Sin","text":""},{"location":"proc/sin/#sin-proc","title":"sin proc","text":"<p>See also: </p> <p>arcsin proc </p> <p>cos proc </p> <p>tan proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arcsin proc </p> <p>cos proc </p> <p>tan proc </p> <p>turn proc </p> <p>arcsin proc</p> <p>cos proc </p> <p>tan proc </p> <p>turn proc </p> <p>cos proc</p> <p>tan proc </p> <p>turn proc </p> <p>tan proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>sin(X)</p> <p>Format: </p> <p>Format:</p> <p>sin(X)</p> <p>Returns: </p> <p>The sine of X, where X is in degrees.</p> <p>Returns: </p> <p>Returns:</p> <p>The sine of X, where X is in degrees.</p>"},{"location":"proc/sin/#_1","title":"Sin","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; sin(0) // 0  usr &lt;&lt; sin(45) // 0.707...  usr &lt;&lt; sin(90) // 1</p>"},{"location":"proc/sleep/","title":"Sleep","text":""},{"location":"proc/sleep/#sleep-proc","title":"sleep proc","text":"<p>See also: </p> <p>background setting (proc) </p> <p>waitfor setting (proc) </p> <p>spawn proc </p> <p>tick_lag var (world) </p> <p>See also: </p> <p>See also:</p> <p>background setting (proc) </p> <p>waitfor setting (proc) </p> <p>spawn proc </p> <p>tick_lag var (world) </p> <p>background setting (proc)</p> <p>waitfor setting (proc) </p> <p>spawn proc </p> <p>tick_lag var (world) </p> <p>waitfor setting (proc)</p> <p>spawn proc </p> <p>tick_lag var (world) </p> <p>spawn proc</p> <p>tick_lag var (world) </p> <p>tick_lag var (world)</p> <p>Format: </p> <p>sleep(Delay)</p> <p>Format: </p> <p>Format:</p> <p>sleep(Delay)</p> <p>Args: </p> <p>Delay: The amount of time to sleep, in 1/10 seconds.</p> <p>Args: </p> <p>Args:</p> <p>Delay: The amount of time to sleep, in 1/10 seconds.</p> <p>When a proc sleeps, it actually makes a copy of itself. The copy is what will wake up later, and the current proc simply ends. The same thing happens to its callers.</p> <p>When a proc sleeps, it actually makes a copy of itself. The copy is what will wake up later, and the current proc simply ends. The same thing happens to its callers.</p> <p>Pause the current proc (and its callers) for a specified amount of time. If no delay is specified, it will be scheduled to resume as soon as other immediately pending events are processed.</p> <p>Note that sleeping in some procedures results in the return value being lost. For example, if you sleep inside  <code>Entered()</code>   or  <code>Exited()</code>   , it will be as if you returned immediately where you started sleeping. This is because</p> <p>Move()</p> <p>calls them in away that says the return value should be ignored. Also if a proc has its  waitfor   setting changed to 0, it will return the value of the</p> <p>.</p> <p>var to its caller immediately if it or one of its callees sleeps.</p> <p><code>Entered()</code> <code>Exited()</code></p> <p>Move()</p> <p>waitfor</p> <p>.</p> <p>Also be aware that a sleeping procedure whose</p> <p>src</p> <p>object gets deleted will automatically terminate when execution returns to it. This is to protect you against trying to access properties or procedures of a deleted (and therefore  <code>null</code>   ) object. If you do not want the procedure to be terminated, you should set</p> <p>src</p> <p>to  <code>null</code>   .</p> <p>src</p> <p><code>null</code></p> <p>src</p> <p><code>null</code></p> <p>One common use of  <code>sleep</code>   is to create what is known as a  ticker   . That is an infinite loop that performs some periodic operation.</p> <p><code>sleep</code> ticker</p>"},{"location":"proc/sleep/#_1","title":"Sleep","text":"<p>Example:</p> <p>proc/Weather()  spawn while(1) //infinite ticker loop  world &lt;&lt; \"The sun rises in the east.\"  sleep(500)  world &lt;&lt; \"The noon day sun rises high in the sky.\"  sleep(500)  world &lt;&lt; \"The sun sinks low in the west.\"  sleep(1000)</p> <p>Notice how such infinite loops are usually created using  <code>spawn</code>   to prevent the caller from getting locked up. You could call this procedure from  <code>world.New()</code>   to start it rolling.</p> <p><code>spawn</code> <code>world.New()</code></p> <p>Note: sleep time is in 1/10s units, not server ticks. If your  <code>world.tick_lag</code>   or  <code>world.fps</code>   value is different from the default,</p> <p>sleep(1)</p> <p>still means \"sleep for 1/10s\". To sleep for exactly</p> <p>N</p> <p>ticks, call  <code>sleep(N * world.tick_lag)</code>   .</p> <p><code>world.tick_lag</code> <code>world.fps</code></p> <p>sleep(1)</p> <p>N</p> <p><code>sleep(N * world.tick_lag)</code></p> <p>If the ticker does intensive processing during each iteration, you probably want to run it in the background like this:</p> <p>proc/Ticker()  set background = 1</p> <p>Calling sleep() with a negative argument (such as sleep(-1)) causes it to do a backlog check. Only if other pending events have become backlogged will it sleep. This is similar to running in the background, but you manually control where the backlog checks are made. The difference between this and sleep(0) is that sleep(0)  always   sleeps the current procedure for as short a time as possible, whereas sleep(-1) only sleeps the current procedure if other scheduled events have become backlogged. Therefore, sleep(-1) will tend to run the current procedure at a higher priority with fewer interruptions. It is appropriate when there is a single task that needs to be done before anything else can happen, and you just want to make sure that network and user I/O are not terribly lagged in the process.</p> <p>always</p>"},{"location":"proc/sorttext/","title":"Sorttext","text":""},{"location":"proc/sorttext/#sorttext-proc","title":"sorttext proc","text":"<p>See also: </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>sorttextEx proc </p> <p>See also: </p> <p>See also:</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>sorttextEx proc </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>sorttextEx proc </p> <p>&lt; operator</p> <p>sorttextEx proc </p> <p>sorttextEx proc</p> <p>Format: </p> <p>sorttext(T1,T2,...)</p> <p>Format: </p> <p>Format:</p> <p>sorttext(T1,T2,...)</p> <p>Args: </p> <p>Any number of text strings to sort.</p> <p>Args: </p> <p>Args:</p> <p>Any number of text strings to sort.</p> <p>Returns: </p> <p>1 if text is ascending</p> <p>-1 if text is descending</p> <p>0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 if text is ascending</p> <p>-1 if text is descending</p> <p>0 otherwise</p> <p>-1 if text is descending</p> <p>0 otherwise</p> <p>0 otherwise</p> <p>This instruction is NOT sensitive to case. The case sensitive version is sorttextEx().</p>"},{"location":"proc/sorttext/#_1","title":"Sorttext","text":"<p>Example:</p> <p>switch(sorttext(\"A\",\"B\"))  if(1) world &lt;&lt; \"ascending\"  if(-1)world &lt;&lt; \"descending\"  if(0) world &lt;&lt; \"neither\"</p> <p>This outputs \"ascending\", since \"A\" comes before \"B\" in the alphabet.</p>"},{"location":"proc/sorttextEx/","title":"sorttextEx","text":""},{"location":"proc/sorttextEx/#sorttextex-proc","title":"sorttextEx proc","text":"<p>See also: </p> <p>&gt; operator </p> <p>&lt; operator </p> <p>sorttext proc </p> <p>See also: </p> <p>See also:</p> <p>&gt; operator </p> <p>&lt; operator </p> <p>sorttext proc </p> <p>&gt; operator</p> <p>&lt; operator </p> <p>sorttext proc </p> <p>&lt; operator</p> <p>sorttext proc </p> <p>sorttext proc</p> <p>Format: </p> <p>sorttextEx(T1,T2,...)</p> <p>Format: </p> <p>Format:</p> <p>sorttextEx(T1,T2,...)</p> <p>Args: </p> <p>Any number of text strings to sort.</p> <p>Args: </p> <p>Args:</p> <p>Any number of text strings to sort.</p> <p>Returns: </p> <p>1 if text is ascending</p> <p>-1 if text is descending</p> <p>0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if text is ascending</p> <p>-1 if text is descending</p> <p>0 otherwise.</p> <p>-1 if text is descending</p> <p>0 otherwise.</p> <p>0 otherwise.</p> <p>This instruction is sensitive to case. The case-insensitive version is sorttext().</p> <p>Note: Uppercase letters are lower in the alphabetical order than lowercase letters.</p>"},{"location":"proc/sorttextEx/#_1","title":"sorttextEx","text":"<p>Example:</p> <p>switch(sorttextEx(\"a\",\"B\"))  if(1) world &lt;&lt; \"ascending\"  if(-1)world &lt;&lt; \"descending\"  if(0) world &lt;&lt; \"neither\"</p> <p>This outputs, \"descending\", since \"B\" comes before \"a\" in the alphabet.</p> <p>Note: This proc used to be named</p> <p>sortText</p> <p>, like</p> <p>sorttext</p> <p>but with a capital T. To avoid confusion it has been renamed, but old code will still compile.</p> <p>sortText</p> <p>sorttext</p>"},{"location":"proc/sound/","title":"Sound","text":""},{"location":"proc/sound/#sound-proc","title":"sound proc","text":"<p>See also: </p> <p>sound datum </p> <p>vars (sound) </p> <p>&lt;&lt; output operator </p> <p>load_resource proc </p> <p>See also: </p> <p>See also:</p> <p>sound datum </p> <p>vars (sound) </p> <p>&lt;&lt; output operator </p> <p>load_resource proc </p> <p>sound datum</p> <p>vars (sound) </p> <p>&lt;&lt; output operator </p> <p>load_resource proc </p> <p>vars (sound)</p> <p>&lt;&lt; output operator </p> <p>load_resource proc </p> <p>&lt;&lt; output operator</p> <p>load_resource proc </p> <p>load_resource proc</p> <p>Format: </p> <p>sound(file,repeat=0,wait,channel,volume)</p> <p>(supports named arguments)</p> <p>Format: </p> <p>Format:</p> <p>sound(file,repeat=0,wait,channel,volume)</p> <p>(supports named arguments)</p> <p>(supports named arguments)</p> <p>(supports named arguments)</p> <p>Args: </p> <p>file: A sound file to play</p> <p>repeat: 1 to play sound repeatedly</p> <p>wait: 0 to interrupt current sound on channel; 1 to wait in queue</p> <p>channel: 0 for any available channel, 1-1024 for specific channel (non-MIDI only)</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>Args: </p> <p>Args:</p> <p>file: A sound file to play</p> <p>repeat: 1 to play sound repeatedly</p> <p>wait: 0 to interrupt current sound on channel; 1 to wait in queue</p> <p>channel: 0 for any available channel, 1-1024 for specific channel (non-MIDI only)</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>repeat: 1 to play sound repeatedly</p> <p>wait: 0 to interrupt current sound on channel; 1 to wait in queue</p> <p>channel: 0 for any available channel, 1-1024 for specific channel (non-MIDI only)</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>wait: 0 to interrupt current sound on channel; 1 to wait in queue</p> <p>channel: 0 for any available channel, 1-1024 for specific channel (non-MIDI only)</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>channel: 0 for any available channel, 1-1024 for specific channel (non-MIDI only)</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>volume: 100 for full volume (default), 0 for none, or any value in between</p> <p>This is used to play a sound file.</p> <p>The sound file must be a music or sample file. Music files include MIDI (.mid or .midi), and module formats .mod, .it, .s3m, .xm, and .oxm. A sample file used for sound effects can be .wav, .ogg, .raw, .wma, or .aiff.*</p> <p>The following example plays some sound files. Note that  <code>sound()</code>   is not even necessary when you don't need to set any additional parameters.</p> <p><code>sound()</code></p>"},{"location":"proc/sound/#_1","title":"Sound","text":"<p>Example:</p> <p>usr &lt;&lt; 'giggle.wav' // play a giggle once usr &lt;&lt; sound('gigue.midi',1) // repeat gigue usr &lt;&lt; sound('boom.wav', volume=50) // play an explosion at half volume</p> <p>*See  Notes   under  sound support   for more information.</p> <p>*See  Notes   under  sound support   for more information.</p> <p>Notes sound support</p>"},{"location":"proc/spantext/","title":"Spantext","text":""},{"location":"proc/spantext/#spantext-proc","title":"spantext proc","text":"<p>See also: </p> <p>findtext proc </p> <p>nonspantext proc </p> <p>splittext proc </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>nonspantext proc </p> <p>splittext proc </p> <p>findtext proc</p> <p>nonspantext proc </p> <p>splittext proc </p> <p>nonspantext proc</p> <p>splittext proc </p> <p>splittext proc</p> <p>Format: </p> <p>spantext(Haystack,Needles,Start=1)</p> <p>Format: </p> <p>Format:</p> <p>spantext(Haystack,Needles,Start=1)</p> <p>Returns: </p> <p>The number of consecutive characters, from the start position, that match the characters in Needles.</p> <p>Returns: </p> <p>Returns:</p> <p>The number of consecutive characters, from the start position, that match the characters in Needles.</p> <p>Args: </p> <p>Haystack: The text string to search.</p> <p>Needles: A text string with all the characters that match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Args: </p> <p>Args:</p> <p>Haystack: The text string to search.</p> <p>Needles: A text string with all the characters that match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Needles: A text string with all the characters that match.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>Start: The text byte position in Haystack in which to begin the search.</p> <p>This proc is case-sensitive. A common use for this proc is in parsing. spantext(\"apples, oranges\",\", \",7) will tell you that, starting at position 7, you need to skip 2 characters to get past any commas or spaces.</p> <p>If the start position is negative, the position is counted backwards from the end of the string.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>spantext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>spantext_char()</p> <p>Unicode</p>"},{"location":"proc/spawn/","title":"Spawn","text":""},{"location":"proc/spawn/#spawn-proc","title":"spawn proc","text":"<p>See also: </p> <p>background setting (proc) </p> <p>sleep proc </p> <p>See also: </p> <p>See also:</p> <p>background setting (proc) </p> <p>sleep proc </p> <p>background setting (proc)</p> <p>sleep proc </p> <p>sleep proc</p> <p>Format: </p> <p>spawn(Delay=0) Statement</p> <p>Format: </p> <p>Format:</p> <p>spawn(Delay=0) Statement</p> <p>Args: </p> <p>Delay: The amount of time (in 1/10 seconds) before Statement is executed.</p> <p>Args: </p> <p>Args:</p> <p>Delay: The amount of time (in 1/10 seconds) before Statement is executed.</p> <p>Run Statement after a delay. Statement may be a single statement or a code block enclosed in (optional) braces and indented. If delay is negative, the spawned code is executed before continuing in the main code. If it is zero, the spawned code is scheduled to happen right after other existing events that are immediately pending.</p>"},{"location":"proc/spawn/#_1","title":"Spawn","text":"<p>Example:</p> <p>spawn(30) storm() usr &lt;&lt; \"Storm clouds are brewing!\"</p> <p>This will display  <code>\"Storm clouds are brewing!\"</code>   and then call the storm() proc after 3 seconds.</p> <p><code>\"Storm clouds are brewing!\"</code></p> <p>A spawned statement or block is a copy of the current proc. The current proc keeps running and the copy waits its turn.</p> <p>A spawned statement or block is a copy of the current proc. The current proc keeps running and the copy waits its turn.</p> <p>The important feature of spawn() is that the caller does not have to wait around for the spawned code to finish.</p> <p>Any vars you have defined in the proc itself, including arguments, will be copied between the spawned code and the code that runs right away. This means that if one part modifies one of those vars, the other part will not see that change. Changes made to objects, lists, datums, etc. however will be visible to both code blocks.</p> <p>Pointers   to any vars that belong to the proc will stay with the original proc, not the spawned block.</p> <p>Pointers</p>"},{"location":"proc/splicetext/","title":"Splicetext","text":""},{"location":"proc/splicetext/#splicetext-proc","title":"splicetext proc","text":"<p>See also: </p> <p>copytext proc </p> <p>Splice proc (list) </p> <p>See also: </p> <p>See also:</p> <p>copytext proc </p> <p>Splice proc (list) </p> <p>copytext proc</p> <p>Splice proc (list) </p> <p>Splice proc (list)</p> <p>Format: </p> <p>splicetext(Text,Start=1,End=0,Insert=\"\")</p> <p>Format: </p> <p>Format:</p> <p>splicetext(Text,Start=1,End=0,Insert=\"\")</p> <p>Returns: </p> <p>Spliced text</p> <p>Returns: </p> <p>Returns:</p> <p>Spliced text</p> <p>Args: </p> <p>Text: The text string to splice.</p> <p>Start: The text byte position in Text where the splice will begin.</p> <p>End: The text byte position in Text immediately following the last  character to be cut from the splice. 0 is the end of the string.</p> <p>Insert: Text to be inserted.</p> <p>Args: </p> <p>Args:</p> <p>Text: The text string to splice.</p> <p>Start: The text byte position in Text where the splice will begin.</p> <p>End: The text byte position in Text immediately following the last  character to be cut from the splice. 0 is the end of the string.</p> <p>Insert: Text to be inserted.</p> <p>Start: The text byte position in Text where the splice will begin.</p> <p>End: The text byte position in Text immediately following the last  character to be cut from the splice. 0 is the end of the string.</p> <p>Insert: Text to be inserted.</p> <p>End: The text byte position in Text immediately following the last  character to be cut from the splice. 0 is the end of the string.</p> <p>Insert: Text to be inserted.</p> <p>Insert: Text to be inserted.</p> <p>Cuts out a section of a text string and inserts a different piece of text in its place. This is basically equivalent to</p> <p>copytext(Text,1,Start) + Insert + copytext(Text,End)</p> <p>, but faster.</p> <p>copytext(Text,1,Start) + Insert + copytext(Text,End)</p>"},{"location":"proc/splicetext/#_1","title":"Splicetext","text":"<p>Example:</p> <p>// cuts \"nan\" from \"banana\" and replaces it with \"laclav\" // prints \"balaclava\" usr &lt;&lt; splicetext(\"banana\", 3, 6, \"laclav\")</p> <p>The</p> <p>Start</p> <p>and</p> <p>End</p> <p>index values can be negative, which count backwards from the end of the string. If the index values are out of range, there will be no error; they will simply be clamped to the beginning or end of the string. If</p> <p>End</p> <p>comes before</p> <p>Start</p> <p>, the two values are swapped.</p> <p>Start</p> <p>End</p> <p>End</p> <p>Start</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>splicetext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>splicetext_char()</p> <p>Unicode</p>"},{"location":"proc/splittext/","title":"Splittext","text":""},{"location":"proc/splittext/#splittext-proc","title":"splittext proc","text":"<p>See also: </p> <p>findtext proc </p> <p>jointext proc </p> <p>nonspantext proc </p> <p>spantext proc </p> <p>Regular expressions </p> <p>See also: </p> <p>See also:</p> <p>findtext proc </p> <p>jointext proc </p> <p>nonspantext proc </p> <p>spantext proc </p> <p>Regular expressions </p> <p>findtext proc</p> <p>jointext proc </p> <p>nonspantext proc </p> <p>spantext proc </p> <p>Regular expressions </p> <p>jointext proc</p> <p>nonspantext proc </p> <p>spantext proc </p> <p>Regular expressions </p> <p>nonspantext proc</p> <p>spantext proc </p> <p>Regular expressions </p> <p>spantext proc</p> <p>Regular expressions </p> <p>Regular expressions</p> <p>Format: </p> <p>splittext(Text,Delimiter,Start=1,End=0,include_delimiters=0)</p> <p>Format: </p> <p>Format:</p> <p>splittext(Text,Delimiter,Start=1,End=0,include_delimiters=0)</p> <p>Returns: </p> <p>A list of text strings split by the delimiter given.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of text strings split by the delimiter given.</p> <p>Args: </p> <p>Text: The text string to search.</p> <p>Delimiter: A text string that will be used as the separator between items,  OR a regular expression (regex) used to find splits</p> <p>Start: The text byte position in Text in which to begin.</p> <p>End: The text byte position in Text immediately following the last  character to include in the splitting process.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Args: </p> <p>Args:</p> <p>Text: The text string to search.</p> <p>Delimiter: A text string that will be used as the separator between items,  OR a regular expression (regex) used to find splits</p> <p>Start: The text byte position in Text in which to begin.</p> <p>End: The text byte position in Text immediately following the last  character to include in the splitting process.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Delimiter: A text string that will be used as the separator between items,  OR a regular expression (regex) used to find splits</p> <p>Start: The text byte position in Text in which to begin.</p> <p>End: The text byte position in Text immediately following the last  character to include in the splitting process.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Start: The text byte position in Text in which to begin.</p> <p>End: The text byte position in Text immediately following the last  character to include in the splitting process.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>End: The text byte position in Text immediately following the last  character to include in the splitting process.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>include_delimiters: True if any delimiters found should be included in  the result.</p> <p>Splits up a text string and returns a list. The delimiter is case-sensitive (unless you use a case-insensitive regular expression), and can be more than one character long.</p>"},{"location":"proc/splittext/#_1","title":"Splittext","text":"<p>Example:</p> <p>var/list/items = splittext(\"apples,oranges,bananas\", \",\") // prints \"apples\", \"oranges\", and \"bananas\" separately for(var/item in items)  usr &lt;&lt; item</p> <p>Where multiple delimiters are next to each other, they're considered to be separating an empty string. Therefore splittext(\"a,,b,c\", \",\") would return a list with four elements instead of three. Splitting empty text returns an empty list.</p> <p>If a regular expression is used as the delimiter, any capturing groups in the expression will be included in the list, in order. (The whole match itself will come first, if include_delimiters is true.) So for instance splitting by regex(\",\") will not include the comma, but splitting by regex(\"(,)\") will. Groups that were not part of the match will be null.</p> <p>If the start or end position is negative, the position is counted backwards from the end of the string.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>splittext_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>splittext_char()</p> <p>Unicode</p>"},{"location":"proc/sqrt/","title":"Sqrt","text":""},{"location":"proc/sqrt/#sqrt-proc","title":"sqrt proc","text":"<p>Format: </p> <p>sqrt(A)</p> <p>Format: </p> <p>Format:</p> <p>sqrt(A)</p> <p>Returns: </p> <p>The square root of A</p> <p>Returns: </p> <p>Returns:</p> <p>The square root of A</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p>"},{"location":"proc/sqrt/#_1","title":"Sqrt","text":"<p>Example:</p> <p>usr &lt;&lt; sqrt(2) // outputs 1.41421</p>"},{"location":"proc/startup/","title":"Startup","text":""},{"location":"proc/startup/#startup-proc","title":"startup proc","text":"<p>See also: </p> <p>params var (world) </p> <p>shutdown proc </p> <p>See also: </p> <p>See also:</p> <p>params var (world) </p> <p>shutdown proc </p> <p>params var (world)</p> <p>shutdown proc </p> <p>shutdown proc</p> <p>Format: </p> <p>startup(File,Port=0,Options,...)</p> <p>Format: </p> <p>Format:</p> <p>startup(File,Port=0,Options,...)</p> <p>Args: </p> <p>File: The dmb file to run in a new server or null to load the current world.</p> <p>Port: The network port to start the new server on. A value of 0  indicates that any available port should be used.</p> <p>Options: Any number of the options listed below. Each option should be  in an argument by itself. If the option takes a parameter, this  can be in the same argument or in the following one.</p> <p>Args: </p> <p>Args:</p> <p>File: The dmb file to run in a new server or null to load the current world.</p> <p>Port: The network port to start the new server on. A value of 0  indicates that any available port should be used.</p> <p>Options: Any number of the options listed below. Each option should be  in an argument by itself. If the option takes a parameter, this  can be in the same argument or in the following one.</p> <p>Port: The network port to start the new server on. A value of 0  indicates that any available port should be used.</p> <p>Options: Any number of the options listed below. Each option should be  in an argument by itself. If the option takes a parameter, this  can be in the same argument or in the following one.</p> <p>Options: Any number of the options listed below. Each option should be  in an argument by itself. If the option takes a parameter, this  can be in the same argument or in the following one.</p>"},{"location":"proc/startup/#_1","title":"Startup","text":"<p>The valid options are:</p> <p>-once</p> <p>automatically shuts down the server when all players have logged off.</p> <p>-close</p> <p>Closes the child copy of DreamDaemon after the world it is running shuts down.</p> <p>-log  <p>sends all server output to the specified file. The path to the file is relative to the world directory (the path containing the world  <code>.dmb</code>   file).</p> <p>-logself</p> <p>is identical to \"-log [YourWorldFile].log\".</p> <p>-safe</p> <p>runs the server in a special protective mode. The server may only access files in the same directory (or below) as the dmb file and access to the shell() command is disabled. This is the default mode if no security setting is specified and the world is run from a directory by the same name as the dmb file.</p> <p>-home  <p>runs with the specified \"safe home\" directory. Normally, in safe mode the directory containing the world dmb file is the safe home.</p> <p>-ultrasafe</p> <p>like -safe, this prohibits all file access. This is the default if no security mode is specified and the world is not run from a directory with the same name.</p> <p>-trusted</p> <p>allows full access to files on the computer and to the shell() command. Note that this does not bypass the normal security of the operating system. For example, in the UNIX operating system, all of the usual access restrictions apply. This mode merely removes BYOND's built-in safety checks.</p> <p>-params  <p>this is for passing user-defined parameters to the world. Multiple parameters may be packed into a single argument or -params may be used several times. In either case, the parameters are all loaded into world.params when the world starts up. The parameter format is \"name1=value1&amp;name2=value2&amp;...\".</p> <p>-quiet</p> <p>disables the server's normal output indicating the BYOND version number and network port.</p> <p>-nologdates</p> <p>disables automatic date/time output in the log.</p> <p>-CGI</p> <p>runs the world as a CGI program (to be executed by a web server). A /client object is automatically created for the user and any output sent to the associated mob gets returned to the user's web browser. This option is normally specified in the compile-time setting:  world.executor   , which is automatically initialized for you if you include  <code>html/CGI.dm</code>   from the html library.</p> <p>-suid  <p>runs the world as the owner of the specified directory or path. This only works if DreamDaemon is running as root on operating systems where there even is such a thing.</p> <p>-suidself</p> <p>runs the world as the owner of the world dmb file. This only works if DreamDaemon is running as root on operating systems where there even is such a thing.</p> <p>-cd  <p>runs with the specified working directory. Normally, the directory containing the world dmb file is used.</p> <p>-port P</p> <p>sets the network port to P. The port may also be specified as a positional argument (following the .dmb name).</p> <p>-ports  <p>restricts the range of ports that DreamDaemon and any child worlds may use. The syntax of  list   is a comma separated list of ports or ranges of ports. Example:  <code>-ports 1234,1236,1240-1250</code>   .</p> <p>-ip  <p>sets the IP address of the server. This will only work for an IP address the system recognizes as one it can use for hosting. Accepts numerical addresses only.</p> <p>-webclient</p> <p>Enables the webclient, overriding default behavior.</p> <p>-nowebclient</p> <p>Disables the webclient, overriding default behavior.</p> <p>-verbose</p> <p>Runtime errors will continue outputting details after a certain number of errors has been reached. Without this option, the number of errors that provide detailed info (such as call stack) is limited. Use this option with caution as it could fill up a log file quickly if a problem occurs.</p> <p>-once</p> <p>automatically shuts down the server when all players have logged off.</p> <p>-close</p> <p>Closes the child copy of DreamDaemon after the world it is running shuts down.</p> <p>-log  <p>sends all server output to the specified file. The path to the file is relative to the world directory (the path containing the world  <code>.dmb</code>   file).</p> <p><code>.dmb</code></p> <p>-logself</p> <p>is identical to \"-log [YourWorldFile].log\".</p> <p>-safe</p> <p>runs the server in a special protective mode. The server may only access files in the same directory (or below) as the dmb file and access to the shell() command is disabled. This is the default mode if no security setting is specified and the world is run from a directory by the same name as the dmb file.</p> <p>-home  <p>runs with the specified \"safe home\" directory. Normally, in safe mode the directory containing the world dmb file is the safe home.</p> <p>-ultrasafe</p> <p>like -safe, this prohibits all file access. This is the default if no security mode is specified and the world is not run from a directory with the same name.</p> <p>-trusted</p> <p>allows full access to files on the computer and to the shell() command. Note that this does not bypass the normal security of the operating system. For example, in the UNIX operating system, all of the usual access restrictions apply. This mode merely removes BYOND's built-in safety checks.</p> <p>-params  <p>this is for passing user-defined parameters to the world. Multiple parameters may be packed into a single argument or -params may be used several times. In either case, the parameters are all loaded into world.params when the world starts up. The parameter format is \"name1=value1&amp;name2=value2&amp;...\".</p> <p>-quiet</p> <p>disables the server's normal output indicating the BYOND version number and network port.</p> <p>-nologdates</p> <p>disables automatic date/time output in the log.</p> <p>-CGI</p> <p>runs the world as a CGI program (to be executed by a web server). A /client object is automatically created for the user and any output sent to the associated mob gets returned to the user's web browser. This option is normally specified in the compile-time setting:  world.executor   , which is automatically initialized for you if you include  <code>html/CGI.dm</code>   from the html library.</p> <p>world.executor <code>html/CGI.dm</code></p> <p>-suid  <p>runs the world as the owner of the specified directory or path. This only works if DreamDaemon is running as root on operating systems where there even is such a thing.</p> <p>-suidself</p> <p>runs the world as the owner of the world dmb file. This only works if DreamDaemon is running as root on operating systems where there even is such a thing.</p> <p>-cd  <p>runs with the specified working directory. Normally, the directory containing the world dmb file is used.</p> <p>-port P</p> <p>sets the network port to P. The port may also be specified as a positional argument (following the .dmb name).</p> <p>-ports  <p>restricts the range of ports that DreamDaemon and any child worlds may use. The syntax of  list   is a comma separated list of ports or ranges of ports. Example:  <code>-ports 1234,1236,1240-1250</code>   .</p> <p>list <code>-ports 1234,1236,1240-1250</code></p> <p>-ip  <p>sets the IP address of the server. This will only work for an IP address the system recognizes as one it can use for hosting. Accepts numerical addresses only.</p> <p>-webclient</p> <p>Enables the webclient, overriding default behavior.</p> <p>-nowebclient</p> <p>Disables the webclient, overriding default behavior.</p> <p>-verbose</p> <p>Runtime errors will continue outputting details after a certain number of errors has been reached. Without this option, the number of errors that provide detailed info (such as call stack) is limited. Use this option with caution as it could fill up a log file quickly if a problem occurs.</p> <p>Returns: </p> <p>The address of the new server in the form ip:port.</p> <p>Returns: </p> <p>Returns:</p> <p>The address of the new server in the form ip:port.</p>"},{"location":"proc/stat/","title":"Stat","text":""},{"location":"proc/stat/#stat-proc","title":"stat proc","text":"<p>See also: </p> <p>Stat proc (atom) </p> <p>Stat proc (client) </p> <p>statpanel proc </p> <p>Info control (skin) </p> <p>See also: </p> <p>See also:</p> <p>Stat proc (atom) </p> <p>Stat proc (client) </p> <p>statpanel proc </p> <p>Info control (skin) </p> <p>Stat proc (atom)</p> <p>Stat proc (client) </p> <p>statpanel proc </p> <p>Info control (skin) </p> <p>Stat proc (client)</p> <p>statpanel proc </p> <p>Info control (skin) </p> <p>statpanel proc</p> <p>Info control (skin) </p> <p>Info control (skin)</p> <p>Format: </p> <p>stat(Name,Value)</p> <p>Format: </p> <p>Format:</p> <p>stat(Name,Value)</p> <p>Args: </p> <p>Name: the name of the stat line</p> <p>Value: the data to be displayed</p> <p>Args: </p> <p>Args:</p> <p>Name: the name of the stat line</p> <p>Value: the data to be displayed</p> <p>Value: the data to be displayed</p> <p>This is used in a Stat() proc to send a stat line to usr, the person looking at an object. A stat line has an optional name part which must be unique for each stat line (or successive calls will replace previous ones).</p> <p>The stat line gets appended to the current stat panel. The current panel may be changed by using statpanel().</p> <p>If no name is specified and the value is a list, this is the same as calling stat on each item in the list. This can be used (in conjunction with statpanel) to create an inventory panel or something similar.</p>"},{"location":"proc/stat/#_1","title":"Stat","text":"<p>Example:</p> <p>mob/Stat()  stat(\"description\",src.desc)  if(src == usr) stat(src.contents)</p> <p>This example displays the mob's description and inventory all in one panel. The code ensures that only the mob may see his own inventory, but you don't have to worry about that unless you change client.statobj to something other than one's own mob.</p>"},{"location":"proc/statpanel/","title":"Statpanel","text":""},{"location":"proc/statpanel/#statpanel-proc","title":"statpanel proc","text":"<p>See also: </p> <p>Stat proc (atom) </p> <p>Stat proc (client) </p> <p>stat proc </p> <p>Info control (skin) </p> <p>See also: </p> <p>See also:</p> <p>Stat proc (atom) </p> <p>Stat proc (client) </p> <p>stat proc </p> <p>Info control (skin) </p> <p>Stat proc (atom)</p> <p>Stat proc (client) </p> <p>stat proc </p> <p>Info control (skin) </p> <p>Stat proc (client)</p> <p>stat proc </p> <p>Info control (skin) </p> <p>stat proc</p> <p>Info control (skin) </p> <p>Info control (skin)</p> <p>Format: </p> <p>statpanel(Panel,Name,Value)</p> <p>Format: </p> <p>Format:</p> <p>statpanel(Panel,Name,Value)</p> <p>Args: </p> <p>Panel: the name of the stat panel</p> <p>Name: the name of the stat line</p> <p>Value: the data to be displayed</p> <p>Args: </p> <p>Args:</p> <p>Panel: the name of the stat panel</p> <p>Name: the name of the stat line</p> <p>Value: the data to be displayed</p> <p>Name: the name of the stat line</p> <p>Value: the data to be displayed</p> <p>Value: the data to be displayed</p> <p>Returns: </p> <p>If called with just a Panel argument, 1 is returned if the player is  looking at the panel and 0 is returned if not. This may be useful to  avoid the needless overhead of generating output to a panel that is not  visible.</p> <p>Returns: </p> <p>Returns:</p> <p>If called with just a Panel argument, 1 is returned if the player is  looking at the panel and 0 is returned if not. This may be useful to  avoid the needless overhead of generating output to a panel that is not  visible.</p> <p>This is used in a Stat() proc to change the default panel (for subsequent stat lines) or to send one line to the specified panel. Name and Value are both optional. If neither is specified, this simply changes the default panel. Otherwise, the default panel is unchanged and a stat line is appended to Panel.</p>"},{"location":"proc/statpanel/#_1","title":"Statpanel","text":"<p>Example:</p> <p>mob/Stat()  stat(\"description\",src.desc)  if(src == usr) statpanel(\"inventory\",src.contents)</p> <p>This example displays the mob's description in one panel and inventory in another. Only the mob may see his own inventory, but you don't have to worry about that unless you change client.statobj to something other than one's own mob.</p>"},{"location":"proc/step/","title":"Step","text":""},{"location":"proc/step/#step-proc","title":"step proc","text":"<p>See also: </p> <p>get_step proc </p> <p>walk proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step proc </p> <p>walk proc </p> <p>step_size var (movable atom) </p> <p>get_step proc</p> <p>walk proc </p> <p>step_size var (movable atom) </p> <p>walk proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>step(Ref,Dir,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>step(Ref,Dir,Speed=0)</p> <p>Returns: </p> <p>1 on success; 0 otherwise</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref in the direction Dir.</p>"},{"location":"proc/step_away/","title":"Step away","text":""},{"location":"proc/step_away/#step_away-proc","title":"step_away proc","text":"<p>See also: </p> <p>get_step_away proc </p> <p>walk_away proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_away proc </p> <p>walk_away proc </p> <p>step_size var (movable atom) </p> <p>get_step_away proc</p> <p>walk_away proc </p> <p>step_size var (movable atom) </p> <p>walk_away proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>step_away(Ref,Trg,Max=5,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>step_away(Ref,Trg,Max=5,Speed=0)</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref on a path away from location Trg, taking obstacles into account. If Ref is farther than Max steps from Trg, no action will be taken.</p>"},{"location":"proc/step_rand/","title":"Step rand","text":""},{"location":"proc/step_rand/#step_rand-proc","title":"step_rand proc","text":"<p>See also: </p> <p>get_step_rand proc </p> <p>walk_rand proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_rand proc </p> <p>walk_rand proc </p> <p>step_size var (movable atom) </p> <p>get_step_rand proc</p> <p>walk_rand proc </p> <p>step_size var (movable atom) </p> <p>walk_rand proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>step_rand(Ref,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>step_rand(Ref,Speed=0)</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref randomly.</p>"},{"location":"proc/step_to/","title":"Step to","text":""},{"location":"proc/step_to/#step_to-proc","title":"step_to proc","text":"<p>See also: </p> <p>get_step_to proc </p> <p>get_steps_to proc </p> <p>walk_to proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_to proc </p> <p>get_steps_to proc </p> <p>walk_to proc </p> <p>step_size var (movable atom) </p> <p>get_step_to proc</p> <p>get_steps_to proc </p> <p>walk_to proc </p> <p>step_size var (movable atom) </p> <p>get_steps_to proc</p> <p>walk_to proc </p> <p>step_size var (movable atom) </p> <p>walk_to proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>step_to(Ref,Trg,Min=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>step_to(Ref,Trg,Min=0,Speed=0)</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref on a path to the location Trg, taking obstacles into account. If Ref is within Min steps of Trg, no action will be taken. This is also the case if the target is too far away (more than twice world.view steps).</p>"},{"location":"proc/step_towards/","title":"Step towards","text":""},{"location":"proc/step_towards/#step_towards-proc","title":"step_towards proc","text":"<p>See also: </p> <p>get_step_towards proc </p> <p>walk_towards proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_towards proc </p> <p>walk_towards proc </p> <p>step_size var (movable atom) </p> <p>get_step_towards proc</p> <p>walk_towards proc </p> <p>step_size var (movable atom) </p> <p>walk_towards proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>step_towards(Ref,Trg,Speed)</p> <p>Format: </p> <p>Format:</p> <p>step_towards(Ref,Trg,Speed)</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref in the direction of the location Trg.</p>"},{"location":"proc/switch/","title":"Switch","text":""},{"location":"proc/switch/#switch-proc","title":"switch proc","text":"<p>See also: </p> <p>if proc </p> <p>See also: </p> <p>See also:</p> <p>if proc </p> <p>if proc</p> <p>Format: </p> <p>switch(E)</p> <p>if(A1,A2,...) Statement1</p> <p>if(B1,B2,...) Statement1</p> <p>else Statement3</p> <p>Format: </p> <p>Format:</p> <p>switch(E)</p> <p>if(A1,A2,...) Statement1</p> <p>if(B1,B2,...) Statement1</p> <p>else Statement3</p> <p>switch(E)</p> <p>if(A1,A2,...) Statement1</p> <p>if(B1,B2,...) Statement1</p> <p>else Statement3</p> <p>if(B1,B2,...) Statement1</p> <p>else Statement3</p> <p>else Statement3</p> <p>The \"switch\" instruction is a compact notation for a lengthy \"else-if\" chain. The expression E is compared to the values A1, A2, B1, B2, etc. When a match is found, the following statement (or code block) is executed. An optional \"else\" statement is run if no match is found. Once a matching switch condition is found, no further conditions will be tested.</p> <p>The values A1, A2, etc. must be constants. As a convenience, a range of values may be specified in the form: A1 to An.</p> <p>The switch instruction is MUCH more efficient than a lengthy \"else-if\" chain, because the expression E is evaluated only once. The conditional values may be any constant expression, such as a number or text string.</p>"},{"location":"proc/switch/#_1","title":"Switch","text":"<p>Example:</p> <p>switch (2)  if(1) world &lt;&lt; \"ONE\"  if(4) world &lt;&lt; \"FOUR\"  if(2,3) world &lt;&lt; \"TWO or THREE\"  if(5 to 10) world &lt;&lt; \"FIVE to TEN\"  else world &lt;&lt; \"not ONE to TEN\"</p> <p>This outputs:</p> <p>TWO or THREE</p> <p>Note: Currently the compiler does not throw a warning or error if there is a conflict between two different</p> <p>if</p> <p>blocks in a</p> <p>switch</p> <p>, e.g. when you define</p> <p>if(1 to 10)</p> <p>and</p> <p>if(5 to 20)</p> <p>which overlap from 5 to 10. If two different blocks could handle a given value, the choice of which block takes over is not defined.</p> <p>if</p> <p>switch</p> <p>if(1 to 10)</p> <p>if(5 to 20)</p>"},{"location":"proc/tan/","title":"Tan","text":""},{"location":"proc/tan/#tan-proc","title":"tan proc","text":"<p>See also: </p> <p>arctan proc </p> <p>cos proc </p> <p>sin proc </p> <p>turn proc </p> <p>See also: </p> <p>See also:</p> <p>arctan proc </p> <p>cos proc </p> <p>sin proc </p> <p>turn proc </p> <p>arctan proc</p> <p>cos proc </p> <p>sin proc </p> <p>turn proc </p> <p>cos proc</p> <p>sin proc </p> <p>turn proc </p> <p>sin proc</p> <p>turn proc </p> <p>turn proc</p> <p>Format: </p> <p>tan(X)</p> <p>Format: </p> <p>Format:</p> <p>tan(X)</p> <p>Returns: </p> <p>The tangent of X, where X is in degrees.</p> <p>Returns: </p> <p>Returns:</p> <p>The tangent of X, where X is in degrees.</p>"},{"location":"proc/tan/#_1","title":"Tan","text":"<p>Example:</p> <p>mob/verb/test()  usr &lt;&lt; tan(0) // 0  usr &lt;&lt; tan(45) // 1  usr &lt;&lt; tan(90) // infinity (or close enough)</p>"},{"location":"proc/text/","title":"Text","text":""},{"location":"proc/text/#text-proc","title":"text proc","text":"<p>See also: </p> <p>&lt;&lt; operator </p> <p>macros (text) </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; operator </p> <p>macros (text) </p> <p>&lt;&lt; operator</p> <p>macros (text) </p> <p>macros (text)</p> <p>Format: </p> <p>text(FormatText,Args)</p> <p>Format: </p> <p>Format:</p> <p>text(FormatText,Args)</p> <p>Returns: </p> <p>The text with macros arguments substituted.</p> <p>Returns: </p> <p>Returns:</p> <p>The text with macros arguments substituted.</p> <p>Args: </p> <p>FormatText: a text string possibly containing text macros.</p> <p>Args: a set of arguments that corresponds to the number of empty  embedded expressions in FormatText.</p> <p>Args: </p> <p>Args:</p> <p>FormatText: a text string possibly containing text macros.</p> <p>Args: a set of arguments that corresponds to the number of empty  embedded expressions in FormatText.</p> <p>Args: a set of arguments that corresponds to the number of empty  embedded expressions in FormatText.</p> <p>Complicated or lengthy embedded expressions in a text string can sometimes make the string difficult to read. In this case, one can use trailing arguments. The position in which the expression should be substituted should be marked with [] and the expression should then be passed as an argument after the text string.</p>"},{"location":"proc/text/#_1","title":"Text","text":"<p>Example:</p> <p>usr &lt;&lt; text(\"You are [] leagues from home.\",sqrt(usr.x**2 + usr.y**2))</p>"},{"location":"proc/text2ascii/","title":"Text2ascii","text":""},{"location":"proc/text2ascii/#text2ascii-proc","title":"text2ascii proc","text":"<p>See also: </p> <p>ascii2text proc </p> <p>entities (text) </p> <p>Unicode </p> <p>See also: </p> <p>See also:</p> <p>ascii2text proc </p> <p>entities (text) </p> <p>Unicode </p> <p>ascii2text proc</p> <p>entities (text) </p> <p>Unicode </p> <p>entities (text)</p> <p>Unicode </p> <p>Unicode</p> <p>Format: </p> <p>text2ascii(T,pos=1)</p> <p>Format: </p> <p>Format:</p> <p>text2ascii(T,pos=1)</p> <p>Args: </p> <p>T: A text string.</p> <p>pos: The byte position in T to use, starting at 1.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>pos: The byte position in T to use, starting at 1.</p> <p>pos: The byte position in T to use, starting at 1.</p> <p>Returns: </p> <p>A number representing the character's ASCII or Unicode code.</p> <p>Returns: </p> <p>Returns:</p> <p>A number representing the character's ASCII or Unicode code.</p> <p>ASCII codes are numerical values corresponding to keyboard and special characters. Among other things, they are used to represent many symbols in HTML. This proc converts a text string to its corresponding ascii representation.</p>"},{"location":"proc/text2ascii/#_1","title":"Text2ascii","text":"<p>Example:</p> <p>world &lt;&lt; text2ascii(\"A\") // = 65 world &lt;&lt; text2ascii(\"HAPPY\",2) // = 65</p> <p>With  Unicode   , things may get more complicated. DM stores text with UTF-8 encoding, so at this position there might be several bytes strung together to make a single character. The value of</p> <p>pos</p> <p>is in bytes, not characters. When the return value is 128 (0x80) or higher, multiple bytes are used for the charcter. In that case the next character position is not</p> <p>pos + 1</p> <p>like it is for regular text, but you can use</p> <p>pos + length(ascii2text(result))</p> <p>instead. Or, you can determine the byte count from this table:</p> <p>Unicode</p> <p>pos</p> <p>pos + 1</p> <p>pos + length(ascii2text(result))</p> <p>|   Character code   |   Size in bytes   | | --- | --- | |   0 - 0x7F   |   1   | |   0x80 - 0x7FF   |   2   | |   0x800 - 0xFFFF   |   3   | |   0x10000 - 0x10FFFF   |   4   |</p> <p>|   Character code   |   Size in bytes   |</p> <p>Character code  |</p> <p>Size in bytes  | |   0 - 0x7F   |   1   |</p> <p>0 - 0x7F  |</p> <p>1  | |   0x80 - 0x7FF   |   2   |</p> <p>0x80 - 0x7FF  |</p> <p>2  | |   0x800 - 0xFFFF   |   3   |</p> <p>0x800 - 0xFFFF  |</p> <p>3  | |   0x10000 - 0x10FFFF   |   4   |</p> <p>0x10000 - 0x10FFFF  |</p> <p>4  |</p> <p>Alternatively, you can use</p> <p>test2ascii_char()</p> <p>to work with character positions instead of bytes, at a performance cost.</p> <p>test2ascii_char()</p>"},{"location":"proc/text2file/","title":"Text2file","text":""},{"location":"proc/text2file/#text2file-proc","title":"text2file proc","text":"<p>See also: </p> <p>file2text proc </p> <p>shell proc </p> <p>See also: </p> <p>See also:</p> <p>file2text proc </p> <p>shell proc </p> <p>file2text proc</p> <p>shell proc </p> <p>shell proc</p> <p>Format: </p> <p>text2file(Text,File)</p> <p>Format: </p> <p>Format:</p> <p>text2file(Text,File)</p> <p>Args: </p> <p>Text: text to be added to file</p> <p>File: file to be appended to</p> <p>Args: </p> <p>Args:</p> <p>Text: text to be added to file</p> <p>File: file to be appended to</p> <p>File: file to be appended to</p> <p>Returns: </p> <p>1 on success; 0 otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 otherwise.</p> <p>Appends text to a file. If the file does not exist, one will be created.</p> <p>This can be useful when interacting with external applications that read output from a text file. For example, you might have an external program that mimics conversation:</p>"},{"location":"proc/text2file/#_1","title":"Text2file","text":"<p>Example:</p> <p>mob/oracle/verb/tell(T as text)  text2file(T,\"oracle.in\")  shell(\"oracle &lt; oracle.in &gt; oracle.out\")  usr &lt;&lt; file2text(\"oracle.out\")</p>"},{"location":"proc/text2num/","title":"Text2num","text":""},{"location":"proc/text2num/#text2num-proc","title":"text2num proc","text":"<p>See also: </p> <p>istext proc </p> <p>num2text proc </p> <p>See also: </p> <p>See also:</p> <p>istext proc </p> <p>num2text proc </p> <p>istext proc</p> <p>num2text proc </p> <p>num2text proc</p> <p>Format: </p> <p>text2num(T)</p> <p>text2num(T, radix)</p> <p>Format: </p> <p>Format:</p> <p>text2num(T)</p> <p>text2num(T, radix)</p> <p>text2num(T, radix)</p> <p>Args: </p> <p>T: A text string.</p> <p>radix: The radix/base of the number, e.g. 16 for hexadecimal</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>radix: The radix/base of the number, e.g. 16 for hexadecimal</p> <p>radix: The radix/base of the number, e.g. 16 for hexadecimal</p> <p>Returns: </p> <p>A number.</p> <p>Returns: </p> <p>Returns:</p> <p>A number.</p> <p>If T is a text string for a number, return the number. Any non-numeric text following the initial portion will be ignored. If there is no initial numeric portion, the result is null.</p>"},{"location":"proc/text2num/#_1","title":"Text2num","text":"<p>Example:</p> <p>var/number = text2num(\"123\") // = 123</p> <p>The optional radix, which defaults to 10, can be any integer from 2 to 36.</p>"},{"location":"proc/text2path/","title":"Text2path","text":""},{"location":"proc/text2path/#text2path-proc","title":"text2path proc","text":"<p>See also: </p> <p>ispath proc </p> <p>See also: </p> <p>See also:</p> <p>ispath proc </p> <p>ispath proc</p> <p>Format: </p> <p>text2path(T)</p> <p>Format: </p> <p>Format:</p> <p>text2path(T)</p> <p>Args: </p> <p>T: A text string.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>Returns: </p> <p>a type path or null.</p> <p>Returns: </p> <p>Returns:</p> <p>a type path or null.</p>"},{"location":"proc/text2path/#_1","title":"Text2path","text":"<p>Example:</p> <p>var/myturf = text2path(\"/turf/[src.color]\") if(myturf)  src.loc = locate(myturf)</p> <p>T is changed from a text string to the equivalent type path, or null if  there is no such type.</p>"},{"location":"proc/throw/","title":"Throw","text":""},{"location":"proc/throw/#throw-statement","title":"throw statement","text":"<p>See also: </p> <p>try statement </p> <p>Error proc (world) </p> <p>EXCEPTION proc </p> <p>exception </p> <p>See also: </p> <p>See also:</p> <p>try statement </p> <p>Error proc (world) </p> <p>EXCEPTION proc </p> <p>exception </p> <p>try statement</p> <p>Error proc (world) </p> <p>EXCEPTION proc </p> <p>exception </p> <p>Error proc (world)</p> <p>EXCEPTION proc </p> <p>exception </p> <p>EXCEPTION proc</p> <p>exception </p> <p>exception</p> <p>Format: </p> <p>throw Value</p> <p>Format: </p> <p>Format:</p> <p>throw Value</p> <p>Args: </p> <p>Value: Any value, which will be sent to catch() if present.</p> <p>Args: </p> <p>Args:</p> <p>Value: Any value, which will be sent to catch() if present.</p> <p>This keyword throws an exception, which will stop executing the current proc and go to the most recent catch block if one is present. The catch block will receive the thrown value. If there is no try/catch in use, the exception will be passed to</p> <p>world.Error()</p> <p>(if present), then the current proc will end and control will return to the caller.</p> <p>world.Error()</p>"},{"location":"proc/throw/#_1","title":"Throw","text":"<p>Example:</p> <p>try  if(!src.ready) throw EXCEPTION(\"Not ready\")  DoSomething() catch(var/e)  world.log &lt;&lt; \"Exception: [e]\"</p> <p>You can use the</p> <p>EXCEPTION</p> <p>macro to create a new</p> <p>/exception</p> <p>datum, which contains a value or message as well as the file and line number where the exception was created. The thrown value does not have to be an</p> <p>/exception</p> <p>datum; you can throw anything, even null.</p> <p>EXCEPTION</p> <p>/exception</p> <p>/exception</p>"},{"location":"proc/time2text/","title":"Time2text","text":""},{"location":"proc/time2text/#time2text-proc","title":"time2text proc","text":"<p>See also: </p> <p>realtime var (world) </p> <p>timeofday var (world) </p> <p>timezone var (world) </p> <p>timezone var (client) </p> <p>See also: </p> <p>See also:</p> <p>realtime var (world) </p> <p>timeofday var (world) </p> <p>timezone var (world) </p> <p>timezone var (client) </p> <p>realtime var (world)</p> <p>timeofday var (world) </p> <p>timezone var (world) </p> <p>timezone var (client) </p> <p>timeofday var (world)</p> <p>timezone var (world) </p> <p>timezone var (client) </p> <p>timezone var (world)</p> <p>timezone var (client) </p> <p>timezone var (client)</p> <p>Format: </p> <p>time2text(timestamp,format,timezone)</p> <p>Format: </p> <p>Format:</p> <p>time2text(timestamp,format,timezone)</p> <p>Args: </p> <p>timestamp: a time value as obtained from world.realtime or world.timeofday</p> <p>format: a text string describing the output format.</p> <p>timezone: optional offset, in hours, from UTC</p> <p>Args: </p> <p>Args:</p> <p>timestamp: a time value as obtained from world.realtime or world.timeofday</p> <p>format: a text string describing the output format.</p> <p>timezone: optional offset, in hours, from UTC</p> <p>format: a text string describing the output format.</p> <p>timezone: optional offset, in hours, from UTC</p> <p>timezone: optional offset, in hours, from UTC</p> <p>Returns: </p> <p>a text string containing the date and time in the specified format.</p> <p>Returns: </p> <p>Returns:</p> <p>a text string containing the date and time in the specified format.</p> <p>A time value (UTC) is converted to text representing the time. The world's local time is used, unless you specify a</p> <p>timezone</p> <p>argument which will add an offset to UTC.</p> <p>timezone</p> <p>The default format is \"DDD MMM DD hh:mm:ss YYYY\", which produces results such as \"Wed, May 23 15:41:13 2001\". As you can see, the fields in the format text are replaced by components of the date and time. The following list contains all of the recognized fields. Anything else in the format string is inserted directly into the output.</p> <p>YYYY</p> <p>year (2001, 2002, ...)</p> <p>YY</p> <p>year (01, 02, ...)</p> <p>Month</p> <p>January, February, ...</p> <p>MMM</p> <p>Jan, Feb, ...</p> <p>MM</p> <p>number of the month (01, 02, ...)</p> <p>Day</p> <p>Monday, Tuesday, ...</p> <p>DDD</p> <p>Mon, Tue, ...</p> <p>DD</p> <p>day of the month</p> <p>hh</p> <p>hour (00, 01, ... 23)</p> <p>mm</p> <p>minute</p> <p>ss</p> <p>second</p> <p>YYYY</p> <p>year (2001, 2002, ...)</p> <p>YY</p> <p>year (01, 02, ...)</p> <p>Month</p> <p>January, February, ...</p> <p>MMM</p> <p>Jan, Feb, ...</p> <p>MM</p> <p>number of the month (01, 02, ...)</p> <p>Day</p> <p>Monday, Tuesday, ...</p> <p>DDD</p> <p>Mon, Tue, ...</p> <p>DD</p> <p>day of the month</p> <p>hh</p> <p>hour (00, 01, ... 23)</p> <p>mm</p> <p>minute</p> <p>ss</p> <p>second</p> <p>Because world.timeofday is in a range of 0 to 864000, values in this range are treated as a time for the current date. This way time2text() can return accurate results for world.timeofday. Any other values are interpreted as coming from world.realtime and will have the right time and date.</p>"},{"location":"proc/trimtext/","title":"Trimtext","text":""},{"location":"proc/trimtext/#trimtext-proc","title":"trimtext proc","text":"<p>See also: </p> <p>copytext proc </p> <p>See also: </p> <p>See also:</p> <p>copytext proc </p> <p>copytext proc</p> <p>Format: </p> <p>trimtext(Text)</p> <p>Format: </p> <p>Format:</p> <p>trimtext(Text)</p> <p>Returns: </p> <p>Text with whitespace trimmed from both ends</p> <p>Returns: </p> <p>Returns:</p> <p>Text with whitespace trimmed from both ends</p> <p>Args: </p> <p>Text: The text string to trim.</p> <p>Args: </p> <p>Args:</p> <p>Text: The text string to trim.</p> <p>Trims whitespace from both ends of a text string.</p> <p>All  Unicode   whitespace characters are counted, whether they can cause a break or not.</p> <p>Unicode</p>"},{"location":"proc/trunc/","title":"Trunc","text":""},{"location":"proc/trunc/#trunc-proc","title":"trunc proc","text":"<p>See also: </p> <p>fract proc </p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>See also: </p> <p>See also:</p> <p>fract proc </p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>fract proc</p> <p>floor proc </p> <p>ceil proc </p> <p>round proc </p> <p>floor proc</p> <p>ceil proc </p> <p>round proc </p> <p>ceil proc</p> <p>round proc </p> <p>round proc</p> <p>Format: </p> <p>trunc(A)</p> <p>Format: </p> <p>Format:</p> <p>trunc(A)</p> <p>Returns: </p> <p>truncated A</p> <p>Returns: </p> <p>Returns:</p> <p>truncated A</p> <p>Args: </p> <p>A: A number.</p> <p>Args: </p> <p>Args:</p> <p>A: A number.</p> <p>Returns the integer part of the number A. That is, this rounds toward 0 to an integer.</p>"},{"location":"proc/trunc/#_1","title":"Trunc","text":"<p>Example:</p> <p>usr &lt;&lt; trunc(1.45) // outputs 1</p> <p>usr &lt;&lt; trunc(-1.45) // outputs -1</p>"},{"location":"proc/try/","title":"Try","text":""},{"location":"proc/try/#try-and-catch-statements","title":"try and catch statements","text":"<p>See also: </p> <p>Error proc (world) </p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>exception </p> <p>See also: </p> <p>See also:</p> <p>Error proc (world) </p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>exception </p> <p>Error proc (world)</p> <p>throw statement </p> <p>EXCEPTION proc </p> <p>exception </p> <p>throw statement</p> <p>EXCEPTION proc </p> <p>exception </p> <p>EXCEPTION proc</p> <p>exception </p> <p>exception</p> <p>The try and catch keywords are used for error handling. Any code that runs inside of a try block will, if an error happens or the throw keyword is used, stop executing and jump to the matching catch block. (This is also true of indirect proc calls. If you call a proc from inside a try block, any errors in that proc will be sent to the catch.)</p> <p>For every try there must be a catch, even if it does nothing. The catch block takes an optional value that can receive the error.</p>"},{"location":"proc/try/#_1","title":"Try","text":"<p>Example:</p> <p>var/a = 2 try  a += \"Hello\" // will throw a type mismatch error catch(var/exception/e)  // file and line info is available if you enable debugging  world.log &lt;&lt; \"[e] on [e.file]:[e.line]\" world &lt;&lt; \"a is [a]\"</p> <p>Because the value in the catch keyword is optional, you can simply use the catch keyword alone. It is also not necessary to include any code under the catch keyword, if the error is meant to be ignored. (However, it is not usually a good idea to ignore errors.)</p> <p>The throw keyword is used if you want to throw an error deliberately. When you use throw, the error thrown does not have to be an /exception datum, but can be anything you like.</p>"},{"location":"proc/turn/","title":"Turn","text":""},{"location":"proc/turn/#turn-proc","title":"turn proc","text":"<p>See also: </p> <p>Turn proc (icon) </p> <p>dir var (atom) </p> <p>See also: </p> <p>See also:</p> <p>Turn proc (icon) </p> <p>dir var (atom) </p> <p>Turn proc (icon)</p> <p>dir var (atom) </p> <p>dir var (atom)</p> <p>Format: </p> <p>turn(Dir, Angle)</p> <p>Format: </p> <p>Format:</p> <p>turn(Dir, Angle)</p> <p>Args: </p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST.</p> <p>Angle: An angle in degrees (counterclockwise rotation).</p> <p>Args: </p> <p>Args:</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST.</p> <p>Angle: An angle in degrees (counterclockwise rotation).</p> <p>Angle: An angle in degrees (counterclockwise rotation).</p> <p>Returns: </p> <p>The rotated direction.</p> <p>Returns: </p> <p>Returns:</p> <p>The rotated direction.</p> <p>This proc can also be applied to an  icon   or a  matrix   .</p> <p>icon matrix</p>"},{"location":"proc/turn/#_1","title":"Turn","text":"<p>Example:</p> <p>var/dir dir = turn(NORTH, 90) // dir = west dir = turn(dir, -90) // dir = north dir = turn(dir, 45) // dir = northwest</p> <p>Only multiples of 45 are allowed for angles. If an invalid angle is used, it will be treated as the closest multiple of 45 to 0.</p> <p>If the supplied Dir is invalid, such as 0, or something like UP or DOWN, the result is a random direction unless the angle is also 0.</p>"},{"location":"proc/typesof/","title":"Typesof","text":""},{"location":"proc/typesof/#typesof-proc","title":"typesof proc","text":"<p>See also: </p> <p>istype proc </p> <p>locate proc </p> <p>See also: </p> <p>See also:</p> <p>istype proc </p> <p>locate proc </p> <p>istype proc</p> <p>locate proc </p> <p>locate proc</p> <p>Format: </p> <p>typesof(Type1,Type2,...)</p> <p>Format: </p> <p>Format:</p> <p>typesof(Type1,Type2,...)</p> <p>Returns: </p> <p>A list of all types that are derived from the specified \"base\" types, including the base types themselves.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of all types that are derived from the specified \"base\" types, including the base types themselves.</p> <p>Args: </p> <p>The \"base\" types.</p> <p>Args: </p> <p>Args:</p> <p>The \"base\" types.</p>"},{"location":"proc/typesof/#_1","title":"Typesof","text":"<p>Example:</p> <p>obj/fruit  apple  peach  mango var/list/fruit_types = typesof(/obj/fruit)</p> <p>In this example, fruit_types is initialized to contain /obj/fruit, /obj/fruit/apple, /obj/fruit/peach, and /obj/fruit/mango.</p> <p>This procedure can also be used to list procs and verbs.</p>"},{"location":"proc/typesof/#_2","title":"Typesof","text":"<p>Example:</p> <p>mob/admin_commands/verb  shutdown_world()  world.Del()  reboot_world()  world.Reboot()</p> <p>//for testing mob/verb/add_admin()  verbs += typesof(/mob/admin_commands/verb) mob/verb/remove_admin()  verbs -= typesof(/mob/admin_commands/verb)</p>"},{"location":"proc/uppertext/","title":"Uppertext","text":""},{"location":"proc/uppertext/#uppertext-proc","title":"uppertext proc","text":"<p>See also: </p> <p>lowertext proc </p> <p>See also: </p> <p>See also:</p> <p>lowertext proc </p> <p>lowertext proc</p> <p>Format: </p> <p>uppertext(T)</p> <p>Format: </p> <p>Format:</p> <p>uppertext(T)</p> <p>Returns: </p> <p>A capitalized text string.</p> <p>Returns: </p> <p>Returns:</p> <p>A capitalized text string.</p> <p>Args: </p> <p>T: A text string.</p> <p>Args: </p> <p>Args:</p> <p>T: A text string.</p> <p>Capitalize all of the characters of T.</p>"},{"location":"proc/uppertext/#_1","title":"Uppertext","text":"<p>Example:</p> <p>U = uppertext(\"hi there\") // = \"HI THERE\"</p>"},{"location":"proc/url_decode/","title":"Url decode","text":""},{"location":"proc/url_decode/#url_decode-proc","title":"url_decode proc","text":"<p>See also: </p> <p>Topic proc (client) </p> <p>url_encode proc </p> <p>See also: </p> <p>See also:</p> <p>Topic proc (client) </p> <p>url_encode proc </p> <p>Topic proc (client)</p> <p>url_encode proc </p> <p>url_encode proc</p> <p>Format: </p> <p>url_decode(UrlText)</p> <p>Format: </p> <p>Format:</p> <p>url_decode(UrlText)</p> <p>Args: </p> <p>UrlText: text to be \"unescaped\"</p> <p>Args: </p> <p>Args:</p> <p>UrlText: text to be \"unescaped\"</p> <p>Returns: </p> <p>unescaped text</p> <p>Returns: </p> <p>Returns:</p> <p>unescaped text</p> <p>Most non-alphanumeric characters are converted to another format in a URL. To send these characters literally, they must be \"escaped\".</p> <p>The  <code>url_decode()</code>   instruction takes a text string containing such escaped symbols and turns them into their literal counterparts. Usually this is done for you automatically in  <code>Topic()</code>   . The more useful function is  <code>url_encode()</code>   which does the reverse.</p> <p><code>url_decode()</code> <code>Topic()</code> <code>url_encode()</code></p>"},{"location":"proc/url_encode/","title":"Url encode","text":""},{"location":"proc/url_encode/#url_encode-proc","title":"url_encode proc","text":"<p>See also: </p> <p>url_decode proc </p> <p>See also: </p> <p>See also:</p> <p>url_decode proc </p> <p>url_decode proc</p> <p>Format: </p> <p>url_encode(PlainText, format=0)</p> <p>Format: </p> <p>Format:</p> <p>url_encode(PlainText, format=0)</p> <p>Args: </p> <p>PlainText: text to be URL \"escaped\"</p> <p>format: 0 to treat PlainText as a query string, 1 to treat it as a full URL</p> <p>Args: </p> <p>Args:</p> <p>PlainText: text to be URL \"escaped\"</p> <p>format: 0 to treat PlainText as a query string, 1 to treat it as a full URL</p> <p>format: 0 to treat PlainText as a query string, 1 to treat it as a full URL</p> <p>Returns: </p> <p>escaped text</p> <p>Returns: </p> <p>Returns:</p> <p>escaped text</p> <p>Special characters such as spaces are not used literally in URLs. If you want to ensure that an entire text string is sent literally, you can \"escape\" those characters. For example, a double quote (ASCII 34) is produced by the code  <code>%22</code>   , where 22 is hexadecimal for 34.</p> <p><code>%22</code></p> <p>The  <code>url_encode()</code>   instruction does this for you automatically. Using  <code>format=1</code>   will treat the URL as already encoded and only re-encode characters that don't belong in the result. Otherwise PlainText is treated as part of a query string; in this case spaces are converted to  <code>+</code>   instead of  <code>%20</code>   , and most characters are escaped.</p> <p><code>url_encode()</code> <code>format=1</code> <code>+</code> <code>%20</code></p>"},{"location":"proc/url_encode/#_1","title":"Url encode","text":"<p>Example:</p> <p>mob/verb/Private(M as mob in players, T as text)  if(!client || !M || !M.client || !T) return  usr &lt;&lt; \"[To  [M.name]   ] [T]\"  M &lt;&lt; \"[From  [name]   ] [T]\"</p> <p>[M.name] [name]</p>"},{"location":"proc/var/","title":"Var","text":""},{"location":"proc/var/#vars-procs","title":"vars (procs)","text":"<p>See also: </p> <p>procs </p> <p>See also: </p> <p>See also:</p> <p>procs </p> <p>procs</p> <p>Built-in proc vars:</p> <p>proc/var</p> <p>. </p> <p>args </p> <p>src </p> <p>usr </p> <p>proc/var</p> <p>. </p> <p>args </p> <p>src </p> <p>usr </p> <p>.</p> <p>args </p> <p>src </p> <p>usr </p> <p>args</p> <p>src </p> <p>usr </p> <p>src</p> <p>usr </p> <p>usr</p>"},{"location":"proc/view/","title":"View","text":""},{"location":"proc/view/#view-proc","title":"view proc","text":"<p>See also: </p> <p>&lt;&lt; output operator </p> <p>hearers </p> <p>oview proc </p> <p>range proc </p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>See also: </p> <p>See also:</p> <p>&lt;&lt; output operator </p> <p>hearers </p> <p>oview proc </p> <p>range proc </p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>&lt;&lt; output operator</p> <p>hearers </p> <p>oview proc </p> <p>range proc </p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>hearers</p> <p>oview proc </p> <p>range proc </p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>oview proc</p> <p>range proc </p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>range proc</p> <p>see_in_dark var (mob) </p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>see_in_dark var (mob)</p> <p>see_infrared var (mob) </p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>see_infrared var (mob)</p> <p>see_invisible var (mob) </p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>see_invisible var (mob)</p> <p>sight var (mob) </p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>sight var (mob)</p> <p>view var (client) </p> <p>view var (world) </p> <p>viewers </p> <p>view var (client)</p> <p>view var (world) </p> <p>viewers </p> <p>view var (world)</p> <p>viewers </p> <p>viewers</p> <p>Format: </p> <p>view(Dist=5,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>view(Dist=5,Center=usr)</p> <p>Returns: </p> <p>A list of visible objects within Dist tiles of Center.</p> <p>Returns: </p> <p>Returns:</p> <p>A list of visible objects within Dist tiles of Center.</p> <p>Args: </p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Args: </p> <p>Args:</p> <p>Dist: A number.</p> <p>Center: An object on the map.</p> <p>Center: An object on the map.</p> <p>A Dist of 0 includes Center, the contents of Center (normally usr.contents), its location (normally the turf a mob is standing on), and any other contents of that location. A value of 1 extends the region to the neighboring squares on the map and so on. Both arguments are optional and may be passed in any order.</p> <p>The default range is actually controlled by the size of the map viewport size, which is configured with  <code>world.view</code>   . Since the default value of that variable is 5, the default range is also 5. You may use any valid view size, so an explicit view size such as \"11x17\" is also valid.</p> <p><code>world.view</code></p>"},{"location":"proc/view/#_1","title":"View","text":"<p>Example:</p> <p>view() &lt;&lt; \"to all in sight of [usr]\" view(src) &lt;&lt; \"to all in sight of [src]\" view(1,src.loc) &lt;&lt; \"to all within reach of [src]\"</p> <p>Be aware of the following distinctions:</p> <p>view(usr) //objects that usr can see view(usr.loc) //objects visible from usr's position view(usr.client) //objects visible to player</p> <p>In many cases, the three different statements could produce the same result, but they are not identical in general. For example, the first statement takes into account the visual capabilities of usr, which might include such things as the ability to see in the dark or to see invisible objects.</p> <p>The second statement, since it is from a non-mob would just do a plain visibility calculation with no special visual capabilities. In many cases, you would want to use viewers() or hearers() instead.</p> <p>The third statement produces a list of visible objects as the player sees things, which might be different than how the mob sees things if  <code>client.eye</code>   and  <code>client.mob</code>   are different.</p> <p><code>client.eye</code> <code>client.mob</code></p>"},{"location":"proc/viewers/","title":"Viewers","text":""},{"location":"proc/viewers/#viewers","title":"viewers","text":"<p>See also: </p> <p>hearers </p> <p>oviewers </p> <p>view proc </p> <p>See also: </p> <p>See also:</p> <p>hearers </p> <p>oviewers </p> <p>view proc </p> <p>hearers</p> <p>oviewers </p> <p>view proc </p> <p>oviewers</p> <p>view proc </p> <p>view proc</p> <p>Format: </p> <p>viewers(Depth=world.view,Center=usr)</p> <p>Format: </p> <p>Format:</p> <p>viewers(Depth=world.view,Center=usr)</p> <p>This is just like  <code>view()</code>   , but it is a list of mobs that can see the center object, rather than a list of objects visible to the center object.</p> <p><code>view()</code></p>"},{"location":"proc/walk/","title":"Walk","text":""},{"location":"proc/walk/#walk-proc","title":"walk proc","text":"<p>See also: </p> <p>get_step proc </p> <p>step proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step proc </p> <p>step proc </p> <p>step_size var (movable atom) </p> <p>get_step proc</p> <p>step proc </p> <p>step_size var (movable atom) </p> <p>step proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>walk(Ref,Dir,Lag=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>walk(Ref,Dir,Lag=0,Speed=0)</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST, or 0 to halt.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST, or 0 to halt.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Dir: One of NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST,  SOUTHWEST, or 0 to halt.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref in the direction Dir continuously. Each step will be preceded by Lag time of inactivity.</p> <p>A call to a walking function aborts any previous walking function called on Ref. To halt walking, call walk(Ref,0).</p> <p>This function returns immediately, but continues to process in the background.</p>"},{"location":"proc/walk_away/","title":"Walk away","text":""},{"location":"proc/walk_away/#walk_away-proc","title":"walk_away proc","text":"<p>See also: </p> <p>get_step_away proc </p> <p>step_away proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_away proc </p> <p>step_away proc </p> <p>step_size var (movable atom) </p> <p>get_step_away proc</p> <p>step_away proc </p> <p>step_size var (movable atom) </p> <p>step_away proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>walk_away(Ref,Trg,Max=5,Lag=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>walk_away(Ref,Trg,Max=5,Lag=0,Speed=0)</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Max: The maximum distance between Ref and Targ before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Moves Ref on a path away from Trg continuously, taking obstacles into account. Each step will be preceded by Lag time of inactivity. If Ref is farther than Max steps from Trg, no action will be taken.</p> <p>A call to a walking function aborts any previous walking function called on Ref. To halt walking, call walk(Ref,0).</p> <p>This function returns immediately, but continues to process in the background.</p>"},{"location":"proc/walk_rand/","title":"Walk rand","text":""},{"location":"proc/walk_rand/#walk_rand-proc","title":"walk_rand proc","text":"<p>See also: </p> <p>get_step_rand proc </p> <p>step_rand proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_rand proc </p> <p>step_rand proc </p> <p>step_size var (movable atom) </p> <p>get_step_rand proc</p> <p>step_rand proc </p> <p>step_size var (movable atom) </p> <p>step_rand proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>walk_rand(Ref,Lag=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>walk_rand(Ref,Lag=0,Speed=0)</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Moves Ref randomly. Each step will be preceded by Lag time of inactivity.</p> <p>A call to a walking function aborts any previous walking function called on Ref. To halt walking, call walk(Ref,0).</p> <p>This function returns immediately, but continues to process in the background.</p>"},{"location":"proc/walk_to/","title":"Walk to","text":""},{"location":"proc/walk_to/#walk_to-proc","title":"walk_to proc","text":"<p>See also: </p> <p>get_step_to proc </p> <p>step_to proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_to proc </p> <p>step_to proc </p> <p>step_size var (movable atom) </p> <p>get_step_to proc</p> <p>step_to proc </p> <p>step_size var (movable atom) </p> <p>step_to proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>walk_to(Ref,Trg,Min=0,Lag=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>walk_to(Ref,Trg,Min=0,Lag=0,Speed=0)</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Min: The minimum distance between Ref and Trg before movement halts.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref on a path to Trg continuously, taking obstacles into account. Each step will be preceded by Lag time of inactivity. If Ref is within Min steps of Trg, no action will be taken. This is also true if the target is too far away (more than twice world.view steps).</p> <p>A call to a walking function aborts any previous walking function called on Ref. To halt walking, call walk(Ref,0).</p> <p>This function returns immediately, but continues to process in the background.</p>"},{"location":"proc/walk_towards/","title":"Walk towards","text":""},{"location":"proc/walk_towards/#walk_towards-proc","title":"walk_towards proc","text":"<p>See also: </p> <p>get_step_towards proc </p> <p>step_towards proc </p> <p>step_size var (movable atom) </p> <p>See also: </p> <p>See also:</p> <p>get_step_towards proc </p> <p>step_towards proc </p> <p>step_size var (movable atom) </p> <p>get_step_towards proc</p> <p>step_towards proc </p> <p>step_size var (movable atom) </p> <p>step_towards proc</p> <p>step_size var (movable atom) </p> <p>step_size var (movable atom)</p> <p>Format: </p> <p>walk_towards(Ref,Trg,Lag=0,Speed=0)</p> <p>Format: </p> <p>Format:</p> <p>walk_towards(Ref,Trg,Lag=0,Speed=0)</p> <p>Args: </p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Args: </p> <p>Args:</p> <p>Ref: A mob or obj.</p> <p>Trg: An object on the map.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Trg: An object on the map.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Lag: Delay in world ticks between movement.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Speed: Speed to move, in pixels. 0 uses Ref.step_size.</p> <p>Move Ref in the direction of Trg continuously. Each step will be preceded by Lag time of inactivity.</p> <p>A call to a walking function aborts any previous walking function called on Ref. To halt walking, call walk(Ref,0).</p> <p>This function returns immediately, but continues to process in the background.</p>"},{"location":"proc/while/","title":"While","text":""},{"location":"proc/while/#while-proc","title":"while proc","text":"<p>See also: </p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>See also: </p> <p>See also:</p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>break statement</p> <p>continue statement </p> <p>do proc </p> <p>for loop proc </p> <p>continue statement</p> <p>do proc </p> <p>for loop proc </p> <p>do proc</p> <p>for loop proc </p> <p>for loop proc</p> <p>Format: </p> <p>while( E ) Statement</p> <p>Format: </p> <p>Format:</p> <p>while( E ) Statement</p> <p>If E is true (non-zero) execute Statement. Continue testing E and doing the while block until E becomes false (zero).</p> <p>Statement may be a block of code or a single statement.</p>"},{"location":"proc/while/#_1","title":"While","text":"<p>Example:</p> <p>var/i = 3 while(i)  world &lt;&lt; i--</p> <p>This outputs:</p> <p>3 2 1</p>"},{"location":"proc/winclone/","title":"Winclone","text":""},{"location":"proc/winclone/#winclone-proc","title":"winclone proc","text":"<p>See also: </p> <p>winexists proc </p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>See also: </p> <p>See also:</p> <p>winexists proc </p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>winexists proc</p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>winget proc</p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>winset proc</p> <p>winshow proc </p> <p>User interface skins </p> <p>winshow proc</p> <p>User interface skins </p> <p>User interface skins</p> <p>Format: </p> <p>winclone(player, window_name, clone_name)</p> <p>Format: </p> <p>Format:</p> <p>winclone(player, window_name, clone_name)</p> <p>Args: </p> <p>player: A mob or client.</p> <p>window_name: The name of a window, pane, menu, or macro set in the world's skin file.</p> <p>clone_name: The name of the new window, pane, menu, or macro set to create.</p> <p>Args: </p> <p>Args:</p> <p>player: A mob or client.</p> <p>window_name: The name of a window, pane, menu, or macro set in the world's skin file.</p> <p>clone_name: The name of the new window, pane, menu, or macro set to create.</p> <p>window_name: The name of a window, pane, menu, or macro set in the world's skin file.</p> <p>clone_name: The name of the new window, pane, menu, or macro set to create.</p> <p>clone_name: The name of the new window, pane, menu, or macro set to create.</p> <p>Creates a clone of a window, pane, menu, or macro set that exists in the world's skin file. The original object as it exists in the skin file (not its current state) is used as a template to build the clone. The clone will exist only for the player you choose.</p>"},{"location":"proc/winclone/#_1","title":"Winclone","text":"<p>Example:</p> <p>winset(usr, \"templatewindow\", \"clonedwindow\")</p> <p>If a window is not visible by default, it will have to be shown with</p> <p>winset()</p> <p>or</p> <p>winshow()</p> <p>. A pane may be shown by using it in a Child or Tab control. Menus or macros must be assigned to a window with</p> <p>winset()</p> <p>before they will work.</p> <p>winset()</p> <p>winshow()</p> <p>winset()</p> <p>If window_name is \"window\", \"pane\", \"menu\", or \"macro\", and the skin file does not have a control of that name already, the proc will create a new control of that type from scratch.</p>"},{"location":"proc/winclone/#_2","title":"Winclone","text":"<p>Example:</p> <p>winclone(usr, \"menu\", \"newmenu\") winset(usr, \"newmenu_file\", \"parent=newmenu;name=File\") winset(usr, \"newmenu_quit\", \"parent=newmenu_file;name=Quit;command=.quit\")</p> <p>A new window is invisible by default. For windows and panes, you should give them a size with</p> <p>winset()</p> <p>before adding any controls so you can set their anchors properly.</p> <p>winset()</p>"},{"location":"proc/winclone/#_3","title":"Winclone","text":"<p>Example:</p> <p>// Create the pane winclone(usr, \"pane\", \"newpane\") // Give it a size so we can figure out where to put controls winset(usr, \"newpane\", \"size=100x100\") // Add controls winset(usr, \"newpane_label\", \\  \"parent=newpane;pos=0,0;size=100x100;anchor1=0,0;anchor2=100,100\") // Put the pane in a child control where it can be seen winset(usr, \"a_child\", \"left=newpane\") usr &lt;&lt; output(\"New label\", \"newpane_label\")</p> <p>Once a clone is created, it can be deleted via a</p> <p>winset()</p> <p>call:</p> <p>winset()</p>"},{"location":"proc/winclone/#_4","title":"Winclone","text":"<p>Example:</p> <p>winset(usr, \"clonedwindow\", \"parent=none\")</p>"},{"location":"proc/winexists/","title":"Winexists","text":""},{"location":"proc/winexists/#winexists-proc","title":"winexists proc","text":"<p>See also: </p> <p>winclone proc </p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>See also: </p> <p>See also:</p> <p>winclone proc </p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>winclone proc</p> <p>winget proc </p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>winget proc</p> <p>winset proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>winset proc</p> <p>winshow proc </p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>winshow proc</p> <p>User interface skins </p> <p>type parameter (skin) </p> <p>User interface skins</p> <p>type parameter (skin) </p> <p>type parameter (skin)</p> <p>Format: </p> <p>winexists(player, control_id)</p> <p>Format: </p> <p>Format:</p> <p>winexists(player, control_id)</p> <p>Args: </p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>Args: </p> <p>Args:</p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>Tells if a control exists and if so, what type it is. The return value is an empty string if the control does not exist, but otherwise it is the type of control.</p> <p>This proc will not tell you if a control has been defined in the skin file but is not in use yet.</p> <p>Because the client must be contacted to get this information, winexists() will sleep the current proc.</p>"},{"location":"proc/winget/","title":"Winget","text":""},{"location":"proc/winget/#winget-proc","title":"winget proc","text":"<p>See also: </p> <p>winexists proc </p> <p>winset proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>See also: </p> <p>See also:</p> <p>winexists proc </p> <p>winset proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winexists proc</p> <p>winset proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winset proc</p> <p>User interface skins </p> <p>parameters (skin) </p> <p>User interface skins</p> <p>parameters (skin) </p> <p>parameters (skin)</p> <p>Format: </p> <p>winget(player, control_id, params)</p> <p>Format: </p> <p>Format:</p> <p>winget(player, control_id, params)</p> <p>Args: </p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: The name of a parameter to read, or a semicolon-separated list of parameters</p> <p>Args: </p> <p>Args:</p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: The name of a parameter to read, or a semicolon-separated list of parameters</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: The name of a parameter to read, or a semicolon-separated list of parameters</p> <p>params: The name of a parameter to read, or a semicolon-separated list of parameters</p> <p>Retrieves info from a player about the current state of their skin. If</p> <p>control_id</p> <p>and</p> <p>params</p> <p>are each just a single value, then the return value will be a simple string with the value of that parameter. If</p> <p>control_id</p> <p>or</p> <p>params</p> <p>is a semicolon-separated list like the kind used in</p> <p>list2params()</p> <p>, then the result will be in a similar format, and can be converted to a list form using</p> <p>params2list()</p> <p>.</p> <p>control_id</p> <p>params</p> <p>control_id</p> <p>params</p> <p>list2params()</p> <p>params2list()</p> <p>The</p> <p>control_id</p> <p>can be a window name, or in a</p> <p>\"[window].[control]\"</p> <p>format, or just the control's ID itself as long as it is unique. Another valid form is</p> <p>\":[type]\"</p> <p>which selects the default control of that type, e.g.</p> <p>\":map\"</p> <p>for the main map. As mentioned above, you can retrieve info on more than one control at once by separating them with semicolons, like</p> <p>\"button1;button2\"</p> <p>.</p> <p>control_id</p> <p>\"[window].[control]\"</p> <p>\":[type]\"</p> <p>\":map\"</p> <p>\"button1;button2\"</p>"},{"location":"proc/winget/#_1","title":"Winget","text":"<p>Example:</p> <p>usr &lt;&lt; \"mainwindow.is-visible = [winget(usr, \"mainwindow\", \"is-visible\")]\" usr &lt;&lt; \"\\nOther params:\" usr &lt;&lt; winget(usr, \"mainwindow\", \"pos;is-maximized\") usr &lt;&lt; \"\\nButtons:\" usr &lt;&lt; winget(usr, \"button1;button2\", \"is-checked\")</p> <p>This outputs:</p> <p>mainwindow.is-visible = true</p> <p>Other params: pos=0x0;is-maximized=true</p> <p>Buttons: button1.is-checked=true;button2.is-checked=false</p> <p>If the returned result is actual text for any parameters, the single quote or double quote characters may be escaped with a backslash. An actual backslash will also be escaped with a backslash.</p> <p>You can also use a special wildcard format to retrieve info about all the controls in a window, menu, or macro set. If control_id is</p> <p>\"mainwindow.*\"</p> <p>for instance, then any control that is part of</p> <p>mainwindow</p> <p>\u2014and</p> <p>mainwindow</p> <p>itself\u2014is included in the result if it has the parameter(s) you're looking for. Use</p> <p>params2list()</p> <p>to interpret the result.</p> <p>\"mainwindow.*\"</p> <p>mainwindow</p> <p>mainwindow</p> <p>params2list()</p> <p>Note: Because the client must be contacted to get this information,</p> <p>winget()</p> <p>will sleep the current proc.</p> <p>winget()</p>"},{"location":"proc/winget/#_2","title":"Winget","text":"<p>Special wingets</p> <p>Calling</p> <p>winget()</p> <p>with a blank or null</p> <p>control_id</p> <p>can return some values that belong to the client as a whole, not to specific controls. They can also be used for  embedded wingets   .</p> <p>winget()</p> <p>control_id</p> <p>embedded wingets</p> <p>focus</p> <p>The full ID of the control, if any, that currently has keyboard focus.</p> <p>windows</p> <p>The IDs of all windows, separated by semicolons.</p> <p>panes</p> <p>The IDs of all panes, separated by semicolons.</p> <p>menus</p> <p>The IDs of all menus, separated by semicolons.</p> <p>macros</p> <p>The IDs of all macro sets, separated by semicolons.</p> <p>sound</p> <p>True if sounds are enabled.</p> <p>hwmode</p> <p>True if the map displays in hardware rendering mode.</p> <p>url</p> <p>The URL the client is connected to in</p> <p>IP:port</p> <p>form. The port is 0 if connected to a local .dmb file, and either an empty string or null is returned if Dream Seeker is not connected at all.</p> <p>num-lock</p> <p>True if Num Lock is on.</p> <p>caps-lock</p> <p>True if Caps Lock is on.</p> <p>scroll-lock</p> <p>True if Scroll Lock is on.</p> <p>focus</p> <p>The full ID of the control, if any, that currently has keyboard focus.</p> <p>windows</p> <p>The IDs of all windows, separated by semicolons.</p> <p>panes</p> <p>The IDs of all panes, separated by semicolons.</p> <p>menus</p> <p>The IDs of all menus, separated by semicolons.</p> <p>macros</p> <p>The IDs of all macro sets, separated by semicolons.</p> <p>sound</p> <p>True if sounds are enabled.</p> <p>hwmode</p> <p>True if the map displays in hardware rendering mode.</p> <p>url</p> <p>The URL the client is connected to in</p> <p>IP:port</p> <p>form. The port is 0 if connected to a local .dmb file, and either an empty string or null is returned if Dream Seeker is not connected at all.</p> <p>IP:port</p> <p>num-lock</p> <p>True if Num Lock is on.</p> <p>caps-lock</p> <p>True if Caps Lock is on.</p> <p>scroll-lock</p> <p>True if Scroll Lock is on.</p>"},{"location":"proc/winset/","title":"Winset","text":""},{"location":"proc/winset/#winset-proc","title":"winset proc","text":"<p>See also: </p> <p>winclone proc </p> <p>winexists proc </p> <p>winget proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>See also: </p> <p>See also:</p> <p>winclone proc </p> <p>winexists proc </p> <p>winget proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winclone proc</p> <p>winexists proc </p> <p>winget proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winexists proc</p> <p>winget proc </p> <p>winshow proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winget proc</p> <p>winshow proc </p> <p>User interface skins </p> <p>parameters (skin) </p> <p>winshow proc</p> <p>User interface skins </p> <p>parameters (skin) </p> <p>User interface skins</p> <p>parameters (skin) </p> <p>parameters (skin)</p> <p>Format: </p> <p>winset(player, control_id, params)</p> <p>Format: </p> <p>Format:</p> <p>winset(player, control_id, params)</p> <p>Args: </p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: A text string with parameters to set, in the format returned by</p> <p>list2params()</p> <p>;  OR   an associative list.</p> <p>Args: </p> <p>Args:</p> <p>player: A mob or client.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: A text string with parameters to set, in the format returned by</p> <p>list2params()</p> <p>;  OR   an associative list.</p> <p>control_id: The unique ID of a control in the player's skin.</p> <p>params: A text string with parameters to set, in the format returned by</p> <p>list2params()</p> <p>;  OR   an associative list.</p> <p>params: A text string with parameters to set, in the format returned by</p> <p>list2params()</p> <p>;  OR   an associative list.</p> <p>list2params()</p> <p>OR</p> <p>Sets parameters for a player's skin. The parameter list can be created by making a list and using</p> <p>list2params()</p> <p>, or it can be done manually by just using a string like</p> <p>\"is-visible=true;text-color=#f00\"</p> <p>. You can also just use a list directly, which will be passed to</p> <p>list2params()</p> <p>internally.</p> <p>list2params()</p> <p>\"is-visible=true;text-color=#f00\"</p> <p>list2params()</p> <p>The</p> <p>control_id</p> <p>can be a window name, or in a</p> <p>\"[window].[control]\"</p> <p>format, or just the control ID as long as it is unique. In some special cases it can also be null. Another valid form is</p> <p>\":[type]\"</p> <p>which selects the default control of that type, e.g.</p> <p>\":map\"</p> <p>for the main map.</p> <p>control_id</p> <p>\"[window].[control]\"</p> <p>\":[type]\"</p> <p>\":map\"</p> <p>If you want to use a text string that may include spaces, surround the string with double quotes and escape them using a backslash, e.g.</p> <p>\"text=\\\"This is some text.\\\"\"</p> <p>. Backslashes can also be used by preceding them with another backslash. For filenames, use single quotes around the file. Sometimes escapement may need to go several levels deep; for example to set up an input control with a default say command, you will need to escape it twice:</p> <p>\"text=\\\"This is some text.\\\"\"</p> <p>Desired command:</p> <p>say \"</p> <p>Escaped form with quotes:</p> <p>\"  say \\\"   \"</p> <p>Final form:</p> <p>\\\"say \\\\\"\\\"</p> <p>winset(usr, \"mainwindow.input\", \"command=  \\\"say \\\\\"\\\"   \")</p> <p>say \"</p> <p>\"  say \\\"   \"</p> <p>say \\\"</p> <p>\\\"say \\\\\"\\\"</p> <p>winset(usr, \"mainwindow.input\", \"command=  \\\"say \\\\\"\\\"   \")</p> <p>winset(usr, \"mainwindow.input\", \"command=  \\\"say \\\\\"\\\"   \")</p> <p>\\\"say \\\\\"\\\"</p> <p>You can set more than one control's parameters at once by leaving the</p> <p>control_id</p> <p>argument null, and including the control as part of the parameter list:</p> <p>control_id</p> <p>winset(usr, null,\\  \"mainwindow.output.background-color=#ffffff;mainwindow.input.background-color=#ffffff\")</p>"},{"location":"proc/winset/#_1","title":"Winset","text":"<p>Special winsets</p> <p>Some \"global\" winset options will let you change things that affect the client as a whole, not just specific controls.</p> <p>You can reset the skin to its beginning state, removing all runtime-created controls and windows, by calling</p> <p>winset(player, null, \"reset=true\")</p> <p>.</p> <p>winset(player, null, \"reset=true\")</p> <p>Another use for</p> <p>winset()</p> <p>is to send commands to the client that normally can only run from there, like</p> <p>.profile</p> <p>or</p> <p>.quit</p> <p>. To do this, leave the</p> <p>control_id</p> <p>argument null, and just use a parameter called \"command\":</p> <p>winset()</p> <p>.profile</p> <p>.quit</p> <p>control_id</p> <p>obj/quitbutton  name = \"Quit\"  icon = 'buttons.dmi'  icon_state = \"quit\"</p> <p>Click()  winset(usr, null, \"command=.quit\")</p>"},{"location":"proc/winshow/","title":"Winshow","text":""},{"location":"proc/winshow/#winshow-proc","title":"winshow proc","text":"<p>See also: </p> <p>winclone proc </p> <p>winget proc </p> <p>winset proc </p> <p>User interface skins </p> <p>is-visible parameter (skin) </p> <p>See also: </p> <p>See also:</p> <p>winclone proc </p> <p>winget proc </p> <p>winset proc </p> <p>User interface skins </p> <p>is-visible parameter (skin) </p> <p>winclone proc</p> <p>winget proc </p> <p>winset proc </p> <p>User interface skins </p> <p>is-visible parameter (skin) </p> <p>winget proc</p> <p>winset proc </p> <p>User interface skins </p> <p>is-visible parameter (skin) </p> <p>winset proc</p> <p>User interface skins </p> <p>is-visible parameter (skin) </p> <p>User interface skins</p> <p>is-visible parameter (skin) </p> <p>is-visible parameter (skin)</p> <p>Format: </p> <p>winshow(player, window, show=1)</p> <p>Format: </p> <p>Format:</p> <p>winshow(player, window, show=1)</p> <p>Args: </p> <p>player: A mob or client.</p> <p>window: The name of a window in the player's skin.</p> <p>show: Use a nonzero value to show the window, zero to hide it.</p> <p>Args: </p> <p>Args:</p> <p>player: A mob or client.</p> <p>window: The name of a window in the player's skin.</p> <p>show: Use a nonzero value to show the window, zero to hide it.</p> <p>window: The name of a window in the player's skin.</p> <p>show: Use a nonzero value to show the window, zero to hide it.</p> <p>show: Use a nonzero value to show the window, zero to hide it.</p> <p>Shows or hides a window in the player's skin. This is a shortcut, equivalent to setting</p> <p>is-visible</p> <p>via</p> <p>winset()</p> <p>.</p> <p>is-visible</p> <p>winset()</p>"},{"location":"proc/arguments/named/","title":"Named","text":""},{"location":"proc/arguments/named/#named-arguments-proc","title":"named arguments (proc)","text":"<p>See also: </p> <p>New proc (atom) </p> <p>arglist proc </p> <p>arguments (proc) </p> <p>See also: </p> <p>See also:</p> <p>New proc (atom) </p> <p>arglist proc </p> <p>arguments (proc) </p> <p>New proc (atom)</p> <p>arglist proc </p> <p>arguments (proc) </p> <p>arglist proc</p> <p>arguments (proc) </p> <p>arguments (proc)</p> <p>The parameters passed to a procedure are called arguments. These may either be passed in positional order, or they can be passed as  named arguments   . Not all procedures are defined with the intention of supporting named arguments, so consult the documentation for the procedure in question first. (This is mainly an issue of whether the argument names might change in the future.)</p> <p>named arguments</p> <p>The following example shows several ways of producing the same call to a procedure.</p>"},{"location":"proc/arguments/named/#_1","title":"Named","text":"<p>Example:</p> <p>mob/proc/MyProc(a,b,c)  src &lt;&lt; \"MyProc([a],[b],[c])\"</p> <p>mob/verb/test()  MyProc(1,2,3) //positional parameters  MyProc(a=1,b=2,c=3) //named arguments  MyProc(1,b=2,c=3) //positional and named arguments  MyProc(c=3,a=1,b=2) //named arguments can come in any order</p> <p>To prevent silent errors, named arguments that do not match any of the arguments of the procedure being called will generate a runtime error. This is somewhat different from the behavior of positional arguments in DM where it is perfectly acceptable to pass more arguments than were explicitly defined in the procedure.</p> <p>As always, arguments that are not assigned in the call will simply be given the value null (or whatever default value is specified in the definition).</p> <p>When an object procedure is overridden, the variable names in the new definition are the ones that get matched against named arguments in a call to that procedure. A procedure which is intended to support named arguments should therefore be defined with care so as to conform to the interface expected by users of the procedure. That doesn't stop you from changing that interface when overriding a procedure, but the normal case would be to preserve the argument names of the base procedure when overriding it.</p> <p>The following example is not useful, but it illustrates a situation where a procedure is overridden so as to preserve the same argument names and positions. As mentioned above, you are not  required   to preserve either the names or positions, but that is usually what you want.</p> <p>required</p>"},{"location":"proc/arguments/named/#_2","title":"Named","text":"<p>Example:</p> <p>mob  proc/MyProc(a,b,c)  usr &lt;&lt; \"mob.MyProc([a],[b],[c])\"</p> <p>mob/verb/test()  MyProc(a=1,b=2,c=3)</p> <p>special_mob  MyProc(a,b,c,d)  if(d) ..() //pass in same order  else ..(c,b,a) //pass in reverse order</p> <p>test()  MyProc(a=1,b=2,c=3,d=0) //normal order  MyProc(a=1,b=2,c=3,d=1) //reverse the order</p> <p>This example merely used positional parameters in the call to  <code>..()</code>   , but one can use named arguments there too if it is desirable.</p> <p><code>..()</code></p> <p>The best time to use named arguments is when calling a procedure that takes a lot of optional parameters. You can just name the ones that you want to assign and leave the rest unspecified. Trying to do the same thing with positional parameters can be much more awkward\u2013especially when the arguments you do want to assign are preceded by a number of ones that you don't care to assign. It's easy to lose your place in the list or to forget what it does.</p> <p>Since named arguments involve a slight amount of extra overhead, one should avoid them in code that is highly cpu intensive due to being called many many times. Otherwise, code clarity may be a bigger priority.</p>"},{"location":"proc/for/list/","title":"List","text":""},{"location":"proc/for/list/#for-list-proc","title":"for list proc","text":"<p>See also: </p> <p>for loop proc </p> <p>list </p> <p>istype </p> <p>See also: </p> <p>See also:</p> <p>for loop proc </p> <p>list </p> <p>istype </p> <p>for loop proc</p> <p>list </p> <p>istype </p> <p>list</p> <p>istype </p> <p>istype</p> <p>Format: </p> <p>for (Var [as Type] [in List]) Statement</p> <p>for (Var in Start to End [step Step]) Statement</p> <p>Format: </p> <p>Format:</p> <p>for (Var [as Type] [in List]) Statement</p> <p>for (Var in Start to End [step Step]) Statement</p> <p>for (Var in Start to End [step Step]) Statement</p> <p>Args: </p> <p>Var: A variable to sequentially contain each member of the list.</p> <p>List: The list to loop through. This defaults to the whole world.</p> <p>Type: One or more of area, turf, mob, or obj, ORed together. If no  type is specified, the declared type of Var will be used to skip over  inappropriate elements in the list.</p> <p>Start: A starting numeric value.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>Args: </p> <p>Args:</p> <p>Var: A variable to sequentially contain each member of the list.</p> <p>List: The list to loop through. This defaults to the whole world.</p> <p>Type: One or more of area, turf, mob, or obj, ORed together. If no  type is specified, the declared type of Var will be used to skip over  inappropriate elements in the list.</p> <p>Start: A starting numeric value.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>List: The list to loop through. This defaults to the whole world.</p> <p>Type: One or more of area, turf, mob, or obj, ORed together. If no  type is specified, the declared type of Var will be used to skip over  inappropriate elements in the list.</p> <p>Start: A starting numeric value.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>Type: One or more of area, turf, mob, or obj, ORed together. If no  type is specified, the declared type of Var will be used to skip over  inappropriate elements in the list.</p> <p>Start: A starting numeric value.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>Start: A starting numeric value.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>End: An ending numeric value (inclusive).</p> <p>Step: An increment for the numeric value; default is 1.</p> <p>Step: An increment for the numeric value; default is 1.</p>"},{"location":"proc/for/list/#_1","title":"List","text":"<p>Example:</p> <p>usr &lt;&lt; \"Mobs:\" var/mob/M for(M in view())  usr &lt;&lt; M.name</p> <p>This loops M through the mobs in view(), outputting the name at each iteration.</p> <p>When you loop through a list, with the exception of looping through world, you're actually looping through a copy of that list. If the list changes, those changes won't have any bearing on this loop. If you want to be able to handle a list that might change, you'll need to use the  for loop proc   instead.</p> <p>for loop proc</p> <p>You can declare the variable right inside the for statement. Its scope is entirely contained within the for statement, so it will not conflict with a similar variable declared elsewhere in the same procedure.</p>"},{"location":"proc/for/list/#_2","title":"List","text":"<p>Example:</p> <p>client/verb/who()  for(var/client/Player)  usr &lt;&lt; Player</p> <p>If the loop var has a type, a hidden</p> <p>istype()</p> <p>call is included in the code. Only items of that type, or its descendants, are handled within the loop. That means null values and objects of unrelated types will be skipped.</p> <p>istype()</p> <p>The numeric loop form is a quick internal version of the  for loop proc   . It's equivalent to</p> <p>for(Var = Start, Var &lt;= End, Var += Step)</p> <p>unless Step is negative, in which case a &gt;= comparison is used instead. The main difference is that unlike in a for loop proc, the values of Step and End are calculated at the beginning and never change after that, so an expression like</p> <p>list.len</p> <p>that might be subject to change will not be read again\u2014in much the same way that looping through a list only loops through a copy of that list.</p> <p>for loop proc</p> <p>for(Var = Start, Var &lt;= End, Var += Step)</p> <p>list.len</p>"},{"location":"proc/for/list/#_3","title":"List","text":"<p>Example:</p> <p>for(var/count in 1 to 100)  src &lt;&lt; count</p> <p>Note: Although you can use fractional values for</p> <p>step</p> <p>in this numeric format, there may be accuracy considerations to keep in mind. See  Numbers   for more information.</p> <p>step</p> <p>Numbers</p>"},{"location":"proc/for/loop/","title":"Loop","text":""},{"location":"proc/for/loop/#for-loop-proc","title":"for loop proc","text":"<p>See also: </p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for list proc </p> <p>while proc </p> <p>See also: </p> <p>See also:</p> <p>break statement </p> <p>continue statement </p> <p>do proc </p> <p>for list proc </p> <p>while proc </p> <p>break statement</p> <p>continue statement </p> <p>do proc </p> <p>for list proc </p> <p>while proc </p> <p>continue statement</p> <p>do proc </p> <p>for list proc </p> <p>while proc </p> <p>do proc</p> <p>for list proc </p> <p>while proc </p> <p>for list proc</p> <p>while proc </p> <p>while proc</p> <p>Format: </p> <p>for(Init, Test, Inc) Statement</p> <p>Format: </p> <p>Format:</p> <p>for(Init, Test, Inc) Statement</p> <p>First execute Init. Then if Test is true (non-zero), execute Statement. After this execute Inc. Continue checking Test, doing Statement, and performing Inc until Test turns out to be false (zero).</p> <p>Statement may be a code block or a single statement. Semicolons may be substituted for commas inside the parentheses as a convenience to C/C++ programmers.</p> <p>Init and Inc may be omitted. If Test is omitted, the loop will continue forever (unless a break, goto, or return instruction is used to get out of the loop).</p>"},{"location":"proc/for/loop/#_1","title":"Loop","text":"<p>Example:</p> <p>var/i for(i=0, i&lt;3, i++)  world &lt;&lt; i</p> <p>This outputs:</p> <p>0 1 2</p> <p>Note: An Inc statement like</p> <p>i += 0.1</p> <p>is perfectly valid, but you should keep in mind that numerical accuracy is not exact. See  Numbers   for more information.</p> <p>i += 0.1</p> <p>Numbers</p>"},{"location":"proc/set/background/","title":"Background","text":""},{"location":"proc/set/background/#background-setting-proc","title":"background setting (proc)","text":"<p>See also: </p> <p>sleep proc </p> <p>spawn proc </p> <p>See also: </p> <p>See also:</p> <p>sleep proc </p> <p>spawn proc </p> <p>sleep proc</p> <p>spawn proc </p> <p>spawn proc</p> <p>To avoid lag from procedures that hog the CPU for too long, you can turn on background processing. This will cause it to periodically sleep for long enough to allow other events to be processed.</p> <p>The following example is a typical \"ticker\" procedure. It spawns off an infinite loop which does some work and then sleeps before iterating again. By running this in the background, you ensure that the work being done does not create large delays. You could achieve a similar thing by sprinkling calls to sleep(0) or sleep(-1) in the \"working\" part of the loop.</p>"},{"location":"proc/set/background/#_1","title":"Background","text":"<p>Example</p> <p>proc/Ticker()  set background = 1  spawn while(1)  for(var/mob/M in world)  M.Tick()  sleep(10)</p> <p>Since the background procedure sleeps at unpredictable times, you must be aware that race conditions are possible if the background procedure interacts with variables modified by other procedures. It's still much safer than multi-threaded programs because the background procedure never interrupts other code; but other code may interrupt the background procedure.</p> <p>Note that procedures that are called by the background procedure do not automatically run in the background unless they too have the background setting turned on. For instance, the code in the above example does not imply that the mob Tick() procs would run in the background. This is convenient, because you should only ever apply background processing to code after checking that there are no potential race conditions involved.</p> <p>If you have an eye for race conditions, you might think that the above code has one in which a mob gets deleted after it is assigned to M but before the call to M.Tick() is executed. However,  background processing is only interrupted at loop points in the code   , so the above code is safe. It would only ever be interrupted at the end of the  <code>for</code>   or  <code>while</code>   loops.</p> <p>background processing is only interrupted at loop points in the code <code>for</code> <code>while</code></p>"},{"location":"proc/set/waitfor/","title":"Waitfor","text":""},{"location":"proc/set/waitfor/#waitfor-setting-proc","title":"waitfor setting (proc)","text":"<p>See also: </p> <p>sleep proc </p> <p>spawn proc </p> <p>. var (proc) </p> <p>See also: </p> <p>See also:</p> <p>sleep proc </p> <p>spawn proc </p> <p>. var (proc) </p> <p>sleep proc</p> <p>spawn proc </p> <p>. var (proc) </p> <p>spawn proc</p> <p>. var (proc) </p> <p>. var (proc)</p> <p>By default, procs that sleep usually expect their callers to wait for them to finish, so the callers must sleep as well. Using</p> <p>set waitfor=0</p> <p>will disable that behavior, causing any sleep to return control to the caller immediately.</p> <p>set waitfor=0</p>"},{"location":"proc/set/waitfor/#_1","title":"Waitfor","text":"<p>Example</p> <p>mob/proc/LongLoop()  set waitfor = 0  while(1)  UpdateAI()  // proc will return to caller here  sleep(1)</p> <p>This setting will also dictate what happens if a callee sleeps. Consider an example where proc A calls proc B which calls proc C, and proc B has</p> <p>waitfor</p> <p>set to 0. When proc C sleeps, proc B will also sleep, but proc A will continue running as if proc B returned early. The</p> <p>.</p> <p>var currently in proc B will be used as its return value to A. When proc C wakes up and finishes, it will wake up proc B, but now B's return value will be ignored since A is no longer waiting for it.</p> <p>waitfor</p> <p>.</p> <p>In older versions, the  [New</p> <p>proc](#/datum/proc/New)   always had</p> <p>waitfor</p> <p>set to 0 by default, but this was later changed. Now 1 is always the default, so setting</p> <p>waitfor</p> <p>to 1 will result in a warning that it is no longer necessary.</p> <p>[New</p> <p>proc](#/datum/proc/New)</p> <p>New</p> <p>waitfor</p> <p>waitfor</p>"},{"location":"proc/turn/icon/","title":"Icon","text":""},{"location":"proc/turn/icon/#turn-proc-applied-to-an-icon","title":"turn proc (applied to an icon)","text":"<p>See also: </p> <p>turn proc </p> <p>icon </p> <p>See also: </p> <p>See also:</p> <p>turn proc </p> <p>icon </p> <p>turn proc</p> <p>icon </p> <p>icon</p> <p>Format: </p> <p>turn(Icon, Angle)</p> <p>Format: </p> <p>Format:</p> <p>turn(Icon, Angle)</p> <p>Returns: </p> <p>The rotated icon.</p> <p>Returns: </p> <p>Returns:</p> <p>The rotated icon.</p> <p>Args: </p> <p>Icon: an icon to rotate</p> <p>Angle: An angle in degrees (clockwise rotation).</p> <p>Args: </p> <p>Args:</p> <p>Icon: an icon to rotate</p> <p>Angle: An angle in degrees (clockwise rotation).</p> <p>Angle: An angle in degrees (clockwise rotation).</p>"},{"location":"proc/turn/icon/#_1","title":"Icon","text":"<p>Example:</p> <p>mob/verb/drink()  //this effect is very confusing!  usr.icon = turn(usr.icon,90)  usr &lt;&lt; \"Woah! That stuff is powerful!\"  sleep(200)  usr.icon = turn(usr.icon,-90)</p> <p>An icon that is not square will not be turned.</p> <p>If the icon is an /icon datum, a new datum will be created as the result.</p>"},{"location":"proc/turn/matrix/","title":"Matrix","text":""},{"location":"proc/turn/matrix/#turn-proc-applied-to-a-matrix","title":"turn proc (applied to a matrix)","text":"<p>See also: </p> <p>turn proc </p> <p>matrix </p> <p>See also: </p> <p>See also:</p> <p>turn proc </p> <p>matrix </p> <p>turn proc</p> <p>matrix </p> <p>matrix</p> <p>Format: </p> <p>turn(Matrix, Angle)</p> <p>Format: </p> <p>Format:</p> <p>turn(Matrix, Angle)</p> <p>Returns: </p> <p>A new matrix which has been rotated.</p> <p>Returns: </p> <p>Returns:</p> <p>A new matrix which has been rotated.</p> <p>Args: </p> <p>Matrix: a matrix to rotate</p> <p>Angle: An angle in degrees (clockwise rotation).</p> <p>Args: </p> <p>Args:</p> <p>Matrix: a matrix to rotate</p> <p>Angle: An angle in degrees (clockwise rotation).</p> <p>Angle: An angle in degrees (clockwise rotation).</p>"},{"location":"proc/turn/matrix/#_1","title":"Matrix","text":"<p>Example:</p> <p>mob/verb/drink()  //this effect is very confusing!  usr.transform = turn(usr.transform, 90)  usr &lt;&lt; \"Woah! That stuff is powerful!\"  sleep(200)  usr.transform = null</p>"},{"location":"regex/proc/","title":"Proc","text":""},{"location":"regex/proc/#regex-procs","title":"regex procs","text":"<p>See also: </p> <p>regex datum </p> <p>regex vars </p> <p>regex proc </p> <p>See also: </p> <p>See also:</p> <p>regex datum </p> <p>regex vars </p> <p>regex proc </p> <p>regex datum</p> <p>regex vars </p> <p>regex proc </p> <p>regex vars</p> <p>regex proc </p> <p>regex proc</p> <p>regex/proc</p> <p>New </p> <p>Find </p> <p>Replace </p> <p>regex/proc</p> <p>New </p> <p>Find </p> <p>Replace </p> <p>New</p> <p>Find </p> <p>Replace </p> <p>Find</p> <p>Replace </p> <p>Replace</p>"},{"location":"regex/var/","title":"Var","text":""},{"location":"regex/var/#regex-vars","title":"regex vars","text":"<p>See also: </p> <p>regex datum </p> <p>regex procs </p> <p>regex proc </p> <p>See also: </p> <p>See also:</p> <p>regex datum </p> <p>regex procs </p> <p>regex proc </p> <p>regex datum</p> <p>regex procs </p> <p>regex proc </p> <p>regex procs</p> <p>regex proc </p> <p>regex proc</p> <p>regex/var</p> <p>flags </p> <p>group </p> <p>index </p> <p>match </p> <p>name </p> <p>next </p> <p>text </p> <p>regex/var</p> <p>flags </p> <p>group </p> <p>index </p> <p>match </p> <p>name </p> <p>next </p> <p>text </p> <p>flags</p> <p>group </p> <p>index </p> <p>match </p> <p>name </p> <p>next </p> <p>text </p> <p>group</p> <p>index </p> <p>match </p> <p>name </p> <p>next </p> <p>text </p> <p>index</p> <p>match </p> <p>name </p> <p>next </p> <p>text </p> <p>match</p> <p>name </p> <p>next </p> <p>text </p> <p>name</p> <p>next </p> <p>text </p> <p>next</p> <p>text </p> <p>text</p>"},{"location":"regex/proc/Find/","title":"Find","text":""},{"location":"regex/proc/Find/#find-proc-regex","title":"Find proc (regex)","text":"<p>See also: </p> <p>Regular expressions </p> <p>regex datum </p> <p>Replace proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>findtext proc </p> <p>See also: </p> <p>See also:</p> <p>Regular expressions </p> <p>regex datum </p> <p>Replace proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>findtext proc </p> <p>Regular expressions</p> <p>regex datum </p> <p>Replace proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>findtext proc </p> <p>regex datum</p> <p>Replace proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>findtext proc </p> <p>Replace proc (regex)</p> <p>regex vars </p> <p>regex proc </p> <p>findtext proc </p> <p>regex vars</p> <p>regex proc </p> <p>findtext proc </p> <p>regex proc</p> <p>findtext proc </p> <p>findtext proc</p> <p>Format: </p> <p>Find(haystack, Start=1, End=0)</p> <p>Format: </p> <p>Format:</p> <p>Find(haystack, Start=1, End=0)</p> <p>Returns: </p> <p>The position of the matched text, or 0 if no match was found.</p> <p>Returns: </p> <p>Returns:</p> <p>The position of the matched text, or 0 if no match was found.</p> <p>Args: </p> <p>haystack: The text to be searched</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Args: </p> <p>Args:</p> <p>haystack: The text to be searched</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Finds the regular expression pattern within the \"haystack\" text. The following vars are set by the match:</p> <ul> <li>text: The text that was searched.</li> <li>index: The index where the match was found (same as the return value)</li> <li>match: The actual matched text</li> <li>group: If the expression contains capturing groups with the ( ) parentheses operator, this is a list that holds the text found in those groups. group[1] is the first group, and so on.</li> <li> <p>next: If the \"g\" flag was used to create thie expression, this is the next index to begin searching.</p> </li> <li> <p>text: The text that was searched.</p> </li> <li> <p>index: The index where the match was found (same as the return value)</p> </li> <li> <p>match: The actual matched text</p> </li> <li> <p>group: If the expression contains capturing groups with the ( ) parentheses operator, this is a list that holds the text found in those groups. group[1] is the first group, and so on.</p> </li> <li> <p>next: If the \"g\" flag was used to create thie expression, this is the next index to begin searching.</p> </li> </ul> <p>In a global expression (using the \"g\" flag), Find() can be called repeatedly on the same piece of text and the Start position will be advanced automatically unless you specify it.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>Find_char()</p> <p>to work with character counts instead of bytes, at a performance cost. See the  Unicode   section for more information.</p> <p>Find_char()</p> <p>Unicode</p>"},{"location":"regex/proc/New/","title":"New","text":""},{"location":"regex/proc/New/#new-proc-regex","title":"New proc (regex)","text":"<p>See also: </p> <p>Regular expressions </p> <p>regex datum </p> <p>regex proc </p> <p>See also: </p> <p>See also:</p> <p>Regular expressions </p> <p>regex datum </p> <p>regex proc </p> <p>Regular expressions</p> <p>regex datum </p> <p>regex proc </p> <p>regex datum</p> <p>regex proc </p> <p>regex proc</p> <p>Format: </p> <p>regex(pattern, flags)</p> <p>regex(Regex)</p> <p>Format: </p> <p>Format:</p> <p>regex(pattern, flags)</p> <p>regex(Regex)</p> <p>regex(Regex)</p> <p>Args: </p> <p>pattern: The pattern string to search for</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>Args: </p> <p>Args:</p> <p>pattern: The pattern string to search for</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>flags: (optional) A text string containing any combination of modifier flags</p> <p>Regex: an existing /regex datum to copy</p> <p>Regex: an existing /regex datum to copy</p> <p>Calling new/regex() is the same as calling regex(). It will create a new /regex datum.</p>"},{"location":"regex/proc/Replace/","title":"Replace","text":""},{"location":"regex/proc/Replace/#replace-proc-regex","title":"Replace proc (regex)","text":"<p>See also: </p> <p>Regular expressions </p> <p>regex datum </p> <p>Find proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>replacetext proc </p> <p>See also: </p> <p>See also:</p> <p>Regular expressions </p> <p>regex datum </p> <p>Find proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>replacetext proc </p> <p>Regular expressions</p> <p>regex datum </p> <p>Find proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>replacetext proc </p> <p>regex datum</p> <p>Find proc (regex) </p> <p>regex vars </p> <p>regex proc </p> <p>replacetext proc </p> <p>Find proc (regex)</p> <p>regex vars </p> <p>regex proc </p> <p>replacetext proc </p> <p>regex vars</p> <p>regex proc </p> <p>replacetext proc </p> <p>regex proc</p> <p>replacetext proc </p> <p>replacetext proc</p> <p>Format: </p> <p>Replace(haystack, replacement, Start=1, End=0)</p> <p>Format: </p> <p>Format:</p> <p>Replace(haystack, replacement, Start=1, End=0)</p> <p>Returns: </p> <p>The original haystack string with the first match replaced. If using the \"g\" flag, all matches are replaced.</p> <p>Returns: </p> <p>Returns:</p> <p>The original haystack string with the first match replaced. If using the \"g\" flag, all matches are replaced.</p> <p>Args: </p> <p>haystack: The text to be searched</p> <p>replacement: A piece of text, OR a proc, that will be used to replace the match</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Args: </p> <p>Args:</p> <p>haystack: The text to be searched</p> <p>replacement: A piece of text, OR a proc, that will be used to replace the match</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>replacement: A piece of text, OR a proc, that will be used to replace the match</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Start: The start position (in bytes) to search; defaults to 1, or to src.next if this is a global pattern</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>End: The position of the byte after the end of the search; 0 is the end. The actual match is allowed to extend past End.</p> <p>Finds the regular expression pattern within the \"haystack\" text, and replaces the match with the given replacement value.</p> <p>In a non-global expression (not using the \"g\" flag), the values of src.index and src.next are set as they would be in a global Find(). See the Find() proc for more info.</p> <p>Note: In strings containing non-ASCII characters, byte position and character position are not the same thing. Use</p> <p>Replace_char()</p> <p>to work with character counts instead of bytes. See the  Unicode   section for more information.</p> <p>Replace_char()</p> <p>Unicode</p>"},{"location":"regex/proc/Replace/#_1","title":"Replace","text":"<p>Replacing with text</p> <p>If the replacement value is text, the $ character is treated as special. If you want to use the actual dollar sign, it must be escaped with a second dollar sign. Otherwise, the $ character is one of these special values:</p> <p>|   Replacement   |   Value   | | --- | --- | |   $1  through   $9   |   $1</p> <p>tt&gt; is whatever was in the first parentheses group,</p> <p>$2</p> <p>is the second, and so on.   | |   $`   |   The text that came before the match   | |   $'   |   The text that came after the match   | |   $0  or   $&amp;   |   The whole match itself   |</p> <p>|   Replacement   |   Value   |</p> <p>Replacement  |</p> <p>Value  | |   $1  through   $9   |   $1</p> <p>tt&gt; is whatever was in the first parentheses group,</p> <p>$2</p> <p>is the second, and so on.   |</p> <p>$1  through   $9  | through</p> <p>$1</p> <p>tt&gt; is whatever was in the first parentheses group,</p> <p>$2</p> <p>is the second, and so on.  |</p> <p>$1</p> <p>$2</p> <p>|   $`   |   The text that came before the match   |</p> <p>$`  |</p> <p>The text that came before the match  | |   $'   |   The text that came after the match   |</p> <p>$'  |</p> <p>The text that came after the match  | |   $0  or   $&amp;   |   The whole match itself   |</p> <p>$0  or   $&amp;  | or</p> <p>The whole match itself  |</p>"},{"location":"regex/proc/Replace/#_2","title":"Replace","text":"<p>Replacing with a proc</p> <p>If replacing matches with a proc, then the proc will be called with the match as its first argument, and any capturing groups as the following arguments. Whatever the proc returns will be used as the replacement text in place of the match.</p>"},{"location":"regex/proc/Replace/#_3","title":"Replace","text":"<p>Example</p> <p>var/regex/vowels = new(\"[aeiou]\", \"i\") // match any word of 2 letters or more var/regex/piglatin = new(\"\\b(\\l)(\\l+)\\b\", \"ig\")</p> <p>// group1 is the first letter, and group2 is everything else proc/word2piglatin(match, group1, group2)  // If the word starts with a vowel, just add \"ay\"  if(vowels.Find(group1)) return \"[match]ay\"  // If the word was capitalized, capitalize the replacement   if(group1 == uppertext(group1))  group1 = lowertext(group1)  group2 = uppertext(copytext(group2,1,2)) + lowertext(copytext(group2,2))  return \"[group2][group1]ay\"</p> <p>mob/verb/PigSay(msg as text)  msg = html_encode(msg)  world &lt;&lt; piglatin.Replace(msg, /proc/word2piglatin)</p>"},{"location":"savefile/operator/","title":"Operator","text":""},{"location":"savefile/operator/#operators-savefile","title":"operators (savefile)","text":"<p>Built-in savefile operators:</p> <p>savefile/operator</p> <p>&lt;&amp;lt </p> <p>&gt;&amp;gt </p> <p>savefile/operator</p> <p>&lt;&amp;lt </p> <p>&gt;&amp;gt </p> <p>&lt;&amp;lt</p> <p>&gt;&amp;gt </p> <p>&gt;&amp;gt</p>"},{"location":"savefile/proc/","title":"Proc","text":""},{"location":"savefile/proc/#procs-savefile","title":"procs (savefile)","text":"<p>savefile/proc</p> <p>ExportText </p> <p>Flush </p> <p>ImportText </p> <p>Lock </p> <p>Unlock </p> <p>New </p> <p>savefile/proc</p> <p>ExportText </p> <p>Flush </p> <p>ImportText </p> <p>Lock </p> <p>Unlock </p> <p>New </p> <p>ExportText</p> <p>Flush </p> <p>ImportText </p> <p>Lock </p> <p>Unlock </p> <p>New </p> <p>Flush</p> <p>ImportText </p> <p>Lock </p> <p>Unlock </p> <p>New </p> <p>ImportText</p> <p>Lock </p> <p>Unlock </p> <p>New </p> <p>Lock</p> <p>Unlock </p> <p>New </p> <p>Unlock</p> <p>New </p> <p>New</p>"},{"location":"savefile/var/","title":"Var","text":""},{"location":"savefile/var/#vars-savefile","title":"vars (savefile)","text":"<p>savefile vars:</p> <p>savefile/var</p> <p>byond_build </p> <p>byond_version </p> <p>cd </p> <p>dir </p> <p>eof </p> <p>name </p> <p>savefile/var</p> <p>byond_build </p> <p>byond_version </p> <p>cd </p> <p>dir </p> <p>eof </p> <p>name </p> <p>byond_build</p> <p>byond_version </p> <p>cd </p> <p>dir </p> <p>eof </p> <p>name </p> <p>byond_version</p> <p>cd </p> <p>dir </p> <p>eof </p> <p>name </p> <p>cd</p> <p>dir </p> <p>eof </p> <p>name </p> <p>dir</p> <p>eof </p> <p>name </p> <p>eof</p> <p>name </p> <p>name</p>"},{"location":"savefile/operator/%253c%253c/","title":"%3c%3c","text":""},{"location":"savefile/operator/%253c%253c/#operator-savefile","title":"&lt;&lt; operator (savefile)","text":"<p>See also: </p> <p>&gt;&gt; operator (savefile) </p> <p>&lt;&lt; output operator </p> <p>Write proc (datum) </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; operator (savefile) </p> <p>&lt;&lt; output operator </p> <p>Write proc (datum) </p> <p>&gt;&gt; operator (savefile)</p> <p>&lt;&lt; output operator </p> <p>Write proc (datum) </p> <p>&lt;&lt; output operator</p> <p>Write proc (datum) </p> <p>Write proc (datum)</p> <p>Format: </p> <p>F &lt;&lt; Val</p> <p>F[\"Path\"] &lt;&lt; Val</p> <p>Format: </p> <p>Format:</p> <p>F &lt;&lt; Val</p> <p>F[\"Path\"] &lt;&lt; Val</p> <p>F[\"Path\"] &lt;&lt; Val</p> <p>Writes Val to a buffer. If Path is not specified, the current buffer will be used. Otherwise, the buffer at the specified path will be written to. Whenever the current directory is set, writing starts at the beginning of that buffer (replacing any previous contents). For this reason, when the Path parameter is given, the specified buffer is always overwritten.</p> <p>If Val is an object, a separate directory will be created for the object and the object's Write proc will be called. In addition to data that may be written by the Write() proc, the type of the object is stored in a buffer called \"type\". In the case of turfs, the location of the turf is also recorded so that it can be recreated at the same position. All other objects must be repositioned after the object is recreated (like in the object's Read() proc).</p> <p>Single operations that write multiple values (such as saving an object) are handled somewhat specially to avoid two references to the same object creating duplicate entries in the savefile. After the object being referenced is written once, successive references to the same object will be saved simply as references rather than as full objects. If this was not done, two references to the same object would be read back in as two separate objects. This also avoids infinite loops that would result when objects contain references back to themselves.</p>"},{"location":"savefile/operator/%253e%253e/","title":"%3e%3e","text":""},{"location":"savefile/operator/%253e%253e/#operator-savefile","title":"&gt;&gt; operator (savefile)","text":"<p>See also: </p> <p>&gt;&gt; input operator </p> <p>&lt;&lt; operator (savefile) </p> <p>Read proc (datum) </p> <p>See also: </p> <p>See also:</p> <p>&gt;&gt; input operator </p> <p>&lt;&lt; operator (savefile) </p> <p>Read proc (datum) </p> <p>&gt;&gt; input operator</p> <p>&lt;&lt; operator (savefile) </p> <p>Read proc (datum) </p> <p>&lt;&lt; operator (savefile)</p> <p>Read proc (datum) </p> <p>Read proc (datum)</p> <p>Format: </p> <p>F &gt;&gt; Var</p> <p>F[\"Path\"] &gt;&gt; Var</p> <p>Format: </p> <p>Format:</p> <p>F &gt;&gt; Var</p> <p>F[\"Path\"] &gt;&gt; Var</p> <p>F[\"Path\"] &gt;&gt; Var</p> <p>Reads a value from a buffer into a variable. If Path is not specified, the current buffer will be used. Otherwise, the buffer at the specified path will be accessed. Whenever the current directory is set, reading starts at the beginning of that buffer (replacing any previous contents). For this reason, when the Path parameter is given, the first value in the specified buffer is always read. If there is no data in the buffer or the end of the buffer has been reached, null is returned.</p> <p>If the value read is a previously written object, its own directory will be opened and the object's Read proc will be called to load any data that was written in the object's Write proc.</p> <p>If the value read is a savefile (ie a savefile inside of a savefile), it is treated a little differently. Instead of returning a savefile object, it returns data cached in the world's rsc file. This is to give you control over what file this data is copied into before it is opened as a savefile. If you want to just open it up in a temporary file, do something like this:</p> <p>obj  var  savefile/myfile  Read()  . = ..() //do the normal stuff  if(myfile) //load data into a temporary file and create savefile object  myfile = new/savefile(myfile)</p>"},{"location":"savefile/proc/ExportText/","title":"ExportText","text":""},{"location":"savefile/proc/ExportText/#exporttext-proc-savefile","title":"ExportText proc (savefile)","text":"<p>See also: </p> <p>ImportText proc (savefile) </p> <p>See also: </p> <p>See also:</p> <p>ImportText proc (savefile) </p> <p>ImportText proc (savefile)</p> <p>Format: </p> <p>savefile.ExportText(path=cd,file)</p> <p>Format: </p> <p>Format:</p> <p>savefile.ExportText(path=cd,file)</p> <p>Args: </p> <p>path: the path to export</p> <p>file: optional file to write to</p> <p>Args: </p> <p>Args:</p> <p>path: the path to export</p> <p>file: optional file to write to</p> <p>file: optional file to write to</p> <p>Converts all or part of a savefile to a human readable text format, similar in syntax to DM. If no file is specified, the savefile text is returned as a text string instead of being written to a file.</p> <p>The following example shows how to export and later import a savefile. The user's mob is written into a directory with the same name as their  ckey   and the result is written to a text file.</p> <p>ckey</p>"},{"location":"savefile/proc/ExportText/#_1","title":"ExportText","text":"<p>Example:</p> <p>mob/verb/write()  var/savefile/F = new()  var/txtfile = file(\"players/[ckey].txt\")</p> <p>F[ckey] &lt;&lt; usr</p> <p>fdel(txtfile)  F.ExportText(\"/\",txtfile)</p> <p>usr &lt;&lt; \"Your savefile looks like this:\"  usr &lt;&lt; \"</p> <pre><code>[html_encode(file2text(txtfile))]\n</code></pre> <p>\"</p> <p>mob/verb/read()  var/savefile/F = new()  var/txtfile = file(\"players/[ckey].txt\")</p> <p>F.ImportText(\"/\",txtfile)  F[ckey] &gt;&gt; usr</p> <pre><code>[html_encode(file2text(txtfile))]\n</code></pre>"},{"location":"savefile/proc/Flush/","title":"Flush","text":""},{"location":"savefile/proc/Flush/#flush-proc-savefile","title":"Flush proc (savefile)","text":"<p>Format: </p> <p>savefile.Flush()</p> <p>Format: </p> <p>Format:</p> <p>savefile.Flush()</p> <p>Flushes any pending write operations for this savefile.</p>"},{"location":"savefile/proc/ImportText/","title":"ImportText","text":""},{"location":"savefile/proc/ImportText/#importtext-proc-savefile","title":"ImportText proc (savefile)","text":"<p>See also: </p> <p>ExportText proc (savefile) </p> <p>See also: </p> <p>See also:</p> <p>ExportText proc (savefile) </p> <p>ExportText proc (savefile)</p> <p>Format: </p> <p>savefile.ImportText(path=cd,source)</p> <p>Format: </p> <p>Format:</p> <p>savefile.ImportText(path=cd,source)</p> <p>Args: </p> <p>path: the path at which to write the imported data</p> <p>source: a file or text string to import</p> <p>Args: </p> <p>Args:</p> <p>path: the path at which to write the imported data</p> <p>source: a file or text string to import</p> <p>source: a file or text string to import</p> <p>Reads a text file or string and writes it into a savefile. See  ExportText   for an example.</p> <p>ExportText</p> <p>If</p> <p>source</p> <p>is an ordinary string, it will be treated as savefile contents to be parsed. If it's a</p> <p>file()</p> <p>reference, it will be treated as a filename and the file's contents will be loaded.</p> <p>source</p> <p>file()</p>"},{"location":"savefile/proc/Lock/","title":"Lock","text":""},{"location":"savefile/proc/Lock/#lock-proc-savefile","title":"Lock proc (savefile)","text":"<p>See also: </p> <p>New proc (savefile) </p> <p>Unlock proc (savefile) </p> <p>See also: </p> <p>See also:</p> <p>New proc (savefile) </p> <p>Unlock proc (savefile) </p> <p>New proc (savefile)</p> <p>Unlock proc (savefile) </p> <p>Unlock proc (savefile)</p> <p>Format: </p> <p>Lock(timeout)</p> <p>Format: </p> <p>Format:</p> <p>Lock(timeout)</p> <p>Args: </p> <p>timeout: seconds to wait; -1 for no timeout</p> <p>Args: </p> <p>Args:</p> <p>timeout: seconds to wait; -1 for no timeout</p> <p>Returns: </p> <p>1 on success; 0 on failure</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure</p> <p>In order to modify a savefile, exclusive access to the file must be guaranteed, so that other processes reading or writing to the file do not experience data corruption. This is known as \"locking\" the file. While the file is locked, only the world that obtained the lock may access it.</p> <p>Normally, you do not need to worry about this, because a lock is automatically obtained upon the first attempt to write to the file. In a CGI application, where many instances of the program might be running simultaneously, the normal locking, which just tries once and crashes the proc on failure, would not be ideal.</p> <p>Explicitly calling Lock() allows you to specify a timeout and it also allows you to handle the case in which no lock could be obtained. If you want it to wait indefinitely, use -1. Just be careful if there are several files read by multiple processes that it is not possible for deadlock to occur.</p> <p>Obtaining a lock will fail if the file is locked by another world or if it is even open by any other world.</p> <p>If you are using Lock(), then you probably also want to specify a timeout when you open the savefile, since that too can fail due to the file being locked by another process.</p>"},{"location":"savefile/proc/New/","title":"New","text":""},{"location":"savefile/proc/New/#new-proc-savefile","title":"New proc (savefile)","text":"<p>See also: </p> <p>Lock proc (savefile) </p> <p>Unlock proc (savefile) </p> <p>See also: </p> <p>See also:</p> <p>Lock proc (savefile) </p> <p>Unlock proc (savefile) </p> <p>Lock proc (savefile)</p> <p>Unlock proc (savefile) </p> <p>Unlock proc (savefile)</p> <p>Format: </p> <p>New(filename,timeout)</p> <p>Format: </p> <p>Format:</p> <p>New(filename,timeout)</p> <p>Args: </p> <p>filename: name of file or empty for temporary file</p> <p>timeout: seconds to wait; -1 for no timeout</p> <p>Args: </p> <p>Args:</p> <p>filename: name of file or empty for temporary file</p> <p>timeout: seconds to wait; -1 for no timeout</p> <p>timeout: seconds to wait; -1 for no timeout</p> <p>You call this via new/savefile(filename,timeout). The timeout is used to determine how long to wait if the file is locked. Normally (timeout=0), if the file is locked, the proc crashes with a runtime error. If you specify a timeout, then it will keep trying to open the file and if this fails, it will simply return with savefile.name being empty (ie a false value).</p> <p>If the first argument is an entry in the world's rsc cache, the data will be copied into a temporary file and accessed from there. Changes to this, and any other temporary file, are not saved. When you close the file, it simply gets deleted.</p>"},{"location":"savefile/proc/Unlock/","title":"Unlock","text":""},{"location":"savefile/proc/Unlock/#unlock-proc-savefile","title":"Unlock proc (savefile)","text":"<p>See also: </p> <p>Lock proc (savefile) </p> <p>New proc (savefile) </p> <p>See also: </p> <p>See also:</p> <p>Lock proc (savefile) </p> <p>New proc (savefile) </p> <p>Lock proc (savefile)</p> <p>New proc (savefile) </p> <p>New proc (savefile)</p> <p>Format: </p> <p>Unlock()</p> <p>Format: </p> <p>Format:</p> <p>Unlock()</p> <p>Exclusive locks are automatically released when the savefile is closed, but if you want to keep reading the file and allow other processes to do the same, then you can explicitly unlock it.</p> <p>Note that this does not allow other processes to lock the file. It only allows them to read from it. As long as the file is open by more than one process, no lock may be obtained.</p>"},{"location":"sound/var/","title":"Var","text":""},{"location":"sound/var/#vars-sound","title":"vars (sound)","text":"<p>Built-in sound vars:</p> <p>sound/var</p> <p>file </p> <p>repeat </p> <p>wait </p> <p>channel </p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>sound/var</p> <p>file </p> <p>repeat </p> <p>wait </p> <p>channel </p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>file</p> <p>repeat </p> <p>wait </p> <p>channel </p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>repeat</p> <p>wait </p> <p>channel </p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>wait</p> <p>channel </p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>channel</p> <p>volume </p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>volume</p> <p>frequency </p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>frequency</p> <p>len </p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>len</p> <p>offset </p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>offset</p> <p>pan </p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>pan</p> <p>params </p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>params</p> <p>pitch </p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>pitch</p> <p>priority </p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>priority</p> <p>status </p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>status</p> <p>x, y, z </p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>x, y, z</p> <p>falloff </p> <p>environment </p> <p>echo </p> <p>falloff</p> <p>environment </p> <p>echo </p> <p>environment</p> <p>echo </p> <p>echo</p>"},{"location":"turf/proc/","title":"Proc","text":""},{"location":"turf/proc/#procs-turf","title":"procs (turf)","text":"<p>Built-in turf procs:</p> <p>turf/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>turf/proc</p> <p>Click </p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Click</p> <p>Cross proc </p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Cross proc</p> <p>Crossed proc </p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Crossed proc</p> <p>DblClick </p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>DblClick</p> <p>Del </p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Del</p> <p>Enter </p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Enter</p> <p>Entered </p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Entered</p> <p>Exit </p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Exit</p> <p>Exited </p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Exited</p> <p>MouseDown </p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseDown</p> <p>MouseDrag </p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseDrag</p> <p>MouseDrop </p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseDrop</p> <p>MouseEntered </p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseEntered</p> <p>MouseExited </p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseExited</p> <p>MouseMove </p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseMove</p> <p>MouseUp </p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseUp</p> <p>MouseWheel </p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>MouseWheel</p> <p>New </p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>New</p> <p>Read </p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Read</p> <p>Stat </p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Stat</p> <p>Topic </p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Topic</p> <p>Write </p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Write</p> <p>Uncross proc </p> <p>Uncrossed proc </p> <p>Uncross proc</p> <p>Uncrossed proc </p> <p>Uncrossed proc</p>"},{"location":"turf/var/","title":"Var","text":""},{"location":"turf/var/#vars-turf","title":"vars (turf)","text":"<p>Built-in turf vars:</p> <p>turf/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>turf/var</p> <p>alpha </p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>alpha</p> <p>appearance </p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance</p> <p>appearance_flags </p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>appearance_flags</p> <p>blend_mode </p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>blend_mode</p> <p>color </p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>color</p> <p>contents </p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>contents</p> <p>density </p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>density</p> <p>desc </p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>desc</p> <p>dir </p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>dir</p> <p>filters </p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>filters</p> <p>gender </p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>gender</p> <p>icon </p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon</p> <p>icon_state </p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>icon_state</p> <p>invisibility </p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>invisibility</p> <p>underlays </p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>underlays</p> <p>overlays </p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>overlays</p> <p>loc </p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>loc</p> <p>layer </p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>layer</p> <p>luminosity </p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>luminosity</p> <p>mouse_over_pointer </p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_over_pointer</p> <p>mouse_drag_pointer </p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drag_pointer</p> <p>mouse_drop_pointer </p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_pointer</p> <p>mouse_drop_zone var </p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_drop_zone var</p> <p>mouse_opacity var </p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>mouse_opacity var</p> <p>name </p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>name</p> <p>opacity </p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>opacity</p> <p>parent_type </p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>parent_type</p> <p>pixel_x </p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_x</p> <p>pixel_y </p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_y</p> <p>pixel_w </p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_w</p> <p>pixel_z </p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>pixel_z</p> <p>plane </p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>plane</p> <p>render_source </p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_source</p> <p>render_target </p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>render_target</p> <p>suffix </p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>suffix</p> <p>tag </p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>tag</p> <p>text </p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>text</p> <p>transform </p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>transform</p> <p>type </p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>type</p> <p>vars </p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vars</p> <p>verbs </p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>verbs</p> <p>vis_contents </p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_contents</p> <p>vis_flags </p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_flags</p> <p>vis_locs </p> <p>x </p> <p>y </p> <p>z </p> <p>vis_locs</p> <p>x </p> <p>y </p> <p>z </p> <p>x</p> <p>y </p> <p>z </p> <p>y</p> <p>z </p> <p>z</p>"},{"location":"verb/arguments/","title":"Arguments","text":""},{"location":"verb/arguments/#arguments-verb","title":"arguments (verb)","text":"<p>See also: </p> <p>argument expanding </p> <p>command_text (client) </p> <p>arglist proc </p> <p>args var (verb) </p> <p>See also: </p> <p>See also:</p> <p>argument expanding </p> <p>command_text (client) </p> <p>arglist proc </p> <p>args var (verb) </p> <p>argument expanding</p> <p>command_text (client) </p> <p>arglist proc </p> <p>args var (verb) </p> <p>command_text (client)</p> <p>arglist proc </p> <p>args var (verb) </p> <p>arglist proc</p> <p>args var (verb) </p> <p>args var (verb)</p> <p>The parameters to a verb are referred to as arguments. For verbs, the input type and possible value list may also be specified.</p> <p>The possible input types are:</p> <pre><code>text          // a quoted text string\npassword      // un-echoed text (for use with input() only)\nmessage       // multi-line text\ncommand_text  // raw command text from the rest of the input line\nnum           // a number\nicon          // an icon file from the user's computer\nsound         // a sound file from the user's computer\nfile          // any type of file from the user's computer\nkey           // a key from the user's BYOND key file\ncolor         // a color (see [rgb proc](#/proc/rgb))\nnull          // indicates that the argument is optional\n\nmob\nobj\nturf\narea\nanything\n\n</code></pre> <p>rgb proc</p> <p>These can be combined with the '|' operator. The first group are called  constant   input types because they turn on various types of literal values that the user can type in (like a number or a text string). The second group work in conjunction with a list of objects or values. They are called input type  filters   because they may be used to filter out certain types of values from the list. For example a mob or an obj within sight would be specified as follows:</p> <p>constant filters</p> <p>myverb(M as mob|obj in view()) {...}</p> <p>A default value may be specified which takes effect in the case of null arguments. For example:</p> <p>myverb(M=usr as null|mob|obj in view()) {...}</p> <p>In this example, the input type  <code>null</code>   did not have to be used explicitly, because assigning a default value (in this case  <code>usr</code>   ) turns it on by default.</p> <p><code>null</code> <code>usr</code></p> <p>The  <code>anything</code>   input type can be used to combine values in a list with other constant input types. Here, this is done with the  <code>null</code>   input type:</p> <p><code>anything</code> <code>null</code></p> <p>set_aggression(a=\"on\" as null|anything in list(\"on\",\"off\"))</p> <p>For input types containing mob, obj, turf, or area, the possible value list defaults to view().</p> <p>If no input type is specified, the variable type will be used to determine whether it is a mob, obj, turf, or area.</p>"},{"location":"verb/arguments/#_1","title":"Arguments","text":"<p>Example:</p> <p>mob/verb/tell(mob/M,msg as text)  M &lt;&lt; \"[usr] tells you, /\"[msg]/\"\"</p> <p>This example defines a verb with two arguments: a target mob, and some text.</p>"},{"location":"verb/set/","title":"Set","text":""},{"location":"verb/set/#settings-verb","title":"settings (verb)","text":"<p>verb settings:  ```` verb/set   name desc category hidden popup_menu instant invisibility src background</p> <p>verb/set   name desc category hidden popup_menu instant invisibility src background</p> <p>````</p> <pre><code>verb/set\n  [name](#/verb/set/name)\n  [desc](#/verb/set/desc)\n  [category](#/verb/set/category)\n  [hidden](#/verb/set/hidden)\n  [popup\\_menu](#/verb/set/popup_menu)\n  [instant](#/verb/set/instant)\n  [invisibility](#/verb/set/invisibility)\n  [src](#/verb/set/src)\n  [background](#/proc/set/background)\n\n</code></pre> <p>name desc category hidden popup_menu instant invisibility src background</p> <p>Procs and verbs are the same \"type\" so these attributes may be set for procs as well; most of them do not have any meaning, however, unless the proc is invoked as a verb (by adding it to a verb list).</p>"},{"location":"verb/var/","title":"Var","text":""},{"location":"verb/var/#vars-verbs","title":"vars (verbs)","text":"<p>See: </p> <p>vars (procs) </p> <p>See: </p> <p>See:</p> <p>vars (procs) </p> <p>vars (procs)</p>"},{"location":"verb/arguments/expanding/","title":"Expanding","text":""},{"location":"verb/arguments/expanding/#argument-expanding","title":"argument expanding","text":"<p>See also: </p> <p>arguments (verb) </p> <p>See also: </p> <p>See also:</p> <p>arguments (verb) </p> <p>arguments (verb)</p> <p>The expression used to to provide a list of possible values for a verb argument may reference the value of arguments prior to the one being expanded. It may even reference the value of the argument being expanded, but this will always be a text string equal to what the user has typed so far.</p> <p>In addition, there is a special variable called \"expanding\" which is only accessible in this context. It is 1 if the user's input is being expanded and 0 if the user's final input is being validated. In certain rare cases, you may wish to tell the difference between these two cases. For example, you could use this to have possible values which do not show up in the expansion lists, but which are accepted when typed in full.</p>"},{"location":"verb/arguments/expanding/#_1","title":"Expanding","text":"<p>Example:</p> <p>mob/verb/test(A in MyProc(A,expanding))  usr &lt;&lt; \"You typed: [A]\"</p> <p>proc/MyProc(A,expanding)  var/values[] = list(\"one\",\"two\",\"three\")  if(!expanding) values += \"secret\"  return values</p>"},{"location":"verb/set/category/","title":"Category","text":""},{"location":"verb/set/category/#category-setting-verb","title":"category setting (verb)","text":"<p>See also: </p> <p>default_verb_category var (client) </p> <p>show_verb_panel var (client) </p> <p>See also: </p> <p>See also:</p> <p>default_verb_category var (client) </p> <p>show_verb_panel var (client) </p> <p>default_verb_category var (client)</p> <p>show_verb_panel var (client) </p> <p>show_verb_panel var (client)</p> <p>Format: </p> <p>set category = \"Category\"</p> <p>Format: </p> <p>Format:</p> <p>set category = \"Category\"</p> <p>Args: </p> <p>Category: A text string for the category.</p> <p>Args: </p> <p>Args:</p> <p>Category: A text string for the category.</p> <p>Verbs in the same category are visually grouped together in the verb panels. The default is \"\", which is displayed in the default panel titled \"Commands\". You can change that default by setting  <code>client/default_verb_category</code>   .</p> <p><code>client/default_verb_category</code></p> <p>To hide a verb from all panels, set the category to null. The verb may still show up in right-click popup menus, so you may want to use the  hidden   or  popup_menu   verb properties instead.</p> <p>hidden popup_menu</p>"},{"location":"verb/set/desc/","title":"Desc","text":""},{"location":"verb/set/desc/#desc-setting-verb","title":"desc setting (verb)","text":"<p>Format: </p> <p>set desc = \"Description\"</p> <p>Format: </p> <p>Format:</p> <p>set desc = \"Description\"</p> <p>Args: </p> <p>Description: A text string containing the help text.</p> <p>Args: </p> <p>Args:</p> <p>Description: A text string containing the help text.</p> <p>The desc attribute sets the descriptive help string for the verb. The player may access this by hitting the 'F1' key after entering the command. This will normally produce a list of each argument by type followed by the desc text. If you wish to override the syntax description, put your modified version inside parentheses at the beginning of the desc text.</p>"},{"location":"verb/set/desc/#_1","title":"Desc","text":"<p>Example:</p> <p>mob/verb/tell(mob/M,T as text)  set desc = \"(target,message) Talk privately to someone.\"  M &lt;&lt; \"[usr] tells you, '[T]\"</p> <p>This will produce the help text:</p> <p>usage: tell target message (Talk privately to someone.)</p> <p>If the syntax description had not been supplied, it would have produced:</p> <p>usage: tell mob \"text\" (Talk privately to someone.)</p>"},{"location":"verb/set/hidden/","title":"Hidden","text":""},{"location":"verb/set/hidden/#hidden-setting-verb","title":"hidden setting (verb)","text":"<p>See also: </p> <p>category setting (verb) </p> <p>invisibility setting (verb) </p> <p>name setting (verb) </p> <p>popup_menu setting (verb) </p> <p>See also: </p> <p>See also:</p> <p>category setting (verb) </p> <p>invisibility setting (verb) </p> <p>name setting (verb) </p> <p>popup_menu setting (verb) </p> <p>category setting (verb)</p> <p>invisibility setting (verb) </p> <p>name setting (verb) </p> <p>popup_menu setting (verb) </p> <p>invisibility setting (verb)</p> <p>name setting (verb) </p> <p>popup_menu setting (verb) </p> <p>name setting (verb)</p> <p>popup_menu setting (verb) </p> <p>popup_menu setting (verb)</p> <p>Format: </p> <p>set hidden = Setting</p> <p>Format: </p> <p>Format:</p> <p>set hidden = Setting</p> <p>Args: </p> <p>Setting: 1 for hidden verbs; 0 otherwise.</p> <p>Args: </p> <p>Args:</p> <p>Setting: 1 for hidden verbs; 0 otherwise.</p> <p>A hidden verb is not visible to players (in menus or in expansion lists) but if typed in full can still be accessed.</p> <p>An alternate way to hide a verb from the command-line and verb panels is to make \".\" the first character in the name. The verb will not show up in command-expansion (ie when hitting spacebar) until the \".\" has been typed. This could be useful for hiding verbs that would otherwise clutter up the verb list, while still making them relatively easy to use. If you think this is a random quirky feature, you are right. To put \".\" in front of the name, use the  name setting   .</p> <p>name setting</p>"},{"location":"verb/set/instant/","title":"Instant","text":""},{"location":"verb/set/instant/#instant-setting-verb","title":"instant setting (verb)","text":"<p>See also: </p> <p>settings (verb) </p> <p>See also: </p> <p>See also:</p> <p>settings (verb) </p> <p>settings (verb)</p> <p>Format: </p> <p>set instant = Setting</p> <p>Format: </p> <p>Format:</p> <p>set instant = Setting</p> <p>Args: </p> <p>Setting: 1 for \"instant\" verbs; 0 otherwise.</p> <p>Args: </p> <p>Args:</p> <p>Setting: 1 for \"instant\" verbs; 0 otherwise.</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>Normally a player can only call one verb per tick, but they can call any number of \"instant\" verbs in the same tick. This setting is useful for commands called by the game's interface, or for more responsive controls like for instance the use of \"combos\" in fighting games.</p> <p>Verbs with the instant setting can be used on the same tick as a regular verb, but only one regular verb can be used each tick. Commands are still processed in the order they are received, so verbs that use this setting may have to wait if several regular verbs are queued up ahead of them.</p> <p>Any verbs that are already built-in, such as movement commands and mouse commands, cannot be modified to use this setting. You can, however, create replacement verbs of your own for most of them.</p>"},{"location":"verb/set/instant/#_1","title":"Instant","text":"<p>Example:</p> <p>mob/verb/FastNorth()  set instant = 1  usr.Move(get_step(usr,NORTH), NORTH)</p> <p>To avoid abuse by players, you should use this setting for commands that are unlikely to cause \"spam\" or give players any kind of unfair advantage.</p>"},{"location":"verb/set/invisibility/","title":"Invisibility","text":""},{"location":"verb/set/invisibility/#invisibility-setting-verb","title":"invisibility setting (verb)","text":"<p>See also: </p> <p>hidden setting (verb) </p> <p>invisibility var (atom) </p> <p>sight var (mob) </p> <p>See also: </p> <p>See also:</p> <p>hidden setting (verb) </p> <p>invisibility var (atom) </p> <p>sight var (mob) </p> <p>hidden setting (verb)</p> <p>invisibility var (atom) </p> <p>sight var (mob) </p> <p>invisibility var (atom)</p> <p>sight var (mob) </p> <p>sight var (mob)</p> <p>Format: </p> <p>set invisibility = Setting</p> <p>Format: </p> <p>Format:</p> <p>set invisibility = Setting</p> <p>Args: </p> <p>Setting: 0 to 100</p> <p>Args: </p> <p>Args:</p> <p>Setting: 0 to 100</p> <p>Default value: </p> <p>same as invisibility of the source object.</p> <p>Default value: </p> <p>Default value:</p> <p>same as invisibility of the source object.</p> <p>An invisible verb is only accessible to players who can see invisible objects. This is different from a hidden verb which does not clutter up the verb list but which is still accessible when typed in full.</p>"},{"location":"verb/set/name/","title":"Name","text":""},{"location":"verb/set/name/#name-setting-verb","title":"name setting (verb)","text":"<p>Format: </p> <p>set name = \"Name\"</p> <p>Format: </p> <p>Format:</p> <p>set name = \"Name\"</p> <p>Args: </p> <p>Name: A text string for the name.</p> <p>Args: </p> <p>Args:</p> <p>Name: A text string for the name.</p> <p>The name attribute of a verb defaults to the node name. Setting the name attribute explicitly may be necessary if the name includes characters not allowed in node names.</p>"},{"location":"verb/set/popup_menu/","title":"Popup menu","text":""},{"location":"verb/set/popup_menu/#popup_menu-setting-verb","title":"popup_menu setting (verb)","text":"<p>See also: </p> <p>category setting (verb) </p> <p>hidden setting (verb) </p> <p>invisibility setting (verb) </p> <p>See also: </p> <p>See also:</p> <p>category setting (verb) </p> <p>hidden setting (verb) </p> <p>invisibility setting (verb) </p> <p>category setting (verb)</p> <p>hidden setting (verb) </p> <p>invisibility setting (verb) </p> <p>hidden setting (verb)</p> <p>invisibility setting (verb) </p> <p>invisibility setting (verb)</p> <p>Format: </p> <p>set popup_menu = Setting</p> <p>Format: </p> <p>Format:</p> <p>set popup_menu = Setting</p> <p>Args: </p> <p>Setting: 1 (default) for showing this verb in the popup menus; 0 otherwise.</p> <p>Args: </p> <p>Args:</p> <p>Setting: 1 (default) for showing this verb in the popup menus; 0 otherwise.</p> <p>Use this to prevent a verb from showing up in the popup \"context\" menu when users right-click on objects.</p>"},{"location":"verb/set/src/","title":"Src","text":""},{"location":"verb/set/src/#src-setting-verb","title":"src setting (verb)","text":"<p>Format: </p> <p>set src in List</p> <p>set src = List</p> <p>Format: </p> <p>Format:</p> <p>set src in List</p> <p>set src = List</p> <p>set src = List</p> <p>Args: </p> <p>List: One of view(), oview(), world, world.contents, usr, usr.contents,  usr.loc, or usr.group</p> <p>Args: </p> <p>Args:</p> <p>List: One of view(), oview(), world, world.contents, usr, usr.contents,  usr.loc, or usr.group</p> <p>With the first format, if src is in List for a particular player, then that player will have access to the proc. The player must explicitly specify the name of the source on the command line.</p> <p>The second format behaves the same, except the source is not read from the command line. If more than one possible source exists, one will be chosen at random.</p> <p>When usr or world is specified for the first format, it will be expanded to usr.contents and world.contents respectively.</p> <p>The default setting depends on the type of src:</p> <p>mob: src = usr obj: src in usr // short for usr.contents turf: src = view(0) area: src = view(0)</p>"},{"location":"verb/set/src/#_1","title":"Src","text":"<p>Example:</p> <p>obj/verb/examine()  set src in view()  usr &lt;&lt; \"You examine [src].\"</p>"},{"location":"verb/set/src/#_2","title":"Src","text":"<p>Example:</p> <p>obj/MagicCloak/verb/disappear()  set src = usr.contents</p> <p>usr.invisibility = 1  view() &lt;&lt; \"[usr] disappears!\"</p>"},{"location":"verb/set/visibility/","title":"Visibility","text":""},{"location":"verb/set/visibility/#visibility-setting-verb","title":"visibility setting (verb)","text":"<p>See: </p> <p>invisibility setting (verb) </p> <p>See: </p> <p>See:</p> <p>invisibility setting (verb) </p> <p>invisibility setting (verb)</p> <p>The function of this variable has been replaced by  <code>invisibility</code>   , which provides a full range of settings.</p> <p><code>invisibility</code></p>"},{"location":"world/proc/","title":"Proc","text":""},{"location":"world/proc/#procs-world","title":"procs (world)","text":"<p>Built-in world procs:</p> <p>world/proc</p> <p>AddCredits </p> <p>ClearMedal </p> <p>Del </p> <p>Export </p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>world/proc</p> <p>AddCredits </p> <p>ClearMedal </p> <p>Del </p> <p>Export </p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>AddCredits</p> <p>ClearMedal </p> <p>Del </p> <p>Export </p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>ClearMedal</p> <p>Del </p> <p>Export </p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Del</p> <p>Export </p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Export</p> <p>GetConfig </p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>GetConfig</p> <p>GetCredits </p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>GetCredits</p> <p>GetMedal </p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>GetMedal</p> <p>GetScores </p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>GetScores</p> <p>Import </p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Import</p> <p>IsBanned </p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>IsBanned</p> <p>IsSubscribed </p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>IsSubscribed</p> <p>New </p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>New</p> <p>OpenPort </p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>OpenPort</p> <p>PayCredits </p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>PayCredits</p> <p>Profile </p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Profile</p> <p>Reboot </p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Reboot</p> <p>Repop </p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>Repop</p> <p>SetConfig </p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>SetConfig</p> <p>SetMedal </p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>SetMedal</p> <p>SetScores </p> <p>Tick </p> <p>Topic </p> <p>SetScores</p> <p>Tick </p> <p>Topic </p> <p>Tick</p> <p>Topic </p> <p>Topic</p>"},{"location":"world/var/","title":"Var","text":""},{"location":"world/var/#vars-world","title":"vars (world)","text":"<p>Built-in world vars:</p> <p>world/var</p> <p>address </p> <p>area </p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>world/var</p> <p>address </p> <p>area </p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>address</p> <p>area </p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>area</p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>byond_build</p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>byond_version</p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>cache_lifespan</p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>contents</p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>cpu</p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>executor</p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>fps</p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>game_state</p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>host</p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>hub</p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>hub_password</p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>icon_size</p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>internet_address</p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>log</p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>loop_checks</p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>map_format</p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>map_cpu</p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>maxx</p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>maxy</p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>maxz</p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>mob</p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>movement_mode</p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>name</p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>params</p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>port</p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>process</p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>realtime</p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>reachable</p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>sleep_offline</p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>status</p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>system_type</p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>tick_lag</p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>tick_usage</p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>time</p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>timeofday</p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>timezone</p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>turf</p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>url</p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p> <p>vars</p> <p>version </p> <p>view </p> <p>visibility </p> <p>version</p> <p>view </p> <p>visibility </p> <p>view</p> <p>visibility </p> <p>visibility</p>"},{"location":"world/proc/AddCredits/","title":"AddCredits","text":""},{"location":"world/proc/AddCredits/#addcredits-proc-world","title":"AddCredits proc (world)","text":"<p>See also: </p> <p>GetCredits proc (world) </p> <p>PayCredits proc (world) </p> <p>See also: </p> <p>See also:</p> <p>GetCredits proc (world) </p> <p>PayCredits proc (world) </p> <p>GetCredits proc (world)</p> <p>PayCredits proc (world) </p> <p>PayCredits proc (world)</p> <p>Format: </p> <p>AddCredits(player, credits, note)</p> <p>Format: </p> <p>Format:</p> <p>AddCredits(player, credits, note)</p> <p>Returns: </p> <p>1 if the credits were added successfully, 0 or null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the credits were added successfully, 0 or null otherwise.</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to add to the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Args: </p> <p>Args:</p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to add to the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>credits: A number of credits to add to the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Adds credits to a player's account. The proc will return 1 if it is successful, or 0 if the attempt failed and should not be tried again. This feature is intended for games that make use of the credit system, and for security all such games must use a hub password.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/AddCredits/#_1","title":"AddCredits","text":"<p>Example:</p> <p>mob/proc/QuestCompleted(name, credits)  src &lt;&lt; \"Congratulations! You completed the [name] quest and earned [credits] credit\\s!\"  world.AddCredits(name, credits, \"Quest: [name]\")</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/ClearMedal/","title":"ClearMedal","text":""},{"location":"world/proc/ClearMedal/#clearmedal-proc-world","title":"ClearMedal proc (world)","text":"<p>See also: </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>See also: </p> <p>See also:</p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>GetMedal proc (world)</p> <p>SetMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>SetMedal proc (world)</p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>GetScores proc (world)</p> <p>SetScores proc (world) </p> <p>SetScores proc (world)</p> <p>Format: </p> <p>ClearMedal(medal, player)</p> <p>Format: </p> <p>Format:</p> <p>ClearMedal(medal, player)</p> <p>Returns: </p> <p>1 if the medal was rescinded successfully, 0 or null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the medal was rescinded successfully, 0 or null otherwise.</p> <p>Args: </p> <p>medal: name of the medal being rescinded</p> <p>player: a mob, client, key, or ckey</p> <p>Args: </p> <p>Args:</p> <p>medal: name of the medal being rescinded</p> <p>player: a mob, client, key, or ckey</p> <p>player: a mob, client, key, or ckey</p> <p>Removes a medal from a player. The proc will return 1 if it is successful, or 0 if the medal was not already awarded. If the world already knows this medal was not earned, the hub will not be contacted.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/ClearMedal/#_1","title":"ClearMedal","text":"<p>Example:</p> <p>mob/NPC  Die(mob/killer) // assume Die() is a proc all mobs have  spawn()  if(ismob(killer) &amp;&amp; killer.key)  world.ClearMedal(\"Pacifist\", killer)</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/Del/","title":"Del","text":""},{"location":"world/proc/Del/#del-proc-world","title":"Del proc (world)","text":"<p>See also: </p> <p>Del proc (datum) </p> <p>shutdown proc </p> <p>See also: </p> <p>See also:</p> <p>Del proc (datum) </p> <p>shutdown proc </p> <p>Del proc (datum)</p> <p>shutdown proc </p> <p>shutdown proc</p> <p>Format: </p> <p>Del()</p> <p>Format: </p> <p>Format:</p> <p>Del()</p> <p>When: </p> <p>Called when the world is shutdown.</p> <p>When: </p> <p>When:</p> <p>Called when the world is shutdown.</p> <p>Default action: </p> <p>Shutdown the world.</p> <p>Default action: </p> <p>Default action:</p> <p>Shutdown the world.</p> <p>When the world is destroyed, only the Del() proc of the  <code>world</code>   object is called automatically. If you want to delete any other objects, you must do so from within  <code>world/Del()</code>   . Once this procedure returns, any other procedures which may still be executing are immediately aborted and all objects are silently destroyed.</p> <p><code>world</code> <code>world/Del()</code></p> <p>To prevent accidental hangs during  <code>world/Del()</code>   from preventing shutdown, a timeout is applied to any sleeping operations such as  <code>sleep</code>   ,  <code>world.Export()</code>   , and so on. If the total time slept exceeds the timeout,  <code>world/Del()</code>   is aborted. Currently, this timeout is set at 30 seconds.</p> <p><code>world/Del()</code> <code>sleep</code> <code>world.Export()</code> <code>world/Del()</code></p>"},{"location":"world/proc/Error/","title":"Error","text":""},{"location":"world/proc/Error/#error-proc-world","title":"Error proc (world)","text":"<p>See also: </p> <p>try and catch statements </p> <p>throw statement </p> <p>exception </p> <p>See also: </p> <p>See also:</p> <p>try and catch statements </p> <p>throw statement </p> <p>exception </p> <p>try and catch statements</p> <p>throw statement </p> <p>exception </p> <p>throw statement</p> <p>exception </p> <p>exception</p> <p>Format: </p> <p>Error(exception)</p> <p>Format: </p> <p>Format:</p> <p>Error(exception)</p> <p>Args: </p> <p>exception: The error that was thrown. If this was a runtime error, the value will be an /exception datum.</p> <p>Args: </p> <p>Args:</p> <p>exception: The error that was thrown. If this was a runtime error, the value will be an /exception datum.</p> <p>Called when a runtime error happens, or the throw keyword is used, without a try/catch to handle it. The return value is ignored.</p>"},{"location":"world/proc/Export/","title":"Export","text":""},{"location":"world/proc/Export/#export-proc-world","title":"Export proc (world)","text":"<p>See also: </p> <p>Export proc (client) </p> <p>Import proc (world) </p> <p>Topic proc (world) </p> <p>link proc </p> <p>shutdown proc </p> <p>See also: </p> <p>See also:</p> <p>Export proc (client) </p> <p>Import proc (world) </p> <p>Topic proc (world) </p> <p>link proc </p> <p>shutdown proc </p> <p>Export proc (client)</p> <p>Import proc (world) </p> <p>Topic proc (world) </p> <p>link proc </p> <p>shutdown proc </p> <p>Import proc (world)</p> <p>Topic proc (world) </p> <p>link proc </p> <p>shutdown proc </p> <p>Topic proc (world)</p> <p>link proc </p> <p>shutdown proc </p> <p>link proc</p> <p>shutdown proc </p> <p>shutdown proc</p> <p>Format: </p> <p>Export(Addr,File,Persist,Clients)</p> <p>Format: </p> <p>Format:</p> <p>Export(Addr,File,Persist,Clients)</p> <p>When: </p> <p>Call this to send a message to another server. The message may be  composed of an optional topic text string (in the address) and an  optional file. This will call world.Topic() on the remote server,  which may in turn call world.Import() to access the file.</p> <p>When: </p> <p>When:</p> <p>Call this to send a message to another server. The message may be  composed of an optional topic text string (in the address) and an  optional file. This will call world.Topic() on the remote server,  which may in turn call world.Import() to access the file.</p> <p>Args: </p> <p>Addr: The address of the recipient server. It should be in the form  byond://server?topic. The topic portion is optional.</p> <p>File: The (optional) file to send. This could be a cache file (in  single quotes) an external file (in double quotes) or a savefile.</p> <p>Persist: Set to 1 to indicate that the server should keep this connection open, to expedite subsequent calls to the same address. An open connection can be closed at a later time by passing 0 in the Persist field.</p> <p>Clients: An optional client, or list of clients, to tell the receiver about.</p> <p>Args: </p> <p>Args:</p> <p>Addr: The address of the recipient server. It should be in the form  byond://server?topic. The topic portion is optional.</p> <p>File: The (optional) file to send. This could be a cache file (in  single quotes) an external file (in double quotes) or a savefile.</p> <p>Persist: Set to 1 to indicate that the server should keep this connection open, to expedite subsequent calls to the same address. An open connection can be closed at a later time by passing 0 in the Persist field.</p> <p>Clients: An optional client, or list of clients, to tell the receiver about.</p> <p>File: The (optional) file to send. This could be a cache file (in  single quotes) an external file (in double quotes) or a savefile.</p> <p>Persist: Set to 1 to indicate that the server should keep this connection open, to expedite subsequent calls to the same address. An open connection can be closed at a later time by passing 0 in the Persist field.</p> <p>Clients: An optional client, or list of clients, to tell the receiver about.</p> <p>Persist: Set to 1 to indicate that the server should keep this connection open, to expedite subsequent calls to the same address. An open connection can be closed at a later time by passing 0 in the Persist field.</p> <p>Clients: An optional client, or list of clients, to tell the receiver about.</p> <p>Clients: An optional client, or list of clients, to tell the receiver about.</p> <p>Default action: </p> <p>Send the topic text string and file to the remote server and return the  result of calling world.Topic() there. Note that this will cause the  caller to sleep while waiting for the necessary data to be transfered.</p> <p>Default action: </p> <p>Default action:</p> <p>Send the topic text string and file to the remote server and return the  result of calling world.Topic() there. Note that this will cause the  caller to sleep while waiting for the necessary data to be transfered.</p>"},{"location":"world/proc/Export/#_1","title":"Export","text":"<p>Example:</p> <p>mob/verb/shout(Msg as text)  world &lt;&lt; Msg  world.Export(\"[ShadowWorld]?shout:[Msg]\")</p> <p>This example defines a verb that will broadcast a message to everyone in this world as well as sending it in the form of topic text to another world whose address is stored in the variable ShadowWorld. This address could be manually set or could be the result of calling startup().</p> <p>It is also possible to access an HTTP server via world.Export(). Simply use an http address such as:</p> <p>http://www.byond.com</p> <p>. This returns a list of HTTP header parameters as well as the extra values \"STATUS\" and \"CONTENT\". The value associated with the \"STATUS\" entry is the HTTP status code returned by the web server (as text). The value associated with the \"CONTENT\" entry is the requested resource.</p> <p>http://www.byond.com</p>"},{"location":"world/proc/Export/#_2","title":"Export","text":"<p>Example:</p> <p>mob/verb/test()  var/http[] = world.Export(\"http://www.byond.com\")</p> <p>if(!http)  usr &lt;&lt; \"Failed to connect.\"  return</p> <p>usr &lt;&lt; \"HTTP Header:\"  for(var/V in http)  usr &lt;&lt; \"[V] = [http[V]]\"</p> <p>usr &lt;&lt; \"\\n\"</p> <p>var/F = http[\"CONTENT\"]  if(F)  usr &lt;&lt; html_encode(file2text(F))</p> <p>Note that the HTTP request is submitted using the GET method as opposed to the POST method. Support for POST may be added in the future.</p> <p>If the Clients argument is used, it accepts a client that is currently loggedin, a mob belonging to such a client, or a list of any of these. The remote server will receive a list of their keys in world.Topic().</p>"},{"location":"world/proc/GetConfig/","title":"GetConfig","text":""},{"location":"world/proc/GetConfig/#getconfig-proc-world","title":"GetConfig proc (world)","text":"<p>See also: </p> <p>IsBanned proc (world) </p> <p>SetConfig proc (world) </p> <p>See also: </p> <p>See also:</p> <p>IsBanned proc (world) </p> <p>SetConfig proc (world) </p> <p>IsBanned proc (world)</p> <p>SetConfig proc (world) </p> <p>SetConfig proc (world)</p> <p>Format: </p> <p>GetConfig(config_set,param)</p> <p>Format: </p> <p>Format:</p> <p>GetConfig(config_set,param)</p> <p>Returns: </p> <p>Value of requested parameter.</p> <p>Returns: </p> <p>Returns:</p> <p>Value of requested parameter.</p> <p>Args: </p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>Args: </p> <p>Args:</p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>param: name of the configuration parameter</p> <p>This command is for retrieving configuration information that is shared by applications installed on the same system. The configuration data is accessed by specifying the configuration \"set\" and the parameter within that set. The \"sets\" defined so far are:</p> <p>env system environment variables (changes are not persistent) admin list of site administrators ban list of banned users or IP addresses keyban list of banned users (deprecated) ipban list of banned addresses (deprecated)</p> <p>If no parameter is specified, a list of the names of all available parameters is returned.</p> <p>The format of the configuration data itself is currently being defined. It will generally be a sequence of parameters (such as produced by list2params()). For example, each ban entry would have the user's ckey or ckeyEx as the parameter, and might have data such as \"reason=jerkish;message=You+jerk!\".</p>"},{"location":"world/proc/GetConfig/#_1","title":"GetConfig","text":"<p>Example:</p> <p>mob/verb  ban(key as text)  world.SetConfig(\"ban\",ckey(key),\"reason=fiendish;admin=[ckey]\")  lookban(key as null|text)  if(key)  usr &lt;&lt; \"[key]: [world.GetConfig(\"ban\",key)]\"  else  var/lst[] = world.GetConfig(\"ban\")  for(key in lst)  usr &lt;&lt; \"[key]: [world.GetConfig(\"ban\",key)]\"</p> <p>Ban files store information on a game-specific basis. You will only be able to read and write values that are set for the game you are running  (defined by the value of world.hub). It is possible for a host to specify universal bans as well, but these will not be accessible via GetConfig or SetConfig. If you are using \"ban\" as the config_set, IP addresses are recognized automatically. (See the ban format info below.)</p> <p>It is possible, but rarely useful, to specify a configuration \"space\" of SYSTEM, USER, HOME, or APP. Settings made in the SYSTEM space are shared by all BYOND software on the computer. The USER space is shared by all software owned by the same user. The HOME space is shared by all worlds running with the same safe home directory. The APP space is shared by all software running from the same filesystem directory. By default, the USER space is used, and if that cannot be modified (in safe mode), then HOME is used instead. These distinctions are sometimes important on a UNIX machine, where there are many BYOND sites belonging to different users, but even then, the default behavior is almost always what you want.</p> <p>The configuration space is specified inside the configuration set parameter like this:</p> <p>world.SetConfig(\"APP/keyban\",...)</p> <p>When reading configuration settings, the spaces are always lumped together. In cases of settings with the same name but different values, APP overrides HOME, which overrides USER, which overrides SYSTEM.</p>"},{"location":"world/proc/GetConfig/#_2","title":"GetConfig","text":"<p>Ban Format</p> <p>If you want to create or read bans at runtime by using the \"ban\" config set, these are the main parameters currently used:</p> <p>type</p> <p>The ban's type, if any. It can be \"sticky\", \"session\", or \"time\", or a combination separated by commas. Session bans expire when the current session is over (world.Reboot() does not affect this).</p> <p>reason</p> <p>The reason the ban was implemented; this is for the host's or admin's purposes only and is not displayed to the user.</p> <p>message</p> <p>A message to display to the user.</p> <p>keys</p> <p>Other keys caught in a sticky ban.</p> <p>IP</p> <p>Other IP addresses caught in a sticky ban.</p> <p>computer_id</p> <p>Other computer_id values caught in a sticky ban.</p> <p>time</p> <p>The number of seconds remaining in the ban. The type parameter must include \"time\" for this to mean anything. If this parameter is not present when a timed ban is read, it means the ban has expired.</p> <p>type</p> <p>The ban's type, if any. It can be \"sticky\", \"session\", or \"time\", or a combination separated by commas. Session bans expire when the current session is over (world.Reboot() does not affect this).</p> <p>reason</p> <p>The reason the ban was implemented; this is for the host's or admin's purposes only and is not displayed to the user.</p> <p>message</p> <p>A message to display to the user.</p> <p>keys</p> <p>Other keys caught in a sticky ban.</p> <p>IP</p> <p>Other IP addresses caught in a sticky ban.</p> <p>computer_id</p> <p>Other computer_id values caught in a sticky ban.</p> <p>time</p> <p>The number of seconds remaining in the ban. The type parameter must include \"time\" for this to mean anything. If this parameter is not present when a timed ban is read, it means the ban has expired.</p> <p>The old \"keyban\" and \"ipban\" config files are now just aliases for \"ban\".</p>"},{"location":"world/proc/GetCredits/","title":"GetCredits","text":""},{"location":"world/proc/GetCredits/#getcredits-proc-world","title":"GetCredits proc (world)","text":"<p>See also: </p> <p>AddCredits proc (world) </p> <p>PayCredits proc (world) </p> <p>See also: </p> <p>See also:</p> <p>AddCredits proc (world) </p> <p>PayCredits proc (world) </p> <p>AddCredits proc (world)</p> <p>PayCredits proc (world) </p> <p>PayCredits proc (world)</p> <p>Format: </p> <p>GetCredits(player)</p> <p>Format: </p> <p>Format:</p> <p>GetCredits(player)</p> <p>Returns: </p> <p>Number of credits if hub contact was successful, null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>Number of credits if hub contact was successful, null otherwise.</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>Args: </p> <p>Args:</p> <p>player: a mob, client, key, or ckey</p> <p>Retrieves the number of available credits in a player's account. This feature is intended for games that make use of the credit system, and for security all such games must use a hub password.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p> <p>The best time to call this proc is before a player does something that would allow them to spend credits, and/or just afterward, so they can see what is left in their account.</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetMedal/","title":"GetMedal","text":""},{"location":"world/proc/GetMedal/#getmedal-proc-world","title":"GetMedal proc (world)","text":"<p>See also: </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>See also: </p> <p>See also:</p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>SetMedal proc (world)</p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>ClearMedal proc (world)</p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>GetScores proc (world)</p> <p>SetScores proc (world) </p> <p>SetScores proc (world)</p> <p>Format: </p> <p>GetMedal(medal, player)</p> <p>Format: </p> <p>Format:</p> <p>GetMedal(medal, player)</p> <p>Returns: </p> <p>1 if the medal has been earned by the player</p> <p>0 if the medal has not been earned</p> <p>A list of medals in list2params() format if checking all medals</p> <p>null if the hub cannot be contacted</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the medal has been earned by the player</p> <p>0 if the medal has not been earned</p> <p>A list of medals in list2params() format if checking all medals</p> <p>null if the hub cannot be contacted</p> <p>0 if the medal has not been earned</p> <p>A list of medals in list2params() format if checking all medals</p> <p>null if the hub cannot be contacted</p> <p>A list of medals in list2params() format if checking all medals</p> <p>null if the hub cannot be contacted</p> <p>null if the hub cannot be contacted</p> <p>Args: </p> <p>medal: name of the medal being checked</p> <p>player: a mob, client, key, or ckey</p> <p>Args: </p> <p>Args:</p> <p>medal: name of the medal being checked</p> <p>player: a mob, client, key, or ckey</p> <p>player: a mob, client, key, or ckey</p> <p>Checks to see if a medal has been awarded to the player in question. If the medal has been awarded, the return value is 1. If not, 0.</p> <p>You can also use GetMedal() to read a list of all medals a player has earned for the hub entry, by leaving the medal argument blank. If you also leave the player argument blank, you will get a list of all medals available to the hub entry. In both cases the result can be parsed with params2list().</p> <p>This proc will return null if there was no way to reach the hub or otherwise verify the medal's status. Use isnull() to check for a null value.</p> <p>Whenever possible, GetMedal() will avoid contacting the hub by using the information it was given when the user logged in. If contacting the hub is required, the proc may take a few moments to return a result. It is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetMedal/#_1","title":"GetMedal","text":"<p>Example:</p> <p>turf/medal_door  density = 1  icon_state = \"closed\"  var/medal = \"Dragon slayer\"</p> <p>verb/Knock()  usr &lt;&lt; \"  Guard:   Just checking your credentials....\"  var/hasmedal = world.GetMedal(medal, usr)  if(hasmedal)  usr &lt;&lt; \"  Guard:   Go right in.\"  icon_state = \"open\"  density = 0  else if(!isnull(hasmedal))  usr &lt;&lt; \"  Guard:   Sorry, no admittance without a  [medal]   badge.\"  else  usr &lt;&lt; \"  Guard:   Sorry, I lost the paperwork. Try again later.\"</p> <p>Guard: Guard: Guard: [medal] Guard:</p> <p>You can add an optional hub path argument if you want to look at a medal for a different hub entry.</p>"},{"location":"world/proc/GetScores/","title":"GetScores","text":""},{"location":"world/proc/GetScores/#getscores-proc-world","title":"GetScores proc (world)","text":"<p>See also: </p> <p>SetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>See also: </p> <p>See also:</p> <p>SetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>SetScores proc (world)</p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetMedal proc (world)</p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>SetMedal proc (world)</p> <p>ClearMedal proc (world) </p> <p>ClearMedal proc (world)</p> <p>Formats: </p> <p>GetScores(key, fields)</p> <p>GetScores(count, field)</p> <p>GetScores(count, skip, field)</p> <p>Formats: </p> <p>Formats:</p> <p>GetScores(key, fields)</p> <p>GetScores(count, field)</p> <p>GetScores(count, skip, field)</p> <p>GetScores(count, field)</p> <p>GetScores(count, skip, field)</p> <p>GetScores(count, skip, field)</p> <p>Returns: </p> <p>A parameter list of scores for a given entry. Use params2list() to interpret the results.</p> <p>Returns: </p> <p>Returns:</p> <p>A parameter list of scores for a given entry. Use params2list() to interpret the results.</p> <p>Args: </p> <p>key: the name of the player, character, etc. for which scores have been set</p> <p>fields: The data fields to retrieve</p> <p>count: The number of top score records to look at</p> <p>skip: The number of top score records to skip over</p> <p>Args: </p> <p>Args:</p> <p>key: the name of the player, character, etc. for which scores have been set</p> <p>fields: The data fields to retrieve</p> <p>count: The number of top score records to look at</p> <p>skip: The number of top score records to skip over</p> <p>fields: The data fields to retrieve</p> <p>count: The number of top score records to look at</p> <p>skip: The number of top score records to skip over</p> <p>count: The number of top score records to look at</p> <p>skip: The number of top score records to skip over</p> <p>skip: The number of top score records to skip over</p> <p>Retrieves information about scores that is kept on the BYOND hub.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_1","title":"GetScores","text":"<p>GetScores(key, fields)</p> <p>In this form, you can get information about individual scores. This is the most common way to use GetScores().</p> <p>The key is an arbitrary text value. Usually a player's key is a good choice, but you can also use the name of their character, or anything else you like, as long as it is unique. The key is case-insensitive.</p> <p>Scores and stats use data fields, which might be things like \"Score\", \"Level\", \"Class\", etc. To retrieve all the fields associated with a key, leave the fields argument blank. To retrieve only certain fields, you can send a separated list like \"Score;Level\" which is in the same format returned by list2params().</p> <p>If you leave the key argument blank, you will get a complete list of keys that have scores and stats associated with them.</p>"},{"location":"world/proc/GetScores/#_2","title":"GetScores","text":"<p>Example 1:</p> <p>mob/var/scores_found mob/var/score = 0</p> <p>mob/Login()  ..()  spawn()  var/scores = world.GetScores(key)  scores_found = !isnull(scores)  if(scores)  var/list/params = params2list(scores)  if(params[\"Score\"])  score = text2num(params[\"Score\"])  src &lt;&lt; \"You have [score] point\\s!\"</p>"},{"location":"world/proc/GetScores/#_3","title":"GetScores","text":"<p>GetScores(count, field)</p> <p>and   GetScores(count, skip, field)</p> <p>and</p> <p>In this form, the proc gets a list of the top scores for a certain field, and gives you the keys and scores in order. To get the top 10 players by level, for instance, you would use GetScores(10,\"level\"). This returns a parameter list with the top keys and scores, so it might be in a form like \"Bob=100;Anita=80;David=20;Charlie=5\".</p> <p>The count and skip arguments are always numbers, not text. The count is the number of scores to retrieve, and skip is the number to skip over to get to them. So count=10 and skip=0 is the top 10, while count=10 and skip=5 is</p>"},{"location":"world/proc/GetScores/#6-through-15-if-you-leave-out-skip-its-a-0","title":"6 through #15. If you leave out skip, it's a 0.","text":"<p>The way you set up your hub entry is how the top scores are determined. If you told the hub that the \"score\" field is always sorted from highest number to lowest, then that's what you'll get. If \"birthplace\" is set up to use an alphabetical order, that's the order that GetScores() will use. If a field cannot be sorted, this form of GetScores() will return an empty text string.</p> <p>If you don't specify a field, your hub entry may have a default field to use. For instance if your hub page displays \"Score\", then \"Level\", then the \"Score\" field is the default.</p>"},{"location":"world/proc/GetScores/#_4","title":"GetScores","text":"<p>Example 2:</p> <p>mob/var/scores_found</p> <p>mob/Login()  ..()  spawn()  var/top_scores = world.GetScores(10, \"Booty\")  scores_found = !isnull(scores)  if(scores)  var/list/params = params2list(scores)  src &lt;&lt; \"  Top Buccaneers:   \"  for(var/i=1, i</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#import-proc-world","title":"Import proc (world)","text":"<p>See also: </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>Format: </p> <p>Import()</p> <p>Returns: </p> <p>The file sent by the remote server. The file will be downloaded to the  local server's resource cache. Note that this will cause the caller to  sleep while waiting for the necessary data to be transfered.</p> <p>When: </p> <p>Call this inside world.Topic() if you are expecting a file from the  remote server.</p>"},{"location":"world/proc/GetScores/#_5","title":"GetScores","text":"<p>Example:</p> <p>//sending the file mob/proc/Export(Addr)  var/savefile/F = new()  F.Write(src)  world.Export(Addr,F)</p> <p>//receiving the file world/Topic()  var/savefile/F = new(world.Import())  F.Read() //read the mob</p> <p>This example defines a mob proc called Export() which writes the mob to a savefile and sends it to another server (specified by Addr). The remote server opens it as a savefile and creates the mob (if the same mob type is defined on both servers and mob.Read() is compatible with the sending server's mob.Write()).</p> <p>Note that another method of transferring player mobs is to use the key savefile (accessed by client.Export() and client.Import()). Direct server to server communication on the other hand could transfer data (like non-players) without the need for player involvement at all.</p> <p>Savefiles are the most common type of file to transfer, but world.Import() simply returns a reference to an item in the world's .rsc file, which could be any type of file. This particular example demonstrates how to open such a file as a temporary savefile. (It gets dumped from the cache into a separate temporary file, which is then opened as a savefile.) Other types of files would be handled differently. For example, you could use fcopy() to dump the cached item to its own separate file.</p>"},{"location":"world/proc/GetScores/#isbanned-proc-world","title":"IsBanned proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>params2list proc </p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>Format: </p> <p>IsBanned(key,address,computer_id,type)</p> <p>Returns: </p> <p>True value if user is banned from this world. This may be a list, in which case special meaning is attributed to certain list elements as described below.</p> <p>Args: </p> <p>key: BYOND key of the user.</p> <p>address: current IP address of the user.</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>By default, this procedure checks the \"ban\" configuration file. If an entry is found for the current world (based on the value of world.hub), the parameter text is converted into a list (using params2list()), and the result is returned. Otherwise, null is returned.</p> <p>A ban that applies to all worlds on the host's computer will not call IsBanned(). The connection will simply be denied.</p> <p>This procedure is called internally whenever a new user connects (before client/New() is called). If the result is true, access is denied. If you want to ban a user but still allow them to log in (perhaps with reduced functionality), you can put \"Login=1\" in the parameter text. If you want to display an explanation to the user about why they are banned, you can also put \"message=X\" in the parameter text, where X is the message to display to the user. A reason for the ban can be added with a \"reason=X\" field. Of course, you can also override IsBanned() and insert these values directly into the list that is returned.</p>"},{"location":"world/proc/GetScores/#example","title":"Example","text":"<p>world/IsBanned(key,address)  . = ..() //check the ban lists  if(istype(., /list))  .[\"Login\"] = 1 //allow banned user to login</p> <p>When you ban people from paging you, this also causes them to be added to the keyban list. Even if they are already connected, IsBanned() will be re-evaluated and acted upon at that time. When you remove pager ban, they are removed from keyban as well.</p> <p>Additional data elements may be added to the ban list in the future. The current definition includes just the following items:</p> <p>Login</p> <p>true if banned user should be allowed to log in</p> <p>reason</p> <p>text string describing the reason or origin of the ban. For example, when people are banned from the pager, they are added to the \"keyban\" list with reason = \"pager ban\". This text is internal information only and is not displayed to the banned user.</p> <p>message</p> <p>text string explaining to the user why they were banned and possibly what they should do to be forgiven.</p> <p>Since the data in the \"ban\" file is in  application/x-www-form-urlencoded   format, it is probably not desirable to edit the file by hand. No built-in facilities for editing the file have been provided (aside from automatic addition of pager bans), but an interface could be created, using  GetConfig   and  SetConfig   to read and write the data. Extra features could also be added such as automatic inference of key associations by IP address.</p>"},{"location":"world/proc/GetScores/#issubscribed-proc-world","title":"IsSubscribed proc (world)","text":"<p>Format: </p> <p>IsSubscribed(player)</p> <p>IsSubscribed(player, \"BYOND\") (to check BYOND Membership)</p> <p>Returns: </p> <p>Number of days left in subscription, -1 for a lifetime subscriber,  or   null if hub contact failed</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>Checks a player for their subscription status to this game. This is a simpler alternative to</p> <p>client.CheckPassport()</p> <p>, which is deprecated, and also allows you to check even when the player has gone offline.</p> <p>This proc will return null if contacting the hub was required, but there was no way to reach the hub. Contacting the hub may take a few moments, so it is a good idea to use  spawn()   to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_6","title":"GetScores","text":"<p>Example:</p> <p>mob/verb/JoinClub()  if(!world.IsSubscribed(src))  src &lt;&lt; \"Sorry, the club is only for subscribers.\"  else  // go to the turf with the tag \"clubhouse\"  loc = locate(\"clubhouse\")  src &lt;&lt; \"Welcome to the clubhouse!\"</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#new-proc-world","title":"New proc (world)","text":"<p>Format: </p> <p>New()</p> <p>When: </p> <p>Called after the world is initially loaded. The only procs preceding  this one would be in the initialization of global variables and objects  on the map.</p> <p>Default action: </p> <p>None.</p>"},{"location":"world/proc/GetScores/#openport-proc-world","title":"OpenPort proc (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>visibility var (world) </p> <p>See also: </p> <p>OpenPort(port=0)</p> <p>Args: </p> <p>port: the network port to open</p> <p>Returns: </p> <p>1 on success; 0 on failure</p> <p>This causes the world to be hosted on the specified network port. A value of 0 or \"any\" requests that any available port be used. The value \"none\" causes the port to be closed so that no new connections are possible.</p> <p>This proc may be overridden. If it is, calling ..() is necessary to open the port. If ..() is not called, it will not open.</p>"},{"location":"world/proc/GetScores/#_7","title":"GetScores","text":"<p>Example:</p> <p>world/OpenPort(port)  // only allow subscribers to host  if(host_is_subscribed)  return ..()</p> <p>The \"ports\" configuration option in cfg/byond.txt can be used to control what ports worlds may open. The -ports command-line option may also be used. See  startup   for the syntax.</p>"},{"location":"world/proc/GetScores/#paycredits-proc-world","title":"PayCredits proc (world)","text":"<p>See also: </p> <p>AddCredits proc (world) </p> <p>GetCredits proc (world) </p> <p>Format: </p> <p>PayCredits(player, credits, note)</p> <p>Returns: </p> <p>1 if the credits were spent successfully, 0 or null otherwise.</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to deduct from the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Removes credits from a player's account, if they have enough. The proc will return 1 if it is successful, or 0 if the attempt failed (usually because the player doesn't have enough credits). This feature is intended for games that make use of the credit system, and for security all such games must use a hub password.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is often a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_8","title":"GetScores","text":"<p>Example:</p> <p>mob/proc/ItemShop()  var/items = list(\"Get credits!\", \"Magic sword\"=10, \"Skeleton key\"=50)  var/choices[0]  var/item,price  for(item in items)  price = items[item]  choices[\"[item]: [price] credit\\s\"] = item</p> <p>var/credits = world.GetCredits(key)  if(isnull(credits))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  return</p> <p>var/choice = input(src,\\  \"You have [credits] credit\\s. What would you like to purchase?\",\\  \"Item Shop\")\\  as null|anything in choices  if(!choice) return // cancel</p> <p>if(choice == \"Get credits\")  src &lt;&lt; link(\"http://www.byond.com/games/Author/MyGame/credits\")  return</p> <p>item = choices[choice]  price = items[item]  if(!price) return</p> <p>src &lt;&lt; \"Contacting item shop...\"  var/result = world.PayCredits(name, price, \"Item shop: [item]\")</p> <p>if(isnull(result))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  else if(!result)  src &lt;&lt; \"You need [price-credits] more credit\\s to buy [item].\"  else  src &lt;&lt; \"You bought \\a [item]!\"</p> <p>// Now give the user the item and save their character  // These procs are for you to define  src.AddEquipment(item)  src.SaveCharacter()</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#profile-proc-world","title":"Profile proc (world)","text":"<p>Format: </p> <p>Profile(command, format)</p> <p>Profile(command, type, format)</p> <p>Returns: </p> <p>Profilng data or null</p> <p>Args: </p> <p>command: A numerical value that says whether to start, stop, refresh, etc.</p> <p>type: A type of profile to use, other than proc profiling.</p> <p>format: Optional format for output data</p> <p>Interacts with the built-in server profiler without requiring the host to do so via Dream Daemon, or an authorized player via Dream Seeker.</p> <p>The</p> <p>command</p> <p>value is built from bitflags, so it can combine any of these three values via the</p> <p>|</p> <p>operator:</p> <p>PROFILE_STOP</p> <p>Stop profiling. Not using this flag will start/continue profiling.</p> <p>PROFILE_CLEAR</p> <p>Clear all profile data. This will also cause the proc to return null.</p> <p>PROFILE_AVERAGE</p> <p>Any output data should use average times instead of total times.</p> <p>These additional values are also defined for convenience:</p> <p>PROFILE_START</p> <p>Start/continue profiling but don't clear any existing data.</p> <p>PROFILE_REFRESH</p> <p>Currently this is the same as</p> <p>PROFILE_START</p> <p>.</p> <p>PROFILE_RESTART</p> <p>Start profiling and clear existing data.</p>"},{"location":"world/proc/GetScores/#_9","title":"GetScores","text":"<p>Profiling procs</p> <p>By default, data will be returned as a list. The first six values are the column names:</p> <p>\"name\"</p> <p>,</p> <p>\"self\"</p> <p>,</p> <p>\"total\"</p> <p>,</p> <p>\"real\"</p> <p>,</p> <p>\"over\"</p> <p>, and</p> <p>\"calls\"</p> <p>, corresponding to the columns in the profiler. These are followed by the profile data for each proc, with the data being in the same column order. E.g. the next six items represent the first proc in the profile.</p> <p>The optional</p> <p>format</p> <p>argument however can be used to return the data in other formats. Currently the only accepted value is</p> <p>\"json\"</p> <p>, which will output the same data in JSON format.</p>"},{"location":"world/proc/GetScores/#_10","title":"GetScores","text":"<p>SendMaps profile</p> <p>Using</p> <p>\"sendmaps\"</p> <p>in the</p> <p>type</p> <p>argument will profile the routines used to send map informaiton to players. Unlike the proc profiling this only has three data columns:</p> <p>\"name\"</p> <p>,</p> <p>\"value\"</p> <p>, and</p> <p>\"calls\"</p> <p>. The value column might be a time or number value, depending on what's being measured.</p> <p>The JSON format will include a</p> <p>unit</p> <p>property data that is not a raw number, such as a time value.</p>"},{"location":"world/proc/GetScores/#reboot-proc-world","title":"Reboot proc (world)","text":"<p>Format: </p> <p>Reboot(reason)</p> <p>Args: </p> <p>reason: the reason</p> <p>Reboot()</p> <p>was called:  * 0 or null: Called by game code * 1: By host (Ctrl+R in Dream Seeker) * 2: By  world.Topic() * 3: By SIGUSR1 in UNIX</p> <p>Default action: </p> <p>Reload the world from scratch. Any connected players will automatically relogin. This would be useful if you needed to recompile the world after changing some code.</p> <p>In a UNIX environment, you can cause a running server to reboot by sending it the signal SIGUSR1.</p> <p>If you override this proc, you must call ..() if you want the reboot to complete normally.</p> <p>For reboots initiated by Dream Seeker, usr will be the mob belonging to the player who sent the command.</p>"},{"location":"world/proc/GetScores/#repop-proc-world","title":"Repop proc (world)","text":"<p>Format: </p> <p>Repop()</p> <p>Default action: </p> <p>Reload the obj and mob instances defined in the world map. This  \"repopulates\" a world to its initial state. Only objects that were  destroyed will be recreated.</p>"},{"location":"world/proc/GetScores/#setconfig-proc-world","title":"SetConfig proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>Format: </p> <p>SetConfig(config_set,param,value)</p> <p>Args: </p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>value: data to store (or null to delete this entry)</p> <p>This command is for storing configuration information that is shared by applications installed on the same system. The configuration data is accessed by specifying the configuration \"set\" and the parameter within that set.</p> <p>For more information, see  GetConfig   .</p>"},{"location":"world/proc/GetScores/#setmedal-proc-world","title":"SetMedal proc (world)","text":"<p>See also: </p> <p>GetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>Format: </p> <p>SetMedal(medal, player)</p> <p>Returns: </p> <p>1 if the medal was awarded successfully, 0 or null otherwise.</p> <p>Args: </p> <p>medal: name of the medal being awarded</p> <p>player: a mob, client, key, or ckey</p> <p>Awards a medal to a player. The proc will return 1 if it is successful, or 0 if the medal was already awarded. If the world already knows this medal was earned before, the hub will not be contacted.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_11","title":"GetScores","text":"<p>Example:</p> <p>mob/monster/dragon  Die(mob/killer) // assume Die() is a proc all mobs have  spawn()  if(ismob(killer) &amp;&amp; killer.key)  world.SetMedal(\"Dragon slayer\", killer)</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#setscores-proc-world","title":"SetScores proc (world)","text":"<p>See also: </p> <p>GetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>Format: </p> <p>SetScores(key, fields)</p> <p>Returns: </p> <p>The key, if the scores were successfully updated; null otherwise.</p> <p>Args: </p> <p>key: the name of the player, character, etc. for which scores should be set</p> <p>fields: The data fields to set</p> <p>Updates scores that are kept on the BYOND hub.</p> <p>The key is an arbitrary text value. Usually a player's key is a good choice, but you can also use the name of their character, or anything else you like, as long as it is unique. The key is case-insensitive.</p> <p>Scores and stats use data fields, which might be things like \"Score\", \"Level\", \"Class\", etc. Use list2params() to set the fields that you want to change. Fields that you do not include in the list will not be changed. A field with a blank value will be deleted.</p> <p>Sending an empty text string for the fields will erase the scores for that key.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_12","title":"GetScores","text":"<p>Example:</p> <p>var/params</p> <p>// Change the Score and Pet fields params = list(\"Score\"=123, \"Pet\"=\"Dog\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete the Pet field params = list(\"Pet\"=\"\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete Tom's scores entirely world.SetScores(\"Tom\", \"\")</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#tick-proc-world","title":"Tick proc (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>map_cpu var (world) </p> <p>tick_usage var (world) </p> <p>Format: </p> <p>Tick()</p> <p>When: </p> <p>Called during the server tick, after sleeping procs and queued commands, just before map information is sent to the clients.</p> <p>Default action: </p> <p>None.</p> <p>This proc allows you to do any updates just before map info is sent out. One possible use for this is to run a movement loop, or sync up any user interface input that might have arrived and deal with it all at once.</p>"},{"location":"world/proc/GetScores/#_13","title":"GetScores","text":"<p>Example:</p> <p>world/Tick()  for(var/client/C)  if(C.mob?.move_dir)  try  step(C.mob, move_dir)  catch  // empty catch, just so a failed step won't break the loop</p> <p>Note: The tick will not wait if this proc sleeps. It effectively has  set waitfor=0   already built in. It's a good idea not to sleep in this proc or any of its callees at all, since it will keep getting called every tick.</p>"},{"location":"world/proc/GetScores/#topic-proc-world","title":"Topic proc (world)","text":"<p>See also: </p> <p>Del proc (world) </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Format: </p> <p>Topic(T,Addr,Master,Keys)</p> <p>When: </p> <p>Called when a message is received from another server by using  world.Export(). If a file is expected, world.Import() may be called to  get it. The return value of Topic() will be passed back to the remote  server.</p> <p>Args: </p> <p>T: The topic text string specified by the remote server (everything following ? in the URL).</p> <p>Addr: The address of the remote server.</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Default action: </p> <p>The topic \"ping\" returns a true value (number of players plus one),  which may be useful for telling if a server is alive. The topics  \"Reboot\" and \"Del\" will call world.Reboot() and world.Del()  respectively if the message was sent by the master server.</p>"},{"location":"world/proc/GetScores/#_14","title":"GetScores","text":"<p>Example:</p> <p>world/Topic(T)  if(findtext(T,\"shout:\") == 1)  world &lt;&lt; copytext(T,7)</p> <p>This example allows other servers to send this server topic text of the form \"shout:msg\" and will broadcast the message to all the players in this world.</p> <p>The Keys argument is either null, or a list of user keys. Any keys in the list are logged in to the remote server.</p> <p>Always validate the input in</p> <p>Topic()</p> <p>calls to make sure it's correct and the query you're recieving is legitimate.</p>"},{"location":"world/proc/GetScores/#vars-world","title":"vars (world)","text":"<p>Built-in world vars:</p> <p>world/var</p> <p>address </p> <p>area </p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p>"},{"location":"world/proc/GetScores/#address-var-world","title":"address var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>url var (world) </p> <p>internet_address var (world) </p> <p>This is the network address of the machine hosting the world. If it cannot be determined, it will be null.</p> <p>The full network address of the world may be formed by concatenating the world address and port: \"byond://[address]:[port]\".</p> <p>In CGI mode, this is the web address of the world.</p> <p>This is the local address only. If the world is hosted via a router, the external IP address may be different. Use</p> <p>internet_address</p> <p>to find the external address, if available.</p>"},{"location":"world/proc/GetScores/#area-var-world","title":"area var (world)","text":"<p>Default value: </p> <p>/area.</p> <p>This is the default area type to be placed on the map wherever no area is specified. A value of 0 turns off the default area.</p>"},{"location":"world/proc/GetScores/#byond_build-var-world","title":"byond_build var (world)","text":"<p>See also: </p> <p>DM_VERSION macro </p> <p>byond_version var (world) </p> <p>byond_version var (client) </p> <p>byond_build var (savefile) </p> <p>byond_version var (savefile) </p> <p>This is the build number (minor version) of BYOND being run by this server. Typically this is not useful information, but it can come in handy when diagnosing issues reported by players when hosting with a beta build.</p>"},{"location":"world/proc/GetScores/#byond_version-var-world","title":"byond_version var (world)","text":"<p>See also: </p> <p>DM_VERSION macro </p> <p>byond_build var (world) </p> <p>system_type var (world) </p> <p>byond_version var (client) </p> <p>byond_build var (savefile) </p> <p>byond_version var (savefile) </p> <p>This is the version of BYOND at run-time. A game designed to work around known bugs in older versions could use this to adapt its behavior accordingly.</p>"},{"location":"world/proc/GetScores/#cache_lifespan-var-world","title":"cache_lifespan var (world)","text":"<p>See also: </p> <p>cache </p> <p>Default value: </p> <p>30 (days)</p> <p>Number of days items that are not in use will be saved in the resource cache (.rsc file). Files uploaded by players are stored in the world's .rsc file for future use. If the file is not used for the specified amount of time, it will be removed to save space.</p> <p>Setting this value to 0 causes items to be saved for the current session only. This is used by the CGI library, because web browsers cannot make use of server-side caches when uploading files anyway.</p> <p>This value must be a whole number.</p>"},{"location":"world/proc/GetScores/#contents-list-var-world","title":"contents list var (world)","text":"<p>See also: </p> <p>list </p> <p>Default value: </p> <p>List of all areas, turfs, mobs, and objs initially in the world.</p> <p>This is a list of every object in the world. Objects in this list are in no particular order.</p>"},{"location":"world/proc/GetScores/#_15","title":"GetScores","text":"<p>Example:</p> <p>proc/ListAreas(mob/M)  var/area/A  M &lt;&lt; \"Areas:\"  for (A in world.contents)  M &lt;&lt; A</p> <p>This example displays a list of every area in existence. As a convenient short-hand, one may simply write for(A) or for(A in world) instead of the full for(A in world.contents).</p>"},{"location":"world/proc/GetScores/#cpu-var-world","title":"cpu var (world)","text":"<p>See also: </p> <p>map_cpu var (world) </p> <p>tick_lag var (world) </p> <p>tick_usage var (world) </p> <p>Tick proc (world) </p> <p>This is the percentage of a server tick that the server spends processing running procs and the work of sending map information to players. A value of 0 would indicate very little cpu usage. A value of 100 would indicate full cpu usage, which could mean that the server cannot complete all the necessary computations during a tick to finish in time for the next tick. In this case, timed events (such as sleep) may take longer than requested.</p> <p>When deciding on a value for tick_lag, one could use this value to determine if the CPU is fast enough to tick at a higher rate.</p> <p>The</p> <p>map_cpu</p> <p>var is a subset of this, measuring only time used for sending map information.</p>"},{"location":"world/proc/GetScores/#executor-var-world","title":"executor var (world)","text":"<p>See also: </p> <p>startup proc </p> <p>Format: </p> <p>executor = \"/usr/local/byond/bin/DreamDaemon [params]\"</p> <p>This option is for direct execution of  <code>.dmb</code>   files in UNIX. The most common use is for writing CGI programs that are executed by the web server.</p> <p>The first parameter in the</p> <p>executor</p> <p>text string is the path to DreamDaemon. The one listed above is the standard UNIX location.</p> <p>Optional parameters may follow. The most common are -CGI and -logself.</p>"},{"location":"world/proc/GetScores/#_16","title":"GetScores","text":"<p>Example:</p> <p>world/executor = \"/usr/local/byond/bin/DreamDaemon -CGI -logself\"</p> <p>This example creates a CGI program to be executed by a web server. It puts its error output in the file  `projname</p> <p>.log`   .</p> <p>All of this is configured for you when you include  <code>html/CGI.dm</code>   from the html library.</p>"},{"location":"world/proc/GetScores/#fps-var-world","title":"fps var (world)","text":"<p>See also: </p> <p>tick_lag var (world) </p> <p>fps var (client) </p> <p>Pixel movement </p> <p>Default value: </p> <p>10</p> <p>The value of</p> <p>world.fps</p> <p>defines the speed of the world in frames (server ticks) per second. By default this is 10 fps, which is a good speed if all objects move in full tiles. Higher values yield smoother results, but at a cost to performance. Timing of many events may be limited by the system clock, so</p> <p>fps</p> <p>values beyond 40 or 50 may cause unwanted effects like jitter even for projects that are not very demanding in terms of performance.</p> <p>For projects making use of pixel movement, higher</p> <p>fps</p> <p>is usually desired. 40 seems to be a good value for general use, but in worlds that have a large number of players, you may wish to lower the value and give players a higher</p> <p>step_size</p> <p>per tick instead.</p> <p>This var exists for convenience; it is calculated by</p> <p>10 / world.tick_lag</p> <p>. The value of</p> <p>world.tick_lag</p> <p>is actually more accurate, but it is easier to think of world speed in terms of frames per second. The actual tick rate has a resolution of 1 ms.</p> <p>When reading</p> <p>world.fps</p> <p>, the result is always given as a whole number to gloss over rounding error.</p> <p>If you set</p> <p>client.tick_lag</p> <p>or</p> <p>client.fps</p> <p>to a value other than 0, you can make the client tick at a different (usually faster) rate.</p>"},{"location":"world/proc/GetScores/#game_state-var-world","title":"game_state var (world)","text":"<p>See also: </p> <p>name var (world) </p> <p>status var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>0</p> <p>At runtime, this value may be changed to let the BYOND hub know about certain changes in the game's status. An example for using this value is if the number of players in the game gets too high and most new logins are rejected, you can set game_state to 1 to let the hub know this server is full.</p> <p>The following values are accepted:</p> <p>0</p> <p>Normal status</p> <p>1</p> <p>Server is full</p> <p>Note that this value does not affect how your world actually reacts to new players logging in. It is only used by the hub and website.</p>"},{"location":"world/proc/GetScores/#host-var-world","title":"host var (world)","text":"<p>See also: </p> <p>game_state var (world) </p> <p>name var (world) </p> <p>status var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>If the information is made available by the pager, this will provide the key of the world's host. If the host is not known, this value will be either null or an empty string.</p>"},{"location":"world/proc/GetScores/#hub-var-world","title":"hub var (world)","text":"<p>See also: </p> <p>hub_password var (world) </p> <p>name var (world) </p> <p>status var (world) </p> <p>game_state var (world) </p> <p>version var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>This is a registered  BYOND hub   path. The default value of null is for unregistered games. Registered games (don't worry, it's free!) have their own hub page showing a brief description of the game, the author, an optional installation package, and links to online games. The hub path is a string of the form \"YourName.GameName\" and can be found in your  hub console   .</p> <p>Even unregistered games show up in the hub when they are live (that is online with people connected). It just doesn't show any of the extra info like a description, and there is no way for people to find out about it when nobody is logged in.</p> <p>If you do not want your game to show up in the hub (like while you are in the initial stages of development), just compile with  <code>visibility=0</code>   . Either that, or turn off your pager or your BYOND locator when you are connected to it.</p> <p>You (or the players) might also wish to turn off the notice of a live game in the hub when there is no longer any room for new players or if it is too late in the game for new people to join. At such times, you can simply set the visibility to 0.</p>"},{"location":"world/proc/GetScores/#_17","title":"GetScores","text":"<p>Example:</p> <p>world  hub = \"Dan.PipeStock\" //registered hub path</p> <p>mob/verb/start_game()  world.visibility = 0  //...</p> <p>If you configure your hub page to require a hub password, you must also specify  <code>world.hub_password</code>   .</p>"},{"location":"world/proc/GetScores/#hub_password-var-world","title":"hub_password var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>If  <code>world.hub</code>   is set, any live session of the game will be attached to the specified BYOND Hub page. Under the default settings, any game can set  <code>world.hub</code>   and attach itself to any BYOND Hub page.</p> <p>To beef up security, you can set a hub password in your hub's configuration page via the BYOND website. This will ensure that only authorized copies of your game can attach themselves to your hub page when live. Then simply copy that password into your code as  <code>world.hub_password</code>   so that your game's live broadcast will be accepted by the hub.</p>"},{"location":"world/proc/GetScores/#_18","title":"GetScores","text":"<p>Example:</p> <p>world  hub = \"Dan.PipeStock\" //registered hub path  hub_password = \"UPAggnJaeXmSBoKK\" //password for live game authentication</p> <p>Note that for security reasons, reading this variable at runtime will return a hashed version of the value that was set.</p>"},{"location":"world/proc/GetScores/#icon_size-var-world","title":"icon_size var (world)","text":"<p>See also: </p> <p>map_format var (world) </p> <p>step_size var (movable atoms) </p> <p>Gliding </p> <p>Pixel movement </p> <p>Default value: </p> <p>32</p> <p>This is the tile size that will be used as a default for icons in the world. It can be set to a single number that represents both the width and height, or you can use a format like \"[width]x[height]\" (such as \"16x48\") to specify width and height separately.</p> <p>This value affects several calculations, including icon operations and gliding between turfs.</p> <p>Note: If you do not use a square icon size and you are using a topdown map format, you may experience display issues if setting</p> <p>client.dir</p> <p>to</p> <p>EAST</p> <p>or</p> <p>WEST</p> <p>. A non-square tile with a topdown map format will also interfere with pixel movement. For this reason, square sizes are recommended when using any topdown-view map format.</p>"},{"location":"world/proc/GetScores/#internet_address-var-world","title":"internet_address var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>url var (world) </p> <p>address var (world) </p> <p>This is the network address of the machine hosting the world, as it is seen by the outside network (from the Internet) and the hub. If it cannot be determined, it will be null.</p> <p>The full network address of the world may be formed by concatenating the world address and port: \"byond://[address]:[port]\".</p> <p>This var exists because</p> <p>world.address</p> <p>may not be accurate if the world is hosted on a machine behind a router using NAT. The value returned by</p> <p>internet_address</p> <p>can be given to other players who wish to log in.</p>"},{"location":"world/proc/GetScores/#log-var-world","title":"log var (world)","text":"<p>See also: </p> <p>file proc </p> <p>startup proc </p> <p>Sending output to world.log may be useful for debugging purposes. The output goes to the same place run-time proc errors are displayed.</p>"},{"location":"world/proc/GetScores/#_19","title":"GetScores","text":"<p>Example:</p> <p>if(1+1 != 2)  world.log &lt;&lt; \"Uh oh.\"</p> <p>You can assign world.log to a file name or file() object to redirect output to that file. (There is also a command-line option to Dream Daemon that does this.)</p>"},{"location":"world/proc/GetScores/#_20","title":"GetScores","text":"<p>Example:</p> <p>world.log = file(\"mylog.txt\")</p>"},{"location":"world/proc/GetScores/#loop_checks-var-world","title":"loop_checks var (world)","text":"<p>Default value: </p> <p>1</p> <p>Setting this to 0 disables the very long loop protection. By default, loops in the code which undergo a very large number of iterations or recursions are aborted (by crashing the proc). This prevents the proc from locking up the server for too long.</p> <p>You may need to disable this feature if your code has some very long loops in it. Before doing that, make sure it's not  infinitely   long! Your program will utterly crash if it runs out of system stack space, which can happen in a very deep or infinite recursion.</p> <p>Note: The compiler will now generate a warning when you disable</p> <p>loop_checks</p> <p>. It is not advisable to disable the check unless you're trying to debug something, since you can cause the server to hang. Generally if you have a loop so long it can cause the regular loop checks to freak out, you need to make a change to the loop behavior anyway.</p>"},{"location":"world/proc/GetScores/#map_format-var-world","title":"map_format var (world)","text":"<p>See also: </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>screen_loc var (movable atoms) </p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Big icons </p> <p>Tiled icons </p> <p>Understanding the renderer </p> <p>Default value: </p> <p>TOPDOWN_MAP</p> <p>Possible values: </p> <ul> <li>TOPDOWN_MAP</li> <li>ISOMETRIC_MAP</li> <li>SIDE_MAP</li> <li>TILED_ICON_MAP</li> </ul> <p>This value says how the world will display maps. In a normal overhead tiled map the value is</p> <p>TOPDOWN_MAP</p> <p>for the top-down format. For older games that predate this feature, the value is</p> <p>TILED_ICON_MAP</p> <p>.</p> <p>If you use a map format other than top-down, the HUD will still use a tile format like it would in top-down display. HUD objects are not projected into whatever map_format you use and they are not affected by changing client.dir. The size of the HUD is rounded up to the nearest number of full screen tiles; the size of each tile is defined by world.icon_size.</p>"},{"location":"world/proc/GetScores/#_21","title":"GetScores","text":"<p>Top-down format</p> <p>(See more at Topdown maps   .)</p> <p>This is the default map format. Icons are drawn in a tile form and viewed from overhead. In this layout, the layer assigned to each atom is very important. The number of tiles shown is set by client.view or world.view.</p> <p>Because this format is familiar and easy to understand, it is the default setting. Most of the vars related to maps and atoms are designed and documented with this format in mind.</p>"},{"location":"world/proc/GetScores/#_22","title":"GetScores","text":"<p>Tiled icon format</p> <p>(See more at  Tiled icons   .)</p> <p>In BYOND 4.0 a new feature was introduced for using \"big\" icons, bigger than the standard tile size, by splitting them up into states like \"0,0\", \"1,0\", and so on. This functionality is no longer needed since BYOND now has the ability to display icons in their natural size. Some games that were designed before this, however, may still need to make use of this splitting feature that breaks icons into smaller tile-sized pieces.</p> <p>When an icon is broken into chunks, each state in the icon is given a thumbail version of the full image, and then new states are added to show each chunk. For instance if world.icon_size is the default 32\u00d732, and the icon is 64\u00d764, then the \"door\" state would become a thumbnail of the full door image while \"door 0,0\" (the lower left corner), \"door 1,0\", \"door 0,1\", and \"door 1,1\" were created to show each smaller section of the image. If the default \"\" state is broken into chunks, those chunks are just named \"0,0\" and so on without a space.</p> <p>This format is deprecated. It exists to support older games and allow them to be compiled without causing them to break, until they can be redesigned for one of the newer formats.  ###   Isometric format</p> <p>(See more at  Isometric maps   .)</p> <p>If map_format is set to</p> <p>ISOMETRIC_MAP</p> <p>, the map is displayed in isometric form. Isometric tiles are displayed in a foreshortened diagonal perspective, where the \"north\" direction actually displays as northeast on the player's screen, and \"east\" shows up as southeast. The value of</p> <p>client.view</p> <p>or</p> <p>world.view</p> <p>is used to calculate the  minimum   number of tiles to display, and extra tiles to each side will be shown to fill in the corners.</p> <p>In an isometric map, the tile width set in world.icon_size is the most important factor. This should be a multiple of 4 for best results. The minimum tile height is half that value, and any extra height is used to show vertical structures that \"stick up\" off the map surface. When you draw an isometric tile icon, start with a flattened diamond shape at the bottom that is only half as high as it is wide.</p> <p>Isometric maps behave differently during drawing than top-down maps. In isometric, tiles that are nearer to the viewer's perspective are drawn in front of tiles farther back, regardless of layer. Layers only count within an individual tile. This means that if you want to have a vertical structure \"stick up\" to partially hide something behind it, the icon sticking up should always be on a tile forward from the one being partly covered. E.g. if you have a wall taking up part of your tile, it needs to be at the \"back\" end of the tile to properly hide anything on the tiles behind it.</p> <p>The</p> <p>pixel_x</p> <p>and</p> <p>pixel_y</p> <p>values,</p> <p>step_x</p> <p>and</p> <p>step_y</p> <p>values, and the gliding that happens when moving between tiles, are based on the width set by</p> <p>world.icon_size</p> <p>. If you set</p> <p>world.icon_size=\"64x128\"</p> <p>to show tall buildings, only the 64 matters for pixel offsets. Use</p> <p>pixel_w</p> <p>and</p> <p>pixel_z</p> <p>to adjust the position of atoms (or the client) horizontally or vertically without respect to</p> <p>client.dir</p> <p>or the map format.</p> <p>Note: Offsets for x and y also affect the layering order used to draw the icons. Any object with a pixel offset onto another tile is considered part of whichever tile is closer.</p> <p>If you use an icon wider than one tile, the \"footprint\" of the isometric icon (the actual map tiles it takes up) will always be a square. That is, if your normal tile size is 64 and you want to show a 128x128 icon, the icon is two tiles wide and so it will take up a 2\u00d72-tile area on the map. The height of a big icon is irrelevant--any excess height beyond width/2 is used to show vertical features. To draw this icon properly, other tiles on that same ground will be moved behind it in the drawing order.</p> <p>One important warning about using big icons in isometric mode is that you should only do this with dense atoms. If part of a big mob icon covers the same tile as a tall building for instance, the tall building is moved back and it could be partially covered by other turfs that are actually behind it. A mob walking onto a very large non-dense turf icon would experience similar irregularities.</p>"},{"location":"world/proc/GetScores/#_23","title":"GetScores","text":"<p>Side-view format</p> <p>(See more at  Side-view maps   .)</p> <p>The</p> <p>SIDE_MAP</p> <p>format is like a cross between</p> <p>TOPDOWN_MAP</p> <p>and</p> <p>ISOMETRIC_MAP</p> <p>. It looks very similar to a top-down view but it is intended for more of a 3/4 perspective, where tiles lower on the screen are considered closer to the viewer. Because this impacts the way layers work, most of the layering behavior is the same as with isometric.</p> <p>In a 3/4 perspective the tiles are often foreshortened, so pixel offsets are adjusted to account for this. For example, you may set</p> <p>world.icon_size</p> <p>to</p> <p>\"32x24\"</p> <p>, but the tile is considered to be a perfect square if you look at it from the top down. Because the width is 32 pixels, the virtual height is also 32, so if you use pixel_y=32 the atom will appear one tile further back than it normally is. (This adjustment doesn't affect screen objects or</p> <p>pixel_w</p> <p>/</p> <p>pixel_z</p> <p>.)</p> <p>Changing</p> <p>client.dir</p> <p>preserves the same tile size regardless of orientation.</p>"},{"location":"world/proc/GetScores/#map_cpu-var-world","title":"map_cpu var (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>tick_lag var (world) </p> <p>tick_usage var (world) </p> <p>Tick proc (world) </p> <p>This is the percentage of a server tick that the server spends processing information about the map to send to players. A value of 0 would indicate very little cpu usage. A value of 100 would indicate full cpu usage, which means that the server cannot complete all the necessary computations during a tick to finish in time for the next tick. In this case, timed events (such as sleep) may take longer than requested.</p>"},{"location":"world/proc/GetScores/#maxx-var-world","title":"maxx var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxy var (world) </p> <p>maxz var (world) </p> <p>turf var (world) </p> <p>Map </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#maxy-var-world","title":"maxy var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>maxz var (world) </p> <p>turf var (world) </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#maxz-var-world","title":"maxz var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>maxy var (world) </p> <p>turf var (world) </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#mob-var-world","title":"mob var (world)","text":"<p>See also: </p> <p>New proc (client) </p> <p>Default value: </p> <p>/mob.</p> <p>When a player connects to the world, the world is searched for a mob with the player's key. If one is found, the player is connected to that mob. If none is found, a new mob of type world.mob is created and the player is connected to this new mob.</p> <p>The default value is /mob. Setting world.mob to 0 prevents the creation of default mobs.</p>"},{"location":"world/proc/GetScores/#_24","title":"GetScores","text":"<p>Example:</p> <p>world  mob = /mob/newbie</p> <p>mob/newbie  Login()  src &lt;&lt; \"Welcome, [name].\"  ..()</p> <p>This example will connect new players to mobs of type /mob/newbie. They are welcomed when they connect.</p>"},{"location":"world/proc/GetScores/#movement_mode-var-world","title":"movement_mode var (world)","text":"<p>See also: </p> <p>appearance_flags var (atom) </p> <p>Enter proc (atom) </p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Pixel movement </p> <p>Gliding </p> <p>Possible values: </p> <p>LEGACY_MOVEMENT_MODE</p> <p>: Old BYOND behavior regarding pixel movement and turf contents (see below)</p> <p>TILE_MOVEMENT_MODE</p> <p>: All atoms are locked to the tile grid</p> <p>PIXEL_MOVEMENT_MODE</p> <p>: All movable atoms can use pixel movement unless otherwise specified (see below), but legacy behavior for turf contents is ignored</p> <p>Default value: </p> <p>LEGACY_MOVEMENT_MODE</p> <p>Controls how movement works on the map.</p> <p>TILE_MOVEMENT_MODE</p> <p>allows you to easily discard any and all pixel movement, so if step_x or step_y coordinates or unexpected atom bounds were loaded from a savefile, for instance, they would be eliminated. If you use any other movement mode, you can give an atom the  TILE_MOVER   flag and it will behave as if it were in this mode, while other atoms are free to do their own thing.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>exists to distinguish between old and new movement behavior. In older versions of BYOND before pixel movement, turfs took their contents into consideration by default in Enter() and Exit(). This doesn't really make sense for newer games, so in any other movement mode the turf behavior will ignore its contents. mob.Cross() is also affected, since it would return 0 by default in legacy mode when both mobs were dense; now by default it checks</p> <p>mob.group</p> <p>.</p>"},{"location":"world/proc/GetScores/#name-var-world","title":"name var (world)","text":"<p>Default value: </p> <p>The  part of the .dmb file. <p>This is the name of the world.</p>"},{"location":"world/proc/GetScores/#_25","title":"GetScores","text":"<p>Example:</p> <p>world  name = \"The Void\"</p>"},{"location":"world/proc/GetScores/#params-var-world","title":"params var (world)","text":"<p>See also: </p> <p>list associations </p> <p>params2list proc </p> <p>startup proc </p> <p>Default value: </p> <p>null</p> <p>This is a list of parameters passed to the world from the command-line -params option when the server was started. The parameter text is passed through params2list() to generate the world.params list.</p>"},{"location":"world/proc/GetScores/#_26","title":"GetScores","text":"<p>Example:</p> <p>world/New()  var/p  if(params.len) world.log &lt;&lt; \"Command-line parameters:\"  for(p in params)  world.log &lt;&lt; \"[p] = [params[p]]\"</p> <p>This example displays the value of each parameter.</p>"},{"location":"world/proc/GetScores/#port-var-world","title":"port var (world)","text":"<p>See also: </p> <p>OpenPort proc (world) </p> <p>address var (world) </p> <p>reachable var (world) </p> <p>visibility var (world) </p> <p>This is the network port of the world. If the world does not have an open network port, this is 0.</p>"},{"location":"world/proc/GetScores/#process-var-world","title":"process var (world)","text":"<p>See also: </p> <p>byond_version var (world) </p> <p>system_type var (world) </p> <p>shell proc </p> <p>This read-only variable indicates the ID of the server's process on the system running it. The result is a number, unless for some unexpected reason the number won't fit in a</p> <p>num</p> <p>type, in which case it will be text. (In practice it should always be a number.)</p>"},{"location":"world/proc/GetScores/#realtime-var-world","title":"realtime var (world)","text":"<p>See also: </p> <p>time var (world) </p> <p>timeofday var (world) </p> <p>time2text proc </p> <p>This is the time (in 1/10 seconds) since 00:00:00 GMT, January 1, 2000 (also known as the BYOND era).</p> <p>Because this is a large number, BYOND's number system isn't capable of enough precision to deliver the exact number of 1/10 second ticks. It usually rounds off to the nearest several seconds. For more accurate readings use  <code>world.timeofday</code>   .</p>"},{"location":"world/proc/GetScores/#reachable-var-world","title":"reachable var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>OpenPort proc (world) </p> <p>Returns 1 if the world is currently hosted and the port can be reached by players (as determined by the BYOND hub), 0 if not.</p> <p>If the port is not reachable, there may be a brief period during which the hub is still attempting to make contact; during that time the port is assumed to be reachable. Currently, the reachability test times out and fails after 30 seconds.</p>"},{"location":"world/proc/GetScores/#sleep_offline-var-world","title":"sleep_offline var (world)","text":"<p>Default value: </p> <p>0</p> <p>Setting this to 1 causes the world to be suspended when there are no players, even if you have sleeping procs waiting to happen. The default value is 0, which means the server will only sleep if there are no players and no procs waiting to happen. The main purpose of the variable is to save the cpu from doing work when there is nobody around to appreciate it. On the other hand, that doesn't give the poor NPC's a break from the nasty humans.</p>"},{"location":"world/proc/GetScores/#status-var-world","title":"status var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>game_state var (world) </p> <p>visibility var (world) </p> <p>This is a short text string used in BYOND hub to describe the state of a game in progress. For example, you might want to indicate if new players will be able to actively play, or whether they would have to join as spectators.</p>"},{"location":"world/proc/GetScores/#_27","title":"GetScores","text":"<p>Example:</p> <p>world  status = \"accepting players\" mob/verb/start_game()  world.status = \"accepting spectators\"  //...</p>"},{"location":"world/proc/GetScores/#system_type-var-world","title":"system_type var (world)","text":"<p>See also: </p> <p>byond_version var (world) </p> <p>process var (world) </p> <p>shell proc </p> <p>This variable indicates the operating system type at run-time. It will be one of the following constants:</p> <ul> <li>MS_WINDOWS</li> <li>UNIX</li> </ul>"},{"location":"world/proc/GetScores/#tick_lag-var-world","title":"tick_lag var (world)","text":"<p>See also: </p> <p>fps var (world) </p> <p>tick_lag var (client) </p> <p>tick_usage var (world) </p> <p>sleep proc </p> <p>Default value: </p> <p>1</p> <p>This is the smallest unit of time (one server tick) measured in 1/10 seconds. The duration of events that take some finite amount of time (like sleep) will be rounded to a whole number of ticks.</p> <p>Players are limited to one command (including movements) per server tick, so this value can be used to adjust the responsiveness of the game. If the network is too slow to keep up with players, their commands will get queued up, which can be annoying when trying to move. In this case, tick_lag should be increased so that the stored up movement commands are discarded. On the other hand, if you have a very fast network, you may wish to decrease tick_lag to speed up the response time to player commands.</p> <p>Often it is more convenient to set world.fps instead of world.tick_lag, since fps (frames per second) is an easier way to think of server ticks. world.tick_lag is 10 / world.fps and vice-versa, so a tick_lag of 0.25 is equal to 40 fps.</p> <p>If you set client.tick_lag or client.fps to a value other than 0, you can make the client tick at a different (usually faster) rate.</p>"},{"location":"world/proc/GetScores/#tick_usage-var-world","title":"tick_usage var (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>tick_lag var (world) </p> <p>Tick proc (world) </p> <p>This is the approximate percentage of the server tick that has been used already. A value under 100 means there's time to do more calculations, which can include any pending procs that are still waiting to run on this tick. When the value is over 100, the tick is running long and your world will experience lag.</p> <p>Keep in mind that sending maps to clients is the last thing that happens during a tick, except for handling any events such as player commands that might arrive before the next tick begins. Therefore in a verb,</p> <p>tick_usage</p> <p>might have a higher value than you would expect to see in a proc that loops and sleeps.</p>"},{"location":"world/proc/GetScores/#time-var-world","title":"time var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>tick_lag var (world) </p> <p>This gives the amount of time (in 1/10 seconds) that the world has been running. In actual fact, it is the number of server ticks that have passed multiplied by world.tick_lag. Therefore if the server sleeps (when no players are connected) this time is not counted. Also, if the server runs overtime during a tick (because procs take longer than tick_lag to finish) this still only counts as one tick. This value is therefore a measure of \"game time\" rather than real time.</p>"},{"location":"world/proc/GetScores/#timeofday-var-world","title":"timeofday var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>time var (world) </p> <p>time2text proc </p> <p>This is the time (in 1/10 seconds) since 00:00:00 GMT today. It is basically identical to  <code>world.realtime</code>   but doesn't include any information about the date. This is a much smaller number; hence it is more accurate.</p>"},{"location":"world/proc/GetScores/#timezone-var-world","title":"timezone var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>timeofday var (world) </p> <p>timezone var (client) </p> <p>time2text proc </p> <p>This is the time offset from UTC, in hours, for the world's time zone. It can be used in the</p> <p>time2text()</p> <p>proc, although it is the default time zone for that proc.</p>"},{"location":"world/proc/GetScores/#turf-var-world","title":"turf var (world)","text":"<p>Default value: </p> <p>/turf.</p> <p>This is the default turf type to be placed on the map wherever no turf is specified. A value of 0 turns off the default turf.</p>"},{"location":"world/proc/GetScores/#url-var-world","title":"url var (world)","text":"<p>See also: </p> <p>address var (world) </p> <p>This is the full network address of the world. (For example, byond://dan.byond.com:6005.)</p>"},{"location":"world/proc/GetScores/#version-var-world","title":"version var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>Default value: </p> <p>0</p> <p>If you are distributing your game to players, you can use this variable to automatically notify them of new releases. To do so, you will first need to set  <code>world.hub</code>  to the hub path of your game. You can then advertise the current version by configuring that value in your  hub console   .</p> <p>When players boot up an outdated version of your game (as indicated by comparing  <code>world.version</code>   with the version advertised by BYOND hub), they will be notified of the new release.</p>"},{"location":"world/proc/GetScores/#view-var-world","title":"view var (world)","text":"<p>See also: </p> <p>lazy_eye var (client) </p> <p>show_map var (client) </p> <p>view proc </p> <p>view var (client) </p> <p>Default value: </p> <p>5</p> <p>Possible values: </p> <p>-1 to 34 or \"WIDTHxHEIGHT\"</p> <p>This is the default map viewport range. The default value of 5 produces an 11x11 viewport. A value of -1 turns off the map display altogether. The client may automatically scale down icons in order to conveniently fit the map on the player's screen.</p> <p>For non-square views, you can assign this to a text string of the form \"WIDTHxHEIGHT\". For example, \"11x11\" is equivalent to a view depth of 5, but you could make it wider like this: \"13x11\".</p> <p>This setting also affects the default range of the  <code>view()</code>   ,  <code>oview()</code>   ,  <code>range()</code>   , and  <code>orange()</code>   procedures.</p> <p>If the entire map is small enough to fit on one screen  (arbitrarily defined to be 21x21 or less), the default  <code>view</code>   is automatically adjusted to fit the map. In this case,  <code>client.lazy_eye</code>   is also automatically turned on by default, since you probably don't want the map to scroll around.</p>"},{"location":"world/proc/GetScores/#visibility-var-world","title":"visibility var (world)","text":"<p>See also: </p> <p>OpenPort proc (world) </p> <p>hub var (world) </p> <p>Default value: </p> <p>1 (visible)</p> <p>This controls whether the world advertises itself in the  BYOND Hub   when it has an open network port for accepting players. The visibility of the world still depends on whether any of the connected players has their location reporter turned on, and that in turn relies on the pager being turned on.</p>"},{"location":"world/proc/GetScores/#special-notes","title":"Special notes","text":"<p>This section of the reference should help explain some concepts that may be harder to understand or that can use more clarification.</p> <p>Language features </p> <p>Numbers </p> <p>Regular expressions </p> <p>Unicode </p> <p>Icons </p> <p>Big icons </p> <p>Tiled icons </p> <p>Map formats </p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Movement </p> <p>Gliding </p> <p>Pixel movement </p> <p>Display </p> <p>Understanding the renderer </p> <p>HUD / screen objects </p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p>"},{"location":"world/proc/GetScores/#background_layer","title":"BACKGROUND_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>BACKGROUND_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>The purpose of this value is to make an atom appear below any regular atoms, even if they share the same plane. In an isometric map for instance, HUD objects will always appear above the map, but makeing a HUD object appear behind the map was basically impossible without this feature until</p> <p>plane</p> <p>was implemented.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>BACKGROUND_LAYER + OBJ_LAYER</p> <p>.</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>and</p> <p>EFFECTS_LAYER</p> <p>, but it will take precedence over both. Anything with</p> <p>BACKGROUND_LAYER</p> <p>will always appear below anything without it on the same plane.</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#big-icons","title":"Big icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>BYOND allows you to use icons that are not the same size as the tile size defined in world.icon_size. These icons can be manipulated with the /icon datum using their raw, native size, and shown on the map in full size. To use the old behavior where an atom can display only an icon of the normal tile size, use the TILED_ICON_MAP value for map_format instead.</p> <p>When you use an icon of non-standard size on an atom, the icon is \"anchored\" to the southwest corner of the atom. If you are using a top-down view (world.map_format=TOPDOWN_MAP), the icon will appear to spread out further to the east and north. In an isometric map (world.map_format=ISOMETRIC_MAP), the icon will cover additional tiles north and east as well. The \"footprint\" of an isometric icon--the actual map tiles it covers--is always square, so if your tile size is 64x64 and you use a 128x64 icon, the 128-pixel width means the icon will cover a 2x2 section of map tiles.</p> <p>It is important to remember that using a big icon is a visual effect  only   . It will not affect how the atom bumps into other atoms or vice-versa.</p> <p>Big icons will affect layering--the order in which icons are drawn. In general, because a big icon is covering more than one tile of the map, it will try to draw above any other tiles in that space that are on the same layer. This way, you can set a turf to use a big icon without having to change the turfs to the north and east. If an atom has a big icon, any overlays and underlays attached to it will be pulled forward as well, so they will draw in front of anything on their same layer. In isometric mode this is about the same, except that the layer isn't that important--anything in the way will just be moved back behind the big icon.</p> <p>Note: Big overlays will not \"pull forward\" on their own. If the main atom uses a single-tile icon, a big overlay attached to it will not try to draw in front of other icons on the same layer. This is so that name labels, health bar overlays, etc. will not cause any odd behavior. To be safe, you should always specify a layer when adding an overlay.</p> <p>In isometric mode, layering is affected by the \"distance\" between the atom and the viewer, so putting a regular-sized icon and part of a big icon on the same tile could cause layering oddities. Tiles that are covered by a big icon will tend to be drawn behind the big icon as mentioned above. For this reason, any atoms whose icons cover more than one tile (the extra height of an isometric icon doesn't count) should always be dense, and you should block movement onto any tile covered by them.</p> <p>When manipulating icons with the /icon datum, you can still use Blend() to combine icons of different sizes. By default, the icons will be lined up at their southwest corners. You can change the position at which the second icon is blended.</p>"},{"location":"world/proc/GetScores/#color-gradient","title":"Color gradient","text":"<p>See also: </p> <p>gradient proc </p> <p>color var (atom) </p> <p>Particle effects </p> <p>Color space </p> <p>A color gradient is a special list that defines a range of colors that you can smoothly interpolate between. A simple example is a gradient from red to white:</p>"},{"location":"world/proc/GetScores/#_28","title":"GetScores","text":"<p>Example:</p> <p>list(\"red\", \"white\") // OR list(0, \"red\", 1, \"white\")</p> <p>Applying a number like 0.2 to this gradient would give you a color that's 20% of the way from red to white. More complex gradients however are also possible.</p> <p>The format of a gradient is a list that contains a number (the position along the gradient, from 0 to 1 unless you use values outside that range) followed by a color. You can have as complex a gradient as you like. If you reuse the same number twice in a row, the gradient will have a sudden color change at that point.</p> <p>It is also possible to skip numbers or colors, and they will be filled in automatically with the previous number or color. The exceptions are at the beginning and ends of the list; at the end of the gradient, the last color is assigned a number 1 by default, and the first is assigned 0. If you skip colors at the beginning, they will be filled in with the first color you use.</p> <p>Include \"loop\" anywhere in the list to make this a looped gradient. If you don't, any numbers outside the gradient's range will be clamped to that range. E.g., in a normal gradient ranging from 0 to 1, a number of 1.2 is interpreted as 1 without a loop and 0.2 with a loop.</p> <p>Here are some more examples:</p>"},{"location":"world/proc/GetScores/#_29","title":"GetScores","text":"<p>Example:</p> <p>// color wheel; ranges 0 to 6 and loops list(0, \"#f00\", 1, \"#ff0\", 2, \"#0f0\", 3, \"#0ff\", 4, \"#00f\", 5, \"#f0f\", 6, \"#f00\", \"loop\")</p> <p>// 10% each red, yellow, green, blue, with a 20% transition zone between each // notice no color follows 0.4 or 0.7, so the previous color is used list(0.1, \"#f00\", 0.3, \"#ff0\", 0.4, 0.6, \"#008000\", 0.7, 0.9, \"#00f\")</p> <p>// green and black stripes list(0.5, \"#008000\", 0.5, \"#000000\", \"loop\")</p> <p>You can also include \"space\" in the list, and give it an associated value that describes the color space this gradient uses to interpolate between colors. For instance,</p> <p>\"space\"=COLORSPACE_HSL</p> <p>will use HSL interpolation instead of the default RGB. See  Color space   for more information.</p>"},{"location":"world/proc/GetScores/#_30","title":"GetScores","text":"<p>Example:</p> <p>// color wheel with a different color space list(0, \"#f00\", 3, \"#0ff\", 6, \"#f00\", \"loop\", \"space\"=COLORSPACE_HSLA)</p> <p>Currently, color gradients are only used by particle effects and the  [gradient</p> <p>proc](#/proc/gradient)   . With particles, if you use a gradient the particle's color is given as a number, and that number is used to look up its real color from the gradient. The number can change over time, thus changing the particle's color.</p>"},{"location":"world/proc/GetScores/#color-matrix","title":"Color matrix","text":"<p>See also: </p> <p>color var (atom) </p> <p>color var (client) </p> <p>MapColors proc (icon) </p> <p>A color matrix is used to transform colors, in the same way that a matrix represented by the</p> <p>/matrix</p> <p>datum is used to transform 2D coordinates. A transformation matrix is 3x3, of which only 6 values are needed because the last column is always the same. A color matrix, because it transforms four different numbers instead of two, is 5x5.</p> <pre><code>                |rr rg rb ra 0|\n                |gr gg gb ga 0|\n[r g b a 255] x |br bg bb ba 0| = [r' g' b' a' 255]\n                |ar ag ab aa 0|\n                |cr cg cb ca 1|\n\n</code></pre> <p>In easier-to-understand terms, this is how the result is calculated:</p> <p>new_red = red * rr + green * gr + blue * br + alpha * ar + 255 * cr new_green = red * rg + green * gg + blue * bg + alpha * ag + 255 * cg new_blue = red * rb + green * gb + blue * bb + alpha * ab + 255 * cb new_alpha = red * ra + green * ga + blue * ba + alpha * aa + 255 * ca</p> <p>It is helpful to think of each row in the matrix as what each component of the original color will become. The first row of the matrix is the rgba value you'll get for each unit of red; the second is what each green becomes, and so on.</p> <p>Because the fifth column of the matrix is always the same, only 20 of the values need to be provided. You can use a color matrix with atom.color or client.color in any of the following ways:</p> <p>RGB-only (9 to 12 values)</p> <p>list(rr,rg,rb, gr,gg,gb, br,bg,bb, cr,cg,cb)</p> <p>RGBA (16 to 20 values)</p> <p>list(rr,rg,rb,ra, gr,gg,gb,ga, br,bg,bb,ba, ar,ag,ab,aa, cr,cg,cb,ca)</p> <p>Row-by-row (3 to 5</p> <p>rgb()</p> <p>values, or null to use the default row)</p> <p>list(red_row, green_row, blue_row, alpha_row, constant_row)</p> <p>Reading a color var that has been set to a matrix will return the full 20-item list, where every 4 items represent a row in the matrix (without the fifth column).</p> <p>In the</p> <p>MapColors()</p> <p>icon proc, the values are sent as arguments, not as a list.</p>"},{"location":"world/proc/GetScores/#effects_layer","title":"EFFECTS_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>EFFECTS_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>The purpose of this value is to make an atom appear above any regular atoms. For instance, in an isometric map if you want to display a character's name below them, it does not make much sense to have nearer objects cover up that name, so you can tell the name overlay to use</p> <p>EFFECTS_LAYER + MOB_LAYER</p> <p>and it will show up on top of all the normal icons on the map. This has been somewhat obviated by</p> <p>plane</p> <p>but may still be useful in some cases.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>EFFECTS_LAYER + OBJ_LAYER</p> <p>.</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>, in non-topdown map formats. Anything in</p> <p>TOPDOWN_LAYER</p> <p>will display on top of</p> <p>EFFECTS_LAYER</p> <p>, and</p> <p>TOPDOWN_LAYER + EFFECTS_LAYER</p> <p>will be above both.</p> <p>This can also be mixed with</p> <p>BACKGROUND_LAYER</p> <p>, which takes priority over everything else.</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#filter-effects","title":"Filter effects","text":"<p>See also: </p> <p>filters var (atom) </p> <p>appearance_flags var (atom) </p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>Filters are a way of adding special effects to an icon, or a group of icons (see</p> <p>KEEP_TOGETHER</p> <p>in  appearance_flags   ), by post-processing the image. A filter object describes a specific form of image processing, like for instance a blur or a drop shadow. Filters can be added or removed at will, and can even be animated.</p> <p>A filter is created by using the  filter proc   like so:</p> <p>// halo effect mob.filters += filter(type=\"drop_shadow\", x=0, y=0,\\  size=5, offset=2, color=rgb(255,255,170))</p> <p>These are the filters currently supported:</p> <ul> <li>Alpha mask</li> <li>Angular blur</li> <li>Bloom</li> <li>Color matrix</li> <li>Displacement map</li> <li>Drop shadow</li> <li>Gaussian blur</li> <li>Layering (composite)</li> <li>Motion blur</li> <li>Outline</li> <li>Radial blur</li> <li>Rays</li> <li>Ripple</li> <li>Wave</li> </ul>"},{"location":"world/proc/GetScores/#alpha-mask-filter","title":"Alpha mask filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"alpha\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of mask (defaults to 0)</p> <p>y: Vertical offset of mask (defaults to 0)</p> <p>icon: Icon to use as a mask</p> <p>render_source:</p> <p>render_target</p> <p>to use as a mask</p> <p>flags: Defaults to 0; use see below for other flags</p> <p>Uses an icon or render target as a mask over this image. Every pixel that is transparent in either the image or the mask, is transparent in the result.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the mask is centered over the center of the image.</p> <p>The</p> <p>MASK_INVERSE</p> <p>flag will invert the alpha mask so that opaque areas in the mask become transparent, and vice-versa. There is also a</p> <p>MASK_SWAP</p> <p>flag which treats the source image as the mask and vice-versa, which might be useful for some effects.</p> <p>Note: Unlike many other filters, this filter  is   taken into account for mouse-hit purposes.</p>"},{"location":"world/proc/GetScores/#angular-blur-filter","title":"Angular blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Radial blur (filters) </p> <p>Motion blur (filters) </p> <p>Format:</p> <p>filter(type=\"angular_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount in a circular formation, as if the image is spinning. The size of the blur can roughly be thought of in \"degrees\" worth of blur. As the distance from the center increases, the blur becomes more noticeable since the same amount of angular motion has to travel farther along a circle.</p> <p>Typically this blur is used with an entire plane, but it could be used to give a sense of motion blur to a spinning object.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will appear where</p> <p>size</p> <p>\u00d7 distance is greater than about 300. You can increase accuracy by breaking up large sizes into multiple filter passes with differing sizes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p>"},{"location":"world/proc/GetScores/#bloom-filter","title":"Bloom filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"bloom\", ...)</p> <p>Args:</p> <p>threshold: Color threshold for bloom</p> <p>size: Blur radius of bloom effect (see Gaussian blur)</p> <p>offset: Growth/outline radius of bloom effect before blur</p> <p>alpha: Opacity of effect (default is 255, max opacity)</p> <p>Post-processing effect that makes bright colors look like they're a strong light source, spreading their light additively to other nearby pixels. This is a complex effect that involves multiple shader passes. For both performance and visual reasons, it is usually best applied to an entire plane rather than to individual objects.</p> <p>The color</p> <p>threshold</p> <p>determines which pixels this effect applies to. If any of the red, green, or blue components of the pixel are greater than the same component for the threshold, that pixel will bloom. The blooming pixels then have their colors spread outward to create a glow that gets added to the original image.</p> <p>The</p> <p>offset</p> <p>and</p> <p>size</p> <p>parameters are used to control the glow effect. They work the same as they do in the drop shadow filter:</p> <p>offset</p> <p>causes the light to grow outwards, and a blur of</p> <p>size</p> <p>is then applied to soften it. Often just using a blur alone will produce a pleasing effect. By playing with these two values you can make the bloom effect appear differently.</p> <p>The</p> <p>alpha</p> <p>value is applied to any light contributions from bloomed pixels that get added to the original image, so values lower than 255 can make the effect less pronounced. This can be very useful if you choose to animate the filter.</p>"},{"location":"world/proc/GetScores/#gaussian-blur-filter","title":"Gaussian blur filter","text":"<p>See also: </p> <p>Motion blur (filters) </p> <p>Radial blur (filters) </p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"blur\", ...)</p> <p>Args:</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount. The size of the blur can roughly be thought of in \"pixels\" worth of blur.</p> <p>Note: Large blurs will result in reduced performance. The highest size that can be handled easily in this filter is 6. Higher sizes require multiple passes, although the filter will \"cheat\" and use low-quality passes for much higher sizes.</p>"},{"location":"world/proc/GetScores/#color-matrix-filter","title":"Color matrix filter","text":"<p>See also: </p> <p>color var (atom) </p> <p>Color matrix </p> <p>Color space </p> <p>Format:</p> <p>filter(type=\"color\", ...)</p> <p>Args:</p> <p>color: A color matrix</p> <p>space: Value indicating color space: defaults to</p> <p>FILTER_COLOR_RGB</p> <p>Applies a color matrix to this image. Unlike with the atom.color var, you can apply color conversions other than the regular RGBA color space, depending on the value of</p> <p>space</p> <p>. See  Color space   for more information.</p>"},{"location":"world/proc/GetScores/#displacement-map-filter","title":"Displacement map filter","text":"<p>See also: </p> <p>Alpha mask (filters) </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"displace\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of map (defaults to 0)</p> <p>y: Vertical offset of map (defaults to 0)</p> <p>size: Maximum distortion, in pixels</p> <p>icon: Icon to use as a displacement map</p> <p>render_source:</p> <p>render_target</p> <p>to use as a displacement map</p> <p>Uses an icon or render target as a template for various warping effects on the main image.</p> <p>In the displacement map, pixels that have a higher red component will make the image appear to warp to the left, lower reds warp it to the right, and gray (r=128) will cause no horizontal warping. The green component affects the vertical: higher to warp upward, lower to warp downward. Transparent pixels in the displacement map will have no effect.</p> <p>This can be used for very complex distortion, unlike other distortion filters such as wave and ripple that are confined to specific equations.</p>"},{"location":"world/proc/GetScores/#drop-shadow-filter","title":"Drop shadow filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Outline (filters) </p> <p>Format:</p> <p>filter(type=\"drop_shadow\", ...)</p> <p>Args:</p> <p>x: Shadow horizontal offset (defaults to 1)</p> <p>y: Shadow horizontal offset (defaults to -1)</p> <p>size: Blur amount (defaults to 1; negative values create inset shadows)</p> <p>offset: Size increase before blur (defaults to 0)</p> <p>color: Shadow color (defaults to 50% transparent black)</p> <p>Applies a drop shadow to this image. This is a combination of multiple filters, since it will apply an outline if</p> <p>offset</p> <p>is included, a Gaussian blur to the shadow, and will underlay the shadow beneath the image.</p> <p>You can also think of this filter as an outer glow.</p> <p>If you use a</p> <p>size</p> <p>less than 0, the shadow will appear inside the image instead. This would be an inset shadow, or inner glow.</p>"},{"location":"world/proc/GetScores/#layering-composite-filter","title":"Layering (composite) filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"layer\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of second image (defaults to 0)</p> <p>y: Vertical offset of second image (defaults to 0)</p> <p>icon: Icon to use as a second image</p> <p>render_source:</p> <p>render_target</p> <p>to use as a second image</p> <p>flags:</p> <p>FILTER_OVERLAY</p> <p>(default) or</p> <p>FILTER_UNDERLAY</p> <p>color:  Color   or color matrix to apply to second image</p> <p>transform:  Transform   to apply to second image</p> <p>blend_mode:  Blend mode   to apply to the top image</p> <p>Composites another image over or under this image. Using the</p> <p>FILTER_OVERLAY</p> <p>flag, which is the default, puts the second image on top of what's already here.</p> <p>FILTER_UNDERLAY</p> <p>puts it underneath.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the second image is centered over the center of the first.</p> <p>The</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>blend_mode</p> <p>vars are available for convenience. Because the bottom image is drawn over a blank background,</p> <p>blend_mode</p> <p>is always applied to the top image. All of the other vars apply to the second image being drawn.</p> <p>Note: Transforms use default bilinear scaling, since  PIXEL_SCALE   is not available here.</p> <p>Note: Like most other filters, this filter is  not   taken into account for mouse-hit purposes. Any layered icons will be strictly visual.</p>"},{"location":"world/proc/GetScores/#motion-blur-filter","title":"Motion blur filter","text":"<p>See also: </p> <p>filters var (atom) </p> <p>Gaussian blur (filters) </p> <p>Format:</p> <p>filter(type=\"motion_blur\", ...)</p> <p>Args:</p> <p>x: Blur vector on the X axis (defaults to 0)</p> <p>y: Blur vector on the Y axis (defaults to 0)</p> <p>Applies Gaussian blur in one direction only. The amount and direction are both specified by</p> <p>x</p> <p>and</p> <p>y</p> <p>. The size of the blur is equal to</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>See  Gaussian blur   for more information.</p>"},{"location":"world/proc/GetScores/#outline-filter","title":"Outline filter","text":"<p>See also: </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"outline\", ...)</p> <p>Args:</p> <p>size: Width in pixels (defaults to 1)</p> <p>color: Outline color (defaults to black)</p> <p>flags: Defaults to 0 (see below)</p> <p>Applies an outline to this image.</p> <p>At larger sizes, the outline is less accurate and will take more passes to produce. Performance and appearance are best at sizes close to 1 or less.</p> <p>flags</p> <p>can be a combination of the following values:</p> <p>0</p> <p>Ordinary outline</p> <p>OUTLINE_SHARP</p> <p>Avoid antialiasing in the outline</p> <p>OUTLINE_SQUARE</p> <p>Extend the outline sharply from corner pixels; for a box this will maintain a box shape without rounded corners</p>"},{"location":"world/proc/GetScores/#radial-blur-filter","title":"Radial blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Angular blur (filters) </p> <p>Motion blur (filters) </p> <p>Format:</p> <p>filter(type=\"radial_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur per pixel of distance (defaults to 0.01)</p> <p>Blurs the image by a certain amount outward from the center, as if the image is zooming in or out. As the distance from the center increases, the amount of blurring increases, and near the center the blur is hardly visible at all. The</p> <p>size</p> <p>value is smaller by default for this filter than it is for other filters, since it's typically used with an entire plane where the distance from the center can easily be several hundred pixels.</p> <p>Typically this blur is used with an entire plane.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will begin when</p> <p>size</p> <p>\u00d7 distance is greather than 6. You can increase accuracy by breaking up large sizes into multiple filter passes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p>"},{"location":"world/proc/GetScores/#rays-filter","title":"Rays filter","text":"<p>Format:</p> <p>filter(type=\"rays\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ray center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ray center, relative to image center (defaults to 0)</p> <p>size: Maximum length of rays (defaults to 1/2 tile width)</p> <p>color: Ray color (defaults to white)</p> <p>offset: \"Time\" offset of rays (defaults to 0, repeats after 1000)</p> <p>density: Higher values mean more, narrower rays (defaults to 10, must be whole number)</p> <p>threshold: Low-end cutoff for ray strength (defaults to 0.5, can be 0 to 1)</p> <p>factor: How much ray strength is related to ray length (defaults to 0, can be 0 to 1)</p> <p>flags: Defaults to</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>(see below)</p> <p>Draws random rays that radiate outward from a center point. (That point may be outside of the image.) As they move outward, their alpha value diminishes linearly. These are meant to be animated. The</p> <p>offset</p> <p>value determines the \"time\", where every jump of +1 can be a very different set of rays, and every 1000 units this filter will repeat.</p> <p>The</p> <p>threshold</p> <p>value can be thought of as a way of culling lower-strength rays. Ray strength is anywhere from 0 to 1 at any given angle, but values below</p> <p>threshold</p> <p>may as well be 0. Values above that are re-scaled into a range of 0 to 1.</p> <p>The</p> <p>factor</p> <p>parameter allows you to tie the ray's length to its strength. At 0, the length of every ray is the same. At 1, the length ranges from 0 to</p> <p>size</p> <p>. Generally speaking, the higher</p> <p>factor</p> <p>is, the more the rays will appear to move outward as they strengthen and inward as they weaken.</p> <p>Ray</p> <p>color</p> <p>can be provided as a matrix. Only the diagonal values of the color matrix will be used, but using a matrix will allow you to set values outside of the normal color range.</p> <p>flags</p> <p>can have the following values:</p> <p>0</p> <p>The rays are drawn alone, erasing the existing image (useful for some effects).</p> <p>FILTER_OVERLAY</p> <p>The rays are overlaid on top of the existing image.</p> <p>FILTER_UNDERLAY</p> <p>The rays are drawn underneath the existing image.</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>Default. For plane masters, this will use the</p> <p>FILTER_OVERLAY</p> <p>behavior and draw the rays over the plane, and for all other images it will default to</p> <p>FILTER_UNDERLAY</p> <p>to draw the rays beneath them.</p>"},{"location":"world/proc/GetScores/#ripple-filter","title":"Ripple filter","text":"<p>See also: </p> <p>Wave (filters) </p> <p>Format:</p> <p>filter(type=\"ripple\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ripple center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ripple center, relative to image center (defaults to 0)</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>repeat: Wave period, in pixels (defaults to 2)</p> <p>radius: Outer radius of ripple, in pixels (defaults to 0)</p> <p>falloff: How quickly ripples lose strength away from the outer edge (defaults to 1)</p> <p>flags: Defaults to 0; use</p> <p>WAVE_BOUNDED</p> <p>to keep distortion within the image</p> <p>Applies a ripple distortion effect to this image.</p> <p>This filter is meant to be animated. A good animation will typically start at a</p> <p>radius</p> <p>of 0 and animate to a larger value, with</p> <p>size</p> <p>decreasing to 0.</p> <p>The</p> <p>falloff</p> <p>parameter can be tweaked to your liking. A value of 1 should look reasonably like ripples in water, with the inner ripples losing strength. A value of 0 will cause no reduction in strength.</p> <p>The equation governing the ripple distortion is size \u00d7 sin(2\u03c0r') \u00f7 (2.5 \u00d7 falloff \u00d7 r'  2   + 1), where r' = (radius - distance) \u00f7 repeat.</p> <p>Up to 10 ripples can be stacked together in a single pass of the filter, as long as they have the same</p> <p>repeat</p> <p>,</p> <p>falloff</p> <p>, and</p> <p>flags</p> <p>values. (See the wave filter for the</p> <p>WAVE_BOUNDED</p> <p>flag.)</p>"},{"location":"world/proc/GetScores/#wave-filter","title":"Wave filter","text":"<p>See also: </p> <p>Ripple (filters) </p> <p>Format:</p> <p>filter(type=\"wave\", ...)</p> <p>Args:</p> <p>x: Horiztonal direction and period of wave</p> <p>y: Vertical direction and period of wave</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>offset: Phase of wave, in periods (e.g., 0 to 1)</p> <p>flags: Defaults to 0; see below for other flags</p> <p>Applies a wave distortion effect to this image.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>parameters specify both the direction and period of the wave; the period is</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>This filter is meant to be animated, from whatever</p> <p>offset</p> <p>you want to</p> <p>offset+1</p> <p>, and then repeating. With multiple waves, you can produce a very convincing water effect.</p>"},{"location":"world/proc/GetScores/#_31","title":"GetScores","text":"<p>Example</p> <p>#define WAVE_COUNT 7 atom/proc/WaterEffect()  var/start = filters.len  var/X,Y,rsq,i,f  for(i=1, i&lt;=WAVE_COUNT, ++i)  // choose a wave with a random direction and a period between 10 and 30 pixels  do  X = 60*rand() - 30  Y = 60*rand() - 30  rsq = X*X + Y*Y  while(rsq&lt;100 || rsq&gt;900) // keep trying if we don't like the numbers  // keep distortion (size) small, from 0.5 to 3 pixels  // choose a random phase (offset)  filters += filter(type=\"wave\", x=X, y=Y, size=rand()*2.5+0.5, offset=rand())  for(i=1, i&lt;=WAVE_COUNT, ++i)  // animate phase of each wave from its original phase to phase-1 and then reset;  // this moves the wave forward in the X,Y direction  f = filters[start+i]  animate(f, offset=f:offset, time=0, loop=-1, flags=ANIMATION_PARALLEL)  animate(offset=f:offset-1, time=rand()*20+10)</p> <p>The equation governing the wave distortion is size \u00d7 sin(2\u03c0(d - offset)), where d is the number of wave periods' distance from the center along the x, y direction.</p> <p>The</p> <p>WAVE_SIDEWAYS</p> <p>flag will cause the distortion to be transverse (perpendicular) to the wave instead of in the same direction as the wave. The</p> <p>WAVE_BOUNDED</p> <p>flag limits the distortion to the confines of this image, instead of lettings its pixels spill out a little further from the distortion (and likewise, transparent pixels spill inward).</p> <p>Up to 10 waves can be stacked together in a single pass of the filter, as long as they have the same</p> <p>WAVE_BOUNDED</p> <p>flags.</p>"},{"location":"world/proc/GetScores/#generators","title":"Generators","text":"<p>See also: </p> <p>Particle effects </p> <p>generator proc </p> <p>color var (atom) </p> <p>Color matrix </p> <p>A generator is an object that can produce a random number, vector (list of 3 numbers), color (as a text string), or color matrix (list of 20 numbers) in a specified range according to rules you set down. It is used primarily for particle effects, since it can run on the client.</p> <p>There are several types of generators:</p> <ul> <li>Numbers:   Generate a random real number.</li> <li>Vectors:   Generate a random vector.</li> <li>Shapes:   Generate a random vector within a specific shaped region.</li> <li>Colors:   Generate a random color or color matrix.</li> </ul> <p>Generators can also be chained together with math operators and some procs. The second value can be a regular value instead of a generator, so for instance you can multiply a vector by 2, or by a matrix to transform it.</p> <p>|   Operators   |   Action   | | --- | --- | |   + - * /   |   Arithmetic operators. You can multiply a 3D vector by a color matrix (where red,green,blue in the matrix correspond to x,y,z) to do a 3D transform, or by a 2D matrix for a 2D transform.   | |   - (unary)   |   Negate the value, same as multiplying by -1.   | |   turn(), generator.Turn()   |   Rotate a vector clockwise in the XY plane.   |</p>"},{"location":"world/proc/GetScores/#gliding","title":"Gliding","text":"<p>See also: </p> <p>Pixel movement </p> <p>animate_movement var (movable atom) </p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>Gliding is a \"glitz\" effect applied by BYOND to cover up the visual sins of tile-based movement, by making objects and the map appear to move smoothly from one tile to another instead of immediately jumping. It is also available to smooth over small jumps in pixel movement that might occur, for instance if the client FPS is set higher than the server's.</p> <p>To control the gliding speed of an atom, set  <code>glide_size</code>   to the value of your choice. If this is not set, the client will attempt to adjust the speed manually.  <code>glide_size</code>   is measured in server ticks, so if  <code>client.fps</code>   is set to a value greater than  <code>world.fps</code>   , it will be scaled appropriately.</p> <p>Whether an object glides or jumps is based on how far it moves relative to its</p> <p>step_size</p> <p>value, which by default is a full tile width. If the movement goes too far past</p> <p>step_size</p> <p>in the X or Y directions, it's no longer a glide.</p> <p>The</p> <p>animate_movement</p> <p>var can be used to control the way in which an object glides, or suppress gliding altogether.</p> <p>By using the</p> <p>LONG_GLIDE</p> <p>flag in</p> <p>appearance_flags</p> <p>, a diagonal glide will take just as long as a cardinal-direction glide by moving a fullt</p> <p>glide_size</p> <p>pixels in the dominant X or Y direction. Otherwise, gliding tries to move by that many pixels in strict Euclidean distance (a straight line) and diagonal glides take longer.</p> <p>In  LEGACY_MOVEMENT_MODE   , gliding is turned off if you set any of the bound or step vars for an atom to a non-default value. The only gliding that occurs in this case is when client.fps is higher than world.fps. All other movement modes base gliding on an atom's</p> <p>glide_size</p> <p>value.</p>"},{"location":"world/proc/GetScores/#hud-screen-objects","title":"HUD / screen objects","text":"<p>See also: </p> <p>screen_loc var (movable atoms) </p> <p>screen var (client) </p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>HUD stands for Heads-Up Display, and refers to any atoms that appear on the screen but don't move when the player moves. These are also called screen objects. Any movable atom can be added to the HUD by setting its</p> <p>screen_loc</p> <p>var, and adding it to</p> <p>client.screen</p> <p>for each user who is supposed to see it. This can be used to display a character's vital stats, scores, etc.</p> <p>If you want to have something like a health meter or name attached to a moving atom, use overlays or</p> <p>/image</p> <p>objects instead. An</p> <p>/image</p> <p>object is similar to a screen object in that it can be shown to only certain players instead of being shown to everyone.</p> <p>The size of the screen depends on</p> <p>client.view</p> <p>(or</p> <p>world.view</p> <p>),</p> <p>world.map_format</p> <p>, and</p> <p>world.icon_size</p> <p>. In a normal topdown map format,</p> <p>client.view</p> <p>is the same as the screen size; in other map formats the screen might be a different size.</p> <p>The</p> <p>screen_loc</p> <p>var can be set to a value like</p> <p>\"1,1\"</p> <p>(the southwest tile of the screen),</p> <p>\"4,NORTH\"</p> <p>(fourth tile from the west, along the north side of the screen),</p> <p>\"SOUTHEAST\"</p> <p>, and so on. You can also include pixel offsets, percentages, and specify two corners to tile an icon repeatedly from one end to the other. See  screen_loc   for more details.</p> <p>screen_loc</p> <p>can also be used to stretch the bounds of the HUD. A value of</p> <p>\"0,0\"</p> <p>will cause the atom to appear to the southwest of the southwest-most tile on the visible map, outside of the regular map bounds. Using HUDs in this way, you can provide a nice decorative \"frame\" for your map.</p> <p>More complex</p> <p>You can use HUDs in other map controls as well, by preceding screen_loc with the name of the map you will use followed by a colon. For instance,</p> <p>screen_loc=\"map2:1,1\"</p> <p>will show an icon in the southwest corner of the</p> <p>map2</p> <p>control. The actual size of a secondary HUD is based on how far out the icons in it extend in any direction. If you have one icon at</p> <p>\"map2:1,1\"</p> <p>and another at</p> <p>\"map2:4,3\"</p> <p>, then that HUD will be four tiles wide and three high.</p>"},{"location":"world/proc/GetScores/#isometric-maps","title":"Isometric maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p></p> <p>Isometric projection is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions. If you look at a map top-down, each tile on the map is a square. The map is rotated 45\u00b0 clockwise and then tilted at an angle (30\u00b0) so that each square now looks like a foreshortened diamond from the viewer's perspective. What was once north now points to the northeast end of the viewer's screen; what was once east now points southeast to the viewer. Tiles that are more to the south or east are \"nearer\" to the viewer, and tiles that are north or west are \"farther\". The actual direction the map faces can be changed by using</p> <p>client.dir</p> <p>.</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>To use isometric mapping, set</p> <p>world.map_format</p> <p>to</p> <p>ISOMETRIC_MAP</p> <p>. You should set</p> <p>world.icon_size</p> <p>so the tile width is a multiple of 4 pixels. The width of the tile is highly important. The height of your tiles should be at least half that value. BYOND uses a 2:1 isometric format, meaning that the diamond base of each tile is half as high as its width. For example if you have a 64x64 tile size, every diamond in the map will be 64 pixels wide by 32 high, and you have an extra 32 pixels at the top of your icon for vertical projections like buildings. If you set the tile size to 64x80, the base is still a 64x32 diamond and you have 48 pixels left over for vertical structures.</p> <p>In this mode</p> <p>pixel_x</p> <p>and</p> <p>pixel_y</p> <p>will offset icons along the \"ground\". To adjust horizontal and vertical positions, use the</p> <p>pixel_w</p> <p>and</p> <p>pixel_z</p> <p>vars.</p>"},{"location":"world/proc/GetScores/#_32","title":"GetScores","text":"<p>Layers</p> <p>The</p> <p>layer</p> <p>var behaves differently in isometric mode. Because some tiles are nearer to the viewer than others, the tiles that are farther back need to be drawn first so they are behind any tiles that should go in front of them. So in isometric mode, the back row of tiles (a diagonal line of them) is drawn first, followed by the next row forward, and so on. The</p> <p>layer</p> <p>var only matters when icons overlap each other in the \"physical\" space, like an obj sitting on a turf.</p> <p>When pixel or step offsets, or gliding, place an object on multiple turfs, it is drawn on top of the nearer turf (assuming its layer is higher).</p> <p>Using icons wider than the regular tile size can have an impact on layering as well. See  Big icons   for more information.</p> <p>Because of the order in which icons are drawn, you may want to limit the ability of an atom to cut diagonally around corners. While moving northeast behind a dense wall, for instance, a mob might temporarily appear in front of the wall because its pixel offsets (from gliding) temporarily put it on the same tile as the wall. If you do not want to limit corner-cutting, a simple workaround for this case is to give the wall a higher layer than the mob.</p> <p>Screen objects (in</p> <p>client.screen</p> <p>) are always drawn on top of all isometric tiles, as is the case in other map modes as well.</p> <p>Since it may be desirable in some games to use a topdown map for some situations (like a special battle map), you can add</p> <p>TOPDOWN_LAYER</p> <p>to any atom's layer\u2014e.g.,</p> <p>TOPDOWN_LAYER+TURF_LAYER</p> <p>\u2014to make it appear in topdown mode. Topdown and isometric tiles really aren't meant to be mixed, but if they do mix you'll see topdown tiles always display above isometric tiles, just like screen objects do. The best way to use this is to apply</p> <p>TOPDOWN_LAYER</p> <p>to every tile in a certain part of the map that the players can't walk to.</p> <p>If you want to use an overlay that should not be covered by other \"nearer\" icons on the map, such as a name or health meter, you can add</p> <p>EFFECTS_LAYER</p> <p>to the overlay's layer. Icons with</p> <p>EFFECTS_LAYER</p> <p>will draw above regular icons. Then objects with</p> <p>TOPDOWN_LAYER</p> <p>will draw on top of everything else. However, be aware that</p> <p>EFFECTS_LAYER</p> <p>has largely been superseded by the</p> <p>plane</p> <p>var.</p>"},{"location":"world/proc/GetScores/#_33","title":"GetScores","text":"<p>Screen size</p> <p>In this mode,</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>is used to define the minimum number of map tiles you will see,  not   the screen/HUD size which is calculated from client.view. Extra map tiles are shown to fill out the screen size. HUD objects use screen coordinates, so 1,1 is still the lower left.</p> <p>The actual HUD size is always a full number of tiles, whose size is defined by</p> <p>world.icon_size</p> <p>. If you have a tile size of</p> <p>64x64</p> <p>, and</p> <p>world.view=6</p> <p>(a 13x13 map), a full 13x13 diamond of map tiles will be shown. The width of this diamond is 13 tiles. The height is only half that, plus whatever vertical space is needed to show the icons in that area. Then everything is rounded up to a full tile size, so the result is a 13x7-tile screen. This is the formula you need if you want to calculate the screen size:</p> <p>pixel_width = round(icon_width * (view_width + view_height) / 2) pixel_height = round(icon_width * (view_width + view_height - 2) / 4) + icon_height</p> <p>screen_width = round((pixel_width + icon_width - 1) / icon_width) screen_height = round((pixel_height + icon_height - 1) / icon_height)</p> <p>If you use</p> <p>TOPDOWN_LAYER</p> <p>, any topdown sections of the map will be limited to this same view.</p>"},{"location":"world/proc/GetScores/#numbers","title":"Numbers","text":"<p>In DM, all numbers are stored in floating point format. Specifically, single-precision (32-bit) floating point. This is important to know if you think you will be working with large numbers or decimal values a lot, because the accuracy of the numbers is limited.</p> <p>32-bit floating point numbers can represent integers from -16777216 to 16777216 (2  24   ). Non-integer values can get about as small as 2  -126   and as large as 2  127   .</p> <p>Floating point numbers do not handle most decimal values precisely. For instance, 0.1 is not exactly 0.1, because floating point numbers are stored in a binary format and in binary, 1/10 is a fraction that repeats forever\u2014the same way 1/3 repeats as 0.33333... in decimal numbers. It ends up being rounded off, either a little higher or a littler lower than its true value. This means that the following loop won't work like you might expect:</p>"},{"location":"world/proc/GetScores/#_34","title":"GetScores","text":"<p>Example:</p> <p>for(i = 0, i &lt; 100, i += 0.1)  world &lt;&lt; i</p> <p>You might expect that code to loop exactly 1000 times, with</p> <p>i</p> <p>going from 0 up to 99.9 before stopping. The truth is more complicated, because 0.1 stored in floating point is actually greater than the exact value of 0.1. Other values might be more or less than their exact numbers, and as you add these numbers together repeatedly you'll introduce more and more rounding error.</p> <p>Even more insidious, if you add 0.1 a bunch of times starting from 0, and then subtract it out again the same number of times, the result you get may not be 0. This is counterintuitive, because you might expect rounding errors to reverse themselves in the same order they crept in. Unfortunately it doesn't work that way.</p> <p>You can correct for rounding error somewhat by using the  [round</p> <p>proc](#/proc/round)   to adjust the loop var each time, although for performance reasons it might be preferable to find another alternative.</p> <p>for(i = 0, i &lt; 100, i = round(i + 0.1, 0.1))  world &lt;&lt; i</p> <p>Only fractions whose denominators are powers of 2 are immune to this rounding error, so 0.5 is in fact stored as an exact value.</p> <p>Another place floating point may lose accuracy is when you try to add numbers of very different sizes. For instance as stated above, the upper limit for accurate integers is 16777216. If you try to use a number such as 100 million it will only be approximate, so adding 1 to that number won't actually change it because the 1 is so much smaller, it will be gobbled up by rounding error.</p> <p>Also for the same reasons stated above, division will cost you accuracy. Again you can divide by powers of 2 easily enough, and you can divide an integer by any of its factors (like dividing 9 by 3) without a problem, but a fraction like 1/3 will repeat forever so it gets rounded to as much precision as floating point can manage.</p> <p>In decimal, floating point numbers have at least six decimal digits of precision. Since they're actually stored in binary, their true precision is exactly 24 bits.</p>"},{"location":"world/proc/GetScores/#particle-effects","title":"Particle effects","text":"<p>See also: </p> <p>particles (movable atom var) </p> <p>Generators </p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>A particle set is a special effect, whose computations are handled entirely on the client, that spawns and tracks multiple pixels or icons with a temporary lifespan. Examples of this might be confetti, sparks, rocket exhaust, or rain or snow. Particles are rendered on a special surface and that gets attached to an obj or a mob like an overlay.</p> <p>Particles can exist in 3 dimensions instead of the usual 2, so a particle's position, velocity, and other values may have a z coordinate. To make use of this z coordinate, you can use a  projection matrix   . (The value of the z coordinate must be between -100 and 100 after projection. Otherwise it's not guaranteed the particle will be displayed.)</p> <p>To create a particle set, use</p> <p>new</p> <p>to create a new</p> <p>/particles</p> <p>datum, and then you can set the datum's vars. The vars can be set to constant values, or generator functions that will allow the client to choose from a range of values when spawning those particles. (The easiest way to handle this is to create your own type that inherits from</p> <p>/particles</p> <p>, and set up the parameters you'll want at compile-time.)</p> <p>After the datum is created, it can be assigned to an obj or mob using their</p> <p>particles</p> <p>var. The particles will appear on the map wherever that obj or mob appears.</p>"},{"location":"world/proc/GetScores/#_35","title":"GetScores","text":"<p>Example:</p> <p>particles/snow  width = 500 // 500 x 500 image to cover a moderately sized map  height = 500  count = 2500 // 2500 particles  spawning = 12 // 12 new particles per 0.1s  bound1 = list(-1000, -300, -1000) // end particles at Y=-300  lifespan = 600 // live for 60s max  fade = 50 // fade out over the last 5s if still on screen  // spawn within a certain x,y,z space  position = generator(\"box\", list(-300,250,0), list(300,300,50))  // control how the snow falls  gravity = list(0, -1)  friction = 0.3 // shed 30% of velocity and drift every 0.1s  drift = generator(\"sphere\", 0, 2) obj/snow  screen_loc = \"CENTER\"  particles = new/particles/snow</p> <p>mob  proc/CreateSnow()  client?.screen += new/obj/snow</p> <p>These are the vars that can be used in a particle set. \"Tick\" refers to a BYOND standard tick of 0.1s.</p> <p>|   Particle vars that affect the entire set (generators are not allowed for these)   | | --- | |   Var   |   Type   |   Description   | |   width   |   num   |   Size of particle image in pixels   | |   height   | |   count   |   num   |   Maximum particle count   | |   spawning   |   num   |   Number of particles to spawn per tick (can be fractional)   | |   bound1   |   vector   |   Minimum particle position in x,y,z space; defaults to list(-1000,-1000,-1000)   | |   bound2   |   vector   |   Maximum particle position in x,y,z space; defaults to list(1000,1000,1000)   | |   gravity   |   vector   |   Constant acceleration applied to all particles in this set (pixels per squared tick)   | |   gradient   | color gradient  |   Color gradient used, if any   | |   transform   | matrix  |   Transform done to all particles, if any (can be higher than 2D)   | |   Vars that apply when a particle spawns   | |   lifespan   |   num   |   Maximum life of the particle, in ticks   | |   fade   |   num   |   Fade-out time at end of lifespan, in ticks   | |   fadein   |   num   |   Fade-in time, in ticks   | |   icon   |   icon   |   Icon to use, if any; no icon means this particle will be a dot</p> <p>Can be assigned a weighted list of icon files, to choose an icon at random   | |   icon_state   |   text   |   Icon state to use, if any</p> <p>Can be assigned a weighted list of strings, to choose an icon at random   | |   color   |   num or color   |   Particle color (not a color matrix); can be a number if a gradient is used   | |   color_change   |   num   |   Color change per tick; only applies if gradient is used   | |   position   |   num   |   x,y,z position, from center in pixels   | |   velocity   |   num   |   x,y,z velocity, in pixels   | |   scale   |   vector (2D)   |   Scale applied to icon, if used; defaults to list(1,1)   | |   grow   |   num   |   Change in scale per tick; defaults to list(0,0)   | |   rotation   |   num   |   Angle of rotation (clockwise); applies only if using an icon   | |   spin   |   num   |   Change in rotation per tick   | |   friction   |   num   |   Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift   | |   Vars that are evalulated every tick   | |   drift   |   vector   |   Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects   |</p> <p>The</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>values are special in that they can't be assigned a generator, but they can be assigned a constant icon or string, respectively, or a list of possible values to choose from like so:</p> <p>icon = list('confetti.dmi'=5, 'coin.dmi'=1)</p> <p>The list used can either be a simple list, or it can contain weights as shown above.</p> <p>Changing a var on a particle datum will make changes to future particles. For instance, you can set the datum's</p> <p>spawning</p> <p>var to 0 to make it stop creating new particles. (Note: If you are changing a vector or color matrix, such as</p> <p>gravity</p> <p>, you need to assign a new value. You can't for instance set</p> <p>particles.gravity[2] = 0</p> <p>because it won't do anything to update the particle stream.)</p> <p>The same particle datum can be assigned to more than one movable atom. However the particles displayed by each atom will be different.</p>"},{"location":"world/proc/GetScores/#pixel-movement","title":"Pixel movement","text":"<p>See also: </p> <p>Bounding boxes </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Pixel movement is a concept that allows atoms to escape the constraints of BYOND's historically tile-based movement, and move in smaller steps. In the past this had to be done with soft code, but that was sometimes inconvenient and it did not perform as well in projects with many objects moving.</p> <p>The key to understanding pixel movement is to use the bound and step vars. You use the bound family of vars to define a bounding box for a movable atom, instead of just making it one full tile in size. The step vars can give it a movement speed and offset it from the corner of the tile it's standing on.</p> <ul> <li>bound_x: The left edge of the bounding box</li> <li>bound_y: The bottom edge of the bounding box</li> <li>bound_width: Width of the bounding box</li> <li>bound_height: Height of the bounding box</li> <li>step_size: default movement speed</li> <li>step_x: x offset from the corner of loc</li> <li>step_y: y offset from the corner of loc</li> </ul> <p>Those are for movable atoms only; they do not apply to turfs.</p> <p>If  world.movement_mode   is set to</p> <p>TILED_MOVEMENT_MODE</p> <p>, all movable atoms must be aligned to the tile grid: their step_x/y/size values must be multiples of the icon size, and their bounds must also land on tile boundaries although the atom can be bigger than one tile. In other movement modes you can specify that only specific atoms use this behavior, by giving them the  TILE_MOVER   appearance flag.</p>"},{"location":"world/proc/GetScores/#_36","title":"GetScores","text":"<p>Bounding boxes</p> <p></p> <p>Left:   The bounding box (blue) is the only part of the mob that actually collides with anything. By default, it would cover the whole turf (brown). Any turfs covered by the bounding box are in the mob's locs var.  Right:   The atom's true position (shaded) is offset from the turf by step_x and step_y.</p> <p>As an example, if your players' mobs have icons that only cover the center 24\u00d724 pixels of a regular 32\u00d732 icon, then you would set the mobs' bound_x and bound_y to 4--because there are 4 pixels unused to the left and bottom--and bound_width and bound_height to 24.</p> <p>The mob's physical location on the map depends on four things: Its loc, its step_x/y values, its bound_x/y values, and its bound_width/height. The lower left corner of the bounding box, relative to the turf the mob is actually standing on, begins at step_x+bound_x on the left and step_y+bound_y on the bottom.</p> <p>The physical position of the bounding box is  not affected   by the pixel_x/y/z vars. Those are still strictly visual offsets.</p> <p>The turfs the mob is covering can be read from the read-only locs var. The mob will also appear in the contents of those turfs.</p> <p>Note: This means if an atom is in a turf's contents, its loc is  not necessarily   that turf. The contents list is made to include \"overhangers\" from another tile for ease of use.</p>"},{"location":"world/proc/GetScores/#_37","title":"GetScores","text":"<p>Movement</p> <p>All of the step and walk procs have been upgraded to take an additional argument, which is the speed at which the atom should move. If that argument is left out, the atom's own step_size is used by default. The step_size determines how fast the step_x and step_y values will change when moving.</p> <p>Move() has two new arguments that handle the position change gracefully. These are the step_x and step_y values for the target location.</p> <p>Pixel movement changes the behavior of the Move() proc, because a lot of things are possible that were not possible when BYOND only supported moving one tile at a time. For starters, a Move() is either a \"slide\" or a \"jump\" depending on the distance. A slide is when the move can be stopped partway; a jump is strictly pass/fail. Anything greater than one tile  and   the mover's regular step_size is considered a jump. Changing z levels is also a jump, as is moving to/from a non-turf.</p> <p>If step_x and step_y aren't within a good range, the new loc and the step_x/y values may be changed so that the southwest corner of the mover's bounding box is standing on its actual loc, or as close to it as possible.</p> <p>Enter() and Exit() can be called for several turfs and/or areas, not just one at a time. It is also possible for them not to be called at all, if the moving atom moves within a turf but doesn't cross a new turf boundary. Enter() and Exit() are only called when first attempting to enter or fully exit. The behavior of these procs depends on  world.movement_mode   ; in legacy mode, they look at some of the contents of the turfs as well as the turfs themselves, to preserve behavior found in older BYOND versions.</p> <p>Cross() and Uncross() are the equivalent of Enter() and Exit() but apply to objects the mover will either overlap or stop overlapping. (For turfs, Enter() and Exit() call these procs by default, since the mover is both stepping  into   and  onto   a turf.) Likewise Crossed() and Uncrossed() are the equivalents of Entered() and Exited().</p> <p>If an atom is sliding, its movement can be halted if it encounters an obstacle partway along its route. Bump() will still be called for any obstacles the atom runs into, but Move() will return the number of pixels moved (the most in any direction). When sliding at a speed so fast that the distance is bigger than the atom itself, the move will be split up into several smaller slides to avoid skipping over any obstacles.</p> <p>Gliding, which is used to show smooth movement between atoms in tile movement, is mostly not used in pixel movement. It only applies when the client uses a higher  fps   than the server.</p>"},{"location":"world/proc/GetScores/#_38","title":"GetScores","text":"<p>Pixel procs</p> <p>The bounds() and obounds() procs have been added to grab a list of atoms within a given bounding box. That box can be relative to an atom, or in absolute coordinates.</p> <p>bounds_dist() tells the distance between two atoms, in pixels. If it is positive, that is the minimum distance the atoms would have to traverse to be touching. At 0, they are touching but not in collision. A negative value means the two atoms are in collision.</p>"},{"location":"world/proc/GetScores/#projection-matrix","title":"Projection matrix","text":"<p>See also: </p> <p>Particle effects </p> <p>transform var (atom) </p> <p>matrix </p> <p>Color matrix </p> <p>Note: Currently this feature applies only to particle effects, using the</p> <p>transform</p> <p>var.</p> <p>Normally icons in BYOND can only be transformed in 2D, using a simple 3x3 matrix. This is represented by the</p> <p>/matrix</p> <p>object, which cuts off the last column because it isn't used. However particles can have coordinates in x, y, and z, and the whole particle set can be given a transformation matrix that handles all three dimensions.</p>"},{"location":"world/proc/GetScores/#_39","title":"GetScores","text":"<p>Simple 2D transforms</p> <p>The easiest transformation for particles is a simple 2D one, which you can do by setting the particle datum's</p> <p>transform</p> <p>var to a</p> <p>/matrix</p> <p>object.</p> <pre><code>          a d 0\nx y 1  *  b e 0  =  x' y' 1\n          c f 1\n</code></pre> <p>When an x,y point is multiplied by the matrix, it becomes the new point x',y'. This is equivalent to:</p> <pre><code>x' = a*x + b*y + c\ny' = d*x + e*y + f\n</code></pre> <p>This is called an  affine transform   because all the operations are \"linear\" in math terms. (That is, every term in the formula above has a single variable, not raised to a higher power than 1.)</p>"},{"location":"world/proc/GetScores/#_40","title":"GetScores","text":"<p>3x4 matrix (x,y,z with translation)</p> <p>3D affine transforms of this type are also affine transformations. There is no special object for this so a list is used (see below).</p> <pre><code>            xx xy xz 0\nx y z 1  *  yx yy yz 0  =  x' y' z' 1\n            zx zy zz 0\n            cx cy cz 1\n</code></pre> <p>The way to read the vars above is that the first letter says what input component is being transformed (x,y,z, or c for \"constant\"), and the second letter is the output component.</p> <pre><code>x' = xx*x + yx*y + zx*z + cx\ny' = xy*x + yy*y + zy*z + cy\nz' = xz*x + yz*y + zz*z + cz\n</code></pre> <p>To use this kind of matrix, you can cut off the 4th column and provide the values in a list form, in row-major order:</p> <p>list(xx,xy,xz, yx,yy,yz, zx,zy,zz, cx,cy,cz)</p> <p>Note the 4th row is also optional.</p>"},{"location":"world/proc/GetScores/#_41","title":"GetScores","text":"<p>4x4 matrix (x,y,z,w with projection)</p> <p>This is the most interesting matrix, since if you use all 4 columns you're actually altering an \"axis\" called w. This isn't a real axis, but is just a number that the resulting vector will be divided by.</p> <pre><code>            xx xy xz xw\nx y z 1  *  yx yy yz yw  =  x'w' y'w' z'w' w'\n            zx zy zz zw\n            wx wy wz ww\n\nw' = xw*x + yw*y + zw*z + ww\nx' = (xx*x + yx*y + zx*z + wx) / w'\ny' = (xy*x + yy*y + zy*z + wy) / w'\nz' = (xz*x + yz*y + zz*z + wz) / w'\n</code></pre> <p>In a regular affine transform, w always stays at 1. In projection you can think of w as a distance from the \"camera\". 1 is where objects are their \"normal\" size. If you make the z value affect w' by setting zw, you basically make an object look smaller at higher z values.</p> <p>This is a simple projection matrix where x,y,z are left untouched, but there's a projection effect. The \"D\" value is how far away the \"camera\" is from z=0, so a point at z=D looks like it's twice as far away.</p> <pre><code>1  0  0  0\n0  1  0  0\n0  0  1  1/D\n0  0  0  1\n\n</code></pre> <p>This 4x4 matrix is handled as a list just like the 3x4 affine matrix:</p> <p>list(xx,xy,xz,xw, yx,yy,yz,yw, zx,zy,zz,zw, wx,wy,wz,ww)</p>"},{"location":"world/proc/GetScores/#regular-expressions","title":"Regular expressions","text":"<p>See also: </p> <p>regex datum </p> <p>regex proc </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>Regular expressions are patterns that can be searched for within a text string, instead of searching for an exact match to a known piece of text. They are much more versatile for find and replace operations, and therefore useful for parsing, filtering, etc.</p> <p>Some example regular expressions are:</p> <p>|   Pattern   |   Code   |   Meaning   | | --- | --- | --- | |   B.*D   |   regex(\"B.*D\")   |   Find</p> <p>B</p> <p>, followed by any number of characters (including none), followed by a</p> <p>D</p> <p>.   | |   [0-3]   |   regex(@\"[0-3]\")   |   Find any digit from 0 to 3   | |   foo|bar   |   regex(\"foo|bar\",\"i\")   |   Find</p> <p>foo</p> <p>or</p> <p>bar</p> <p>, case-insensitive   | |   \\d+   |   regex(@\"\\d+\",\"g\")   |   Find all sequences of digits   |</p> <p>These are some of the patterns you can use. If you want to use any of the operators as an actual character, it must be escaped with a backslash.</p> <p>It is highly recommended that you use  raw strings   like  <code>@\"...\"</code>   for your regular expression patterns, because with a regular DM string you have to escape all backslash  <code>\\</code>   and open bracket  <code>[</code>   characters, which will make your regular expression much harder for you to read. It's easier to write  <code>@\"[\\d]\\n\"</code>   than  <code>\"\\[\\\\d]\\\\n\"</code>   .</p> <p>|   Pattern   |   Matches   | | --- | --- | | a   |  b  | a   or  b  | |   .   |   Any character (except a line break)   | |   ^   |   Beginning of text; or line if</p> <p>m</p> <p>flag is used   | |   $   |   End of text; or line if</p> <p>m</p> <p>flag is used   | |   \\A   |   Beginning of text   | |   \\Z   |   End of text   | |   [  chars   ]   |   Any character between the brackets. Ranges can be specified with a hyphen, like 0-9. Character classes like</p> <p>\\d</p> <p>and</p> <p>\\s</p> <p>can also be used (see below).   | |   [^  chars   ]   |   Any character NOT matching the ones between the brackets.   | |   \\b   |   Word break   | |   \\B   |   Word non-break   | |   (  pattern   )   |   Capturing group: the pattern must match, and its contents will be captured in the group list.   | |   (?:  pattern   )   |   Non-capturing group: Match the pattern, but do not capture its contents.   | |   \\1  through   \\9   |   Backreference;</p> <p>\\  N </p> <p>is whatever was captured in the  N   th capturing group.   | |   Modifiers   | |   Modifiers are \"greedy\" by default, looking for the longest match possible. When following a word, they only apply to the last character.   | | a   *   |   Match  a   zero or more times   | | a   +   |   Match  a   one or more times   | | a   ?   |   Match  a   zero or one time   | | a   {  n   }   |   Match  a   , exactly  n   times   | | a   {  n   ,}   |   Match  a   ,  n   or more times   | | a   {  n   ,  m   }   |   Match  a   ,  n   to  m   times   | | modifier   ?   |   Make the previous modifier non-greedy (match as little as possible)   | |   Escape codes and character classes   | |   \\x  NN  |   Escape code for a single character, where  NN   is its hexadecimal ASCII value   | |   \\u  NNNN  |   Escape code for a single 16-bit Unicode character, where  NNNN   is its hexadecimal value   | |   \\U  NNNNNN  |   Escape code for a single 21-bit Unicode character, where  NNNNNN   is its hexadecimal value   | |   \\d   |   Any digit 0 through 9   | |   \\D   |   Any character except a digit or line break   | |   \\l   |   Any letter A through Z, case-insensitive   | |   \\L   |   Any character except a letter or line break   | |   \\w   |   Any identifier character: digits, letters, or underscore   | |   \\W   |   Any character except an identifier character or line break   | |   \\s   |   Any space character   | |   \\S   |   Any character except a space or line break   | |   Assertions   | |   (?=  pattern   )   |   Look-ahead: Require this pattern to come next, but don't include it in the match   | |   (?!  pattern   )   |   Look-ahead: Require this pattern NOT to come next   | |   (?&lt;=  pattern   )   |   Look-behind: Require this pattern to come before, but don't include it in the match (must be a fixed byte length)   | |   (?&lt;!  pattern   )   |   Look-behind: Require this pattern NOT to come before (must be a fixed byte length)   |</p> <p>The optional flags can be any combination of these:</p> <p>|   Flag   |   Meaning   | | --- | --- | |   i   |   Case-insensitive matching   | |   g   |   Global: In Find() subsequent calls will start where this left off, and in Replace() all matches are replaced.   | |   m   |   Multi-line: ^ and $ refer to the beginning and end of a line, respectively.   |</p> <p>After calling</p> <p>Find()</p> <p>on a</p> <p>/regex</p> <p>datum, the datum's</p> <p>group</p> <p>var will contain a list\u2014if applicable\u2014of any sub-patterns found with the</p> <p>()</p> <p>parentheses operator. For instance, searching the string</p> <p>\"123\"</p> <p>for</p> <p>1(\\d)(\\d)</p> <p>will match</p> <p>\"123\"</p> <p>, and the</p> <p>group</p> <p>var will be</p> <p>list(\"2\",\"3\")</p> <p>. Groups can also be used in replacement expressions; see the  Replace() proc   for more details.</p>"},{"location":"world/proc/GetScores/#understanding-the-renderer","title":"Understanding the renderer","text":"<p>.renderlist {position: relative; display: inline-block; margin-left: 3em; text-align: center;}  .renderlist-label, .renderlist-caption, .renderlist-note {display: block; margin: 3px 0; width: 100%;}  .renderlist-caption {font-size: 1.1em; font-weight: bold;}  .renderlist-note {font-size: 0.9em;}  .renderlist-box {background: #eee; border: 1px solid #333; padding: 3px 10px; margin: 3px 0; border-radius: 10px;}  body.dark .renderlist-box {color: white; background: #333; border-color: #aaa;}  .renderlist-box .renderlist-box {background: #ddd; width: 100%;}  body.dark .renderlist-box .renderlist-box {background: #444; width: 100%;}  .renderlist-box .renderlist-box .renderlist-box {background: #ccc;}  body.dark .renderlist-box .renderlist-box .renderlist-box {background: #555;}</p> <p>To get the most out of BYOND's visual effects, it helps to understand how the map is displayed.</p> <p>Every atom has an  appearance   that holds all of its visual info (and sometimes a little non-visual info). This appearance has to be turned into sprites in order to be rendered.</p> <p>Although many atoms need little more than a simple  icon   and  icon_state   and produce only a single sprite, some are more complex with overlays, underlays, maptext, etc. Also there may be  image objects   and  visual contents   involved, although they're not part of the atom's appearance.</p> <p>For a simple</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>, just one sprite is generated. The client looks up the icon it's given. Then it looks up an icon state, which may be influenced by whether the atom is moving or not since you can have moving and non-moving icon states. Then it determines which  direction   to draw and which frame of the icon's animation (if any) to use.</p> <p>So with several simple icons, and not worrying about layers for now, a list of sprites lays out like this:</p> <p>Atom #1</p> <p>Atom #2</p> <p>\u22ee</p> <p>Atom #N</p>"},{"location":"world/proc/GetScores/#_42","title":"GetScores","text":"<p>Overlays and underlays</p> <p>Now let's consider what happens when an appearance has overlays.</p> <p>Underlay #1</p> <p>\u22ee</p> <p>Underlay #N</p> <p>Main icon</p> <p>Overlay #1</p> <p>\u22ee</p> <p>Overlay #N</p> <p>The  underlays   list is processed first, then  overlays   . These lists contain appearances themselves, rather than actual atoms. This means that overlays are recursive: an overlay can have overlays itself. To picture how that works, just replace one of the overlays above with another list.</p> <p>Underlay #1</p> <p>Underlay #2</p> <p>Main icon</p> <p>Underlays of overlay #1</p> <p>Overlay #1 icon</p> <p>Overlays of overlay #1</p> <p>Overlay #2</p>"},{"location":"world/proc/GetScores/#_43","title":"GetScores","text":"<p>Image objects and visual contents</p> <p>Any atom can have an  image object   attached, which can be shown to only specific players. Most atoms, and image objects, can have  visual contents   that display other atoms as if they're overlays.</p> <p>Underlays</p> <p>Main icon</p> <p>Overlays</p> <p>Image objects</p> <p>Visual contents</p> <p>As you see this is very similar to overlays. Just like overlays, image objects and visual contents have appearances of their own (and may also have their own images or visual contents), so this may be recursive as they add new overlays, etc.</p> <p>A couple of things to keep in mind:</p> <ul> <li>If an image object uses the  override   var, it will replace the main appearance's icon and overlays, although it  won't replace other images or visual contents.</li> <li>An object in visual contents can use  vis_flags   to set</li> </ul> <p>VIS_UNDERLAY</p> <p>and move itself before the parent's underlays.</p>"},{"location":"world/proc/GetScores/#_44","title":"GetScores","text":"<p>Maptext and particles</p> <p>Any appearance may have  maptext   attached. That maptext draws above the icon but is grouped with it. That grouping will be discussed further below.</p> <p>Particle effects also get grouped with the main icon in a similar way to maptext.</p> <p>For simplicity, from this point forward the diagram will just treat underlays, overlays, image objects, and visual contents as overlays.</p> <p>Main icon</p> <p>Maptext</p> <p>Particles</p> <p>Overlays</p>"},{"location":"world/proc/GetScores/#_45","title":"GetScores","text":"<p>Color, transform, and filters</p> <p>An appearance's  color   and  alpha   vars (from here forwarded they'll just be referred to by</p> <p>color</p> <p>) and  transform   are inherited by any overlays, which also includes images and visual contents. You can avoid that inheritance by giving those overlays special  appearance_flags   :</p> <p>RESET_COLOR</p> <p>,</p> <p>RESET_ALPHA</p> <p>, and</p> <p>RESET_TRANSFORM</p> <p>.</p> <p>The appearance's filters are only applied to the main icon.</p> <p>Main icon</p> <p>Maptext</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Overlays</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited from Main</p> <p>filters</p> <p>are not inherited from Main</p> <p>When</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited, they \"stack\". The inherited color and transform values are applied after those of the overlays.</p>"},{"location":"world/proc/GetScores/#_46","title":"GetScores","text":"<p>KEEP_TOGETHER</p> <p>and</p> <p>KEEP_APART</p> <p>There are times it's desirable for an appearance and all its overlays to be treated as a single unit so any colors or filters can be applied all at once. One simple example is if the appearance has an</p> <p>alpha</p> <p>of 128 to make it translucent, you probably want to draw the whole atom faded instead of drawing each sprite faded, one on top of the other.</p> <p>By using the</p> <p>KEEP_TOGETHER</p> <p>value in  appearance_flags   (called KT for short), an appearance will group all of its underlays and overlays together. If this is an atom with image objects and visual contents, those will be grouped with it as well.</p> <p>KT group</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Main icon</p> <p>Maptext</p> <p>Overlays</p> <p>With</p> <p>KEEP_TOGETHER</p> <p>all of these sprites are rendered to a temporary drawing surface, and then the main appearance's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>are all applied to the combined drawing. This comes with a trade-off, since you can no longer use flags such as</p> <p>RESET_COLOR</p> <p>to opt out of inheritance.</p> <p>If an overlay doesn't want to be part of a KT group, it can use the</p> <p>KEEP_APART</p> <p>flag (KA for short). If there are multiple nested KT groups, KA will only escape the innermost group.</p> <p>If an overlay inside a KT group has a different  plane   than the group's owner, it will be separated as if it defined</p> <p>KEEP_APART</p> <p>, except it can escape multiple nested groups.</p>"},{"location":"world/proc/GetScores/#_47","title":"GetScores","text":"<p>Layers and planes</p> <p>Any appearance can have a  layer   or  plane   , and these influence how it gets sorted. (There's also a concept called a \"sub-plane\" that's influenced by whether an atom is a  HUD/screen object   or special layers like  BACKGROUND_LAYER   .)</p> <p>If a sprite is created with</p> <p>FLOAT_LAYER</p> <p>(any negative value counts as a floating layer) its layer has to be resolved, or \"unfloated\". The main sprite for an atom can never float; it has to have a real layer. Its overlays and underlays with floating layers will reorder themselves in numerical order, then look for the next closest sprites in the rendering list that has a non-negative layer.</p> <p>A similar process happens with</p> <p>FLOAT_PLANE</p> <p>. Planes can have negative values but</p> <p>FLOAT_PLANE</p> <p>and the values close to it are special. Sprites with floating planes have to resolve those as well.</p> <p>Once all atoms that will appear on the map are assembled into a rendering list of sprites, the order in which they're rendered on the map is determined in this order:</p> <ol> <li>The</li> </ol> <p>plane</p> <p>var matters most. 2. Subplane is counted next. E.g., HUD objects render above non-HUD objects. 3. Depending on  world.map_format   ,</p> <p>layer</p> <p>or physical position determine the drawing order from here. 4. After everything else has been checked, the order the sprites were generated in is the final tie-breaker.</p> <p>In a typical topdown map,</p> <p>layer</p> <p>is basically all that matters after the plane and subplane are taken into account. There is a legacy concept called micro-layers that helps break ties between sprites with the same layer; for instance if an atom is moving it's usually desirable to draw it above other atoms with the same layer; this applies only to topdown maps.</p>"},{"location":"world/proc/GetScores/#_48","title":"GetScores","text":"<p>Plane masters</p> <p>Sometimes it's helpful to group multiple sprites on one plane as if the plane itself were a KT group. For this,  appearance_flags   has a value called</p> <p>PLANE_MASTER</p> <p>. An object with this flag will act as a \"parent\" for everything else on the plane. All other sprites on the plane will be grouped together and rendered on a temporary drawing surface, and then the plane master's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>will be applied.</p> <p>A plane master does not, however, get an icon or maptext of its own; they're simply ignored. It can have overlays added to the group.</p>"},{"location":"world/proc/GetScores/#_49","title":"GetScores","text":"<p>Advanced topics</p> <p>There are other topics not covered in this article, such as  render targets   and special map formats. Any details on how those features impact rendering are discussed in their own articles.</p>"},{"location":"world/proc/GetScores/#side-view-maps","title":"Side-view maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>The side-view map format is used for 3/4 perspective, where the map is basically similar to a top-down view but is usually foreshortened. Just like with isometric projection, tiles that are closer to the bottom of the screen are considered to be closer to the viewer. This is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions.</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>The</p> <p>layer</p> <p>var behaves much the same way it does in</p> <p>ISOMETRIC_MAP</p> <p>mode.See  isometric maps   for more information.</p> <p>When using this mode you may want to use a foreshortened</p> <p>world.icon_size</p> <p>, like a 32x24 format instead of 32x32 for example, and use taller icons for any vertical structures like walls or buildings. If you set</p> <p>world.icon_size</p> <p>to use foreshortening, then</p> <p>pixel_y</p> <p>(or</p> <p>pixel_x</p> <p>, depending on the orientation of client.dir) will be adjusted for you; the same applies to</p> <p>step_x</p> <p>and</p> <p>step_y</p> <p>. For example, with</p> <p>world.icon_size</p> <p>set to</p> <p>\"64x32\"</p> <p>, the  physical   tile\u2014what you would see if you were to look at it straight down from above\u2014 is considered to be 64x64, so you would need</p> <p>pixel_y=64</p> <p>or</p> <p>step_y=64</p> <p>to offset by a whole tile. This adjustment does not apply to screen objects,</p> <p>pixel_w</p> <p>, or</p> <p>pixel_z</p> <p>.</p>"},{"location":"world/proc/GetScores/#tiled-icons","title":"Tiled icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>In BYOND 3.0, any file like a large .bmp would be treated like a regular icon that had been broken up into several tile-sized icon states. All tiles then were 32x32 pixels. An image that was 100x100 would therefore take at least 4x4 tiles to display. The icon was padded to the right and the top with blank space to become an even multiple of 32x32, and then broken up into sections. The lower left section was given an icon_state of</p> <p>\"0,0\"</p> <p>, the next to the right was</p> <p>\"1,0\"</p> <p>, and so on, up to the upper right which was</p> <p>\"3,3\"</p> <p>. Another icon state, a 32x32 thumbnail of the big image, was also included.</p> <p>BYOND 4.0 expanded on this concept by allowing icons to be defined that had individual graphics bigger than 32x32, and it would break each one up into tiles just like 3.0 did. If an icon had a state called</p> <p>\"open\"</p> <p>then it might break down into</p> <p>\"open 0,0\"</p> <p>,</p> <p>\"open 1,0\"</p> <p>, and so on, while the actual</p> <p>\"open\"</p> <p>state would be a thumbnail image. To show the whole image, you would have to have a separate atom or overlay for each individual tile.</p> <p>In newer versions, breaking big icons into tiles is no longer done by default. Instead, icons are shown and manipulated in their  native size   . To use the old method of breaking icons into tiles, set</p> <p>world.map_format</p> <p>to</p> <p>TILED_ICON_MAP</p> <p>. This is the default for all projects compiled before version 455.</p> <p>When using tiled icons, there are some important things to note:</p> <ul> <li>You need to use extra atoms or overlays to show any icon bigger than a  single tile, where each atom/overlay shows an individual tile-sized piece  of the big icon.</li> <li>The icon_state names of each tile are always the original name followed  by a space, followed by x,y tile coordinates such as 0,0 or 2,1, so the  northeast corner of</li> </ul> <p>\"flag\"</p> <p>might for instance be</p> <p>\"flag 3,2\"</p> <p>. If the original icon_state had no name, the space is  left out and only the x,y coordinates are used. * Every icon's size is a multiple of world.icon_size. If an icon of an  incompatible size is used, it will be padded to the nearest full tile  size. * Crop()</p> <p>and</p> <p>Scale()</p> <p>always pad their results to the  nearest full tile size. * icon.Insert()</p> <p>can insert a single-tile icon into a multi-tiled  big icon using the appropriate icon_state; e.g., inserting into</p> <p>\"door 0,0\"</p> <p>will replace the southwest corner of the</p> <p>\"door\"</p> <p>state. * Using the</p> <p>icon()</p> <p>proc, you can extract a single tile from a  multi-tiled big icon.</p> <p>This example shows a big icon being applied to an atom in tiled mode, as overlays:</p>"},{"location":"world/proc/GetScores/#_50","title":"GetScores","text":"<p>Example:</p> <p>// icon is 3 tiles wide by 2 high icon_state = \"0,0\"</p> <p>// A temporary object used for the overlays var/obj/O = new O.icon = icon O.layer = FLOAT_LAYER</p> <p>for(var/tile_y=0, tile_y&lt;2, ++tile_y)  for(var/tile_x=0, tile_x&lt;3, ++tile_x)  if(tile_x &amp;&amp; tile_y)  O.pixel_x = tile_x * 32  O.pixel_y = tile_y * 32  O.icon_state = \"[tile_x],[tile_y]\"  overlays += O</p>"},{"location":"world/proc/GetScores/#topdown-maps","title":"Topdown maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>By default, BYOND displays all maps in top-down format, so</p> <p>world.map_format</p> <p>is set to</p> <p>TOPDOWN_MAP</p> <p>unless you say otherwise. This view means players are looking down on the map, and \"north\" corresponds to the top of their screen. (This can be changed by setting</p> <p>client.dir</p> <p>.)</p> <p>A related map_format, used by older games, is</p> <p>TILED_ICON_MAP</p> <p>. This is also topdown but it handles icons differently.</p> <p>In this form, the</p> <p>layer</p> <p>var behaves exactly as you would expect: Icons with a lower layer are drawn beneath icons with a higher layer. The only exception is when you use  big icons   , which will be drawn above any other icons on the same layer. Also an atom's underlays will be drawn behind it unless their layer is changed, and its overlays will draw in front of it unless otherwise stated.</p> <p>Topdown mode also guarantees that</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>will set the exact screen size used by the HUD, except for HUD objects that appear outside of the normal bounds.</p> <p>Screen objects (also called the HUD) cannot be intermixed with topdown icons. They will appear on top of other icons, unless using a lower plane or a special layer like</p> <p>BACKGROUND_LAYER</p> <p>.</p>"},{"location":"world/proc/GetScores/#topdown_layer","title":"TOPDOWN_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>TOPDOWN_LAYER is a special high value that can be added to the regular layer of any atom. This is only available when using a non-topdown world.map_format, such as isometric mapping.</p> <p>The purpose of this value is to make an atom appear as if it belongs in a top-down map, when using a map_format other than TOPDOWN_MAP or TILED_ICON_MAP. This can be handy for title screens, or for special battle maps or the inside of a building in an RPG.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance a turf should have a layer of TOPDOWN_LAYER + TURF_LAYER. Usually you will want one part of the map to have TOPDOWN_LAYER, and for players to be unable to walk to there from the regular map. Mixing topdown icons and icons in the normal map_format in view of each other could look very strange. For safety's sake, the easiest thing to do is to keep them on separate z layers.</p> <p>This can be mixed with EFFECTS_LAYER. Anything in TOPDOWN_LAYER will display on top of EFFECTS_LAYER, and TOPDOWN_LAYER + EFFECTS_LAYER will be above both.</p> <p>This can also be mixed with BACKGROUND_LAYER, which takes priority over everything else.</p> <p>Images or overlays with FLOAT_LAYER can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#unicode","title":"Unicode","text":"<p>See also: </p> <p>text </p> <p>BYOND was originally written to handle 8-bit (\"ANSI\") characters only. However as time has marched on, Unicode has become ubiquitous for supporting multiple languages, special characters, and emojis. To adapt to this, BYOND now supports Unicode.</p> <p>When ANSI was king, every character was exactly one byte in width, because the only valid characters were between 1 and 255. (And technically, BYOND reserved 255 for its own use.) Now, BYOND uses an encoding called UTF-8 to store characters that can't fit in one byte.</p> <p>UTF-8 breaks up characters with codes of 128 or higher into multiple bytes, like so:</p> <p>|   Character code   |   Size in bytes   | | --- | --- | |   0 - 0x7F   |   1   | |   0x80 - 0x7FF   |   2   | |   0x800 - 0xFFFF   |   3   | |   0x10000 - 0x10FFFF   |   4   |</p>"},{"location":"world/proc/GetScores/#_51","title":"GetScores","text":"<p>Text handling</p> <p>Importantly, BYOND's text procs are based on the byte position, not the character position which may be lower. In other words,</p> <p>length(\"abcd\u00e9fg\")</p> <p>is greater than 7; it's 8, because</p> <p>\u00e9</p> <p>takes up 2 bytes in UTF-8. That also means</p> <p>f</p> <p>is at position 7, not position 6.</p> <p>Why do the text procs work with byte position instead of character position? Because ultimately, it's faster. Going by character position would require counting every byte in a string (at least when it uses UTF-8) until the right character position was found. This would be detrimental to performance in most cases.</p> <p>For the most part, this distinction should be fairly invisible to you. Most code isn't going to encounter problems, but if you do a lot of text processing you should be aware of it.</p> <p>In particular,  text2ascii()   returns the Unicode value at a specific position, which may cover several bytes. If you loop through a string calling this proc for each character, you'll have to make adjustments for cases when multiple bytes have been read.</p> <p>The read-only</p> <p>[]</p> <p>index operator also uses byte positions.</p> <p>If you read a byte or cut text at an inappropriate point, any broken characters resulting from the cut will be turned into the Unicode replacement character \ufffd which is 0xFFFD.</p>"},{"location":"world/proc/GetScores/#_52","title":"GetScores","text":"<p>_char</p> <p>procs</p> <p>Most of the text handling procs have slower</p> <p>_char</p> <p>versions (e.g.,</p> <p>copytext_char</p> <p>) that use character positions instead of byte positions.</p> <p>These should be used sparingly if at all; whenever it's possible to use byte positions, you should. When you do use a</p> <p>_char</p> <p>version of a proc, prefer using</p> <p>-offset</p> <p>instead of</p> <p>length_char(text)-offset</p> <p>for positions near the end of the string. Most text procs allow negative position values that count backwards from the end, and counting a small number of characters backward is faster than counting a lot of characters going forward.</p>"},{"location":"world/proc/GetScores/#_53","title":"GetScores","text":"<p>Old code</p> <p>Code written in ANSI will be up-converted to UTF-8 by Dream Maker, based on your current locale when the code is loaded.</p>"},{"location":"world/proc/GetScores/#user-interface-skins","title":"User interface skins","text":"<p>See also: </p> <p>winset proc </p> <p>winget proc </p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>BYOND games used to have very limited interface options, all effectively sharing the same layout. In BYOND 4.0, skins were introduced, allowing developers more control over the layout.</p> <p>A skin consists of  macro sets   for keyboard/gamepad input, menus, and windows and/or panes. All of these are considered  controls   that a game can interact with via  winset()   ,  winget()   ,  output()   , and a few other procs.</p> <p>About the simplest possible skin is a single window with a single  map control   , and a single macro set.</p>"},{"location":"world/proc/GetScores/#client-commands","title":"client commands","text":"<p>Several commands can be executed on the client that are not verbs, but raw instructions for Dream Seeker.</p> <p>.winset \"  [control.param=value;...]   \"</p> <p>Sets parameters in response to a menu or button command (or a manually typed command). You can set more than one by separating them with semicolons. This command has a more complex format for conditional instructions (see below).</p> <p>.output  control text </p> <p>Sends output to a control. The text does not need quotes, but backslashes, newlines, and tabs should be escaped with a backslash. This works similarly to the  output()   proc.</p> <p>.options</p> <p>Shows the Options &amp; Messages box.</p> <p>.reboot</p> <p>Reboots the world, when Dream Seeker is also acting as a server.</p> <p>.reconnect</p> <p>Reconnects to the same world.</p> <p>.host</p> <p>Opens hosting options box, when Dream Seeker is also acting as a server.</p> <p>.profile</p> <p>Opens the profiler. On a remote connection you may not have access to profile server procs, but you can look at the client and network profilers.</p> <p>.screenshot</p> <p>Saves a screenshot of the map. If there's more than one map control, the default map is used.</p> <p>.screenshot auto</p> <p>Saves a screenshot of the map, but does not prompt for a filename. The file will be saved in the client's user directory in BYOND/screenshots.</p> <p>.gamepad-mapping</p> <p>Opens the gamepad mapping dialog. Helpful if the user's gamepad is not supported or not configured to their liking.</p> <p>.command</p> <p>Prompts the user to enter a command, which can be one of these commands as well.</p> <p>.configure  option value </p> <p>Toggle certain Dream Seeker config options, such as</p> <p>.configure graphics-hwmode on</p> <p>. The only supported options you can use are</p> <p>graphics-hwmode</p> <p>,</p> <p>sound</p> <p>, and</p> <p>delay</p> <p>which is an old mechanism for dynamically adapting to network delay. (Usually the</p> <p>delay</p> <p>is reset to 0.)</p> <p>.quit</p> <p>Closes Dream Seeker.</p>"},{"location":"world/proc/GetScores/#_54","title":"GetScores","text":"<p>Conditional Winset</p> <p>The</p> <p>.winset</p> <p>command allows you to use conditional expressions, like so:</p> <pre><code>condition ? choice1 : choice2\n</code></pre> <p>The condition is the same as any other parameter you might use in</p> <p>.winset</p> <p>, but instead of setting the parameter, it checks to see if it's true. If so, then the parameters in</p> <p>choice1</p> <p>will be set. Otherwise, the parameters in</p> <p>choice2</p> <p>are set. This example makes the window background red if bigbutton is checked.</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#ff0000 : window.background-color=none\"\n</code></pre> <p>If you want to look for values that don't match instead of values that do, use</p> <p>!=</p> <p>instead of</p> <p>=</p> <p>in the condition.</p> <pre><code>.winset \"bigbutton.is-checked!=false ? window.background-color=#f00 : window.background-color=none\"\n</code></pre> <p>The</p> <p>choice2</p> <p>item is optional.</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#f00\"\n</code></pre> <p>Because it's often useful to do more than one thing at a time,</p> <p>choice1</p> <p>and</p> <p>choice2</p> <p>don't have to be just one parameter. You can use multiple parameters, but they are separated with a space instead of a semicolon. (A semicolon indicates the conditional expression is over.)</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.text-color=#fff window.background-color=#f00 : window.text-color=none window.background-color=none\"\n</code></pre>"},{"location":"world/proc/GetScores/#_55","title":"GetScores","text":"<p>Embedded Winget</p> <p>Commands that are initiated by the skin (like button.command, map.on-show, etc.) have a special syntax that allows you to include information that would normally require a winget call. By including</p> <p>[[  something   ]]</p> <p>in the command, the double-bracketed text will be replaced by the result of running a winget on that parameter.</p> <p>A value of</p> <p>[[id.parameter]]</p> <p>will run a winget on the control with the given ID. Just using</p> <p>[[parameter]]</p> <p>will run a winget for the control that initiated this command. You can also use</p> <p>parent</p> <p>in place of the ID to do something with the parent of the control, or</p> <p>parent.id</p> <p>for access to a sibling control. Position and size parameters can be further broken down by appending</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get at the numbers directly.</p> <p>Several commands already support some special cases like</p> <p>[[*]]</p> <p>or</p> <p>[[width]]</p> <p>or such, where the special-case values are relevant to the command. An example is that in</p> <p>on-size</p> <p>the value of</p> <p>[[*]]</p> <p>is a size value. The Any macro, gamepad macros, and mouse macros, also support this syntax; see  macros   for more info.</p> <p>You can choose how embedded wingets get formatted by following the value with</p> <p>as</p> <p>and a type, such as</p> <p>[[window.size as string]]</p> <p>. There are several types you can use, and different types of parameters get formatted differently:</p> <p>arg</p> <p>Value is formatted as if it's an argument on a command line. Numbers are left alone; booleans are 0 or 1; size and position have their X and Y values separated by a space; pretty much everything else is DM-escaped and enclosed in quotes.</p> <p>escaped</p> <p>DM-escape the value as if it's in a quoted string but do not include the quotes. Size and position values both use</p> <p>,</p> <p>to separate their X and Y values.</p> <p>string</p> <p>Value is formatted as a DM-escaped string with surrounding quotes.</p> <p>params</p> <p>Format value for a URL-encoded parameter list (see  list2params   ), escaping characters as needed.</p> <p>json</p> <p>JSON formatting. Numbers are left unchanged; size or position values are turned into objects with x and y items; boolean values are</p> <p>true</p> <p>or</p> <p>false</p> <p>.</p> <p>json-dm</p> <p>JSON formatting, but DM-escaped so it can be included in a quoted string. Quotes are not included.</p> <p>The</p> <p>arg</p> <p>type is the default, unless the</p> <p>[[</p> <p>... </p> <p>]]</p> <p>expression has double quotes on both sides, in which case</p> <p>escaped</p> <p>is the default.</p>"},{"location":"world/proc/GetScores/#controls-skin","title":"controls (skin)","text":"<p>Control types: </p> <p>Bar   : A progress bar or slider</p> <p>Browser   : A browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Parameters common to all controls: </p> <p>id </p> <p>is-disabled </p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>Positionable controls only (not Macro or Menu): </p> <p>anchor1, anchor2 </p> <p>background-color </p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p>"},{"location":"world/proc/GetScores/#_56","title":"GetScores","text":"<p>Creating/Destroying at runtime</p> <p>Controls can be created or deleted at runtime. (Only controls you created during runtime may be deleted.) To create a control, call  winset()   using the  id   of the new control, and the parameter list should include  type   ,  parent   , and probably also  pos   ,  size   , and any  anchors   .</p> <p>To delete the control again, set its</p> <p>parent</p> <p>to a blank value.</p> <p>Menu items and macros work similarly, except they have no positional info. For those, the  name   parameter is important when you create them, and you will either need  command   or (for macros)  map-to   to do anything with them.</p>"},{"location":"world/proc/GetScores/#bar-control-skin","title":"bar control (skin)","text":"<p>A progress bar or interactive slider. This can be made to use several different orientations. Its</p> <p>value</p> <p>can be read or set as a percentage from 0 to 100.</p> <p>Bar-specific parameters: </p> <p>angle1, angle2 </p> <p>bar-color </p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p>"},{"location":"world/proc/GetScores/#browser-control-skin","title":"browser control (skin)","text":"<p>A browser panel integrated into the skin.</p> <p>Browser-specific parameters: </p> <p>auto-format </p> <p>on-hide </p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>Browsers are capable of displaying HTML documents, and can also interact with the skin.</p>"},{"location":"world/proc/GetScores/#_57","title":"GetScores","text":"<p>Browsers and popups</p> <p>A longstanding behavior of BYOND is the ability to create a new browser window by sending an extra argument to the  browse()   proc. Since the advent of skins in BYOND 4.0, this behavior was kept. When you create a new browser popup, the window name you specify for the popup is used for the name of a new  window control   , and within that window there will be a new browser control simply called</p> <p>browser</p> <p>.</p> <p>If you want to interact with the new browser, its full \"decorated\"  id   is</p> <p>windowname   .browser</p> <p>.</p>"},{"location":"world/proc/GetScores/#_58","title":"GetScores","text":"<p>Running JavaScript from DM</p> <p>Sending  output()   to a browser will send a document to display there, but if you follow the browser's control name with a colon and a function name, you can call a JavaScript function in the document displayed within that browser.</p>"},{"location":"world/proc/GetScores/#_59","title":"GetScores","text":"<p>Example:</p> <p>var/list/info = list(\"name\"=\"fridge\", \"power\"=12) // send {\"name\":\"fridge\",\"power\":12} to a JavaScript function usr &lt;&lt; output(url_encode(json_encode(info)), \"mybrowser:myJSfunction\")</p> <p>The text that you send as output will be parsed like URL parameters, where mutliple arguments to the function are separated by</p> <p>&amp;</p> <p>or</p> <p>;</p> <p>, which is why  url_encode()   is wrapped around the  json_encode()   call in this example.</p>"},{"location":"world/proc/GetScores/#_60","title":"GetScores","text":"<p>Winset and Winget via JavaScript</p> <p>To allow better access to the skin via JavaScript, two new URL formats have been added. If</p> <p>window.location</p> <p>is set to these from JavaScript in a browser control, they can be used to interact directly.</p> <p>Winset URL: </p> <p>byond://winset?id=  [control ID]   &amp;  [property]   =  [value]   &amp;...</p> <p>This works like an ordinary  winset()   call from the server. If</p> <p>id</p> <p>is omitted, it's the same as a winset with a null ID. You can also leave the</p> <p>id</p> <p>blank if you use \"fully decorated\" property names such as</p> <p>mybutton.is-checked</p> <p>instead of just</p> <p>is-checked</p> <p>.</p> <p>Any text you use other than letters, numbers, hyphens, commas, and periods should be encoded via the</p> <p>encodeURIComponent()</p> <p>function in JavaScript.</p> <p>Winget URL: </p> <p>byond://winget?callback=  [callback function]   &amp;id=  [control ID/list]   &amp;property=  [property/list] </p> <p>In this winget, the IDs and properties you want can be separated by commas if you want to retrieve more than one. The winget operation works via a callback function you must define in JavaScript. The callback is given just one argument, a JavaScript object with all of the properties you requested. For example, this URL:</p> <pre><code>byond://winget?callback=wgcb&amp;id=button1&amp;property=is-checked,size,background-color\n</code></pre> <p>...might send this to the callback function wgcb:</p> <pre><code>{\n    \"is-checked\": true,\n    \"size\": {\n        \"x\": 60,\n        \"y\": 20\n    },\n    \"background-color\": {\n        \"value\": \"none\",\n        \"isDefault\": true,\n        \"red\": 236,\n        \"green\": 233,\n        \"blue\": 216,\n        \"alpha\": 255,\n        \"css\": \"#ece9d8\"\n    }\n}\n\n</code></pre> <p>The property names will be in the same format you would expect from  winget()   , so when you're looking at multiple elements' properties, you'll get the full names in</p> <p>id.property</p> <p>format. The values are always sent back in a convenient form for JavaScript to work with; in the case of size, position, and color these will always be objects.</p> <p>An optional</p> <p>control</p> <p>parameter for the winget call can be used if you want to send data to a callback in a different browser control.</p>"},{"location":"world/proc/GetScores/#button-control-skin","title":"button control (skin)","text":"<p>A button that can be pressed to run a  command   , or possibly toggled.</p> <p>Button-specific parameters: </p> <p>button-type </p> <p>command </p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p>"},{"location":"world/proc/GetScores/#child-control-skin","title":"child control (skin)","text":"<p>A container that can hold one or two  panes   . If it holds two panes, a splitter may appear between them. This control can therefore be used to subdivide a window or pane into smaller units.</p> <p>Child-specific parameters: </p> <p>is-vert </p> <p>left, top </p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p>"},{"location":"world/proc/GetScores/#grid-control-skin","title":"grid control (skin)","text":"<p>A grid that contains multiple cells that can show various kinds of output data.</p> <p>Grid-specific parameters: </p> <p>cell-span </p> <p>cells </p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>Sending output to a grid looks like this:</p>"},{"location":"world/proc/GetScores/#_61","title":"GetScores","text":"<p>Example:</p> <p>// output to column 3, row 2 winset(usr, \"thegrid\", \"current-cell=3,2\") usr &lt;&lt; output(\"Text\", \"thegrid\")</p> <p>// or even easier: usr &lt;&lt; output(\"Text\", \"thegrid:3,2\")</p> <p>// when is-list is true: usr &lt;&lt; output(\"5th item\", \"thegrid:5\")</p> <p>You can output an atom to the grid, which can be clicked, dragged, etc. However, you should make sure that atom is  not   temporary and will persist until you no longer need it, or else the server may recycle it and the object in the cell will either disappear or be impossible to interact with anymore.</p> <p>There are some limitations to output in grid controls:</p> <ul> <li>Only one character style (font, color, bold, etc.) may appear within a single cell.</li> <li>A cell is either a link, or not.</li> <li>One image is allowed per cell.</li> <li>A cell can hold an object (atom), sent to it via the  [output()</li> </ul> <p>proc](#/proc/output)   , which can be clicked, dragged, etc.; it will not act as a link. * The same margin is used all around the cell, not different margins for left, right, top, bottom. * There will always be a 1-pixel space for grid lines, whether they're shown or not.</p>"},{"location":"world/proc/GetScores/#info-control-skin","title":"info control (skin)","text":"<p>The classic BYOND statpanel, which contains both stat and verb tabs. This is technically a 3-column grid with a variable number of rows.</p> <p>Info-specific parameters: </p> <p>allow-html </p> <p>highlight-color </p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>Output to a statpanel is done via the  stat()   and  statpanel()   procs, during  mob/Stat()   .</p> <p>The same limitations that apply to  grid   output apply here.</p>"},{"location":"world/proc/GetScores/#input-control-skin","title":"input control (skin)","text":"<p>A text box into which the user can type. By default this is used for sending  commands   , but it can be used for other purposes as well.</p> <p>Input-specific parameters: </p> <p>command </p> <p>is-password </p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>Note that when in \"standard\" mode of accepting user commands, built-in verbs like</p> <p>.click</p> <p>, or local commands like</p> <p>.winset</p> <p>, are not accepted when typed in. This kind of command can still be entered manually through the Client menu of the Options &amp; Messages window.</p>"},{"location":"world/proc/GetScores/#label-control-skin","title":"label control (skin)","text":"<p>A text label that appears on the skin.</p> <p>Label-specific parameters: </p> <p>align </p> <p>allow-html </p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p>"},{"location":"world/proc/GetScores/#macro-control-skin","title":"macro control (skin)","text":"<p>A  keyboard/gamepad/mouse macro   , usually designed to run a  command   . The control is a means of interacting with the macro as an object, allowing some of its properties to be changed at runtime.</p> <p>Macro-specific parameters: </p> <p>command </p> <p>map-to </p> <p>name </p>"},{"location":"world/proc/GetScores/#main-control-skin","title":"main control (skin)","text":"<p>A container for other controls. The Main control takes two forms: a window or a pane.</p> <p>A window exists independently and can be moved around on the screen. A pane has to be used within another container control such as a  Child   or  Tab control   .</p> <p>Main-specific parameters: </p> <p>icon </p> <p>image </p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>Windows only: </p> <p>alpha </p> <p>can-close </p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>Panes only: </p> <p>can-scroll </p> <p>The font parameters have no impact on a window's statusbar or titlebar; those are drawn by the operating system.</p>"},{"location":"world/proc/GetScores/#map-control-skin","title":"map control (skin)","text":"<p>A map that will display icons from the game.</p> <p>Map-specific parameters: </p> <p>icon-size </p> <p>letterbox </p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p>"},{"location":"world/proc/GetScores/#menu-control-skin","title":"menu control (skin)","text":"<p>A menu item, that when activate will run a  command   .</p> <p>Menu-specific parameters: </p> <p>can-check </p> <p>command </p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p>"},{"location":"world/proc/GetScores/#output-control-skin","title":"output control (skin)","text":"<p>Displays text output.</p> <p>Output-specific parameters: </p> <p>enable-http-images </p> <p>image </p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p>"},{"location":"world/proc/GetScores/#tab-control-skin","title":"tab control (skin)","text":"<p>A tab control, where each tab holds a different  pane   .</p> <p>Tab-specific parameters: </p> <p>current-tab </p> <p>multi-line </p> <p>on-tab </p> <p>tabs </p>"},{"location":"world/proc/GetScores/#macros-skin","title":"macros (skin)","text":"<p>Macros are used to convert keyboard and gamepad events into actions. There are two ways this works: A macro can run a command, or in some cases (such as gamepad controls) it can be used to remap one control to another.</p> <p>A collection of macros is called a macro set, and the window currently in use defines which macro set will be used via its  macro   parameter.</p> <p>Macros can be changed at runtime. If a macro does not have an  id   , you can refer to it by its key combination (  name   ). If you have a macro set named</p> <p>macro1</p> <p>and have a</p> <p>Ctrl+E</p> <p>macro for instance, you could use  winset()   with</p> <p>\"macro1.Ctrl+E\"</p> <p>. See the  Macro control   for information on which parameters you can change with</p> <p>winset()</p> <p>.</p> <p>The</p> <p>name</p> <p>of the macro is actually the full key combination as it would appear in the macro editor, like</p> <p>CTRL+E</p> <p>,</p> <p>Space+REP</p> <p>, or</p> <p>Alt+Shift+F1</p> <p>. This is not case-specific and it doesn't matter where you put modifiers like</p> <p>CTRL+</p> <p>,</p> <p>SHIFT+</p> <p>, etc.</p>"},{"location":"world/proc/GetScores/#_62","title":"GetScores","text":"<p>The Any macro</p> <p>Oftentimes it's desirable to keep track of key presses yourself rather than have a hundred different macros defined. BYOND makes this possible via the</p> <p>Any</p> <p>and</p> <p>Any+UP</p> <p>macros, which respond to any key or gamepad button.</p> <p>UP</p> <p>is the only allowed modifier for this macro, since other modifier keys are handled by this same macro.</p> <p>Typically, you will want to use  set instant=1   on the verbs that will be tied to the Any macro, so that keyboard input doesn't queue up and lag behind.</p> <p>In the  command   that goes with this macro,</p> <p>[[*]]</p> <p>will be replaced with the name of the key or gamepad button that was pressed/released. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#_63","title":"GetScores","text":"<p>Mapping</p> <p>The  map-to   parameter is used by  mappings   , which are like macros but are used to convert gamepad inputs easily and quickly to keyboard inputs. E.g.,</p> <p>GamepadLeft</p> <p>can map to</p> <p>West</p> <p>which is the left arrow key. A set of default mappings will be added automatically at runtime if you don't include any gamepad mapping in your project.</p>"},{"location":"world/proc/GetScores/#_64","title":"GetScores","text":"<p>Gamepads</p> <p>BYOND will support up to four gamepads, and breaks up their input into the following categories:</p> <ul> <li>Buttons:   Buttons on the controller that are either pressed or not pressed.</li> <li>Directions:   Directions pressed on the D-pad, which act like buttons. Diagonals are also included.</li> <li>D-pad:   The D-pad itself, which can be used to read a  dir   number.</li> <li>Analog:   The analog sticks (BYOND supports left and right).</li> </ul> <p>See the list of available macros below for information on how to harness these inputs.</p> <p>To let a user configure their gamepad, you need to call the client-side</p> <p>.gamepad-mapping</p> <p>command   . Or, if they have access to the Options &amp; Messages window and Dream Seeker's default menus, they can reach it from there. However it's a good idea to make this easy for them to find. Several common gamepads are already known by BYOND.</p> <p>There is also the</p> <p>GamepadRaw</p> <p>macro, which is similar to</p> <p>Any</p> <p>in some ways and will avoid doing any processing (e.g. checking for dead zones on the analog sticks) so you can handle all input yourself.</p> <p>GamepadRaw</p> <p>does not rely on BYOND's controller configuration, so it will not, for instance, know that button 0 should be</p> <p>GamepadFace1</p> <p>. See below for more information on how to use this macro.</p>"},{"location":"world/proc/GetScores/#_65","title":"GetScores","text":"<p>Mouse macros</p> <p>You can add macros (not local player-defined ones) for any of the mouse input commands, thereby bypassing the normal mouse verbs. This can be helpful for designing custom setups where you don't want to have to parse the normal parameter string that provides most of the info, and instead want to provide data directly to the verb. You will want</p> <p>set instant=1</p> <p>on any such verb.</p> <p>Mouse macro commands use the</p> <p>[[...]]</p> <p>syntax to embed values, just like  embedded wingets   . These are the values you can include in a mouse macro:</p> <p>|   Embedded keyword   |   Meaning   | | --- | --- | |   action   |   Name of the mouse action (e.g. MouseDown, MouseMove, etc.).   | |   src   |   Object the mouse is touching, or dragging/dropping.   | |   loc   |   Turf or statpanel that</p> <p>src</p> <p>is over; in a drag-drop you should split this into</p> <p>src.loc</p> <p>and</p> <p>over.loc</p> <p>.   | |   button   |   Mouse button used for this action, if any:</p> <p>left</p> <p>,</p> <p>middle</p> <p>, or</p> <p>right</p> <p>.   | |   drag   |   Mouse button currently used for dragging.   | |   buttons   |   Mouse buttons currently down or involved in this action, separated by commas.   | |   keys   |   Modifier keys currently held (</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt</p> <p>), separated by commas.   | |   over   |   Object the mouse is over in a drag/drop operation.   | |   id   |   Control ID; in a drag-drop you should split this into</p> <p>src.id</p> <p>and</p> <p>over.id</p> <p>.   | |   icon   |   The icon offset (starting from 1,1 at the lower left) where the mouse action occurred.  *  | |   tile   |   The tile where the mouse action occurred, if relevant.  *  | |   vis   |   Pixel coordinates relative to the icon's position on screen (same as</p> <p>icon</p> <p>but without taking transform into account).  *  | |   screen_loc   |   The regular</p> <p>screen_loc</p> <p>cordinate string.  *  | |   screen   |   screen_loc</p> <p>coordinates but entirely in pixels starting at 0,0 from lower left.  *  | |   screen_tile   |   screen_loc</p> <p>coordinates but only the tile number starting at 1,1.  *  | |   screen_offset   |   screen_loc</p> <p>coordinates but only the pixel offset from the tile, starting at 0,0.  *  | |   delta   |   Wheel changes in a mouse wheel command.  *  | |   left</p> <p>,</p> <p>right</p> <p>,</p> <p>middle   |   1 if this button is down or involved in this action, 0 otherwise   | |   shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt   |   1 if this modifier key is held, 0 otherwise   | |   link   |   1 if the mouse is over a maptext link, 0 otherwise   | | *   Coordinate values are comma-separated, but you can follow them with</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get the individual X and Y numbers.   |</p> <p>An example mouse macro command might look like this:</p> <p><code>my-mousedown-verb [[src]] [[button]] \"keys=[[keys as params]];drag=[[drag as params]]\"</code></p> <p>In the example, the</p> <p>src</p> <p>value is a reference such as you would get with the  [ref()</p> <p>proc](#/proc/ref)   . It can be used as a verb argument directly and won't be enclosed by quotes by default. The</p> <p>button</p> <p>value is a string and the default formatting will put quotes around it. The</p> <p>keys</p> <p>and</p> <p>drag</p> <p>values were given the</p> <p>as params</p> <p>format specifier so they would behave as part of a  parameter list   .</p> <p>In drag/drop actions, you can precede any value with</p> <p>src</p> <p>or</p> <p>over</p> <p>if there may be different information for the dragged object and the mouseover object/location. This also applies to things like</p> <p>keys</p> <p>, which by default will be the currently held keys but you can use</p> <p>src.keys</p> <p>to refer to the values from when the drag began.</p>"},{"location":"world/proc/GetScores/#_66","title":"GetScores","text":"<p>Available macros</p> <p>This is a list of all keys and gamepad events that can be used in macros.</p> <p>| Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.   | |   Modifier   |   Meaning   | |   SHIFT+   |   This macro only counts if either Shift key is pressed.   | |   CTRL+   |   This macro only counts if either Ctrl key is pressed.   | |   ALT+   |   This macro only counts if either Alt key is pressed.   | |   +REP   |   If a key/button is held down, this macro repeats.   | |   +UP   |   This macro fires when the key/button is released.   | | Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)   | |   Key   |   Description   | |   A</p> <p>-</p> <p>Z   |   Letter key   | |   0</p> <p>-</p> <p>9   |   Number key   | |   Numpad0</p> <p>-</p> <p>Numpad9   |   Numpad numbers   | |   North   |   Up arrow   | |   South   |   Down arrow   | |   East   |   Right arrow   | |   West   |   Left arrow   | |   Northwest   |   Home key   | |   Southwest   |   End key   | |   Northeast   |   Page Up key   | |   Southeast   |   Page Down key   | |   Center   |   Center key (numpad)   | |   Return   |   Enter / Return key   | |   Escape   |   Esc key   | |   Tab   |   Tab key   | |   Space   |   Space bar   | |   Back   |   Backspace key   | |   Insert   |   Ins key   | |   Delete   |   Del key   | |   Pause   |   Pause key   | |   Snapshot   |   Snapshot / Print Screen key   | |   LWin   |   Left Windows key   | |   RWin   |   Right Windows key   | |   Apps   |   Apps key   | |   Multiply   |   Multiply key   | |   Add   |   Add key   | |   Subtract   |   Subtract key   | |   Divide   |   Divide / Slash key   | |   Separator   |   Separator / Backslash key   | |   Shift   |   Shift key (when not used as a modifier)   | |   Ctrl   |   Ctrl key (when not used as a modifier)   | |   Alt   |   Alt key (when not used as a modifier)   | |   VolumeMute   |   Mute key   | |   VolumeUp   |   Volume up key   | |   VolumeDown   |   Volume down key   | |   MediaPlayPause   |   Play/pause media key   | |   MediaStop   |   Stop media key   | |   MediaNext   |   Next track key   | |   MediaPrev   |   Previous track key   | | Special macros  | |  Any   |   A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  | |  GamepadRaw </p> <p>*  |   Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.   | |  *   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   | | Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.   | |   Button   |   Description   | |   GamepadFace1   |   A (Xbox), X (PS), bottom of diamond   | |   GamepadFace2   |   B (Xbox), Circle (PS), right of diamond   | |   GamepadFace3   |   X (Xbox), Square (PS), left of diamond   | |   GamepadFace4   |   Y (Xbox), Triangle (PS), top of diamond   | |   GamepadL1   |   Left top shoulder   | |   GamepadR1   |   Right top shoulder   | |   GamepadL2   |   Left bottom shoulder   | |   GamepadR2   |   Right bottom shoulder   | |   GamepadSelect   |   Select / Back   | |   GamepadStart   |   Start / Forward   | |   GamepadL3   |   Left analog click   | |   GamepadR3   |   Right analog click   | |   Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.   | |   GamepadUp   |   Up button   | |   GamepadDown   |   Down button   | |   GamepadLeft   |   Left button   | |   GamepadRight   |   Right button   | |   GamepadUpLeft   |   Up+left virtual button   | |   GamepadUpRight   |   Up+right virtual button   | |   GamepadDownLeft   |   Down+left virtual button   | |   GamepadDownRight   |   Down+right virtual button   | | Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.   | |   GamepadLeftAnalog   |   Left analog stick   | |   GamepadRightAnalog   |   Left analog stick   | | Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.   | |   GamepadDir   |   Dpad, converted to one of the eight standard directions.   | |   GamepadDir4   |   Dpad, converted to a cardinal direction.   | |  \u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   | | Mouse macros   can have commands but not be used as mapping targets.   | |   MouseDown   |   Mouse button pressed (replaces MouseDown verb)   | |   MouseUp   |   Mouse button released (replaces MouseUp verb)   | |   MouseOver   |   Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)   | |   MouseMove   |   Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)   | |   MouseDrag   |   Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)   | |   MouseDragMove   |   Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)   | |   MouseDrop   |   Mouse drag has been released over a target (replaces MouseDrop verb)   | | Mouse targets   can only be used as mapping targets for another macro.   | |   Mouse   |   The mouse cursor, mappable by a gamepad analog stick.   | |   MouseLeftButton   |   Left button, mappable by a gamepad button.   | |   MouseRightButton   |   Right button, mappable by a gamepad button.   | |   MouseMiddleButton   |   Middle button, mappable by a gamepad button.   |</p>"},{"location":"world/proc/GetScores/#parameters-skin","title":"parameters (skin)","text":"<p>Controls can be interacted with via  winset()   and  winget()   to change or read various parameters.</p> <p>Parameters come in a few different formats:</p> <ul> <li>Boolean:</li> </ul> <p>true</p> <p>or</p> <p>false * Numeric: any number, sometimes allowing decimal or negative numbers * String: text * Position:  x </p> <p>,</p> <p>y * Size:  width </p> <p>x</p> <p>height * Enumerated: one of several text choices, sometimes accepting numbers or true/false values as shortcuts</p> <p>The list of  all controls   which shows which parameters are universal, and each individual control type lists additional parameters that apply to that type specifically.</p> <p>Note: In any parameter's \"Applies to\" section, \"all\" refers to positionable controls only, not Macro or Menu controls. Macro and Menu will be listed separately if supported.</p>"},{"location":"world/proc/GetScores/#align-parameter-skin","title":"align parameter (skin)","text":"<p>See also: </p> <p>allow-html parameter </p> <p>Applies to: </p> <p>Label </p> <p>Possible values: </p> <p>center</p> <p>left</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>Default value: </p> <p>center</p> <p>Default alignment of text/image, both horizontal and vertical.</p> <p>A BYOND direction flag like</p> <p>WEST</p> <p>may be assigned to this parameter, or 0 for center alignment.</p>"},{"location":"world/proc/GetScores/#allow-html-parameter-skin","title":"allow-html parameter (skin)","text":"<p>Applies to: </p> <p>Label </p> <p>Info </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Info control: Allow HTML tags to be used in  stat()   info. The same limitations apply as to the  Grid control   .</p> <p>Label control: Currently, the label control will not actually use the HTML; it will simply strip it out. Full support may appear in a later version.</p>"},{"location":"world/proc/GetScores/#alpha-parameter-skin","title":"alpha parameter (skin)","text":"<p>See also: </p> <p>transparent-color parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>255</p> <p>Opacity of the window, from 0 (invisible) to 255 (opaque).</p>"},{"location":"world/proc/GetScores/#anchor1-anchor2-parameters-skin","title":"anchor1, anchor2 parameters (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>All   (except  Main   )</p> <p>Format: </p> <p>none</p> <p>x   ,  y </p> <p>Default value: </p> <p>none</p> <p>Anchors the control within the window or pane. If the anchor is not</p> <p>none</p> <p>, it is expressed as pecentages of the container's width and height. For example, an anchor of 100,100 means that the X and Y position are tied to the lower right of the container, and 50,0 is tied to the top center.</p> <p>Setting only</p> <p>anchor1</p> <p>will control the position of the control but won't affect its size.</p> <p>Setting</p> <p>anchor2</p> <p>as well will allow you to stretch the control as the container's size changes. You can think of this</p> <p>anchor1</p> <p>controlling the top left corner, and</p> <p>anchor2</p> <p>the bottom right corner.</p>"},{"location":"world/proc/GetScores/#angle1-angle2-parameters-skin","title":"angle1, angle2 parameters (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>width parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>angle1</p> <p>: 0</p> <p>angle2</p> <p>: 180</p> <p>The angle of the bar control's arc when its  dir   is</p> <p>clockwise</p> <p>or</p> <p>counterclockwise</p> <p>. Angles are measured clockwise from due north, so 0 is north, 90 is east, and so on.</p> <p>angle1</p> <p>is the beginning of the arc, and</p> <p>angle2</p> <p>is the end.</p>"},{"location":"world/proc/GetScores/#auto-format-parameter-skin","title":"auto-format parameter (skin)","text":"<p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false (was once true in old versions)</p> <p>When true, the browser control will inject conditional scripting into HTML documents to make them behave nicer in very old browsers. However, it is unlikely there are any systems left that need this.</p>"},{"location":"world/proc/GetScores/#background-color-parameter-skin","title":"background-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The control's background color. The exact way this applies depends on the control.</p>"},{"location":"world/proc/GetScores/#bar-color-parameter-skin","title":"bar-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>is-transparent parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The color of the bar or slider.</p>"},{"location":"world/proc/GetScores/#border-parameter-skin","title":"border parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Possible values: </p> <p>none</p> <p>line</p> <p>sunken</p> <p>Default value: </p> <p>none</p> <p>Border type around the control or window. May not work the same in all controls.</p>"},{"location":"world/proc/GetScores/#button-type-parameter-skin","title":"button-type parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Button </p> <p>Possible values: </p> <p>pushbutton: press once</p> <p>pushbox: press to toggle</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>Default value: </p> <p>pushbutton</p> <p>Changes the type of button.</p>"},{"location":"world/proc/GetScores/#can-check-parameter-skin","title":"can-check parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>If true, this menu item is toggled like a checkbox or radio button when clicked.</p>"},{"location":"world/proc/GetScores/#can-close-parameter-skin","title":"can-close parameter (skin)","text":"<p>See also: </p> <p>on-close parameter </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be closed, and also shows a system menu for the window.</p>"},{"location":"world/proc/GetScores/#can-minimize-parameter-skin","title":"can-minimize parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be minimized.</p>"},{"location":"world/proc/GetScores/#can-resize-parameter-skin","title":"can-resize parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>can-minimize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be resized or maximized.</p>"},{"location":"world/proc/GetScores/#can-scroll-parameter-skin","title":"can-scroll parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (pane only)</p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Default value: </p> <p>none</p> <p>Allow this pane to retain its horizontal and/or vertical size and show scrollbars if necessary, instead of shrinking to fit the container.</p>"},{"location":"world/proc/GetScores/#command-parameter-skin","title":"command parameter (skin)","text":"<p>See also: </p> <p>Commands </p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is activated.</p> <p>For the Input control, whatever the user types in follows this command. If your command starts with an exclamation point</p> <p>!</p> <p>, everything after the</p> <p>!</p> <p>is shown as a default prompt that may be cleared by the user.</p>"},{"location":"world/proc/GetScores/#cell-span-parameter-skin","title":"cell-span parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>Default value: </p> <p>1x1</p> <p>The span of the current grid cell; it can be merged with cells to the right and down. If</p> <p>is-list</p> <p>is true, this setting is ignored. This setting is only available at runtime.</p>"},{"location":"world/proc/GetScores/#cells-parameter-skin","title":"cells parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>current-cell parameter </p> <p>is-list parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Default value: </p> <p>0x0</p> <p>The number of columns and rows in the grid. Using -1 for either columns or rows will leave that value unchanged.</p> <p>If  is-list   is true, this value can be set to a single number.</p>"},{"location":"world/proc/GetScores/#current-cell-parameter-skin","title":"current-cell parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>cells parameter </p> <p>is-list parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Default value: </p> <p>0x0</p> <p>The active cell. Any output sent to the grid, that is not sent to a specific cell, will go into this cell.</p> <p>If  is-list   is true, this value can be set to a single number.</p>"},{"location":"world/proc/GetScores/#current-tab-parameter-skin","title":"current-tab parameter (skin)","text":"<p>See also: </p> <p>on-tab parameter </p> <p>tabs parameter </p> <p>Applies to: </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>The name of the  pane   in the active/default tab. If set to a pane that is not currently in this tab control, the pane by that name will be added as another tab.</p>"},{"location":"world/proc/GetScores/#dir-parameter-skin","title":"dir parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>angle1, angle2 parameters </p> <p>width parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Possible values: </p> <p>north</p> <p>south</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>Default value: </p> <p>east</p> <p>The direction/orientation of the bar. As the  value   increases the bar will move further in this direction.</p> <p>Shorthand values like</p> <p>cw</p> <p>and</p> <p>ccw</p> <p>can be used, or also numerical BYOND directions.</p>"},{"location":"world/proc/GetScores/#drop-zone-parameter-skin","title":"drop-zone parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>for  Grid   ,  Info   ,  Map </p> <p>false</p> <p>for everything else</p> <p>True if dragged objects may be dropped here. Default is true for Map, Info, and Grid controls, false for others. When in use, this will be the value of the</p> <p>over_control</p> <p>argument in  MouseDrop()   if you drop an atom here.</p> <p>Grids can also add</p> <p>drag-cell</p> <p>and</p> <p>drop-cell</p> <p>to mouse proc parameters. The mouse procs'</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>arguments are in the form</p> <p>\"[column],[row]\"</p> <p>(or</p> <p>\"[item\"]</p> <p>if  is-list   is true) when dragging to/from a grid cell.</p> <p>In Info controls,</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>in mouse procs will be the name of the statpanel tab.</p>"},{"location":"world/proc/GetScores/#enable-http-images-parameter-skin","title":"enable-http-images parameter (skin)","text":"<p>See also: </p> <p>small-icons parameter </p> <p>style parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Allows images to be pulled from the Web when using the</p> <p></p> <p>tag; otherwise only locally stored images can be shown.</p>"},{"location":"world/proc/GetScores/#flash-parameter-skin","title":"flash parameter (skin)","text":"<p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Set to a positive number to make the window flash that many times, -1 to flash forever, and 0 to stop flashing.</p>"},{"location":"world/proc/GetScores/#focus-parameter-skin","title":"focus parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>winget proc </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>This parameter is true if this control currently has focus.</p> <p>This is also a special read-only global parameter. Calling  winget()   with no</p> <p>id</p> <p>and</p> <p>focus</p> <p>as the parameter will return the  id   of the currently focused control, if any.</p>"},{"location":"world/proc/GetScores/#font-family-parameter-skin","title":"font-family parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Leave blank to use the default font. This can be used for CSS-style fallback fonts, e.g. \"Arial,Helvetica\".</p> <p>You can include fonts in your resource file, making them available to the client, like so:</p> <p>var/list/extra_resources = list(\\  'myfont.ttf',  'myfont_bold.ttf')</p>"},{"location":"world/proc/GetScores/#font-size-parameter-skin","title":"font-size parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Point size of the font, or leave at 0 for the default size.</p> <p>The  Output control   behaves differently for legacy reasons, unless  legacy-size   is false.</p>"},{"location":"world/proc/GetScores/#font-style-parameter-skin","title":"font-style parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Possible values: </p> <p>bold</p> <p>italic</p> <p>underline</p> <p>strike</p> <p>Default value: </p> <p>empty </p> <p>Sets the font style. Any combination of the above values may be used, or none of them. Multiple values may be separated by spaces or commas.</p>"},{"location":"world/proc/GetScores/#group-parameter-skin","title":"group parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Used for \"radio\" buttons and menu items, where only one of them in the same group may be checked at a time. This value is a text string, or may be left empty.</p> <p>Buttons in different windows/panes, or menu items in another menu/submenu, are always treated as a different group.</p>"},{"location":"world/proc/GetScores/#highlight-color-parameter-skin","title":"highlight-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>background-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#00ff00</p> <p>The color used to highlight moused-over statpanel items or verbs. In grids, this color is used when hovering over objects or links.</p>"},{"location":"world/proc/GetScores/#icon-parameter-skin","title":"icon parameter (skin)","text":"<p>See also: </p> <p>title parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>'  file   '</p> <p>Default value: </p> <p>empty </p> <p>Custom icon used for the window. If no icon is specified, the Dream Seeker icon is used by windows by default.</p> <p>If this control is a pane, its icon will appear on the tab if the pane is inside a tab control. Lack of an icon will mean no icon appears in the tab.</p> <p>Note: The Windows</p> <p>.ico</p> <p>format is not used. Only image formats BYOND can already use are supported.</p>"},{"location":"world/proc/GetScores/#icon-size-parameter-skin","title":"icon-size parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Size, in pixels, of icons on the map. A size of 0 stretches to fit available space.</p> <p>This parameter has been deprecated. Use  zoom   instead.</p>"},{"location":"world/proc/GetScores/#id-parameter-skin","title":"id parameter (skin)","text":"<p>See also: </p> <p>parent parameter </p> <p>type parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>The name of this control. Read-only.</p> <p>If this is a  Main control   , the name should always be unique. For others, it is usually still a good idea to use a unique name, but they can be referenced by  window   .  id   at runtime.</p> <p>You can use a colon in front of the  type   to refer to the default control of a certain type, if one exists, e.g.</p> <p>:map</p> <p>is the default map.</p>"},{"location":"world/proc/GetScores/#image-parameter-skin","title":"image parameter (skin)","text":"<p>See also: </p> <p>image-mode parameter </p> <p>keep-aspect parameter </p> <p>Applies to: </p> <p>Button </p> <p>Label </p> <p>Main </p> <p>Output </p> <p>Format: </p> <p>'  file   '</p> <p>A background image to show in this control.</p> <p>In the Output control this image is always tiled.</p> <p>Note: Icons displayed in the output control will not show the background image underneath their transparent parts, but will instead show the background color.</p> <p>For Label and Main, use  image-mode   to control how the image is displayed.</p>"},{"location":"world/proc/GetScores/#image-mode-parameter-skin","title":"image-mode parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>keep-aspect parameter </p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Possible values: </p> <p>center</p> <p>stretch</p> <p>tile</p> <p>Default value: </p> <p>center</p> <p>Determines how the background image is displayed.</p>"},{"location":"world/proc/GetScores/#index-parameter-skin","title":"index parameter (skin)","text":"<p>Applies to: </p> <p>Menu </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Moves the menu item to the  N   th position among its siblings. 0 or less is no change. Write-only.</p>"},{"location":"world/proc/GetScores/#inner-size-parameter-skin","title":"inner-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>outer-size parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>width   x  height </p> <p>Read-only.</p> <p>If the control is a window, this refers to its current interior size: i.e., not counting titlebar, statusbar, borders, etc. If it's maximized, this will be the true size of the window interior, as opposed to</p> <p>size</p> <p>which is the interior size once this window is no longer maximized.</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area not including the scrollbars.</p>"},{"location":"world/proc/GetScores/#is-checked-parameter-skin","title":"is-checked parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>group parameter </p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if the button or menu item is checked. Menu items can set this even if  can-check   is false.</p>"},{"location":"world/proc/GetScores/#is-default-parameter-skin","title":"is-default parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>type parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Specifies that this is a default control. This should be true for your main window, and for your primary map, info, output, input, and browser controls.</p> <p>The default control of a given type can be referenced in  winset()   and other skin-related procs by the name</p> <p>\":  type   \"</p> <p>, e.g.</p> <p>\":map\"</p> <p>.</p> <p>Changing this value at runtime should be avoided, especially for windows. Results may be unpredictable.</p>"},{"location":"world/proc/GetScores/#is-disabled-parameter-skin","title":"is-disabled parameter (skin)","text":"<p>See also: </p> <p>is-checked parameter </p> <p>is-visible parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Disables the control, menu item, or macro.</p>"},{"location":"world/proc/GetScores/#is-flat-parameter-skin","title":"is-flat parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>Applies to: </p> <p>Button </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Gives this button a flat appearance instead of pseudo-3D highlights.</p>"},{"location":"world/proc/GetScores/#is-list-parameter-skin","title":"is-list parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>current-cell parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if the grid is used for a flexible list of items; the number of columns and rows may change to fit them.</p>"},{"location":"world/proc/GetScores/#is-maximized-parameter-skin","title":"is-maximized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-minimized parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Maximize the window.</p>"},{"location":"world/proc/GetScores/#is-minimized-parameter-skin","title":"is-minimized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-maximized parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Minimize the window.</p>"},{"location":"world/proc/GetScores/#is-pane-parameter-skin","title":"is-pane parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>Child control </p> <p>Tab control </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this is a pane that will be used in other container controls, instead of an independent window. Read-only.</p>"},{"location":"world/proc/GetScores/#is-password-parameter-skin","title":"is-password parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>multi-line parameter </p> <p>no-command parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Hide text with asterisks. Copy to clipboard is not available in this mode, but the  text   parameter can still read the control's contents.</p> <p>Note: For obvious reasons, you should never use the same password in a game that you would use anywhere else.</p>"},{"location":"world/proc/GetScores/#is-slider-parameter-skin","title":"is-slider parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Make this an adjustable slider capable of being changed by the user, instead of a progress bar.</p>"},{"location":"world/proc/GetScores/#is-transparent-parameter-skin","title":"is-transparent parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Make this control transparent.</p> <p>Transparency support is extremely limited. Only some controls can actually use it, and only when on top of certain other controls.</p> <p>Bars and labels handle transparency reasonably well, when not on top of other controls (or only on top of other conrols of these types).</p>"},{"location":"world/proc/GetScores/#is-vert-parameter-skin","title":"is-vert parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>The splitter between the two panes in this control is vertical.</p>"},{"location":"world/proc/GetScores/#is-visible-parameter-skin","title":"is-visible parameter (skin)","text":"<p>See also: </p> <p>is-disabled parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>True if this control can be seen. The main window should usually be made visible.</p>"},{"location":"world/proc/GetScores/#keep-aspect-parameter-skin","title":"keep-aspect parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>If stretching a background image, preserve its aspect ratio.</p>"},{"location":"world/proc/GetScores/#left-top-parameters-skin","title":"left, top parameters (skin)","text":"<p>See also: </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>string</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The  id   of the left/top pane in this control. The parameter names</p> <p>left</p> <p>and</p> <p>top</p> <p>can be used interchangeably.</p>"},{"location":"world/proc/GetScores/#legacy-size-parameter-skin","title":"legacy-size parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>Applies to: </p> <p>Output </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>When true, font sizes are scaled slightly larger for readability, which is legacy (and default) BYOND behavior. Set to false for exact font sizing.</p>"},{"location":"world/proc/GetScores/#letterbox-parameter-skin","title":"letterbox parameter (skin)","text":"<p>See also: </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>If map auto-scales its icons (  zoom   is 0), make sure the entire map fits, and fill excess space with the background color.</p> <p>If</p> <p>letterbox</p> <p>is not enabled, auto-zoom will fill all available space, and any excess will be cut off.</p>"},{"location":"world/proc/GetScores/#line-color-parameter-skin","title":"line-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>show-lines parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#c0c0c0</p> <p>The color of grid lines.</p>"},{"location":"world/proc/GetScores/#link-color-parameter-skin","title":"link-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>visited-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>The color used for links. In some controls  visited links   may have a different color.</p>"},{"location":"world/proc/GetScores/#lock-parameter-skin","title":"lock parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Possible values: </p> <p>left</p> <p>right</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Allows one pane to \"lock\" the splitter so if this Child control is resized, the splitter will stay put on that side.</p>"},{"location":"world/proc/GetScores/#macro-parameter-skin","title":"macro parameter (skin)","text":"<p>See also: </p> <p>Keyboard/gamepad macros </p> <p>menu parameter </p> <p>id parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>The  id   of the macro set this window will use, if any, when it's active.</p>"},{"location":"world/proc/GetScores/#map-to-parameter-skin","title":"map-to parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>command parameter </p> <p>id parameter </p> <p>name parameter </p> <p>Applies to: </p> <p>Macro </p> <p>Format: </p> <p>string</p> <p>The  macro name   (e.g., \"SOUTH\") of a key combo, Dpad, mouse button, etc. that this macro maps to.</p>"},{"location":"world/proc/GetScores/#max-lines-parameter-skin","title":"max-lines parameter (skin)","text":"<p>Applies to: </p> <p>Output </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Maximum number of lines before the control drops old text to make room for more. 0 is no limit.</p> <p>An overflow of 5% is allowed, to reduce flicker.</p>"},{"location":"world/proc/GetScores/#menu-parameter-skin","title":"menu parameter (skin)","text":"<p>See also: </p> <p>macro parameter </p> <p>id parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>The  id   of the menu this window will use, if any, when it's active.</p>"},{"location":"world/proc/GetScores/#multi-line-parameter-skin","title":"multi-line parameter (skin)","text":"<p>Applies to: </p> <p>Info </p> <p>Input </p> <p>Tab </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>: Input control</p> <p>true</p> <p>: Info and Tab controls</p> <p>Input control: Create a multi-line input control. Read-only for this control.</p> <p>Info and Tab controls: Show tabs in multiple rows if there are too many to fit in a single row.</p>"},{"location":"world/proc/GetScores/#name-parameter-skin","title":"name parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>id parameter </p> <p>Applies to: </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Macro control: The key/gamepad combination such as</p> <p>R+REP</p> <p>,</p> <p>CTRL+Northwest</p> <p>,</p> <p>GamepadLeft</p> <p>.</p> <p>Menu control: This is the menu item label. A tab character can be used between the name and a keyboard shortcut, like \"Help\\tF1\". (Keyboard shortcuts must be implemented as macros in order to work. This is just a label.) A blank name shows just a separator.</p>"},{"location":"world/proc/GetScores/#no-command-parameter-skin","title":"no-command parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>is-password parameter </p> <p>multi-line parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this input control is for typing only; hitting Enter will not run a command.</p>"},{"location":"world/proc/GetScores/#on-blur-parameter-skin","title":"on-blur parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-focus parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>string</p> <p>Command   executed when the control loses focus.</p>"},{"location":"world/proc/GetScores/#on-close-parameter-skin","title":"on-close parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>on-size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>Command   executed when the window is closed.</p>"},{"location":"world/proc/GetScores/#on-change-parameter-skin","title":"on-change parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>string</p> <p>Command   executed when the  value   of the bar/slider is changed. If you drag the slider around, the command will not run until you let go.</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new</p> <p>value</p> <p>. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#on-focus-parameter-skin","title":"on-focus parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-blur parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>string</p> <p>Command   executed when the control gains focus.</p>"},{"location":"world/proc/GetScores/#on-hide-parameter-skin","title":"on-hide parameter (skin)","text":"<p>See also: </p> <p>on-show parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is hidden by the game. Must be the default control for the game to show/hide it.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#on-show-parameter-skin","title":"on-show parameter (skin)","text":"<p>See also: </p> <p>on-hide parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is shown by the game. Must be the default control for the game to show/hide it.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#on-size-parameter-skin","title":"on-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is resized. If you are dragging a window edge or splitter, the command won't run until you finish.</p> <p>No command will be sent in response to size or splitter changes made by  winset()   .</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new size. Likewise,</p> <p>[[width]]</p> <p>will be replaced with the width and</p> <p>[[height]]</p> <p>with the height. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#on-status-parameter-skin","title":"on-status parameter (skin)","text":"<p>See also: </p> <p>statusbar parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>string</p> <p>Command   executed when the text that would go in the statusbar is changed. This applies even if this control is a pane and not a window, or is a window without a statusbar. It applies to all panes and windows that directly or indirectly contain whatever control generated the statusbar text (e.g., a map).</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new text. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[from]]</p> <p>can be used to reference the control (if any) that generated the next text. You can also use expressions like</p> <p>[[from.type]]</p> <p>,</p> <p>[[from.parent.pos.x]]</p> <p>, etc.</p>"},{"location":"world/proc/GetScores/#on-tab-parameter-skin","title":"on-tab parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>tabs parameter </p> <p>Applies to: </p> <p>Info </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>Command   executed when the current tab is changed.</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new tab's  id   . (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#outer-size-parameter-skin","title":"outer-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>inner-size parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>width   x  height </p> <p>Read-only.</p> <p>If the control is a window, this refers to its current exterior size  including   titlebar, statusbar, borders, etc.</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area including the scrollbars.</p>"},{"location":"world/proc/GetScores/#parent-parameter-skin","title":"parent parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>type parameter </p> <p>name parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>The  id   of this control's parent. Write-only, used when creating a new control at runtime or deleting a control that was created this way.</p>"},{"location":"world/proc/GetScores/#pos-parameter-skin","title":"pos parameter (skin)","text":"<p>See also: </p> <p>anchor1, anchor2 parameters </p> <p>size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>x   ,  y </p> <p>none</p> <p>Default value: </p> <p>x   ,  y </p> <p>none</p> <p>Position of this control's upper left corner, relative to its container. (Not applicable to panes.)</p>"},{"location":"world/proc/GetScores/#prefix-color-parameter-skin","title":"prefix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>suffix-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The color used for the prefix/header column of statpanel displays. No color means the default  text-color   will be used.</p> <p>In BYOND 3.0, this color was red.</p>"},{"location":"world/proc/GetScores/#right-bottom-parameters-skin","title":"right, bottom parameters (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>string</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The  id   of the right/bottom pane in this control. The parameter names</p> <p>top</p> <p>and</p> <p>bottom</p> <p>can be used interchangeably.</p>"},{"location":"world/proc/GetScores/#right-click-parameter-skin","title":"right-click parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>popup_menu setting (verb) </p> <p>drop-zone parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this control should allow right-clicks to behave like any other click instead of opening up popup menus or similar special behavior.</p>"},{"location":"world/proc/GetScores/#saved-params-parameter-skin","title":"saved-params parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Default value: </p> <p>varies </p> <p>A semicolon-separated list of parameters that get saved with this control. This is often used for things a user might set, like zoom level for a map.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#size-parameter-skin","title":"size parameter (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>anchor1, anchor2 parameters </p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>width   x  height </p> <p>The size of this control.</p> <p>Setting 0 for width or height uses up any available space right/downward.</p> <p>If the control is a window, this refers to its  interior size when not maximized or minimized   . That is, it does not count borders, titlebar, menu, or statusbar, and if the window is minimized/maximized, this refers to the window's normal size when it is restored. See the  inner-size   and  outer-size   params for comparison.</p> <p>If this control is a pane and  can-scroll   is true,</p> <p>size</p> <p>refers to the total scrollable size of the pane, NOT the smaller size displayed. In this case,</p> <p>outer-size</p> <p>and</p> <p>inner-size</p> <p>refer to the display area with and without scrollbars, respectively.</p>"},{"location":"world/proc/GetScores/#show-history-parameter-skin","title":"show-history parameter (skin)","text":"<p>See also: </p> <p>show-url parameter </p> <p>use-title parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Show forward/back navigation buttons.</p>"},{"location":"world/proc/GetScores/#show-lines-parameter-skin","title":"show-lines parameter (skin)","text":"<p>See also: </p> <p>line-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Default value: </p> <p>both</p> <p>Determines which grid lines to display.</p>"},{"location":"world/proc/GetScores/#show-names-parameter-skin","title":"show-names parameter (skin)","text":"<p>See also: </p> <p>name var (atom) </p> <p>small-icons parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>When atoms are output to the grid, show the atom's name next to its icon.</p> <p>If the atom has no icon and</p> <p>show-names</p> <p>is false, the grid cell will be blank.</p>"},{"location":"world/proc/GetScores/#show-splitter-parameter-skin","title":"show-splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Show a splitter if both the left and right (or top and bottom) panes are in use. The splitter can be dragged to resize the panes.</p>"},{"location":"world/proc/GetScores/#show-url-parameter-skin","title":"show-url parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>use-title parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Shows an address bar for this browser control.</p>"},{"location":"world/proc/GetScores/#small-icons-parameter-skin","title":"small-icons parameter (skin)","text":"<p>See also: </p> <p>show-names parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>When output(object,grid) is sent, show smaller icons in this control instead of larger ones.</p>"},{"location":"world/proc/GetScores/#splitter-parameter-skin","title":"splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>number (0 to 100)</p> <p>Default value: </p> <p>50</p> <p>Position of the splitter when two panes are in use, whether  show-splitter   is true or not. This value is a percentage. Specifically, it is the percentage of the available width/height that is given to the left/top pane.</p>"},{"location":"world/proc/GetScores/#suffix-color-parameter-skin","title":"suffix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>prefix-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The color used for the suffix column of statpanel displays. No color means the default  text-color   will be used.</p> <p>In BYOND 3.0, this color was blue.</p>"},{"location":"world/proc/GetScores/#statusbar-parameter-skin","title":"statusbar parameter (skin)","text":"<p>See also: </p> <p>titlebar parameter </p> <p>on-status parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Shows a status bar at the bottom of the window. This will show the name of an atom when you hover over it with the mouse.</p>"},{"location":"world/proc/GetScores/#stretch-parameter-skin","title":"stretch parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>Applies to: </p> <p>Label </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Stretch the background image. Deprecated; use  image-mode   instead.</p>"},{"location":"world/proc/GetScores/#style-parameter-skin","title":"style parameter (skin)","text":"<p>Applies to: </p> <p>Grid </p> <p>Map </p> <p>Output </p> <p>Format: </p> <p>string</p> <p>Custom stylesheet used for the control. Changes made at runtime will usually not impact any existing text.</p> <p>For Map controls, this affects any  maptext   drawn, and changes to the style should appear on the next refresh.</p>"},{"location":"world/proc/GetScores/#tab-background-color-parameter-skin","title":"tab-background-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>tab-text-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Affects the background color for tabs. The regular  background-color   is used for the content area.</p>"},{"location":"world/proc/GetScores/#tab-font-family-tab-font-size-tab-font-style-parameters-skin","title":"tab-font-family, tab-font-size, tab-font-style parameters (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Affects the font for tabs. The regular versions of these without the</p> <p>tab-</p> <p>prefix are used for the content area.</p>"},{"location":"world/proc/GetScores/#tab-text-color-parameter-skin","title":"tab-text-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Affects the text color for tabs. The regular  text-color   is used for the content area.</p>"},{"location":"world/proc/GetScores/#tabs-parameter-skin","title":"tabs parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>id parameter </p> <p>multi-line parameter </p> <p>Applies to: </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>A comma-separated list of  id   values for the panes included as tabs in this control.</p> <p>When setting this value, you can put</p> <p>+</p> <p>in front of the list to add tabs to the existing control, without affecting current tabs. You can likewise use</p> <p>-</p> <p>in front of the list to remove tabs.</p> <p>Note: When using this with  winset()   , remember you will need to escape</p> <p>+</p> <p>as</p> <p>%2B</p> <p>via  url_encode()   or  list2params()   .</p>"},{"location":"world/proc/GetScores/#text-parameter-skin","title":"text parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Label </p> <p>Format: </p> <p>string</p> <p>Text shown in this control. For Input controls this setting is only available at runtime.</p>"},{"location":"world/proc/GetScores/#text-color-parameter-skin","title":"text-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The control's foreground text color.</p>"},{"location":"world/proc/GetScores/#text-mode-parameter-skin","title":"text-mode parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Show text mode even if icons are available. Text mode will be used if no icons are present, regardless of this setting.</p>"},{"location":"world/proc/GetScores/#text-wrap-parameter-skin","title":"text-wrap parameter (skin)","text":"<p>See also: </p> <p>text parameter </p> <p>Applies to: </p> <p>Label </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Wrap text that is too long for the width of the label.</p>"},{"location":"world/proc/GetScores/#title-parameter-skin","title":"title parameter (skin)","text":"<p>See also: </p> <p>name var (world) </p> <p>icon parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>string</p> <p>The title of this window or pane. For a window, the title will appear in the titlebar if present. For a pane, this will be displayed on the tab if this pane is in a  Tab control   .</p> <p>If this is the default window,  world.name   takes precedence over the window title.</p>"},{"location":"world/proc/GetScores/#titlebar-parameter-skin","title":"titlebar parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>can-minimize parameter </p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Show a titlebar for this window. This is also required for the close, minimize, and maximize buttons to appear.</p>"},{"location":"world/proc/GetScores/#transparent-color-parameter-skin","title":"transparent-color parameter (skin)","text":"<p>See also: </p> <p>alpha parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>A color that will be turned into transparency wherever it appears in this window. Overall, this method of transparency comes with many limitations, so it is considered deprecated.</p>"},{"location":"world/proc/GetScores/#type-parameter-skin","title":"type parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>The type of this control. Read-only.</p>"},{"location":"world/proc/GetScores/#use-title-parameter-skin","title":"use-title parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>show-url parameter </p> <p>title parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Use the browser's document title to override the title of the window or pane it appears in.</p>"},{"location":"world/proc/GetScores/#value-parameter-skin","title":"value parameter (skin)","text":"<p>See also: </p> <p>is-slider parameter </p> <p>dir parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>The \"fullness\" of this bar/slider, as a percentage.</p>"},{"location":"world/proc/GetScores/#view-size-parameter-skin","title":"view-size parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>Applies to: </p> <p>Map   (window only)</p> <p>Format: </p> <p>width   x  height </p> <p>The size, in pixels, of the map after</p> <p>zoom</p> <p>has been applied.</p> <p>For instance, if the client view has 10\u00d710 tiles (this includes any extended tiles caused by HUD objects) and</p> <p>world.icon_size</p> <p>is 32x32, the map has a native size of 320\u00d7320 pixels. If the map has a zoom level of 2, then</p> <p>view-size</p> <p>will be 640x640.</p> <p>With a</p> <p>zoom</p> <p>value of 0, which is the default for most projects, the actual zoom level is automatically determined by the size of the map control, the map's native pixel size as explained above, and the value of the  letterbox   parameter.</p>"},{"location":"world/proc/GetScores/#visited-color-parameter-skin","title":"visited-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>link-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>The color used for visited links.</p>"},{"location":"world/proc/GetScores/#width-parameter-skin","title":"width parameter (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>is-slider parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>10</p> <p>Width, in pixels, of the bar or slider. A value of 0 uses all available width.</p>"},{"location":"world/proc/GetScores/#zoom-parameter-skin","title":"zoom parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Zoom factor for icons on the map. 1 means to show the icons at their original size, 2 is 200%, 0.5 is 50%, and so on. A value of 0 stretches to fit available space.</p>"},{"location":"world/proc/GetScores/#zoom-mode-parameter-skin","title":"zoom-mode parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>Applies to: </p> <p>Map </p> <p>Posisble values: </p> <p>normal</p> <p>distort</p> <p>blur</p> <p>Default value: </p> <p>normal</p> <p>Controls the way the map is upscaled.</p> <p>normal</p> <p>Preserves a pixelated look, but does some blending between adjacent pixels when the zoom factor is not an integer. This is equivalent to upscaling by the next highest integer, then downscaling.</p> <p>distort</p> <p>Uses nearest-neighbor sampling to upscale. This may look odd if the zoom factor is not an integer, since for instance some pixels might scale up to be 2 pixels wide, others 3 pixels wide. Some users prefer it anyway.</p> <p>blur</p> <p>Uses bilinear sampling to upscale. This will cause a blurry appearance if the zoom factor is high, but it may be desired in some cases.</p>"},{"location":"world/proc/GetScores/#appendix","title":"Appendix","text":"<p>This section contains miscellaneous information that may apply to multiple vars or procs.</p> <p>CSS attributes </p> <p>HTML colors </p> <p>Color space </p> <p>stddef.dm file </p>"},{"location":"world/proc/GetScores/#css-attributes","title":"CSS attributes","text":"<p>DM-CSS is a subset of CSS, and only supports some kinds of selectors and attributes.</p> <p>The following table lists all supported attributes, and whether they are supported in text output, maptext, and in other controls (labels/etc.) Other controls will often allow only one style for an entire unit of text. A checkbox in \"Other\" only indicates that  some   support exists in other controls, but it may vary by the type of control.</p> <p>|   Attribute   |   Output   |   Maptext   |   Other   |   Notes   | |   color   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Alpha colors may not be supported in some controls.   | |   background   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   In most cases, only applies to the entire text body.   | |   background-color   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   background-image   |   \u2714\ufe0f   |  |  |  | |   font   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-family   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-style   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-weight   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-size   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   text-decoration   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>underline</p> <p>,</p> <p>overline</p> <p>,</p> <p>line-through</p> <p>,</p> <p>blink</p> <p>, and</p> <p>none</p> <p>. Support for each of these may vary depending on where they are used.   | |   text-align   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   justify</p> <p>is supported in output and maptext.   | |   vertical-align   |  |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>top</p> <p>,</p> <p>middle</p> <p>, and</p> <p>bottom</p> <p>.   | |   text-indent   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   margin-left   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-right   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-top   |  |  |   \u2714\ufe0f   |  | |   margin-bottom   |  |  |   \u2714\ufe0f   |  | |   margin   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   width   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   line-height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Support in output control is limited; line heights less than 1 are not respected.</p> <p>Only unitless numbers, percentages, or em units are allowed.   | |   white-space   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   normal</p> <p>,</p> <p>nowrap</p> <p>,</p> <p>pre</p> <p>,</p> <p>pre-wrap</p> <p>,</p> <p>pre-line   | |   text-shadow   |  |   \u2714\ufe0f   |  |  | |   -dm-text-outline   |  |   \u2714\ufe0f   |  |   Custom attribute: Adds an outline to text. Values are in the form:</p> <p>width color style </p> <p>.</p> <p>The style is either blank, or any combination of the</p> <p>sharp</p> <p>and</p> <p>square</p> <p>keywords (see  Outline filter   ).   |</p> <p>These pseudo-classes are allowed in some contexts, but they can only change the text color.</p> <p>|   Psuedo-class   |   Output   |   Maptext   |   Other   |   Notes   | |   :link   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   :visited   |   \u2714\ufe0f   |  |  |  | |   :active   |  |  |  |   Currently not used, but future support is planned.   | |   :hover   |  |   \u2714\ufe0f   |  |  |</p>"},{"location":"world/proc/GetScores/#html-colors","title":"HTML colors","text":"<p>See also: </p> <p>rgb proc </p> <p>Text colors may be specified by name or RGB value. The RGB color format uses hexadecimal numbers, with 2 hex digits each for red, green, and blue. These range from 0 (00 in hex) to 255 (FF in hex). In certain situations BYOND will also honor a fourth pair of digits for alpha.</p> <pre><code>#rrggbb\n#rrggbbaa\n\n</code></pre> <p>It is also possible to use 4 bit values by using only one hex digit per color. The full 8 bit color is produced by repeating each digit. For example,  <code>#F00</code>   (red) is the same as  <code>#FF0000</code>   .</p> <p>The named colors supported by BYOND, and their corresponding RGB values, are listed in the following table:</p> <p>|   black   |   #000000   |  | |   silver   |   #C0C0C0   |  | |   gray  or   grey   |   #808080   |  | |   white   |   #FFFFFF   |  | |   maroon   |   #800000   |  | |   red   |   #FF0000   |  | |   purple   |   #800080   |  | |   fuchsia  or   magenta   |   #FF00FF   |  | |   green   |   #00C000   |  | |   lime   |   #00FF00   |  | |   olive  or   gold   |   #808000   |  | |   yellow   |   #FFFF00   |  | |   navy   |   #000080   |  | |   blue   |   #0000FF   |  | |   teal   |   #008080   |  | |   aqua  or   cyan   |   #00FFFF   |  |</p>"},{"location":"world/proc/GetScores/#color-space","title":"Color space","text":"<p>See also: </p> <p>rgb proc </p> <p>rgb2num proc </p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>There are different ways of interpreting color besides RGB. Several parts of BYOND are capable of using other color spaces.</p>"},{"location":"world/proc/GetScores/#_67","title":"GetScores","text":"<p>COLORSPACE_RGB</p> <p>The default color space is RGB, where each color is split into red, green, and blue components, as well as an optional alpha. All of these components range from 0 to 255.</p> <p>The color yellow for instance is</p> <p>rgb(255,255,0)</p> <p>which is red and green mixed together at their maximum brightness, but no blue component.</p>"},{"location":"world/proc/GetScores/#_68","title":"GetScores","text":"<p>COLORSPACE_HSV</p> <p>  Hue values on the color wheel</p> <p>HSV stands for hue, saturation, and value.</p> <ul> <li>Hue ranges from 0 to 360 on a color wheel, where 0 is red, 60 is yellow, 120 is green, and so on as seen in the image.</li> <li>Saturation is how colorful this color is; it ranges from 0 which means a shade of gray, to 100 which is fully colored.</li> <li>Value is the brightness of the biggest red, green, or blue component, and ranges from 0 to 100. A value of 0 is always black.</li> </ul> <p>All pure hues such as red (hue=0) have a saturation of 100 and a value of 100. As saturation decreases, the colors turns whiter. Lower values mean darker colors and darker shades of gray.</p> <p>In HSV, saturation is less meaningful as value gets closer to 0. Black of course always has a value of 0. With 10 as the value, saturation=100 gives you a very dark color whereas saturation=0 is a 10% shade of gray.</p>"},{"location":"world/proc/GetScores/#_69","title":"GetScores","text":"<p>COLORSPACE_HSL</p> <p>HSL is a little more intuitive than HSV. Here, the value is replaced by luminance, which again ranges from 0 to 100. Luminance is the average of the minimum and maximum values of the red, green, and blue components.</p> <p>Black has a luminance of 0; white has a luminance of 100. Pure hues all have a saturation of 100 and luminance of 50. As saturation decreases, the color will approach a grayscale shade of L%.</p> <p>Saturation is less meaningful the closer luminance is to 0 or 100. At a luminance of 100, the saturation is totally irrelevant. At 90, high saturation will get you a very light shade of the hue but that isn't very far off from a 90% shade of gray.</p>"},{"location":"world/proc/GetScores/#_70","title":"GetScores","text":"<p>COLORSPACE_HCY</p> <p>HCY stands for  hue   ,  chroma   , and the Y is for grayscale luminance. (Again chroma and Y range from 0 to 100.) This color space is based around the apparent brightness of each color according to a rough approximation of human vision.</p> <p>Chroma is similar to saturation in that it determines how far from grayscale the color is. As chroma decreases toward 0, the color approaches a grayscale shade of Y%. What's different about HCY color from HSV or HSL is that at chroma=0 and chroma=100 the colors should appear equally bright. Pure red, therefore, has a hue of 0, a chroma of 100, and a Y luminance of only 29.9\u2014roughly what red would look like in black &amp; white with all the color leached out.</p>"},{"location":"world/proc/GetScores/#stddefdm-file","title":"stddef.dm file","text":"<p>This is a special file that's included in all projects when you compile. It contains various constants, definitions of some built-in datums, and so on.</p> <p>You can see the contents of this file by creating a new file in Dream Maker called</p> <p>stddef.dm</p> <p>. It will automatically be filled with the standard definitions.</p> <p>The contents of</p> <p>stddef.dm</p> <p>may change with new BYOND versions. However an eye is always kept on backwards-compatibility.</p> <p>Top Buccaneers:</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#import-proc-world_1","title":"Import proc (world)","text":"<p>See also: </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>Format: </p> <p>Import()</p> <p>Returns: </p> <p>The file sent by the remote server. The file will be downloaded to the  local server's resource cache. Note that this will cause the caller to  sleep while waiting for the necessary data to be transfered.</p> <p>When: </p> <p>Call this inside world.Topic() if you are expecting a file from the  remote server.</p>"},{"location":"world/proc/GetScores/#_71","title":"GetScores","text":"<p>Example:</p> <p>//sending the file mob/proc/Export(Addr)  var/savefile/F = new()  F.Write(src)  world.Export(Addr,F)</p> <p>//receiving the file world/Topic()  var/savefile/F = new(world.Import())  F.Read() //read the mob</p> <p>This example defines a mob proc called Export() which writes the mob to a savefile and sends it to another server (specified by Addr). The remote server opens it as a savefile and creates the mob (if the same mob type is defined on both servers and mob.Read() is compatible with the sending server's mob.Write()).</p> <p>Note that another method of transferring player mobs is to use the key savefile (accessed by client.Export() and client.Import()). Direct server to server communication on the other hand could transfer data (like non-players) without the need for player involvement at all.</p> <p>Savefiles are the most common type of file to transfer, but world.Import() simply returns a reference to an item in the world's .rsc file, which could be any type of file. This particular example demonstrates how to open such a file as a temporary savefile. (It gets dumped from the cache into a separate temporary file, which is then opened as a savefile.) Other types of files would be handled differently. For example, you could use fcopy() to dump the cached item to its own separate file.</p>"},{"location":"world/proc/GetScores/#isbanned-proc-world_1","title":"IsBanned proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>params2list proc </p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>Format: </p> <p>IsBanned(key,address,computer_id,type)</p> <p>Returns: </p> <p>True value if user is banned from this world. This may be a list, in which case special meaning is attributed to certain list elements as described below.</p> <p>Args: </p> <p>key: BYOND key of the user.</p> <p>address: current IP address of the user.</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>By default, this procedure checks the \"ban\" configuration file. If an entry is found for the current world (based on the value of world.hub), the parameter text is converted into a list (using params2list()), and the result is returned. Otherwise, null is returned.</p> <p>A ban that applies to all worlds on the host's computer will not call IsBanned(). The connection will simply be denied.</p> <p>This procedure is called internally whenever a new user connects (before client/New() is called). If the result is true, access is denied. If you want to ban a user but still allow them to log in (perhaps with reduced functionality), you can put \"Login=1\" in the parameter text. If you want to display an explanation to the user about why they are banned, you can also put \"message=X\" in the parameter text, where X is the message to display to the user. A reason for the ban can be added with a \"reason=X\" field. Of course, you can also override IsBanned() and insert these values directly into the list that is returned.</p>"},{"location":"world/proc/GetScores/#example_1","title":"Example","text":"<p>world/IsBanned(key,address)  . = ..() //check the ban lists  if(istype(., /list))  .[\"Login\"] = 1 //allow banned user to login</p> <p>When you ban people from paging you, this also causes them to be added to the keyban list. Even if they are already connected, IsBanned() will be re-evaluated and acted upon at that time. When you remove pager ban, they are removed from keyban as well.</p> <p>Additional data elements may be added to the ban list in the future. The current definition includes just the following items:</p> <p>Login</p> <p>true if banned user should be allowed to log in</p> <p>reason</p> <p>text string describing the reason or origin of the ban. For example, when people are banned from the pager, they are added to the \"keyban\" list with reason = \"pager ban\". This text is internal information only and is not displayed to the banned user.</p> <p>message</p> <p>text string explaining to the user why they were banned and possibly what they should do to be forgiven.</p> <p>Since the data in the \"ban\" file is in  application/x-www-form-urlencoded   format, it is probably not desirable to edit the file by hand. No built-in facilities for editing the file have been provided (aside from automatic addition of pager bans), but an interface could be created, using  GetConfig   and  SetConfig   to read and write the data. Extra features could also be added such as automatic inference of key associations by IP address.</p>"},{"location":"world/proc/GetScores/#issubscribed-proc-world_1","title":"IsSubscribed proc (world)","text":"<p>Format: </p> <p>IsSubscribed(player)</p> <p>IsSubscribed(player, \"BYOND\") (to check BYOND Membership)</p> <p>Returns: </p> <p>Number of days left in subscription, -1 for a lifetime subscriber,  or   null if hub contact failed</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>Checks a player for their subscription status to this game. This is a simpler alternative to</p> <p>client.CheckPassport()</p> <p>, which is deprecated, and also allows you to check even when the player has gone offline.</p> <p>This proc will return null if contacting the hub was required, but there was no way to reach the hub. Contacting the hub may take a few moments, so it is a good idea to use  spawn()   to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_72","title":"GetScores","text":"<p>Example:</p> <p>mob/verb/JoinClub()  if(!world.IsSubscribed(src))  src &lt;&lt; \"Sorry, the club is only for subscribers.\"  else  // go to the turf with the tag \"clubhouse\"  loc = locate(\"clubhouse\")  src &lt;&lt; \"Welcome to the clubhouse!\"</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#new-proc-world_1","title":"New proc (world)","text":"<p>Format: </p> <p>New()</p> <p>When: </p> <p>Called after the world is initially loaded. The only procs preceding  this one would be in the initialization of global variables and objects  on the map.</p> <p>Default action: </p> <p>None.</p>"},{"location":"world/proc/GetScores/#openport-proc-world_1","title":"OpenPort proc (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>visibility var (world) </p> <p>See also: </p> <p>OpenPort(port=0)</p> <p>Args: </p> <p>port: the network port to open</p> <p>Returns: </p> <p>1 on success; 0 on failure</p> <p>This causes the world to be hosted on the specified network port. A value of 0 or \"any\" requests that any available port be used. The value \"none\" causes the port to be closed so that no new connections are possible.</p> <p>This proc may be overridden. If it is, calling ..() is necessary to open the port. If ..() is not called, it will not open.</p>"},{"location":"world/proc/GetScores/#_73","title":"GetScores","text":"<p>Example:</p> <p>world/OpenPort(port)  // only allow subscribers to host  if(host_is_subscribed)  return ..()</p> <p>The \"ports\" configuration option in cfg/byond.txt can be used to control what ports worlds may open. The -ports command-line option may also be used. See  startup   for the syntax.</p>"},{"location":"world/proc/GetScores/#paycredits-proc-world_1","title":"PayCredits proc (world)","text":"<p>See also: </p> <p>AddCredits proc (world) </p> <p>GetCredits proc (world) </p> <p>Format: </p> <p>PayCredits(player, credits, note)</p> <p>Returns: </p> <p>1 if the credits were spent successfully, 0 or null otherwise.</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to deduct from the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Removes credits from a player's account, if they have enough. The proc will return 1 if it is successful, or 0 if the attempt failed (usually because the player doesn't have enough credits). This feature is intended for games that make use of the credit system, and for security all such games must use a hub password.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is often a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_74","title":"GetScores","text":"<p>Example:</p> <p>mob/proc/ItemShop()  var/items = list(\"Get credits!\", \"Magic sword\"=10, \"Skeleton key\"=50)  var/choices[0]  var/item,price  for(item in items)  price = items[item]  choices[\"[item]: [price] credit\\s\"] = item</p> <p>var/credits = world.GetCredits(key)  if(isnull(credits))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  return</p> <p>var/choice = input(src,\\  \"You have [credits] credit\\s. What would you like to purchase?\",\\  \"Item Shop\")\\  as null|anything in choices  if(!choice) return // cancel</p> <p>if(choice == \"Get credits\")  src &lt;&lt; link(\"http://www.byond.com/games/Author/MyGame/credits\")  return</p> <p>item = choices[choice]  price = items[item]  if(!price) return</p> <p>src &lt;&lt; \"Contacting item shop...\"  var/result = world.PayCredits(name, price, \"Item shop: [item]\")</p> <p>if(isnull(result))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  else if(!result)  src &lt;&lt; \"You need [price-credits] more credit\\s to buy [item].\"  else  src &lt;&lt; \"You bought \\a [item]!\"</p> <p>// Now give the user the item and save their character  // These procs are for you to define  src.AddEquipment(item)  src.SaveCharacter()</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#profile-proc-world_1","title":"Profile proc (world)","text":"<p>Format: </p> <p>Profile(command, format)</p> <p>Profile(command, type, format)</p> <p>Returns: </p> <p>Profilng data or null</p> <p>Args: </p> <p>command: A numerical value that says whether to start, stop, refresh, etc.</p> <p>type: A type of profile to use, other than proc profiling.</p> <p>format: Optional format for output data</p> <p>Interacts with the built-in server profiler without requiring the host to do so via Dream Daemon, or an authorized player via Dream Seeker.</p> <p>The</p> <p>command</p> <p>value is built from bitflags, so it can combine any of these three values via the</p> <p>|</p> <p>operator:</p> <p>PROFILE_STOP</p> <p>Stop profiling. Not using this flag will start/continue profiling.</p> <p>PROFILE_CLEAR</p> <p>Clear all profile data. This will also cause the proc to return null.</p> <p>PROFILE_AVERAGE</p> <p>Any output data should use average times instead of total times.</p> <p>These additional values are also defined for convenience:</p> <p>PROFILE_START</p> <p>Start/continue profiling but don't clear any existing data.</p> <p>PROFILE_REFRESH</p> <p>Currently this is the same as</p> <p>PROFILE_START</p> <p>.</p> <p>PROFILE_RESTART</p> <p>Start profiling and clear existing data.</p>"},{"location":"world/proc/GetScores/#_75","title":"GetScores","text":"<p>Profiling procs</p> <p>By default, data will be returned as a list. The first six values are the column names:</p> <p>\"name\"</p> <p>,</p> <p>\"self\"</p> <p>,</p> <p>\"total\"</p> <p>,</p> <p>\"real\"</p> <p>,</p> <p>\"over\"</p> <p>, and</p> <p>\"calls\"</p> <p>, corresponding to the columns in the profiler. These are followed by the profile data for each proc, with the data being in the same column order. E.g. the next six items represent the first proc in the profile.</p> <p>The optional</p> <p>format</p> <p>argument however can be used to return the data in other formats. Currently the only accepted value is</p> <p>\"json\"</p> <p>, which will output the same data in JSON format.</p>"},{"location":"world/proc/GetScores/#_76","title":"GetScores","text":"<p>SendMaps profile</p> <p>Using</p> <p>\"sendmaps\"</p> <p>in the</p> <p>type</p> <p>argument will profile the routines used to send map informaiton to players. Unlike the proc profiling this only has three data columns:</p> <p>\"name\"</p> <p>,</p> <p>\"value\"</p> <p>, and</p> <p>\"calls\"</p> <p>. The value column might be a time or number value, depending on what's being measured.</p> <p>The JSON format will include a</p> <p>unit</p> <p>property data that is not a raw number, such as a time value.</p>"},{"location":"world/proc/GetScores/#reboot-proc-world_1","title":"Reboot proc (world)","text":"<p>Format: </p> <p>Reboot(reason)</p> <p>Args: </p> <p>reason: the reason</p> <p>Reboot()</p> <p>was called:  * 0 or null: Called by game code * 1: By host (Ctrl+R in Dream Seeker) * 2: By  world.Topic() * 3: By SIGUSR1 in UNIX</p> <p>Default action: </p> <p>Reload the world from scratch. Any connected players will automatically relogin. This would be useful if you needed to recompile the world after changing some code.</p> <p>In a UNIX environment, you can cause a running server to reboot by sending it the signal SIGUSR1.</p> <p>If you override this proc, you must call ..() if you want the reboot to complete normally.</p> <p>For reboots initiated by Dream Seeker, usr will be the mob belonging to the player who sent the command.</p>"},{"location":"world/proc/GetScores/#repop-proc-world_1","title":"Repop proc (world)","text":"<p>Format: </p> <p>Repop()</p> <p>Default action: </p> <p>Reload the obj and mob instances defined in the world map. This  \"repopulates\" a world to its initial state. Only objects that were  destroyed will be recreated.</p>"},{"location":"world/proc/GetScores/#setconfig-proc-world_1","title":"SetConfig proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>Format: </p> <p>SetConfig(config_set,param,value)</p> <p>Args: </p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>value: data to store (or null to delete this entry)</p> <p>This command is for storing configuration information that is shared by applications installed on the same system. The configuration data is accessed by specifying the configuration \"set\" and the parameter within that set.</p> <p>For more information, see  GetConfig   .</p>"},{"location":"world/proc/GetScores/#setmedal-proc-world_1","title":"SetMedal proc (world)","text":"<p>See also: </p> <p>GetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>Format: </p> <p>SetMedal(medal, player)</p> <p>Returns: </p> <p>1 if the medal was awarded successfully, 0 or null otherwise.</p> <p>Args: </p> <p>medal: name of the medal being awarded</p> <p>player: a mob, client, key, or ckey</p> <p>Awards a medal to a player. The proc will return 1 if it is successful, or 0 if the medal was already awarded. If the world already knows this medal was earned before, the hub will not be contacted.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_77","title":"GetScores","text":"<p>Example:</p> <p>mob/monster/dragon  Die(mob/killer) // assume Die() is a proc all mobs have  spawn()  if(ismob(killer) &amp;&amp; killer.key)  world.SetMedal(\"Dragon slayer\", killer)</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#setscores-proc-world_1","title":"SetScores proc (world)","text":"<p>See also: </p> <p>GetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>Format: </p> <p>SetScores(key, fields)</p> <p>Returns: </p> <p>The key, if the scores were successfully updated; null otherwise.</p> <p>Args: </p> <p>key: the name of the player, character, etc. for which scores should be set</p> <p>fields: The data fields to set</p> <p>Updates scores that are kept on the BYOND hub.</p> <p>The key is an arbitrary text value. Usually a player's key is a good choice, but you can also use the name of their character, or anything else you like, as long as it is unique. The key is case-insensitive.</p> <p>Scores and stats use data fields, which might be things like \"Score\", \"Level\", \"Class\", etc. Use list2params() to set the fields that you want to change. Fields that you do not include in the list will not be changed. A field with a blank value will be deleted.</p> <p>Sending an empty text string for the fields will erase the scores for that key.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/GetScores/#_78","title":"GetScores","text":"<p>Example:</p> <p>var/params</p> <p>// Change the Score and Pet fields params = list(\"Score\"=123, \"Pet\"=\"Dog\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete the Pet field params = list(\"Pet\"=\"\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete Tom's scores entirely world.SetScores(\"Tom\", \"\")</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/GetScores/#tick-proc-world_1","title":"Tick proc (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>map_cpu var (world) </p> <p>tick_usage var (world) </p> <p>Format: </p> <p>Tick()</p> <p>When: </p> <p>Called during the server tick, after sleeping procs and queued commands, just before map information is sent to the clients.</p> <p>Default action: </p> <p>None.</p> <p>This proc allows you to do any updates just before map info is sent out. One possible use for this is to run a movement loop, or sync up any user interface input that might have arrived and deal with it all at once.</p>"},{"location":"world/proc/GetScores/#_79","title":"GetScores","text":"<p>Example:</p> <p>world/Tick()  for(var/client/C)  if(C.mob?.move_dir)  try  step(C.mob, move_dir)  catch  // empty catch, just so a failed step won't break the loop</p> <p>Note: The tick will not wait if this proc sleeps. It effectively has  set waitfor=0   already built in. It's a good idea not to sleep in this proc or any of its callees at all, since it will keep getting called every tick.</p>"},{"location":"world/proc/GetScores/#topic-proc-world_1","title":"Topic proc (world)","text":"<p>See also: </p> <p>Del proc (world) </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Format: </p> <p>Topic(T,Addr,Master,Keys)</p> <p>When: </p> <p>Called when a message is received from another server by using  world.Export(). If a file is expected, world.Import() may be called to  get it. The return value of Topic() will be passed back to the remote  server.</p> <p>Args: </p> <p>T: The topic text string specified by the remote server (everything following ? in the URL).</p> <p>Addr: The address of the remote server.</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Default action: </p> <p>The topic \"ping\" returns a true value (number of players plus one),  which may be useful for telling if a server is alive. The topics  \"Reboot\" and \"Del\" will call world.Reboot() and world.Del()  respectively if the message was sent by the master server.</p>"},{"location":"world/proc/GetScores/#_80","title":"GetScores","text":"<p>Example:</p> <p>world/Topic(T)  if(findtext(T,\"shout:\") == 1)  world &lt;&lt; copytext(T,7)</p> <p>This example allows other servers to send this server topic text of the form \"shout:msg\" and will broadcast the message to all the players in this world.</p> <p>The Keys argument is either null, or a list of user keys. Any keys in the list are logged in to the remote server.</p> <p>Always validate the input in</p> <p>Topic()</p> <p>calls to make sure it's correct and the query you're recieving is legitimate.</p>"},{"location":"world/proc/GetScores/#vars-world_1","title":"vars (world)","text":"<p>Built-in world vars:</p> <p>world/var</p> <p>address </p> <p>area </p> <p>byond_build </p> <p>byond_version </p> <p>cache_lifespan </p> <p>contents </p> <p>cpu </p> <p>executor </p> <p>fps </p> <p>game_state </p> <p>host </p> <p>hub </p> <p>hub_password </p> <p>icon_size </p> <p>internet_address </p> <p>log </p> <p>loop_checks </p> <p>map_format </p> <p>map_cpu </p> <p>maxx </p> <p>maxy </p> <p>maxz </p> <p>mob </p> <p>movement_mode </p> <p>name </p> <p>params </p> <p>port </p> <p>process </p> <p>realtime </p> <p>reachable </p> <p>sleep_offline </p> <p>status </p> <p>system_type </p> <p>tick_lag </p> <p>tick_usage </p> <p>time </p> <p>timeofday </p> <p>timezone </p> <p>turf </p> <p>url </p> <p>vars </p> <p>version </p> <p>view </p> <p>visibility </p>"},{"location":"world/proc/GetScores/#address-var-world_1","title":"address var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>url var (world) </p> <p>internet_address var (world) </p> <p>This is the network address of the machine hosting the world. If it cannot be determined, it will be null.</p> <p>The full network address of the world may be formed by concatenating the world address and port: \"byond://[address]:[port]\".</p> <p>In CGI mode, this is the web address of the world.</p> <p>This is the local address only. If the world is hosted via a router, the external IP address may be different. Use</p> <p>internet_address</p> <p>to find the external address, if available.</p>"},{"location":"world/proc/GetScores/#area-var-world_1","title":"area var (world)","text":"<p>Default value: </p> <p>/area.</p> <p>This is the default area type to be placed on the map wherever no area is specified. A value of 0 turns off the default area.</p>"},{"location":"world/proc/GetScores/#byond_build-var-world_1","title":"byond_build var (world)","text":"<p>See also: </p> <p>DM_VERSION macro </p> <p>byond_version var (world) </p> <p>byond_version var (client) </p> <p>byond_build var (savefile) </p> <p>byond_version var (savefile) </p> <p>This is the build number (minor version) of BYOND being run by this server. Typically this is not useful information, but it can come in handy when diagnosing issues reported by players when hosting with a beta build.</p>"},{"location":"world/proc/GetScores/#byond_version-var-world_1","title":"byond_version var (world)","text":"<p>See also: </p> <p>DM_VERSION macro </p> <p>byond_build var (world) </p> <p>system_type var (world) </p> <p>byond_version var (client) </p> <p>byond_build var (savefile) </p> <p>byond_version var (savefile) </p> <p>This is the version of BYOND at run-time. A game designed to work around known bugs in older versions could use this to adapt its behavior accordingly.</p>"},{"location":"world/proc/GetScores/#cache_lifespan-var-world_1","title":"cache_lifespan var (world)","text":"<p>See also: </p> <p>cache </p> <p>Default value: </p> <p>30 (days)</p> <p>Number of days items that are not in use will be saved in the resource cache (.rsc file). Files uploaded by players are stored in the world's .rsc file for future use. If the file is not used for the specified amount of time, it will be removed to save space.</p> <p>Setting this value to 0 causes items to be saved for the current session only. This is used by the CGI library, because web browsers cannot make use of server-side caches when uploading files anyway.</p> <p>This value must be a whole number.</p>"},{"location":"world/proc/GetScores/#contents-list-var-world_1","title":"contents list var (world)","text":"<p>See also: </p> <p>list </p> <p>Default value: </p> <p>List of all areas, turfs, mobs, and objs initially in the world.</p> <p>This is a list of every object in the world. Objects in this list are in no particular order.</p>"},{"location":"world/proc/GetScores/#_81","title":"GetScores","text":"<p>Example:</p> <p>proc/ListAreas(mob/M)  var/area/A  M &lt;&lt; \"Areas:\"  for (A in world.contents)  M &lt;&lt; A</p> <p>This example displays a list of every area in existence. As a convenient short-hand, one may simply write for(A) or for(A in world) instead of the full for(A in world.contents).</p>"},{"location":"world/proc/GetScores/#cpu-var-world_1","title":"cpu var (world)","text":"<p>See also: </p> <p>map_cpu var (world) </p> <p>tick_lag var (world) </p> <p>tick_usage var (world) </p> <p>Tick proc (world) </p> <p>This is the percentage of a server tick that the server spends processing running procs and the work of sending map information to players. A value of 0 would indicate very little cpu usage. A value of 100 would indicate full cpu usage, which could mean that the server cannot complete all the necessary computations during a tick to finish in time for the next tick. In this case, timed events (such as sleep) may take longer than requested.</p> <p>When deciding on a value for tick_lag, one could use this value to determine if the CPU is fast enough to tick at a higher rate.</p> <p>The</p> <p>map_cpu</p> <p>var is a subset of this, measuring only time used for sending map information.</p>"},{"location":"world/proc/GetScores/#executor-var-world_1","title":"executor var (world)","text":"<p>See also: </p> <p>startup proc </p> <p>Format: </p> <p>executor = \"/usr/local/byond/bin/DreamDaemon [params]\"</p> <p>This option is for direct execution of  <code>.dmb</code>   files in UNIX. The most common use is for writing CGI programs that are executed by the web server.</p> <p>The first parameter in the</p> <p>executor</p> <p>text string is the path to DreamDaemon. The one listed above is the standard UNIX location.</p> <p>Optional parameters may follow. The most common are -CGI and -logself.</p>"},{"location":"world/proc/GetScores/#_82","title":"GetScores","text":"<p>Example:</p> <p>world/executor = \"/usr/local/byond/bin/DreamDaemon -CGI -logself\"</p> <p>This example creates a CGI program to be executed by a web server. It puts its error output in the file  `projname</p> <p>.log`   .</p> <p>All of this is configured for you when you include  <code>html/CGI.dm</code>   from the html library.</p>"},{"location":"world/proc/GetScores/#fps-var-world_1","title":"fps var (world)","text":"<p>See also: </p> <p>tick_lag var (world) </p> <p>fps var (client) </p> <p>Pixel movement </p> <p>Default value: </p> <p>10</p> <p>The value of</p> <p>world.fps</p> <p>defines the speed of the world in frames (server ticks) per second. By default this is 10 fps, which is a good speed if all objects move in full tiles. Higher values yield smoother results, but at a cost to performance. Timing of many events may be limited by the system clock, so</p> <p>fps</p> <p>values beyond 40 or 50 may cause unwanted effects like jitter even for projects that are not very demanding in terms of performance.</p> <p>For projects making use of pixel movement, higher</p> <p>fps</p> <p>is usually desired. 40 seems to be a good value for general use, but in worlds that have a large number of players, you may wish to lower the value and give players a higher</p> <p>step_size</p> <p>per tick instead.</p> <p>This var exists for convenience; it is calculated by</p> <p>10 / world.tick_lag</p> <p>. The value of</p> <p>world.tick_lag</p> <p>is actually more accurate, but it is easier to think of world speed in terms of frames per second. The actual tick rate has a resolution of 1 ms.</p> <p>When reading</p> <p>world.fps</p> <p>, the result is always given as a whole number to gloss over rounding error.</p> <p>If you set</p> <p>client.tick_lag</p> <p>or</p> <p>client.fps</p> <p>to a value other than 0, you can make the client tick at a different (usually faster) rate.</p>"},{"location":"world/proc/GetScores/#game_state-var-world_1","title":"game_state var (world)","text":"<p>See also: </p> <p>name var (world) </p> <p>status var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>0</p> <p>At runtime, this value may be changed to let the BYOND hub know about certain changes in the game's status. An example for using this value is if the number of players in the game gets too high and most new logins are rejected, you can set game_state to 1 to let the hub know this server is full.</p> <p>The following values are accepted:</p> <p>0</p> <p>Normal status</p> <p>1</p> <p>Server is full</p> <p>Note that this value does not affect how your world actually reacts to new players logging in. It is only used by the hub and website.</p>"},{"location":"world/proc/GetScores/#host-var-world_1","title":"host var (world)","text":"<p>See also: </p> <p>game_state var (world) </p> <p>name var (world) </p> <p>status var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>If the information is made available by the pager, this will provide the key of the world's host. If the host is not known, this value will be either null or an empty string.</p>"},{"location":"world/proc/GetScores/#hub-var-world_1","title":"hub var (world)","text":"<p>See also: </p> <p>hub_password var (world) </p> <p>name var (world) </p> <p>status var (world) </p> <p>game_state var (world) </p> <p>version var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>This is a registered  BYOND hub   path. The default value of null is for unregistered games. Registered games (don't worry, it's free!) have their own hub page showing a brief description of the game, the author, an optional installation package, and links to online games. The hub path is a string of the form \"YourName.GameName\" and can be found in your  hub console   .</p> <p>Even unregistered games show up in the hub when they are live (that is online with people connected). It just doesn't show any of the extra info like a description, and there is no way for people to find out about it when nobody is logged in.</p> <p>If you do not want your game to show up in the hub (like while you are in the initial stages of development), just compile with  <code>visibility=0</code>   . Either that, or turn off your pager or your BYOND locator when you are connected to it.</p> <p>You (or the players) might also wish to turn off the notice of a live game in the hub when there is no longer any room for new players or if it is too late in the game for new people to join. At such times, you can simply set the visibility to 0.</p>"},{"location":"world/proc/GetScores/#_83","title":"GetScores","text":"<p>Example:</p> <p>world  hub = \"Dan.PipeStock\" //registered hub path</p> <p>mob/verb/start_game()  world.visibility = 0  //...</p> <p>If you configure your hub page to require a hub password, you must also specify  <code>world.hub_password</code>   .</p>"},{"location":"world/proc/GetScores/#hub_password-var-world_1","title":"hub_password var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>visibility var (world) </p> <p>Default value: </p> <p>null</p> <p>If  <code>world.hub</code>   is set, any live session of the game will be attached to the specified BYOND Hub page. Under the default settings, any game can set  <code>world.hub</code>   and attach itself to any BYOND Hub page.</p> <p>To beef up security, you can set a hub password in your hub's configuration page via the BYOND website. This will ensure that only authorized copies of your game can attach themselves to your hub page when live. Then simply copy that password into your code as  <code>world.hub_password</code>   so that your game's live broadcast will be accepted by the hub.</p>"},{"location":"world/proc/GetScores/#_84","title":"GetScores","text":"<p>Example:</p> <p>world  hub = \"Dan.PipeStock\" //registered hub path  hub_password = \"UPAggnJaeXmSBoKK\" //password for live game authentication</p> <p>Note that for security reasons, reading this variable at runtime will return a hashed version of the value that was set.</p>"},{"location":"world/proc/GetScores/#icon_size-var-world_1","title":"icon_size var (world)","text":"<p>See also: </p> <p>map_format var (world) </p> <p>step_size var (movable atoms) </p> <p>Gliding </p> <p>Pixel movement </p> <p>Default value: </p> <p>32</p> <p>This is the tile size that will be used as a default for icons in the world. It can be set to a single number that represents both the width and height, or you can use a format like \"[width]x[height]\" (such as \"16x48\") to specify width and height separately.</p> <p>This value affects several calculations, including icon operations and gliding between turfs.</p> <p>Note: If you do not use a square icon size and you are using a topdown map format, you may experience display issues if setting</p> <p>client.dir</p> <p>to</p> <p>EAST</p> <p>or</p> <p>WEST</p> <p>. A non-square tile with a topdown map format will also interfere with pixel movement. For this reason, square sizes are recommended when using any topdown-view map format.</p>"},{"location":"world/proc/GetScores/#internet_address-var-world_1","title":"internet_address var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>url var (world) </p> <p>address var (world) </p> <p>This is the network address of the machine hosting the world, as it is seen by the outside network (from the Internet) and the hub. If it cannot be determined, it will be null.</p> <p>The full network address of the world may be formed by concatenating the world address and port: \"byond://[address]:[port]\".</p> <p>This var exists because</p> <p>world.address</p> <p>may not be accurate if the world is hosted on a machine behind a router using NAT. The value returned by</p> <p>internet_address</p> <p>can be given to other players who wish to log in.</p>"},{"location":"world/proc/GetScores/#log-var-world_1","title":"log var (world)","text":"<p>See also: </p> <p>file proc </p> <p>startup proc </p> <p>Sending output to world.log may be useful for debugging purposes. The output goes to the same place run-time proc errors are displayed.</p>"},{"location":"world/proc/GetScores/#_85","title":"GetScores","text":"<p>Example:</p> <p>if(1+1 != 2)  world.log &lt;&lt; \"Uh oh.\"</p> <p>You can assign world.log to a file name or file() object to redirect output to that file. (There is also a command-line option to Dream Daemon that does this.)</p>"},{"location":"world/proc/GetScores/#_86","title":"GetScores","text":"<p>Example:</p> <p>world.log = file(\"mylog.txt\")</p>"},{"location":"world/proc/GetScores/#loop_checks-var-world_1","title":"loop_checks var (world)","text":"<p>Default value: </p> <p>1</p> <p>Setting this to 0 disables the very long loop protection. By default, loops in the code which undergo a very large number of iterations or recursions are aborted (by crashing the proc). This prevents the proc from locking up the server for too long.</p> <p>You may need to disable this feature if your code has some very long loops in it. Before doing that, make sure it's not  infinitely   long! Your program will utterly crash if it runs out of system stack space, which can happen in a very deep or infinite recursion.</p> <p>Note: The compiler will now generate a warning when you disable</p> <p>loop_checks</p> <p>. It is not advisable to disable the check unless you're trying to debug something, since you can cause the server to hang. Generally if you have a loop so long it can cause the regular loop checks to freak out, you need to make a change to the loop behavior anyway.</p>"},{"location":"world/proc/GetScores/#map_format-var-world_1","title":"map_format var (world)","text":"<p>See also: </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>screen_loc var (movable atoms) </p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Big icons </p> <p>Tiled icons </p> <p>Understanding the renderer </p> <p>Default value: </p> <p>TOPDOWN_MAP</p> <p>Possible values: </p> <ul> <li>TOPDOWN_MAP</li> <li>ISOMETRIC_MAP</li> <li>SIDE_MAP</li> <li>TILED_ICON_MAP</li> </ul> <p>This value says how the world will display maps. In a normal overhead tiled map the value is</p> <p>TOPDOWN_MAP</p> <p>for the top-down format. For older games that predate this feature, the value is</p> <p>TILED_ICON_MAP</p> <p>.</p> <p>If you use a map format other than top-down, the HUD will still use a tile format like it would in top-down display. HUD objects are not projected into whatever map_format you use and they are not affected by changing client.dir. The size of the HUD is rounded up to the nearest number of full screen tiles; the size of each tile is defined by world.icon_size.</p>"},{"location":"world/proc/GetScores/#_87","title":"GetScores","text":"<p>Top-down format</p> <p>(See more at Topdown maps   .)</p> <p>This is the default map format. Icons are drawn in a tile form and viewed from overhead. In this layout, the layer assigned to each atom is very important. The number of tiles shown is set by client.view or world.view.</p> <p>Because this format is familiar and easy to understand, it is the default setting. Most of the vars related to maps and atoms are designed and documented with this format in mind.</p>"},{"location":"world/proc/GetScores/#_88","title":"GetScores","text":"<p>Tiled icon format</p> <p>(See more at  Tiled icons   .)</p> <p>In BYOND 4.0 a new feature was introduced for using \"big\" icons, bigger than the standard tile size, by splitting them up into states like \"0,0\", \"1,0\", and so on. This functionality is no longer needed since BYOND now has the ability to display icons in their natural size. Some games that were designed before this, however, may still need to make use of this splitting feature that breaks icons into smaller tile-sized pieces.</p> <p>When an icon is broken into chunks, each state in the icon is given a thumbail version of the full image, and then new states are added to show each chunk. For instance if world.icon_size is the default 32\u00d732, and the icon is 64\u00d764, then the \"door\" state would become a thumbnail of the full door image while \"door 0,0\" (the lower left corner), \"door 1,0\", \"door 0,1\", and \"door 1,1\" were created to show each smaller section of the image. If the default \"\" state is broken into chunks, those chunks are just named \"0,0\" and so on without a space.</p> <p>This format is deprecated. It exists to support older games and allow them to be compiled without causing them to break, until they can be redesigned for one of the newer formats.  ###   Isometric format</p> <p>(See more at  Isometric maps   .)</p> <p>If map_format is set to</p> <p>ISOMETRIC_MAP</p> <p>, the map is displayed in isometric form. Isometric tiles are displayed in a foreshortened diagonal perspective, where the \"north\" direction actually displays as northeast on the player's screen, and \"east\" shows up as southeast. The value of</p> <p>client.view</p> <p>or</p> <p>world.view</p> <p>is used to calculate the  minimum   number of tiles to display, and extra tiles to each side will be shown to fill in the corners.</p> <p>In an isometric map, the tile width set in world.icon_size is the most important factor. This should be a multiple of 4 for best results. The minimum tile height is half that value, and any extra height is used to show vertical structures that \"stick up\" off the map surface. When you draw an isometric tile icon, start with a flattened diamond shape at the bottom that is only half as high as it is wide.</p> <p>Isometric maps behave differently during drawing than top-down maps. In isometric, tiles that are nearer to the viewer's perspective are drawn in front of tiles farther back, regardless of layer. Layers only count within an individual tile. This means that if you want to have a vertical structure \"stick up\" to partially hide something behind it, the icon sticking up should always be on a tile forward from the one being partly covered. E.g. if you have a wall taking up part of your tile, it needs to be at the \"back\" end of the tile to properly hide anything on the tiles behind it.</p> <p>The</p> <p>pixel_x</p> <p>and</p> <p>pixel_y</p> <p>values,</p> <p>step_x</p> <p>and</p> <p>step_y</p> <p>values, and the gliding that happens when moving between tiles, are based on the width set by</p> <p>world.icon_size</p> <p>. If you set</p> <p>world.icon_size=\"64x128\"</p> <p>to show tall buildings, only the 64 matters for pixel offsets. Use</p> <p>pixel_w</p> <p>and</p> <p>pixel_z</p> <p>to adjust the position of atoms (or the client) horizontally or vertically without respect to</p> <p>client.dir</p> <p>or the map format.</p> <p>Note: Offsets for x and y also affect the layering order used to draw the icons. Any object with a pixel offset onto another tile is considered part of whichever tile is closer.</p> <p>If you use an icon wider than one tile, the \"footprint\" of the isometric icon (the actual map tiles it takes up) will always be a square. That is, if your normal tile size is 64 and you want to show a 128x128 icon, the icon is two tiles wide and so it will take up a 2\u00d72-tile area on the map. The height of a big icon is irrelevant--any excess height beyond width/2 is used to show vertical features. To draw this icon properly, other tiles on that same ground will be moved behind it in the drawing order.</p> <p>One important warning about using big icons in isometric mode is that you should only do this with dense atoms. If part of a big mob icon covers the same tile as a tall building for instance, the tall building is moved back and it could be partially covered by other turfs that are actually behind it. A mob walking onto a very large non-dense turf icon would experience similar irregularities.</p>"},{"location":"world/proc/GetScores/#_89","title":"GetScores","text":"<p>Side-view format</p> <p>(See more at  Side-view maps   .)</p> <p>The</p> <p>SIDE_MAP</p> <p>format is like a cross between</p> <p>TOPDOWN_MAP</p> <p>and</p> <p>ISOMETRIC_MAP</p> <p>. It looks very similar to a top-down view but it is intended for more of a 3/4 perspective, where tiles lower on the screen are considered closer to the viewer. Because this impacts the way layers work, most of the layering behavior is the same as with isometric.</p> <p>In a 3/4 perspective the tiles are often foreshortened, so pixel offsets are adjusted to account for this. For example, you may set</p> <p>world.icon_size</p> <p>to</p> <p>\"32x24\"</p> <p>, but the tile is considered to be a perfect square if you look at it from the top down. Because the width is 32 pixels, the virtual height is also 32, so if you use pixel_y=32 the atom will appear one tile further back than it normally is. (This adjustment doesn't affect screen objects or</p> <p>pixel_w</p> <p>/</p> <p>pixel_z</p> <p>.)</p> <p>Changing</p> <p>client.dir</p> <p>preserves the same tile size regardless of orientation.</p>"},{"location":"world/proc/GetScores/#map_cpu-var-world_1","title":"map_cpu var (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>tick_lag var (world) </p> <p>tick_usage var (world) </p> <p>Tick proc (world) </p> <p>This is the percentage of a server tick that the server spends processing information about the map to send to players. A value of 0 would indicate very little cpu usage. A value of 100 would indicate full cpu usage, which means that the server cannot complete all the necessary computations during a tick to finish in time for the next tick. In this case, timed events (such as sleep) may take longer than requested.</p>"},{"location":"world/proc/GetScores/#maxx-var-world_1","title":"maxx var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxy var (world) </p> <p>maxz var (world) </p> <p>turf var (world) </p> <p>Map </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#maxy-var-world_1","title":"maxy var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>maxz var (world) </p> <p>turf var (world) </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#maxz-var-world_1","title":"maxz var (world)","text":"<p>See also: </p> <p>area var (world) </p> <p>maxx var (world) </p> <p>maxy var (world) </p> <p>turf var (world) </p> <p>Default value: </p> <p>0</p> <p>The world map is a three-dimensional block of turfs with coordinates ranging from (1,1,1) to (maxx,maxy,maxz). If set at compile time, it provides a lower bound and will be increased as needed by the map files.</p> <p>The default value is 0, indicating no map. If any of the map dimensions are set to non-zero values at compile time, the others will default to 1.</p> <p>New territory created by increasing the map boundaries is filled in with the default turf and area (world.turf, and world.area).</p>"},{"location":"world/proc/GetScores/#mob-var-world_1","title":"mob var (world)","text":"<p>See also: </p> <p>New proc (client) </p> <p>Default value: </p> <p>/mob.</p> <p>When a player connects to the world, the world is searched for a mob with the player's key. If one is found, the player is connected to that mob. If none is found, a new mob of type world.mob is created and the player is connected to this new mob.</p> <p>The default value is /mob. Setting world.mob to 0 prevents the creation of default mobs.</p>"},{"location":"world/proc/GetScores/#_90","title":"GetScores","text":"<p>Example:</p> <p>world  mob = /mob/newbie</p> <p>mob/newbie  Login()  src &lt;&lt; \"Welcome, [name].\"  ..()</p> <p>This example will connect new players to mobs of type /mob/newbie. They are welcomed when they connect.</p>"},{"location":"world/proc/GetScores/#movement_mode-var-world_1","title":"movement_mode var (world)","text":"<p>See also: </p> <p>appearance_flags var (atom) </p> <p>Enter proc (atom) </p> <p>Exit proc (atom) </p> <p>Cross proc (atom) </p> <p>Uncross proc (atom) </p> <p>Pixel movement </p> <p>Gliding </p> <p>Possible values: </p> <p>LEGACY_MOVEMENT_MODE</p> <p>: Old BYOND behavior regarding pixel movement and turf contents (see below)</p> <p>TILE_MOVEMENT_MODE</p> <p>: All atoms are locked to the tile grid</p> <p>PIXEL_MOVEMENT_MODE</p> <p>: All movable atoms can use pixel movement unless otherwise specified (see below), but legacy behavior for turf contents is ignored</p> <p>Default value: </p> <p>LEGACY_MOVEMENT_MODE</p> <p>Controls how movement works on the map.</p> <p>TILE_MOVEMENT_MODE</p> <p>allows you to easily discard any and all pixel movement, so if step_x or step_y coordinates or unexpected atom bounds were loaded from a savefile, for instance, they would be eliminated. If you use any other movement mode, you can give an atom the  TILE_MOVER   flag and it will behave as if it were in this mode, while other atoms are free to do their own thing.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>exists to distinguish between old and new movement behavior. In older versions of BYOND before pixel movement, turfs took their contents into consideration by default in Enter() and Exit(). This doesn't really make sense for newer games, so in any other movement mode the turf behavior will ignore its contents. mob.Cross() is also affected, since it would return 0 by default in legacy mode when both mobs were dense; now by default it checks</p> <p>mob.group</p> <p>.</p>"},{"location":"world/proc/GetScores/#name-var-world_1","title":"name var (world)","text":"<p>Default value: </p> <p>The  part of the .dmb file. <p>This is the name of the world.</p>"},{"location":"world/proc/GetScores/#_91","title":"GetScores","text":"<p>Example:</p> <p>world  name = \"The Void\"</p>"},{"location":"world/proc/GetScores/#params-var-world_1","title":"params var (world)","text":"<p>See also: </p> <p>list associations </p> <p>params2list proc </p> <p>startup proc </p> <p>Default value: </p> <p>null</p> <p>This is a list of parameters passed to the world from the command-line -params option when the server was started. The parameter text is passed through params2list() to generate the world.params list.</p>"},{"location":"world/proc/GetScores/#_92","title":"GetScores","text":"<p>Example:</p> <p>world/New()  var/p  if(params.len) world.log &lt;&lt; \"Command-line parameters:\"  for(p in params)  world.log &lt;&lt; \"[p] = [params[p]]\"</p> <p>This example displays the value of each parameter.</p>"},{"location":"world/proc/GetScores/#port-var-world_1","title":"port var (world)","text":"<p>See also: </p> <p>OpenPort proc (world) </p> <p>address var (world) </p> <p>reachable var (world) </p> <p>visibility var (world) </p> <p>This is the network port of the world. If the world does not have an open network port, this is 0.</p>"},{"location":"world/proc/GetScores/#process-var-world_1","title":"process var (world)","text":"<p>See also: </p> <p>byond_version var (world) </p> <p>system_type var (world) </p> <p>shell proc </p> <p>This read-only variable indicates the ID of the server's process on the system running it. The result is a number, unless for some unexpected reason the number won't fit in a</p> <p>num</p> <p>type, in which case it will be text. (In practice it should always be a number.)</p>"},{"location":"world/proc/GetScores/#realtime-var-world_1","title":"realtime var (world)","text":"<p>See also: </p> <p>time var (world) </p> <p>timeofday var (world) </p> <p>time2text proc </p> <p>This is the time (in 1/10 seconds) since 00:00:00 GMT, January 1, 2000 (also known as the BYOND era).</p> <p>Because this is a large number, BYOND's number system isn't capable of enough precision to deliver the exact number of 1/10 second ticks. It usually rounds off to the nearest several seconds. For more accurate readings use  <code>world.timeofday</code>   .</p>"},{"location":"world/proc/GetScores/#reachable-var-world_1","title":"reachable var (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>OpenPort proc (world) </p> <p>Returns 1 if the world is currently hosted and the port can be reached by players (as determined by the BYOND hub), 0 if not.</p> <p>If the port is not reachable, there may be a brief period during which the hub is still attempting to make contact; during that time the port is assumed to be reachable. Currently, the reachability test times out and fails after 30 seconds.</p>"},{"location":"world/proc/GetScores/#sleep_offline-var-world_1","title":"sleep_offline var (world)","text":"<p>Default value: </p> <p>0</p> <p>Setting this to 1 causes the world to be suspended when there are no players, even if you have sleeping procs waiting to happen. The default value is 0, which means the server will only sleep if there are no players and no procs waiting to happen. The main purpose of the variable is to save the cpu from doing work when there is nobody around to appreciate it. On the other hand, that doesn't give the poor NPC's a break from the nasty humans.</p>"},{"location":"world/proc/GetScores/#status-var-world_1","title":"status var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>game_state var (world) </p> <p>visibility var (world) </p> <p>This is a short text string used in BYOND hub to describe the state of a game in progress. For example, you might want to indicate if new players will be able to actively play, or whether they would have to join as spectators.</p>"},{"location":"world/proc/GetScores/#_93","title":"GetScores","text":"<p>Example:</p> <p>world  status = \"accepting players\" mob/verb/start_game()  world.status = \"accepting spectators\"  //...</p>"},{"location":"world/proc/GetScores/#system_type-var-world_1","title":"system_type var (world)","text":"<p>See also: </p> <p>byond_version var (world) </p> <p>process var (world) </p> <p>shell proc </p> <p>This variable indicates the operating system type at run-time. It will be one of the following constants:</p> <ul> <li>MS_WINDOWS</li> <li>UNIX</li> </ul>"},{"location":"world/proc/GetScores/#tick_lag-var-world_1","title":"tick_lag var (world)","text":"<p>See also: </p> <p>fps var (world) </p> <p>tick_lag var (client) </p> <p>tick_usage var (world) </p> <p>sleep proc </p> <p>Default value: </p> <p>1</p> <p>This is the smallest unit of time (one server tick) measured in 1/10 seconds. The duration of events that take some finite amount of time (like sleep) will be rounded to a whole number of ticks.</p> <p>Players are limited to one command (including movements) per server tick, so this value can be used to adjust the responsiveness of the game. If the network is too slow to keep up with players, their commands will get queued up, which can be annoying when trying to move. In this case, tick_lag should be increased so that the stored up movement commands are discarded. On the other hand, if you have a very fast network, you may wish to decrease tick_lag to speed up the response time to player commands.</p> <p>Often it is more convenient to set world.fps instead of world.tick_lag, since fps (frames per second) is an easier way to think of server ticks. world.tick_lag is 10 / world.fps and vice-versa, so a tick_lag of 0.25 is equal to 40 fps.</p> <p>If you set client.tick_lag or client.fps to a value other than 0, you can make the client tick at a different (usually faster) rate.</p>"},{"location":"world/proc/GetScores/#tick_usage-var-world_1","title":"tick_usage var (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>tick_lag var (world) </p> <p>Tick proc (world) </p> <p>This is the approximate percentage of the server tick that has been used already. A value under 100 means there's time to do more calculations, which can include any pending procs that are still waiting to run on this tick. When the value is over 100, the tick is running long and your world will experience lag.</p> <p>Keep in mind that sending maps to clients is the last thing that happens during a tick, except for handling any events such as player commands that might arrive before the next tick begins. Therefore in a verb,</p> <p>tick_usage</p> <p>might have a higher value than you would expect to see in a proc that loops and sleeps.</p>"},{"location":"world/proc/GetScores/#time-var-world_1","title":"time var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>tick_lag var (world) </p> <p>This gives the amount of time (in 1/10 seconds) that the world has been running. In actual fact, it is the number of server ticks that have passed multiplied by world.tick_lag. Therefore if the server sleeps (when no players are connected) this time is not counted. Also, if the server runs overtime during a tick (because procs take longer than tick_lag to finish) this still only counts as one tick. This value is therefore a measure of \"game time\" rather than real time.</p>"},{"location":"world/proc/GetScores/#timeofday-var-world_1","title":"timeofday var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>time var (world) </p> <p>time2text proc </p> <p>This is the time (in 1/10 seconds) since 00:00:00 GMT today. It is basically identical to  <code>world.realtime</code>   but doesn't include any information about the date. This is a much smaller number; hence it is more accurate.</p>"},{"location":"world/proc/GetScores/#timezone-var-world_1","title":"timezone var (world)","text":"<p>See also: </p> <p>realtime var (world) </p> <p>timeofday var (world) </p> <p>timezone var (client) </p> <p>time2text proc </p> <p>This is the time offset from UTC, in hours, for the world's time zone. It can be used in the</p> <p>time2text()</p> <p>proc, although it is the default time zone for that proc.</p>"},{"location":"world/proc/GetScores/#turf-var-world_1","title":"turf var (world)","text":"<p>Default value: </p> <p>/turf.</p> <p>This is the default turf type to be placed on the map wherever no turf is specified. A value of 0 turns off the default turf.</p>"},{"location":"world/proc/GetScores/#url-var-world_1","title":"url var (world)","text":"<p>See also: </p> <p>address var (world) </p> <p>This is the full network address of the world. (For example, byond://dan.byond.com:6005.)</p>"},{"location":"world/proc/GetScores/#version-var-world_1","title":"version var (world)","text":"<p>See also: </p> <p>hub var (world) </p> <p>Default value: </p> <p>0</p> <p>If you are distributing your game to players, you can use this variable to automatically notify them of new releases. To do so, you will first need to set  <code>world.hub</code>  to the hub path of your game. You can then advertise the current version by configuring that value in your  hub console   .</p> <p>When players boot up an outdated version of your game (as indicated by comparing  <code>world.version</code>   with the version advertised by BYOND hub), they will be notified of the new release.</p>"},{"location":"world/proc/GetScores/#view-var-world_1","title":"view var (world)","text":"<p>See also: </p> <p>lazy_eye var (client) </p> <p>show_map var (client) </p> <p>view proc </p> <p>view var (client) </p> <p>Default value: </p> <p>5</p> <p>Possible values: </p> <p>-1 to 34 or \"WIDTHxHEIGHT\"</p> <p>This is the default map viewport range. The default value of 5 produces an 11x11 viewport. A value of -1 turns off the map display altogether. The client may automatically scale down icons in order to conveniently fit the map on the player's screen.</p> <p>For non-square views, you can assign this to a text string of the form \"WIDTHxHEIGHT\". For example, \"11x11\" is equivalent to a view depth of 5, but you could make it wider like this: \"13x11\".</p> <p>This setting also affects the default range of the  <code>view()</code>   ,  <code>oview()</code>   ,  <code>range()</code>   , and  <code>orange()</code>   procedures.</p> <p>If the entire map is small enough to fit on one screen  (arbitrarily defined to be 21x21 or less), the default  <code>view</code>   is automatically adjusted to fit the map. In this case,  <code>client.lazy_eye</code>   is also automatically turned on by default, since you probably don't want the map to scroll around.</p>"},{"location":"world/proc/GetScores/#visibility-var-world_1","title":"visibility var (world)","text":"<p>See also: </p> <p>OpenPort proc (world) </p> <p>hub var (world) </p> <p>Default value: </p> <p>1 (visible)</p> <p>This controls whether the world advertises itself in the  BYOND Hub   when it has an open network port for accepting players. The visibility of the world still depends on whether any of the connected players has their location reporter turned on, and that in turn relies on the pager being turned on.</p>"},{"location":"world/proc/GetScores/#special-notes_1","title":"Special notes","text":"<p>This section of the reference should help explain some concepts that may be harder to understand or that can use more clarification.</p> <p>Language features </p> <p>Numbers </p> <p>Regular expressions </p> <p>Unicode </p> <p>Icons </p> <p>Big icons </p> <p>Tiled icons </p> <p>Map formats </p> <p>Topdown maps </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Movement </p> <p>Gliding </p> <p>Pixel movement </p> <p>Display </p> <p>Understanding the renderer </p> <p>HUD / screen objects </p> <p>Color matrix </p> <p>Filter effects </p> <p>Particle effects </p> <p>Color gradient </p> <p>Generators </p> <p>Projection matrix </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p>"},{"location":"world/proc/GetScores/#background_layer_1","title":"BACKGROUND_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>BACKGROUND_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>The purpose of this value is to make an atom appear below any regular atoms, even if they share the same plane. In an isometric map for instance, HUD objects will always appear above the map, but makeing a HUD object appear behind the map was basically impossible without this feature until</p> <p>plane</p> <p>was implemented.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>BACKGROUND_LAYER + OBJ_LAYER</p> <p>.</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>and</p> <p>EFFECTS_LAYER</p> <p>, but it will take precedence over both. Anything with</p> <p>BACKGROUND_LAYER</p> <p>will always appear below anything without it on the same plane.</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#big-icons_1","title":"Big icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>BYOND allows you to use icons that are not the same size as the tile size defined in world.icon_size. These icons can be manipulated with the /icon datum using their raw, native size, and shown on the map in full size. To use the old behavior where an atom can display only an icon of the normal tile size, use the TILED_ICON_MAP value for map_format instead.</p> <p>When you use an icon of non-standard size on an atom, the icon is \"anchored\" to the southwest corner of the atom. If you are using a top-down view (world.map_format=TOPDOWN_MAP), the icon will appear to spread out further to the east and north. In an isometric map (world.map_format=ISOMETRIC_MAP), the icon will cover additional tiles north and east as well. The \"footprint\" of an isometric icon--the actual map tiles it covers--is always square, so if your tile size is 64x64 and you use a 128x64 icon, the 128-pixel width means the icon will cover a 2x2 section of map tiles.</p> <p>It is important to remember that using a big icon is a visual effect  only   . It will not affect how the atom bumps into other atoms or vice-versa.</p> <p>Big icons will affect layering--the order in which icons are drawn. In general, because a big icon is covering more than one tile of the map, it will try to draw above any other tiles in that space that are on the same layer. This way, you can set a turf to use a big icon without having to change the turfs to the north and east. If an atom has a big icon, any overlays and underlays attached to it will be pulled forward as well, so they will draw in front of anything on their same layer. In isometric mode this is about the same, except that the layer isn't that important--anything in the way will just be moved back behind the big icon.</p> <p>Note: Big overlays will not \"pull forward\" on their own. If the main atom uses a single-tile icon, a big overlay attached to it will not try to draw in front of other icons on the same layer. This is so that name labels, health bar overlays, etc. will not cause any odd behavior. To be safe, you should always specify a layer when adding an overlay.</p> <p>In isometric mode, layering is affected by the \"distance\" between the atom and the viewer, so putting a regular-sized icon and part of a big icon on the same tile could cause layering oddities. Tiles that are covered by a big icon will tend to be drawn behind the big icon as mentioned above. For this reason, any atoms whose icons cover more than one tile (the extra height of an isometric icon doesn't count) should always be dense, and you should block movement onto any tile covered by them.</p> <p>When manipulating icons with the /icon datum, you can still use Blend() to combine icons of different sizes. By default, the icons will be lined up at their southwest corners. You can change the position at which the second icon is blended.</p>"},{"location":"world/proc/GetScores/#color-gradient_1","title":"Color gradient","text":"<p>See also: </p> <p>gradient proc </p> <p>color var (atom) </p> <p>Particle effects </p> <p>Color space </p> <p>A color gradient is a special list that defines a range of colors that you can smoothly interpolate between. A simple example is a gradient from red to white:</p>"},{"location":"world/proc/GetScores/#_94","title":"GetScores","text":"<p>Example:</p> <p>list(\"red\", \"white\") // OR list(0, \"red\", 1, \"white\")</p> <p>Applying a number like 0.2 to this gradient would give you a color that's 20% of the way from red to white. More complex gradients however are also possible.</p> <p>The format of a gradient is a list that contains a number (the position along the gradient, from 0 to 1 unless you use values outside that range) followed by a color. You can have as complex a gradient as you like. If you reuse the same number twice in a row, the gradient will have a sudden color change at that point.</p> <p>It is also possible to skip numbers or colors, and they will be filled in automatically with the previous number or color. The exceptions are at the beginning and ends of the list; at the end of the gradient, the last color is assigned a number 1 by default, and the first is assigned 0. If you skip colors at the beginning, they will be filled in with the first color you use.</p> <p>Include \"loop\" anywhere in the list to make this a looped gradient. If you don't, any numbers outside the gradient's range will be clamped to that range. E.g., in a normal gradient ranging from 0 to 1, a number of 1.2 is interpreted as 1 without a loop and 0.2 with a loop.</p> <p>Here are some more examples:</p>"},{"location":"world/proc/GetScores/#_95","title":"GetScores","text":"<p>Example:</p> <p>// color wheel; ranges 0 to 6 and loops list(0, \"#f00\", 1, \"#ff0\", 2, \"#0f0\", 3, \"#0ff\", 4, \"#00f\", 5, \"#f0f\", 6, \"#f00\", \"loop\")</p> <p>// 10% each red, yellow, green, blue, with a 20% transition zone between each // notice no color follows 0.4 or 0.7, so the previous color is used list(0.1, \"#f00\", 0.3, \"#ff0\", 0.4, 0.6, \"#008000\", 0.7, 0.9, \"#00f\")</p> <p>// green and black stripes list(0.5, \"#008000\", 0.5, \"#000000\", \"loop\")</p> <p>You can also include \"space\" in the list, and give it an associated value that describes the color space this gradient uses to interpolate between colors. For instance,</p> <p>\"space\"=COLORSPACE_HSL</p> <p>will use HSL interpolation instead of the default RGB. See  Color space   for more information.</p>"},{"location":"world/proc/GetScores/#_96","title":"GetScores","text":"<p>Example:</p> <p>// color wheel with a different color space list(0, \"#f00\", 3, \"#0ff\", 6, \"#f00\", \"loop\", \"space\"=COLORSPACE_HSLA)</p> <p>Currently, color gradients are only used by particle effects and the  [gradient</p> <p>proc](#/proc/gradient)   . With particles, if you use a gradient the particle's color is given as a number, and that number is used to look up its real color from the gradient. The number can change over time, thus changing the particle's color.</p>"},{"location":"world/proc/GetScores/#color-matrix_1","title":"Color matrix","text":"<p>See also: </p> <p>color var (atom) </p> <p>color var (client) </p> <p>MapColors proc (icon) </p> <p>A color matrix is used to transform colors, in the same way that a matrix represented by the</p> <p>/matrix</p> <p>datum is used to transform 2D coordinates. A transformation matrix is 3x3, of which only 6 values are needed because the last column is always the same. A color matrix, because it transforms four different numbers instead of two, is 5x5.</p> <pre><code>                |rr rg rb ra 0|\n                |gr gg gb ga 0|\n[r g b a 255] x |br bg bb ba 0| = [r' g' b' a' 255]\n                |ar ag ab aa 0|\n                |cr cg cb ca 1|\n\n</code></pre> <p>In easier-to-understand terms, this is how the result is calculated:</p> <p>new_red = red * rr + green * gr + blue * br + alpha * ar + 255 * cr new_green = red * rg + green * gg + blue * bg + alpha * ag + 255 * cg new_blue = red * rb + green * gb + blue * bb + alpha * ab + 255 * cb new_alpha = red * ra + green * ga + blue * ba + alpha * aa + 255 * ca</p> <p>It is helpful to think of each row in the matrix as what each component of the original color will become. The first row of the matrix is the rgba value you'll get for each unit of red; the second is what each green becomes, and so on.</p> <p>Because the fifth column of the matrix is always the same, only 20 of the values need to be provided. You can use a color matrix with atom.color or client.color in any of the following ways:</p> <p>RGB-only (9 to 12 values)</p> <p>list(rr,rg,rb, gr,gg,gb, br,bg,bb, cr,cg,cb)</p> <p>RGBA (16 to 20 values)</p> <p>list(rr,rg,rb,ra, gr,gg,gb,ga, br,bg,bb,ba, ar,ag,ab,aa, cr,cg,cb,ca)</p> <p>Row-by-row (3 to 5</p> <p>rgb()</p> <p>values, or null to use the default row)</p> <p>list(red_row, green_row, blue_row, alpha_row, constant_row)</p> <p>Reading a color var that has been set to a matrix will return the full 20-item list, where every 4 items represent a row in the matrix (without the fifth column).</p> <p>In the</p> <p>MapColors()</p> <p>icon proc, the values are sent as arguments, not as a list.</p>"},{"location":"world/proc/GetScores/#effects_layer_1","title":"EFFECTS_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>EFFECTS_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>The purpose of this value is to make an atom appear above any regular atoms. For instance, in an isometric map if you want to display a character's name below them, it does not make much sense to have nearer objects cover up that name, so you can tell the name overlay to use</p> <p>EFFECTS_LAYER + MOB_LAYER</p> <p>and it will show up on top of all the normal icons on the map. This has been somewhat obviated by</p> <p>plane</p> <p>but may still be useful in some cases.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>EFFECTS_LAYER + OBJ_LAYER</p> <p>.</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>, in non-topdown map formats. Anything in</p> <p>TOPDOWN_LAYER</p> <p>will display on top of</p> <p>EFFECTS_LAYER</p> <p>, and</p> <p>TOPDOWN_LAYER + EFFECTS_LAYER</p> <p>will be above both.</p> <p>This can also be mixed with</p> <p>BACKGROUND_LAYER</p> <p>, which takes priority over everything else.</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#filter-effects_1","title":"Filter effects","text":"<p>See also: </p> <p>filters var (atom) </p> <p>appearance_flags var (atom) </p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>Filters are a way of adding special effects to an icon, or a group of icons (see</p> <p>KEEP_TOGETHER</p> <p>in  appearance_flags   ), by post-processing the image. A filter object describes a specific form of image processing, like for instance a blur or a drop shadow. Filters can be added or removed at will, and can even be animated.</p> <p>A filter is created by using the  filter proc   like so:</p> <p>// halo effect mob.filters += filter(type=\"drop_shadow\", x=0, y=0,\\  size=5, offset=2, color=rgb(255,255,170))</p> <p>These are the filters currently supported:</p> <ul> <li>Alpha mask</li> <li>Angular blur</li> <li>Bloom</li> <li>Color matrix</li> <li>Displacement map</li> <li>Drop shadow</li> <li>Gaussian blur</li> <li>Layering (composite)</li> <li>Motion blur</li> <li>Outline</li> <li>Radial blur</li> <li>Rays</li> <li>Ripple</li> <li>Wave</li> </ul>"},{"location":"world/proc/GetScores/#alpha-mask-filter_1","title":"Alpha mask filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"alpha\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of mask (defaults to 0)</p> <p>y: Vertical offset of mask (defaults to 0)</p> <p>icon: Icon to use as a mask</p> <p>render_source:</p> <p>render_target</p> <p>to use as a mask</p> <p>flags: Defaults to 0; use see below for other flags</p> <p>Uses an icon or render target as a mask over this image. Every pixel that is transparent in either the image or the mask, is transparent in the result.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the mask is centered over the center of the image.</p> <p>The</p> <p>MASK_INVERSE</p> <p>flag will invert the alpha mask so that opaque areas in the mask become transparent, and vice-versa. There is also a</p> <p>MASK_SWAP</p> <p>flag which treats the source image as the mask and vice-versa, which might be useful for some effects.</p> <p>Note: Unlike many other filters, this filter  is   taken into account for mouse-hit purposes.</p>"},{"location":"world/proc/GetScores/#angular-blur-filter_1","title":"Angular blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Radial blur (filters) </p> <p>Motion blur (filters) </p> <p>Format:</p> <p>filter(type=\"angular_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount in a circular formation, as if the image is spinning. The size of the blur can roughly be thought of in \"degrees\" worth of blur. As the distance from the center increases, the blur becomes more noticeable since the same amount of angular motion has to travel farther along a circle.</p> <p>Typically this blur is used with an entire plane, but it could be used to give a sense of motion blur to a spinning object.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will appear where</p> <p>size</p> <p>\u00d7 distance is greater than about 300. You can increase accuracy by breaking up large sizes into multiple filter passes with differing sizes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p>"},{"location":"world/proc/GetScores/#bloom-filter_1","title":"Bloom filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"bloom\", ...)</p> <p>Args:</p> <p>threshold: Color threshold for bloom</p> <p>size: Blur radius of bloom effect (see Gaussian blur)</p> <p>offset: Growth/outline radius of bloom effect before blur</p> <p>alpha: Opacity of effect (default is 255, max opacity)</p> <p>Post-processing effect that makes bright colors look like they're a strong light source, spreading their light additively to other nearby pixels. This is a complex effect that involves multiple shader passes. For both performance and visual reasons, it is usually best applied to an entire plane rather than to individual objects.</p> <p>The color</p> <p>threshold</p> <p>determines which pixels this effect applies to. If any of the red, green, or blue components of the pixel are greater than the same component for the threshold, that pixel will bloom. The blooming pixels then have their colors spread outward to create a glow that gets added to the original image.</p> <p>The</p> <p>offset</p> <p>and</p> <p>size</p> <p>parameters are used to control the glow effect. They work the same as they do in the drop shadow filter:</p> <p>offset</p> <p>causes the light to grow outwards, and a blur of</p> <p>size</p> <p>is then applied to soften it. Often just using a blur alone will produce a pleasing effect. By playing with these two values you can make the bloom effect appear differently.</p> <p>The</p> <p>alpha</p> <p>value is applied to any light contributions from bloomed pixels that get added to the original image, so values lower than 255 can make the effect less pronounced. This can be very useful if you choose to animate the filter.</p>"},{"location":"world/proc/GetScores/#gaussian-blur-filter_1","title":"Gaussian blur filter","text":"<p>See also: </p> <p>Motion blur (filters) </p> <p>Radial blur (filters) </p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"blur\", ...)</p> <p>Args:</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount. The size of the blur can roughly be thought of in \"pixels\" worth of blur.</p> <p>Note: Large blurs will result in reduced performance. The highest size that can be handled easily in this filter is 6. Higher sizes require multiple passes, although the filter will \"cheat\" and use low-quality passes for much higher sizes.</p>"},{"location":"world/proc/GetScores/#color-matrix-filter_1","title":"Color matrix filter","text":"<p>See also: </p> <p>color var (atom) </p> <p>Color matrix </p> <p>Color space </p> <p>Format:</p> <p>filter(type=\"color\", ...)</p> <p>Args:</p> <p>color: A color matrix</p> <p>space: Value indicating color space: defaults to</p> <p>FILTER_COLOR_RGB</p> <p>Applies a color matrix to this image. Unlike with the atom.color var, you can apply color conversions other than the regular RGBA color space, depending on the value of</p> <p>space</p> <p>. See  Color space   for more information.</p>"},{"location":"world/proc/GetScores/#displacement-map-filter_1","title":"Displacement map filter","text":"<p>See also: </p> <p>Alpha mask (filters) </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"displace\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of map (defaults to 0)</p> <p>y: Vertical offset of map (defaults to 0)</p> <p>size: Maximum distortion, in pixels</p> <p>icon: Icon to use as a displacement map</p> <p>render_source:</p> <p>render_target</p> <p>to use as a displacement map</p> <p>Uses an icon or render target as a template for various warping effects on the main image.</p> <p>In the displacement map, pixels that have a higher red component will make the image appear to warp to the left, lower reds warp it to the right, and gray (r=128) will cause no horizontal warping. The green component affects the vertical: higher to warp upward, lower to warp downward. Transparent pixels in the displacement map will have no effect.</p> <p>This can be used for very complex distortion, unlike other distortion filters such as wave and ripple that are confined to specific equations.</p>"},{"location":"world/proc/GetScores/#drop-shadow-filter_1","title":"Drop shadow filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Outline (filters) </p> <p>Format:</p> <p>filter(type=\"drop_shadow\", ...)</p> <p>Args:</p> <p>x: Shadow horizontal offset (defaults to 1)</p> <p>y: Shadow horizontal offset (defaults to -1)</p> <p>size: Blur amount (defaults to 1; negative values create inset shadows)</p> <p>offset: Size increase before blur (defaults to 0)</p> <p>color: Shadow color (defaults to 50% transparent black)</p> <p>Applies a drop shadow to this image. This is a combination of multiple filters, since it will apply an outline if</p> <p>offset</p> <p>is included, a Gaussian blur to the shadow, and will underlay the shadow beneath the image.</p> <p>You can also think of this filter as an outer glow.</p> <p>If you use a</p> <p>size</p> <p>less than 0, the shadow will appear inside the image instead. This would be an inset shadow, or inner glow.</p>"},{"location":"world/proc/GetScores/#layering-composite-filter_1","title":"Layering (composite) filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Format:</p> <p>filter(type=\"layer\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of second image (defaults to 0)</p> <p>y: Vertical offset of second image (defaults to 0)</p> <p>icon: Icon to use as a second image</p> <p>render_source:</p> <p>render_target</p> <p>to use as a second image</p> <p>flags:</p> <p>FILTER_OVERLAY</p> <p>(default) or</p> <p>FILTER_UNDERLAY</p> <p>color:  Color   or color matrix to apply to second image</p> <p>transform:  Transform   to apply to second image</p> <p>blend_mode:  Blend mode   to apply to the top image</p> <p>Composites another image over or under this image. Using the</p> <p>FILTER_OVERLAY</p> <p>flag, which is the default, puts the second image on top of what's already here.</p> <p>FILTER_UNDERLAY</p> <p>puts it underneath.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the second image is centered over the center of the first.</p> <p>The</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>blend_mode</p> <p>vars are available for convenience. Because the bottom image is drawn over a blank background,</p> <p>blend_mode</p> <p>is always applied to the top image. All of the other vars apply to the second image being drawn.</p> <p>Note: Transforms use default bilinear scaling, since  PIXEL_SCALE   is not available here.</p> <p>Note: Like most other filters, this filter is  not   taken into account for mouse-hit purposes. Any layered icons will be strictly visual.</p>"},{"location":"world/proc/GetScores/#motion-blur-filter_1","title":"Motion blur filter","text":"<p>See also: </p> <p>filters var (atom) </p> <p>Gaussian blur (filters) </p> <p>Format:</p> <p>filter(type=\"motion_blur\", ...)</p> <p>Args:</p> <p>x: Blur vector on the X axis (defaults to 0)</p> <p>y: Blur vector on the Y axis (defaults to 0)</p> <p>Applies Gaussian blur in one direction only. The amount and direction are both specified by</p> <p>x</p> <p>and</p> <p>y</p> <p>. The size of the blur is equal to</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>See  Gaussian blur   for more information.</p>"},{"location":"world/proc/GetScores/#outline-filter_1","title":"Outline filter","text":"<p>See also: </p> <p>Drop shadow (filters) </p> <p>Format:</p> <p>filter(type=\"outline\", ...)</p> <p>Args:</p> <p>size: Width in pixels (defaults to 1)</p> <p>color: Outline color (defaults to black)</p> <p>flags: Defaults to 0 (see below)</p> <p>Applies an outline to this image.</p> <p>At larger sizes, the outline is less accurate and will take more passes to produce. Performance and appearance are best at sizes close to 1 or less.</p> <p>flags</p> <p>can be a combination of the following values:</p> <p>0</p> <p>Ordinary outline</p> <p>OUTLINE_SHARP</p> <p>Avoid antialiasing in the outline</p> <p>OUTLINE_SQUARE</p> <p>Extend the outline sharply from corner pixels; for a box this will maintain a box shape without rounded corners</p>"},{"location":"world/proc/GetScores/#radial-blur-filter_1","title":"Radial blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Angular blur (filters) </p> <p>Motion blur (filters) </p> <p>Format:</p> <p>filter(type=\"radial_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur per pixel of distance (defaults to 0.01)</p> <p>Blurs the image by a certain amount outward from the center, as if the image is zooming in or out. As the distance from the center increases, the amount of blurring increases, and near the center the blur is hardly visible at all. The</p> <p>size</p> <p>value is smaller by default for this filter than it is for other filters, since it's typically used with an entire plane where the distance from the center can easily be several hundred pixels.</p> <p>Typically this blur is used with an entire plane.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will begin when</p> <p>size</p> <p>\u00d7 distance is greather than 6. You can increase accuracy by breaking up large sizes into multiple filter passes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p>"},{"location":"world/proc/GetScores/#rays-filter_1","title":"Rays filter","text":"<p>Format:</p> <p>filter(type=\"rays\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ray center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ray center, relative to image center (defaults to 0)</p> <p>size: Maximum length of rays (defaults to 1/2 tile width)</p> <p>color: Ray color (defaults to white)</p> <p>offset: \"Time\" offset of rays (defaults to 0, repeats after 1000)</p> <p>density: Higher values mean more, narrower rays (defaults to 10, must be whole number)</p> <p>threshold: Low-end cutoff for ray strength (defaults to 0.5, can be 0 to 1)</p> <p>factor: How much ray strength is related to ray length (defaults to 0, can be 0 to 1)</p> <p>flags: Defaults to</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>(see below)</p> <p>Draws random rays that radiate outward from a center point. (That point may be outside of the image.) As they move outward, their alpha value diminishes linearly. These are meant to be animated. The</p> <p>offset</p> <p>value determines the \"time\", where every jump of +1 can be a very different set of rays, and every 1000 units this filter will repeat.</p> <p>The</p> <p>threshold</p> <p>value can be thought of as a way of culling lower-strength rays. Ray strength is anywhere from 0 to 1 at any given angle, but values below</p> <p>threshold</p> <p>may as well be 0. Values above that are re-scaled into a range of 0 to 1.</p> <p>The</p> <p>factor</p> <p>parameter allows you to tie the ray's length to its strength. At 0, the length of every ray is the same. At 1, the length ranges from 0 to</p> <p>size</p> <p>. Generally speaking, the higher</p> <p>factor</p> <p>is, the more the rays will appear to move outward as they strengthen and inward as they weaken.</p> <p>Ray</p> <p>color</p> <p>can be provided as a matrix. Only the diagonal values of the color matrix will be used, but using a matrix will allow you to set values outside of the normal color range.</p> <p>flags</p> <p>can have the following values:</p> <p>0</p> <p>The rays are drawn alone, erasing the existing image (useful for some effects).</p> <p>FILTER_OVERLAY</p> <p>The rays are overlaid on top of the existing image.</p> <p>FILTER_UNDERLAY</p> <p>The rays are drawn underneath the existing image.</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>Default. For plane masters, this will use the</p> <p>FILTER_OVERLAY</p> <p>behavior and draw the rays over the plane, and for all other images it will default to</p> <p>FILTER_UNDERLAY</p> <p>to draw the rays beneath them.</p>"},{"location":"world/proc/GetScores/#ripple-filter_1","title":"Ripple filter","text":"<p>See also: </p> <p>Wave (filters) </p> <p>Format:</p> <p>filter(type=\"ripple\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ripple center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ripple center, relative to image center (defaults to 0)</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>repeat: Wave period, in pixels (defaults to 2)</p> <p>radius: Outer radius of ripple, in pixels (defaults to 0)</p> <p>falloff: How quickly ripples lose strength away from the outer edge (defaults to 1)</p> <p>flags: Defaults to 0; use</p> <p>WAVE_BOUNDED</p> <p>to keep distortion within the image</p> <p>Applies a ripple distortion effect to this image.</p> <p>This filter is meant to be animated. A good animation will typically start at a</p> <p>radius</p> <p>of 0 and animate to a larger value, with</p> <p>size</p> <p>decreasing to 0.</p> <p>The</p> <p>falloff</p> <p>parameter can be tweaked to your liking. A value of 1 should look reasonably like ripples in water, with the inner ripples losing strength. A value of 0 will cause no reduction in strength.</p> <p>The equation governing the ripple distortion is size \u00d7 sin(2\u03c0r') \u00f7 (2.5 \u00d7 falloff \u00d7 r'  2   + 1), where r' = (radius - distance) \u00f7 repeat.</p> <p>Up to 10 ripples can be stacked together in a single pass of the filter, as long as they have the same</p> <p>repeat</p> <p>,</p> <p>falloff</p> <p>, and</p> <p>flags</p> <p>values. (See the wave filter for the</p> <p>WAVE_BOUNDED</p> <p>flag.)</p>"},{"location":"world/proc/GetScores/#wave-filter_1","title":"Wave filter","text":"<p>See also: </p> <p>Ripple (filters) </p> <p>Format:</p> <p>filter(type=\"wave\", ...)</p> <p>Args:</p> <p>x: Horiztonal direction and period of wave</p> <p>y: Vertical direction and period of wave</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>offset: Phase of wave, in periods (e.g., 0 to 1)</p> <p>flags: Defaults to 0; see below for other flags</p> <p>Applies a wave distortion effect to this image.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>parameters specify both the direction and period of the wave; the period is</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>This filter is meant to be animated, from whatever</p> <p>offset</p> <p>you want to</p> <p>offset+1</p> <p>, and then repeating. With multiple waves, you can produce a very convincing water effect.</p>"},{"location":"world/proc/GetScores/#_97","title":"GetScores","text":"<p>Example</p> <p>#define WAVE_COUNT 7 atom/proc/WaterEffect()  var/start = filters.len  var/X,Y,rsq,i,f  for(i=1, i&lt;=WAVE_COUNT, ++i)  // choose a wave with a random direction and a period between 10 and 30 pixels  do  X = 60*rand() - 30  Y = 60*rand() - 30  rsq = X*X + Y*Y  while(rsq&lt;100 || rsq&gt;900) // keep trying if we don't like the numbers  // keep distortion (size) small, from 0.5 to 3 pixels  // choose a random phase (offset)  filters += filter(type=\"wave\", x=X, y=Y, size=rand()*2.5+0.5, offset=rand())  for(i=1, i&lt;=WAVE_COUNT, ++i)  // animate phase of each wave from its original phase to phase-1 and then reset;  // this moves the wave forward in the X,Y direction  f = filters[start+i]  animate(f, offset=f:offset, time=0, loop=-1, flags=ANIMATION_PARALLEL)  animate(offset=f:offset-1, time=rand()*20+10)</p> <p>The equation governing the wave distortion is size \u00d7 sin(2\u03c0(d - offset)), where d is the number of wave periods' distance from the center along the x, y direction.</p> <p>The</p> <p>WAVE_SIDEWAYS</p> <p>flag will cause the distortion to be transverse (perpendicular) to the wave instead of in the same direction as the wave. The</p> <p>WAVE_BOUNDED</p> <p>flag limits the distortion to the confines of this image, instead of lettings its pixels spill out a little further from the distortion (and likewise, transparent pixels spill inward).</p> <p>Up to 10 waves can be stacked together in a single pass of the filter, as long as they have the same</p> <p>WAVE_BOUNDED</p> <p>flags.</p>"},{"location":"world/proc/GetScores/#generators_1","title":"Generators","text":"<p>See also: </p> <p>Particle effects </p> <p>generator proc </p> <p>color var (atom) </p> <p>Color matrix </p> <p>A generator is an object that can produce a random number, vector (list of 3 numbers), color (as a text string), or color matrix (list of 20 numbers) in a specified range according to rules you set down. It is used primarily for particle effects, since it can run on the client.</p> <p>There are several types of generators:</p> <ul> <li>Numbers:   Generate a random real number.</li> <li>Vectors:   Generate a random vector.</li> <li>Shapes:   Generate a random vector within a specific shaped region.</li> <li>Colors:   Generate a random color or color matrix.</li> </ul> <p>Generators can also be chained together with math operators and some procs. The second value can be a regular value instead of a generator, so for instance you can multiply a vector by 2, or by a matrix to transform it.</p> <p>|   Operators   |   Action   | | --- | --- | |   + - * /   |   Arithmetic operators. You can multiply a 3D vector by a color matrix (where red,green,blue in the matrix correspond to x,y,z) to do a 3D transform, or by a 2D matrix for a 2D transform.   | |   - (unary)   |   Negate the value, same as multiplying by -1.   | |   turn(), generator.Turn()   |   Rotate a vector clockwise in the XY plane.   |</p>"},{"location":"world/proc/GetScores/#gliding_1","title":"Gliding","text":"<p>See also: </p> <p>Pixel movement </p> <p>animate_movement var (movable atom) </p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>Gliding is a \"glitz\" effect applied by BYOND to cover up the visual sins of tile-based movement, by making objects and the map appear to move smoothly from one tile to another instead of immediately jumping. It is also available to smooth over small jumps in pixel movement that might occur, for instance if the client FPS is set higher than the server's.</p> <p>To control the gliding speed of an atom, set  <code>glide_size</code>   to the value of your choice. If this is not set, the client will attempt to adjust the speed manually.  <code>glide_size</code>   is measured in server ticks, so if  <code>client.fps</code>   is set to a value greater than  <code>world.fps</code>   , it will be scaled appropriately.</p> <p>Whether an object glides or jumps is based on how far it moves relative to its</p> <p>step_size</p> <p>value, which by default is a full tile width. If the movement goes too far past</p> <p>step_size</p> <p>in the X or Y directions, it's no longer a glide.</p> <p>The</p> <p>animate_movement</p> <p>var can be used to control the way in which an object glides, or suppress gliding altogether.</p> <p>By using the</p> <p>LONG_GLIDE</p> <p>flag in</p> <p>appearance_flags</p> <p>, a diagonal glide will take just as long as a cardinal-direction glide by moving a fullt</p> <p>glide_size</p> <p>pixels in the dominant X or Y direction. Otherwise, gliding tries to move by that many pixels in strict Euclidean distance (a straight line) and diagonal glides take longer.</p> <p>In  LEGACY_MOVEMENT_MODE   , gliding is turned off if you set any of the bound or step vars for an atom to a non-default value. The only gliding that occurs in this case is when client.fps is higher than world.fps. All other movement modes base gliding on an atom's</p> <p>glide_size</p> <p>value.</p>"},{"location":"world/proc/GetScores/#hud-screen-objects_1","title":"HUD / screen objects","text":"<p>See also: </p> <p>screen_loc var (movable atoms) </p> <p>screen var (client) </p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>HUD stands for Heads-Up Display, and refers to any atoms that appear on the screen but don't move when the player moves. These are also called screen objects. Any movable atom can be added to the HUD by setting its</p> <p>screen_loc</p> <p>var, and adding it to</p> <p>client.screen</p> <p>for each user who is supposed to see it. This can be used to display a character's vital stats, scores, etc.</p> <p>If you want to have something like a health meter or name attached to a moving atom, use overlays or</p> <p>/image</p> <p>objects instead. An</p> <p>/image</p> <p>object is similar to a screen object in that it can be shown to only certain players instead of being shown to everyone.</p> <p>The size of the screen depends on</p> <p>client.view</p> <p>(or</p> <p>world.view</p> <p>),</p> <p>world.map_format</p> <p>, and</p> <p>world.icon_size</p> <p>. In a normal topdown map format,</p> <p>client.view</p> <p>is the same as the screen size; in other map formats the screen might be a different size.</p> <p>The</p> <p>screen_loc</p> <p>var can be set to a value like</p> <p>\"1,1\"</p> <p>(the southwest tile of the screen),</p> <p>\"4,NORTH\"</p> <p>(fourth tile from the west, along the north side of the screen),</p> <p>\"SOUTHEAST\"</p> <p>, and so on. You can also include pixel offsets, percentages, and specify two corners to tile an icon repeatedly from one end to the other. See  screen_loc   for more details.</p> <p>screen_loc</p> <p>can also be used to stretch the bounds of the HUD. A value of</p> <p>\"0,0\"</p> <p>will cause the atom to appear to the southwest of the southwest-most tile on the visible map, outside of the regular map bounds. Using HUDs in this way, you can provide a nice decorative \"frame\" for your map.</p> <p>More complex</p> <p>You can use HUDs in other map controls as well, by preceding screen_loc with the name of the map you will use followed by a colon. For instance,</p> <p>screen_loc=\"map2:1,1\"</p> <p>will show an icon in the southwest corner of the</p> <p>map2</p> <p>control. The actual size of a secondary HUD is based on how far out the icons in it extend in any direction. If you have one icon at</p> <p>\"map2:1,1\"</p> <p>and another at</p> <p>\"map2:4,3\"</p> <p>, then that HUD will be four tiles wide and three high.</p>"},{"location":"world/proc/GetScores/#isometric-maps_1","title":"Isometric maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p></p> <p>Isometric projection is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions. If you look at a map top-down, each tile on the map is a square. The map is rotated 45\u00b0 clockwise and then tilted at an angle (30\u00b0) so that each square now looks like a foreshortened diamond from the viewer's perspective. What was once north now points to the northeast end of the viewer's screen; what was once east now points southeast to the viewer. Tiles that are more to the south or east are \"nearer\" to the viewer, and tiles that are north or west are \"farther\". The actual direction the map faces can be changed by using</p> <p>client.dir</p> <p>.</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>To use isometric mapping, set</p> <p>world.map_format</p> <p>to</p> <p>ISOMETRIC_MAP</p> <p>. You should set</p> <p>world.icon_size</p> <p>so the tile width is a multiple of 4 pixels. The width of the tile is highly important. The height of your tiles should be at least half that value. BYOND uses a 2:1 isometric format, meaning that the diamond base of each tile is half as high as its width. For example if you have a 64x64 tile size, every diamond in the map will be 64 pixels wide by 32 high, and you have an extra 32 pixels at the top of your icon for vertical projections like buildings. If you set the tile size to 64x80, the base is still a 64x32 diamond and you have 48 pixels left over for vertical structures.</p> <p>In this mode</p> <p>pixel_x</p> <p>and</p> <p>pixel_y</p> <p>will offset icons along the \"ground\". To adjust horizontal and vertical positions, use the</p> <p>pixel_w</p> <p>and</p> <p>pixel_z</p> <p>vars.</p>"},{"location":"world/proc/GetScores/#_98","title":"GetScores","text":"<p>Layers</p> <p>The</p> <p>layer</p> <p>var behaves differently in isometric mode. Because some tiles are nearer to the viewer than others, the tiles that are farther back need to be drawn first so they are behind any tiles that should go in front of them. So in isometric mode, the back row of tiles (a diagonal line of them) is drawn first, followed by the next row forward, and so on. The</p> <p>layer</p> <p>var only matters when icons overlap each other in the \"physical\" space, like an obj sitting on a turf.</p> <p>When pixel or step offsets, or gliding, place an object on multiple turfs, it is drawn on top of the nearer turf (assuming its layer is higher).</p> <p>Using icons wider than the regular tile size can have an impact on layering as well. See  Big icons   for more information.</p> <p>Because of the order in which icons are drawn, you may want to limit the ability of an atom to cut diagonally around corners. While moving northeast behind a dense wall, for instance, a mob might temporarily appear in front of the wall because its pixel offsets (from gliding) temporarily put it on the same tile as the wall. If you do not want to limit corner-cutting, a simple workaround for this case is to give the wall a higher layer than the mob.</p> <p>Screen objects (in</p> <p>client.screen</p> <p>) are always drawn on top of all isometric tiles, as is the case in other map modes as well.</p> <p>Since it may be desirable in some games to use a topdown map for some situations (like a special battle map), you can add</p> <p>TOPDOWN_LAYER</p> <p>to any atom's layer\u2014e.g.,</p> <p>TOPDOWN_LAYER+TURF_LAYER</p> <p>\u2014to make it appear in topdown mode. Topdown and isometric tiles really aren't meant to be mixed, but if they do mix you'll see topdown tiles always display above isometric tiles, just like screen objects do. The best way to use this is to apply</p> <p>TOPDOWN_LAYER</p> <p>to every tile in a certain part of the map that the players can't walk to.</p> <p>If you want to use an overlay that should not be covered by other \"nearer\" icons on the map, such as a name or health meter, you can add</p> <p>EFFECTS_LAYER</p> <p>to the overlay's layer. Icons with</p> <p>EFFECTS_LAYER</p> <p>will draw above regular icons. Then objects with</p> <p>TOPDOWN_LAYER</p> <p>will draw on top of everything else. However, be aware that</p> <p>EFFECTS_LAYER</p> <p>has largely been superseded by the</p> <p>plane</p> <p>var.</p>"},{"location":"world/proc/GetScores/#_99","title":"GetScores","text":"<p>Screen size</p> <p>In this mode,</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>is used to define the minimum number of map tiles you will see,  not   the screen/HUD size which is calculated from client.view. Extra map tiles are shown to fill out the screen size. HUD objects use screen coordinates, so 1,1 is still the lower left.</p> <p>The actual HUD size is always a full number of tiles, whose size is defined by</p> <p>world.icon_size</p> <p>. If you have a tile size of</p> <p>64x64</p> <p>, and</p> <p>world.view=6</p> <p>(a 13x13 map), a full 13x13 diamond of map tiles will be shown. The width of this diamond is 13 tiles. The height is only half that, plus whatever vertical space is needed to show the icons in that area. Then everything is rounded up to a full tile size, so the result is a 13x7-tile screen. This is the formula you need if you want to calculate the screen size:</p> <p>pixel_width = round(icon_width * (view_width + view_height) / 2) pixel_height = round(icon_width * (view_width + view_height - 2) / 4) + icon_height</p> <p>screen_width = round((pixel_width + icon_width - 1) / icon_width) screen_height = round((pixel_height + icon_height - 1) / icon_height)</p> <p>If you use</p> <p>TOPDOWN_LAYER</p> <p>, any topdown sections of the map will be limited to this same view.</p>"},{"location":"world/proc/GetScores/#numbers_1","title":"Numbers","text":"<p>In DM, all numbers are stored in floating point format. Specifically, single-precision (32-bit) floating point. This is important to know if you think you will be working with large numbers or decimal values a lot, because the accuracy of the numbers is limited.</p> <p>32-bit floating point numbers can represent integers from -16777216 to 16777216 (2  24   ). Non-integer values can get about as small as 2  -126   and as large as 2  127   .</p> <p>Floating point numbers do not handle most decimal values precisely. For instance, 0.1 is not exactly 0.1, because floating point numbers are stored in a binary format and in binary, 1/10 is a fraction that repeats forever\u2014the same way 1/3 repeats as 0.33333... in decimal numbers. It ends up being rounded off, either a little higher or a littler lower than its true value. This means that the following loop won't work like you might expect:</p>"},{"location":"world/proc/GetScores/#_100","title":"GetScores","text":"<p>Example:</p> <p>for(i = 0, i &lt; 100, i += 0.1)  world &lt;&lt; i</p> <p>You might expect that code to loop exactly 1000 times, with</p> <p>i</p> <p>going from 0 up to 99.9 before stopping. The truth is more complicated, because 0.1 stored in floating point is actually greater than the exact value of 0.1. Other values might be more or less than their exact numbers, and as you add these numbers together repeatedly you'll introduce more and more rounding error.</p> <p>Even more insidious, if you add 0.1 a bunch of times starting from 0, and then subtract it out again the same number of times, the result you get may not be 0. This is counterintuitive, because you might expect rounding errors to reverse themselves in the same order they crept in. Unfortunately it doesn't work that way.</p> <p>You can correct for rounding error somewhat by using the  [round</p> <p>proc](#/proc/round)   to adjust the loop var each time, although for performance reasons it might be preferable to find another alternative.</p> <p>for(i = 0, i &lt; 100, i = round(i + 0.1, 0.1))  world &lt;&lt; i</p> <p>Only fractions whose denominators are powers of 2 are immune to this rounding error, so 0.5 is in fact stored as an exact value.</p> <p>Another place floating point may lose accuracy is when you try to add numbers of very different sizes. For instance as stated above, the upper limit for accurate integers is 16777216. If you try to use a number such as 100 million it will only be approximate, so adding 1 to that number won't actually change it because the 1 is so much smaller, it will be gobbled up by rounding error.</p> <p>Also for the same reasons stated above, division will cost you accuracy. Again you can divide by powers of 2 easily enough, and you can divide an integer by any of its factors (like dividing 9 by 3) without a problem, but a fraction like 1/3 will repeat forever so it gets rounded to as much precision as floating point can manage.</p> <p>In decimal, floating point numbers have at least six decimal digits of precision. Since they're actually stored in binary, their true precision is exactly 24 bits.</p>"},{"location":"world/proc/GetScores/#particle-effects_1","title":"Particle effects","text":"<p>See also: </p> <p>particles (movable atom var) </p> <p>Generators </p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>A particle set is a special effect, whose computations are handled entirely on the client, that spawns and tracks multiple pixels or icons with a temporary lifespan. Examples of this might be confetti, sparks, rocket exhaust, or rain or snow. Particles are rendered on a special surface and that gets attached to an obj or a mob like an overlay.</p> <p>Particles can exist in 3 dimensions instead of the usual 2, so a particle's position, velocity, and other values may have a z coordinate. To make use of this z coordinate, you can use a  projection matrix   . (The value of the z coordinate must be between -100 and 100 after projection. Otherwise it's not guaranteed the particle will be displayed.)</p> <p>To create a particle set, use</p> <p>new</p> <p>to create a new</p> <p>/particles</p> <p>datum, and then you can set the datum's vars. The vars can be set to constant values, or generator functions that will allow the client to choose from a range of values when spawning those particles. (The easiest way to handle this is to create your own type that inherits from</p> <p>/particles</p> <p>, and set up the parameters you'll want at compile-time.)</p> <p>After the datum is created, it can be assigned to an obj or mob using their</p> <p>particles</p> <p>var. The particles will appear on the map wherever that obj or mob appears.</p>"},{"location":"world/proc/GetScores/#_101","title":"GetScores","text":"<p>Example:</p> <p>particles/snow  width = 500 // 500 x 500 image to cover a moderately sized map  height = 500  count = 2500 // 2500 particles  spawning = 12 // 12 new particles per 0.1s  bound1 = list(-1000, -300, -1000) // end particles at Y=-300  lifespan = 600 // live for 60s max  fade = 50 // fade out over the last 5s if still on screen  // spawn within a certain x,y,z space  position = generator(\"box\", list(-300,250,0), list(300,300,50))  // control how the snow falls  gravity = list(0, -1)  friction = 0.3 // shed 30% of velocity and drift every 0.1s  drift = generator(\"sphere\", 0, 2) obj/snow  screen_loc = \"CENTER\"  particles = new/particles/snow</p> <p>mob  proc/CreateSnow()  client?.screen += new/obj/snow</p> <p>These are the vars that can be used in a particle set. \"Tick\" refers to a BYOND standard tick of 0.1s.</p> <p>|   Particle vars that affect the entire set (generators are not allowed for these)   | | --- | |   Var   |   Type   |   Description   | |   width   |   num   |   Size of particle image in pixels   | |   height   | |   count   |   num   |   Maximum particle count   | |   spawning   |   num   |   Number of particles to spawn per tick (can be fractional)   | |   bound1   |   vector   |   Minimum particle position in x,y,z space; defaults to list(-1000,-1000,-1000)   | |   bound2   |   vector   |   Maximum particle position in x,y,z space; defaults to list(1000,1000,1000)   | |   gravity   |   vector   |   Constant acceleration applied to all particles in this set (pixels per squared tick)   | |   gradient   | color gradient  |   Color gradient used, if any   | |   transform   | matrix  |   Transform done to all particles, if any (can be higher than 2D)   | |   Vars that apply when a particle spawns   | |   lifespan   |   num   |   Maximum life of the particle, in ticks   | |   fade   |   num   |   Fade-out time at end of lifespan, in ticks   | |   fadein   |   num   |   Fade-in time, in ticks   | |   icon   |   icon   |   Icon to use, if any; no icon means this particle will be a dot</p> <p>Can be assigned a weighted list of icon files, to choose an icon at random   | |   icon_state   |   text   |   Icon state to use, if any</p> <p>Can be assigned a weighted list of strings, to choose an icon at random   | |   color   |   num or color   |   Particle color (not a color matrix); can be a number if a gradient is used   | |   color_change   |   num   |   Color change per tick; only applies if gradient is used   | |   position   |   num   |   x,y,z position, from center in pixels   | |   velocity   |   num   |   x,y,z velocity, in pixels   | |   scale   |   vector (2D)   |   Scale applied to icon, if used; defaults to list(1,1)   | |   grow   |   num   |   Change in scale per tick; defaults to list(0,0)   | |   rotation   |   num   |   Angle of rotation (clockwise); applies only if using an icon   | |   spin   |   num   |   Change in rotation per tick   | |   friction   |   num   |   Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift   | |   Vars that are evalulated every tick   | |   drift   |   vector   |   Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects   |</p> <p>The</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>values are special in that they can't be assigned a generator, but they can be assigned a constant icon or string, respectively, or a list of possible values to choose from like so:</p> <p>icon = list('confetti.dmi'=5, 'coin.dmi'=1)</p> <p>The list used can either be a simple list, or it can contain weights as shown above.</p> <p>Changing a var on a particle datum will make changes to future particles. For instance, you can set the datum's</p> <p>spawning</p> <p>var to 0 to make it stop creating new particles. (Note: If you are changing a vector or color matrix, such as</p> <p>gravity</p> <p>, you need to assign a new value. You can't for instance set</p> <p>particles.gravity[2] = 0</p> <p>because it won't do anything to update the particle stream.)</p> <p>The same particle datum can be assigned to more than one movable atom. However the particles displayed by each atom will be different.</p>"},{"location":"world/proc/GetScores/#pixel-movement_1","title":"Pixel movement","text":"<p>See also: </p> <p>Bounding boxes </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Pixel movement is a concept that allows atoms to escape the constraints of BYOND's historically tile-based movement, and move in smaller steps. In the past this had to be done with soft code, but that was sometimes inconvenient and it did not perform as well in projects with many objects moving.</p> <p>The key to understanding pixel movement is to use the bound and step vars. You use the bound family of vars to define a bounding box for a movable atom, instead of just making it one full tile in size. The step vars can give it a movement speed and offset it from the corner of the tile it's standing on.</p> <ul> <li>bound_x: The left edge of the bounding box</li> <li>bound_y: The bottom edge of the bounding box</li> <li>bound_width: Width of the bounding box</li> <li>bound_height: Height of the bounding box</li> <li>step_size: default movement speed</li> <li>step_x: x offset from the corner of loc</li> <li>step_y: y offset from the corner of loc</li> </ul> <p>Those are for movable atoms only; they do not apply to turfs.</p> <p>If  world.movement_mode   is set to</p> <p>TILED_MOVEMENT_MODE</p> <p>, all movable atoms must be aligned to the tile grid: their step_x/y/size values must be multiples of the icon size, and their bounds must also land on tile boundaries although the atom can be bigger than one tile. In other movement modes you can specify that only specific atoms use this behavior, by giving them the  TILE_MOVER   appearance flag.</p>"},{"location":"world/proc/GetScores/#_102","title":"GetScores","text":"<p>Bounding boxes</p> <p></p> <p>Left:   The bounding box (blue) is the only part of the mob that actually collides with anything. By default, it would cover the whole turf (brown). Any turfs covered by the bounding box are in the mob's locs var.  Right:   The atom's true position (shaded) is offset from the turf by step_x and step_y.</p> <p>As an example, if your players' mobs have icons that only cover the center 24\u00d724 pixels of a regular 32\u00d732 icon, then you would set the mobs' bound_x and bound_y to 4--because there are 4 pixels unused to the left and bottom--and bound_width and bound_height to 24.</p> <p>The mob's physical location on the map depends on four things: Its loc, its step_x/y values, its bound_x/y values, and its bound_width/height. The lower left corner of the bounding box, relative to the turf the mob is actually standing on, begins at step_x+bound_x on the left and step_y+bound_y on the bottom.</p> <p>The physical position of the bounding box is  not affected   by the pixel_x/y/z vars. Those are still strictly visual offsets.</p> <p>The turfs the mob is covering can be read from the read-only locs var. The mob will also appear in the contents of those turfs.</p> <p>Note: This means if an atom is in a turf's contents, its loc is  not necessarily   that turf. The contents list is made to include \"overhangers\" from another tile for ease of use.</p>"},{"location":"world/proc/GetScores/#_103","title":"GetScores","text":"<p>Movement</p> <p>All of the step and walk procs have been upgraded to take an additional argument, which is the speed at which the atom should move. If that argument is left out, the atom's own step_size is used by default. The step_size determines how fast the step_x and step_y values will change when moving.</p> <p>Move() has two new arguments that handle the position change gracefully. These are the step_x and step_y values for the target location.</p> <p>Pixel movement changes the behavior of the Move() proc, because a lot of things are possible that were not possible when BYOND only supported moving one tile at a time. For starters, a Move() is either a \"slide\" or a \"jump\" depending on the distance. A slide is when the move can be stopped partway; a jump is strictly pass/fail. Anything greater than one tile  and   the mover's regular step_size is considered a jump. Changing z levels is also a jump, as is moving to/from a non-turf.</p> <p>If step_x and step_y aren't within a good range, the new loc and the step_x/y values may be changed so that the southwest corner of the mover's bounding box is standing on its actual loc, or as close to it as possible.</p> <p>Enter() and Exit() can be called for several turfs and/or areas, not just one at a time. It is also possible for them not to be called at all, if the moving atom moves within a turf but doesn't cross a new turf boundary. Enter() and Exit() are only called when first attempting to enter or fully exit. The behavior of these procs depends on  world.movement_mode   ; in legacy mode, they look at some of the contents of the turfs as well as the turfs themselves, to preserve behavior found in older BYOND versions.</p> <p>Cross() and Uncross() are the equivalent of Enter() and Exit() but apply to objects the mover will either overlap or stop overlapping. (For turfs, Enter() and Exit() call these procs by default, since the mover is both stepping  into   and  onto   a turf.) Likewise Crossed() and Uncrossed() are the equivalents of Entered() and Exited().</p> <p>If an atom is sliding, its movement can be halted if it encounters an obstacle partway along its route. Bump() will still be called for any obstacles the atom runs into, but Move() will return the number of pixels moved (the most in any direction). When sliding at a speed so fast that the distance is bigger than the atom itself, the move will be split up into several smaller slides to avoid skipping over any obstacles.</p> <p>Gliding, which is used to show smooth movement between atoms in tile movement, is mostly not used in pixel movement. It only applies when the client uses a higher  fps   than the server.</p>"},{"location":"world/proc/GetScores/#_104","title":"GetScores","text":"<p>Pixel procs</p> <p>The bounds() and obounds() procs have been added to grab a list of atoms within a given bounding box. That box can be relative to an atom, or in absolute coordinates.</p> <p>bounds_dist() tells the distance between two atoms, in pixels. If it is positive, that is the minimum distance the atoms would have to traverse to be touching. At 0, they are touching but not in collision. A negative value means the two atoms are in collision.</p>"},{"location":"world/proc/GetScores/#projection-matrix_1","title":"Projection matrix","text":"<p>See also: </p> <p>Particle effects </p> <p>transform var (atom) </p> <p>matrix </p> <p>Color matrix </p> <p>Note: Currently this feature applies only to particle effects, using the</p> <p>transform</p> <p>var.</p> <p>Normally icons in BYOND can only be transformed in 2D, using a simple 3x3 matrix. This is represented by the</p> <p>/matrix</p> <p>object, which cuts off the last column because it isn't used. However particles can have coordinates in x, y, and z, and the whole particle set can be given a transformation matrix that handles all three dimensions.</p>"},{"location":"world/proc/GetScores/#_105","title":"GetScores","text":"<p>Simple 2D transforms</p> <p>The easiest transformation for particles is a simple 2D one, which you can do by setting the particle datum's</p> <p>transform</p> <p>var to a</p> <p>/matrix</p> <p>object.</p> <pre><code>          a d 0\nx y 1  *  b e 0  =  x' y' 1\n          c f 1\n</code></pre> <p>When an x,y point is multiplied by the matrix, it becomes the new point x',y'. This is equivalent to:</p> <pre><code>x' = a*x + b*y + c\ny' = d*x + e*y + f\n</code></pre> <p>This is called an  affine transform   because all the operations are \"linear\" in math terms. (That is, every term in the formula above has a single variable, not raised to a higher power than 1.)</p>"},{"location":"world/proc/GetScores/#_106","title":"GetScores","text":"<p>3x4 matrix (x,y,z with translation)</p> <p>3D affine transforms of this type are also affine transformations. There is no special object for this so a list is used (see below).</p> <pre><code>            xx xy xz 0\nx y z 1  *  yx yy yz 0  =  x' y' z' 1\n            zx zy zz 0\n            cx cy cz 1\n</code></pre> <p>The way to read the vars above is that the first letter says what input component is being transformed (x,y,z, or c for \"constant\"), and the second letter is the output component.</p> <pre><code>x' = xx*x + yx*y + zx*z + cx\ny' = xy*x + yy*y + zy*z + cy\nz' = xz*x + yz*y + zz*z + cz\n</code></pre> <p>To use this kind of matrix, you can cut off the 4th column and provide the values in a list form, in row-major order:</p> <p>list(xx,xy,xz, yx,yy,yz, zx,zy,zz, cx,cy,cz)</p> <p>Note the 4th row is also optional.</p>"},{"location":"world/proc/GetScores/#_107","title":"GetScores","text":"<p>4x4 matrix (x,y,z,w with projection)</p> <p>This is the most interesting matrix, since if you use all 4 columns you're actually altering an \"axis\" called w. This isn't a real axis, but is just a number that the resulting vector will be divided by.</p> <pre><code>            xx xy xz xw\nx y z 1  *  yx yy yz yw  =  x'w' y'w' z'w' w'\n            zx zy zz zw\n            wx wy wz ww\n\nw' = xw*x + yw*y + zw*z + ww\nx' = (xx*x + yx*y + zx*z + wx) / w'\ny' = (xy*x + yy*y + zy*z + wy) / w'\nz' = (xz*x + yz*y + zz*z + wz) / w'\n</code></pre> <p>In a regular affine transform, w always stays at 1. In projection you can think of w as a distance from the \"camera\". 1 is where objects are their \"normal\" size. If you make the z value affect w' by setting zw, you basically make an object look smaller at higher z values.</p> <p>This is a simple projection matrix where x,y,z are left untouched, but there's a projection effect. The \"D\" value is how far away the \"camera\" is from z=0, so a point at z=D looks like it's twice as far away.</p> <pre><code>1  0  0  0\n0  1  0  0\n0  0  1  1/D\n0  0  0  1\n\n</code></pre> <p>This 4x4 matrix is handled as a list just like the 3x4 affine matrix:</p> <p>list(xx,xy,xz,xw, yx,yy,yz,yw, zx,zy,zz,zw, wx,wy,wz,ww)</p>"},{"location":"world/proc/GetScores/#regular-expressions_1","title":"Regular expressions","text":"<p>See also: </p> <p>regex datum </p> <p>regex proc </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>Regular expressions are patterns that can be searched for within a text string, instead of searching for an exact match to a known piece of text. They are much more versatile for find and replace operations, and therefore useful for parsing, filtering, etc.</p> <p>Some example regular expressions are:</p> <p>|   Pattern   |   Code   |   Meaning   | | --- | --- | --- | |   B.*D   |   regex(\"B.*D\")   |   Find</p> <p>B</p> <p>, followed by any number of characters (including none), followed by a</p> <p>D</p> <p>.   | |   [0-3]   |   regex(@\"[0-3]\")   |   Find any digit from 0 to 3   | |   foo|bar   |   regex(\"foo|bar\",\"i\")   |   Find</p> <p>foo</p> <p>or</p> <p>bar</p> <p>, case-insensitive   | |   \\d+   |   regex(@\"\\d+\",\"g\")   |   Find all sequences of digits   |</p> <p>These are some of the patterns you can use. If you want to use any of the operators as an actual character, it must be escaped with a backslash.</p> <p>It is highly recommended that you use  raw strings   like  <code>@\"...\"</code>   for your regular expression patterns, because with a regular DM string you have to escape all backslash  <code>\\</code>   and open bracket  <code>[</code>   characters, which will make your regular expression much harder for you to read. It's easier to write  <code>@\"[\\d]\\n\"</code>   than  <code>\"\\[\\\\d]\\\\n\"</code>   .</p> <p>|   Pattern   |   Matches   | | --- | --- | | a   |  b  | a   or  b  | |   .   |   Any character (except a line break)   | |   ^   |   Beginning of text; or line if</p> <p>m</p> <p>flag is used   | |   $   |   End of text; or line if</p> <p>m</p> <p>flag is used   | |   \\A   |   Beginning of text   | |   \\Z   |   End of text   | |   [  chars   ]   |   Any character between the brackets. Ranges can be specified with a hyphen, like 0-9. Character classes like</p> <p>\\d</p> <p>and</p> <p>\\s</p> <p>can also be used (see below).   | |   [^  chars   ]   |   Any character NOT matching the ones between the brackets.   | |   \\b   |   Word break   | |   \\B   |   Word non-break   | |   (  pattern   )   |   Capturing group: the pattern must match, and its contents will be captured in the group list.   | |   (?:  pattern   )   |   Non-capturing group: Match the pattern, but do not capture its contents.   | |   \\1  through   \\9   |   Backreference;</p> <p>\\  N </p> <p>is whatever was captured in the  N   th capturing group.   | |   Modifiers   | |   Modifiers are \"greedy\" by default, looking for the longest match possible. When following a word, they only apply to the last character.   | | a   *   |   Match  a   zero or more times   | | a   +   |   Match  a   one or more times   | | a   ?   |   Match  a   zero or one time   | | a   {  n   }   |   Match  a   , exactly  n   times   | | a   {  n   ,}   |   Match  a   ,  n   or more times   | | a   {  n   ,  m   }   |   Match  a   ,  n   to  m   times   | | modifier   ?   |   Make the previous modifier non-greedy (match as little as possible)   | |   Escape codes and character classes   | |   \\x  NN  |   Escape code for a single character, where  NN   is its hexadecimal ASCII value   | |   \\u  NNNN  |   Escape code for a single 16-bit Unicode character, where  NNNN   is its hexadecimal value   | |   \\U  NNNNNN  |   Escape code for a single 21-bit Unicode character, where  NNNNNN   is its hexadecimal value   | |   \\d   |   Any digit 0 through 9   | |   \\D   |   Any character except a digit or line break   | |   \\l   |   Any letter A through Z, case-insensitive   | |   \\L   |   Any character except a letter or line break   | |   \\w   |   Any identifier character: digits, letters, or underscore   | |   \\W   |   Any character except an identifier character or line break   | |   \\s   |   Any space character   | |   \\S   |   Any character except a space or line break   | |   Assertions   | |   (?=  pattern   )   |   Look-ahead: Require this pattern to come next, but don't include it in the match   | |   (?!  pattern   )   |   Look-ahead: Require this pattern NOT to come next   | |   (?&lt;=  pattern   )   |   Look-behind: Require this pattern to come before, but don't include it in the match (must be a fixed byte length)   | |   (?&lt;!  pattern   )   |   Look-behind: Require this pattern NOT to come before (must be a fixed byte length)   |</p> <p>The optional flags can be any combination of these:</p> <p>|   Flag   |   Meaning   | | --- | --- | |   i   |   Case-insensitive matching   | |   g   |   Global: In Find() subsequent calls will start where this left off, and in Replace() all matches are replaced.   | |   m   |   Multi-line: ^ and $ refer to the beginning and end of a line, respectively.   |</p> <p>After calling</p> <p>Find()</p> <p>on a</p> <p>/regex</p> <p>datum, the datum's</p> <p>group</p> <p>var will contain a list\u2014if applicable\u2014of any sub-patterns found with the</p> <p>()</p> <p>parentheses operator. For instance, searching the string</p> <p>\"123\"</p> <p>for</p> <p>1(\\d)(\\d)</p> <p>will match</p> <p>\"123\"</p> <p>, and the</p> <p>group</p> <p>var will be</p> <p>list(\"2\",\"3\")</p> <p>. Groups can also be used in replacement expressions; see the  Replace() proc   for more details.</p>"},{"location":"world/proc/GetScores/#understanding-the-renderer_1","title":"Understanding the renderer","text":"<p>.renderlist {position: relative; display: inline-block; margin-left: 3em; text-align: center;}  .renderlist-label, .renderlist-caption, .renderlist-note {display: block; margin: 3px 0; width: 100%;}  .renderlist-caption {font-size: 1.1em; font-weight: bold;}  .renderlist-note {font-size: 0.9em;}  .renderlist-box {background: #eee; border: 1px solid #333; padding: 3px 10px; margin: 3px 0; border-radius: 10px;}  body.dark .renderlist-box {color: white; background: #333; border-color: #aaa;}  .renderlist-box .renderlist-box {background: #ddd; width: 100%;}  body.dark .renderlist-box .renderlist-box {background: #444; width: 100%;}  .renderlist-box .renderlist-box .renderlist-box {background: #ccc;}  body.dark .renderlist-box .renderlist-box .renderlist-box {background: #555;}</p> <p>To get the most out of BYOND's visual effects, it helps to understand how the map is displayed.</p> <p>Every atom has an  appearance   that holds all of its visual info (and sometimes a little non-visual info). This appearance has to be turned into sprites in order to be rendered.</p> <p>Although many atoms need little more than a simple  icon   and  icon_state   and produce only a single sprite, some are more complex with overlays, underlays, maptext, etc. Also there may be  image objects   and  visual contents   involved, although they're not part of the atom's appearance.</p> <p>For a simple</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>, just one sprite is generated. The client looks up the icon it's given. Then it looks up an icon state, which may be influenced by whether the atom is moving or not since you can have moving and non-moving icon states. Then it determines which  direction   to draw and which frame of the icon's animation (if any) to use.</p> <p>So with several simple icons, and not worrying about layers for now, a list of sprites lays out like this:</p> <p>Atom #1</p> <p>Atom #2</p> <p>\u22ee</p> <p>Atom #N</p>"},{"location":"world/proc/GetScores/#_108","title":"GetScores","text":"<p>Overlays and underlays</p> <p>Now let's consider what happens when an appearance has overlays.</p> <p>Underlay #1</p> <p>\u22ee</p> <p>Underlay #N</p> <p>Main icon</p> <p>Overlay #1</p> <p>\u22ee</p> <p>Overlay #N</p> <p>The  underlays   list is processed first, then  overlays   . These lists contain appearances themselves, rather than actual atoms. This means that overlays are recursive: an overlay can have overlays itself. To picture how that works, just replace one of the overlays above with another list.</p> <p>Underlay #1</p> <p>Underlay #2</p> <p>Main icon</p> <p>Underlays of overlay #1</p> <p>Overlay #1 icon</p> <p>Overlays of overlay #1</p> <p>Overlay #2</p>"},{"location":"world/proc/GetScores/#_109","title":"GetScores","text":"<p>Image objects and visual contents</p> <p>Any atom can have an  image object   attached, which can be shown to only specific players. Most atoms, and image objects, can have  visual contents   that display other atoms as if they're overlays.</p> <p>Underlays</p> <p>Main icon</p> <p>Overlays</p> <p>Image objects</p> <p>Visual contents</p> <p>As you see this is very similar to overlays. Just like overlays, image objects and visual contents have appearances of their own (and may also have their own images or visual contents), so this may be recursive as they add new overlays, etc.</p> <p>A couple of things to keep in mind:</p> <ul> <li>If an image object uses the  override   var, it will replace the main appearance's icon and overlays, although it  won't replace other images or visual contents.</li> <li>An object in visual contents can use  vis_flags   to set</li> </ul> <p>VIS_UNDERLAY</p> <p>and move itself before the parent's underlays.</p>"},{"location":"world/proc/GetScores/#_110","title":"GetScores","text":"<p>Maptext and particles</p> <p>Any appearance may have  maptext   attached. That maptext draws above the icon but is grouped with it. That grouping will be discussed further below.</p> <p>Particle effects also get grouped with the main icon in a similar way to maptext.</p> <p>For simplicity, from this point forward the diagram will just treat underlays, overlays, image objects, and visual contents as overlays.</p> <p>Main icon</p> <p>Maptext</p> <p>Particles</p> <p>Overlays</p>"},{"location":"world/proc/GetScores/#_111","title":"GetScores","text":"<p>Color, transform, and filters</p> <p>An appearance's  color   and  alpha   vars (from here forwarded they'll just be referred to by</p> <p>color</p> <p>) and  transform   are inherited by any overlays, which also includes images and visual contents. You can avoid that inheritance by giving those overlays special  appearance_flags   :</p> <p>RESET_COLOR</p> <p>,</p> <p>RESET_ALPHA</p> <p>, and</p> <p>RESET_TRANSFORM</p> <p>.</p> <p>The appearance's filters are only applied to the main icon.</p> <p>Main icon</p> <p>Maptext</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Overlays</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited from Main</p> <p>filters</p> <p>are not inherited from Main</p> <p>When</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited, they \"stack\". The inherited color and transform values are applied after those of the overlays.</p>"},{"location":"world/proc/GetScores/#_112","title":"GetScores","text":"<p>KEEP_TOGETHER</p> <p>and</p> <p>KEEP_APART</p> <p>There are times it's desirable for an appearance and all its overlays to be treated as a single unit so any colors or filters can be applied all at once. One simple example is if the appearance has an</p> <p>alpha</p> <p>of 128 to make it translucent, you probably want to draw the whole atom faded instead of drawing each sprite faded, one on top of the other.</p> <p>By using the</p> <p>KEEP_TOGETHER</p> <p>value in  appearance_flags   (called KT for short), an appearance will group all of its underlays and overlays together. If this is an atom with image objects and visual contents, those will be grouped with it as well.</p> <p>KT group</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Main icon</p> <p>Maptext</p> <p>Overlays</p> <p>With</p> <p>KEEP_TOGETHER</p> <p>all of these sprites are rendered to a temporary drawing surface, and then the main appearance's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>are all applied to the combined drawing. This comes with a trade-off, since you can no longer use flags such as</p> <p>RESET_COLOR</p> <p>to opt out of inheritance.</p> <p>If an overlay doesn't want to be part of a KT group, it can use the</p> <p>KEEP_APART</p> <p>flag (KA for short). If there are multiple nested KT groups, KA will only escape the innermost group.</p> <p>If an overlay inside a KT group has a different  plane   than the group's owner, it will be separated as if it defined</p> <p>KEEP_APART</p> <p>, except it can escape multiple nested groups.</p>"},{"location":"world/proc/GetScores/#_113","title":"GetScores","text":"<p>Layers and planes</p> <p>Any appearance can have a  layer   or  plane   , and these influence how it gets sorted. (There's also a concept called a \"sub-plane\" that's influenced by whether an atom is a  HUD/screen object   or special layers like  BACKGROUND_LAYER   .)</p> <p>If a sprite is created with</p> <p>FLOAT_LAYER</p> <p>(any negative value counts as a floating layer) its layer has to be resolved, or \"unfloated\". The main sprite for an atom can never float; it has to have a real layer. Its overlays and underlays with floating layers will reorder themselves in numerical order, then look for the next closest sprites in the rendering list that has a non-negative layer.</p> <p>A similar process happens with</p> <p>FLOAT_PLANE</p> <p>. Planes can have negative values but</p> <p>FLOAT_PLANE</p> <p>and the values close to it are special. Sprites with floating planes have to resolve those as well.</p> <p>Once all atoms that will appear on the map are assembled into a rendering list of sprites, the order in which they're rendered on the map is determined in this order:</p> <ol> <li>The</li> </ol> <p>plane</p> <p>var matters most. 2. Subplane is counted next. E.g., HUD objects render above non-HUD objects. 3. Depending on  world.map_format   ,</p> <p>layer</p> <p>or physical position determine the drawing order from here. 4. After everything else has been checked, the order the sprites were generated in is the final tie-breaker.</p> <p>In a typical topdown map,</p> <p>layer</p> <p>is basically all that matters after the plane and subplane are taken into account. There is a legacy concept called micro-layers that helps break ties between sprites with the same layer; for instance if an atom is moving it's usually desirable to draw it above other atoms with the same layer; this applies only to topdown maps.</p>"},{"location":"world/proc/GetScores/#_114","title":"GetScores","text":"<p>Plane masters</p> <p>Sometimes it's helpful to group multiple sprites on one plane as if the plane itself were a KT group. For this,  appearance_flags   has a value called</p> <p>PLANE_MASTER</p> <p>. An object with this flag will act as a \"parent\" for everything else on the plane. All other sprites on the plane will be grouped together and rendered on a temporary drawing surface, and then the plane master's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>will be applied.</p> <p>A plane master does not, however, get an icon or maptext of its own; they're simply ignored. It can have overlays added to the group.</p>"},{"location":"world/proc/GetScores/#_115","title":"GetScores","text":"<p>Advanced topics</p> <p>There are other topics not covered in this article, such as  render targets   and special map formats. Any details on how those features impact rendering are discussed in their own articles.</p>"},{"location":"world/proc/GetScores/#side-view-maps_1","title":"Side-view maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>The side-view map format is used for 3/4 perspective, where the map is basically similar to a top-down view but is usually foreshortened. Just like with isometric projection, tiles that are closer to the bottom of the screen are considered to be closer to the viewer. This is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions.</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>The</p> <p>layer</p> <p>var behaves much the same way it does in</p> <p>ISOMETRIC_MAP</p> <p>mode.See  isometric maps   for more information.</p> <p>When using this mode you may want to use a foreshortened</p> <p>world.icon_size</p> <p>, like a 32x24 format instead of 32x32 for example, and use taller icons for any vertical structures like walls or buildings. If you set</p> <p>world.icon_size</p> <p>to use foreshortening, then</p> <p>pixel_y</p> <p>(or</p> <p>pixel_x</p> <p>, depending on the orientation of client.dir) will be adjusted for you; the same applies to</p> <p>step_x</p> <p>and</p> <p>step_y</p> <p>. For example, with</p> <p>world.icon_size</p> <p>set to</p> <p>\"64x32\"</p> <p>, the  physical   tile\u2014what you would see if you were to look at it straight down from above\u2014 is considered to be 64x64, so you would need</p> <p>pixel_y=64</p> <p>or</p> <p>step_y=64</p> <p>to offset by a whole tile. This adjustment does not apply to screen objects,</p> <p>pixel_w</p> <p>, or</p> <p>pixel_z</p> <p>.</p>"},{"location":"world/proc/GetScores/#tiled-icons_1","title":"Tiled icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>In BYOND 3.0, any file like a large .bmp would be treated like a regular icon that had been broken up into several tile-sized icon states. All tiles then were 32x32 pixels. An image that was 100x100 would therefore take at least 4x4 tiles to display. The icon was padded to the right and the top with blank space to become an even multiple of 32x32, and then broken up into sections. The lower left section was given an icon_state of</p> <p>\"0,0\"</p> <p>, the next to the right was</p> <p>\"1,0\"</p> <p>, and so on, up to the upper right which was</p> <p>\"3,3\"</p> <p>. Another icon state, a 32x32 thumbnail of the big image, was also included.</p> <p>BYOND 4.0 expanded on this concept by allowing icons to be defined that had individual graphics bigger than 32x32, and it would break each one up into tiles just like 3.0 did. If an icon had a state called</p> <p>\"open\"</p> <p>then it might break down into</p> <p>\"open 0,0\"</p> <p>,</p> <p>\"open 1,0\"</p> <p>, and so on, while the actual</p> <p>\"open\"</p> <p>state would be a thumbnail image. To show the whole image, you would have to have a separate atom or overlay for each individual tile.</p> <p>In newer versions, breaking big icons into tiles is no longer done by default. Instead, icons are shown and manipulated in their  native size   . To use the old method of breaking icons into tiles, set</p> <p>world.map_format</p> <p>to</p> <p>TILED_ICON_MAP</p> <p>. This is the default for all projects compiled before version 455.</p> <p>When using tiled icons, there are some important things to note:</p> <ul> <li>You need to use extra atoms or overlays to show any icon bigger than a  single tile, where each atom/overlay shows an individual tile-sized piece  of the big icon.</li> <li>The icon_state names of each tile are always the original name followed  by a space, followed by x,y tile coordinates such as 0,0 or 2,1, so the  northeast corner of</li> </ul> <p>\"flag\"</p> <p>might for instance be</p> <p>\"flag 3,2\"</p> <p>. If the original icon_state had no name, the space is  left out and only the x,y coordinates are used. * Every icon's size is a multiple of world.icon_size. If an icon of an  incompatible size is used, it will be padded to the nearest full tile  size. * Crop()</p> <p>and</p> <p>Scale()</p> <p>always pad their results to the  nearest full tile size. * icon.Insert()</p> <p>can insert a single-tile icon into a multi-tiled  big icon using the appropriate icon_state; e.g., inserting into</p> <p>\"door 0,0\"</p> <p>will replace the southwest corner of the</p> <p>\"door\"</p> <p>state. * Using the</p> <p>icon()</p> <p>proc, you can extract a single tile from a  multi-tiled big icon.</p> <p>This example shows a big icon being applied to an atom in tiled mode, as overlays:</p>"},{"location":"world/proc/GetScores/#_116","title":"GetScores","text":"<p>Example:</p> <p>// icon is 3 tiles wide by 2 high icon_state = \"0,0\"</p> <p>// A temporary object used for the overlays var/obj/O = new O.icon = icon O.layer = FLOAT_LAYER</p> <p>for(var/tile_y=0, tile_y&lt;2, ++tile_y)  for(var/tile_x=0, tile_x&lt;3, ++tile_x)  if(tile_x &amp;&amp; tile_y)  O.pixel_x = tile_x * 32  O.pixel_y = tile_y * 32  O.icon_state = \"[tile_x],[tile_y]\"  overlays += O</p>"},{"location":"world/proc/GetScores/#topdown-maps_1","title":"Topdown maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>By default, BYOND displays all maps in top-down format, so</p> <p>world.map_format</p> <p>is set to</p> <p>TOPDOWN_MAP</p> <p>unless you say otherwise. This view means players are looking down on the map, and \"north\" corresponds to the top of their screen. (This can be changed by setting</p> <p>client.dir</p> <p>.)</p> <p>A related map_format, used by older games, is</p> <p>TILED_ICON_MAP</p> <p>. This is also topdown but it handles icons differently.</p> <p>In this form, the</p> <p>layer</p> <p>var behaves exactly as you would expect: Icons with a lower layer are drawn beneath icons with a higher layer. The only exception is when you use  big icons   , which will be drawn above any other icons on the same layer. Also an atom's underlays will be drawn behind it unless their layer is changed, and its overlays will draw in front of it unless otherwise stated.</p> <p>Topdown mode also guarantees that</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>will set the exact screen size used by the HUD, except for HUD objects that appear outside of the normal bounds.</p> <p>Screen objects (also called the HUD) cannot be intermixed with topdown icons. They will appear on top of other icons, unless using a lower plane or a special layer like</p> <p>BACKGROUND_LAYER</p> <p>.</p>"},{"location":"world/proc/GetScores/#topdown_layer_1","title":"TOPDOWN_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>TOPDOWN_LAYER is a special high value that can be added to the regular layer of any atom. This is only available when using a non-topdown world.map_format, such as isometric mapping.</p> <p>The purpose of this value is to make an atom appear as if it belongs in a top-down map, when using a map_format other than TOPDOWN_MAP or TILED_ICON_MAP. This can be handy for title screens, or for special battle maps or the inside of a building in an RPG.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance a turf should have a layer of TOPDOWN_LAYER + TURF_LAYER. Usually you will want one part of the map to have TOPDOWN_LAYER, and for players to be unable to walk to there from the regular map. Mixing topdown icons and icons in the normal map_format in view of each other could look very strange. For safety's sake, the easiest thing to do is to keep them on separate z layers.</p> <p>This can be mixed with EFFECTS_LAYER. Anything in TOPDOWN_LAYER will display on top of EFFECTS_LAYER, and TOPDOWN_LAYER + EFFECTS_LAYER will be above both.</p> <p>This can also be mixed with BACKGROUND_LAYER, which takes priority over everything else.</p> <p>Images or overlays with FLOAT_LAYER can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"world/proc/GetScores/#unicode_1","title":"Unicode","text":"<p>See also: </p> <p>text </p> <p>BYOND was originally written to handle 8-bit (\"ANSI\") characters only. However as time has marched on, Unicode has become ubiquitous for supporting multiple languages, special characters, and emojis. To adapt to this, BYOND now supports Unicode.</p> <p>When ANSI was king, every character was exactly one byte in width, because the only valid characters were between 1 and 255. (And technically, BYOND reserved 255 for its own use.) Now, BYOND uses an encoding called UTF-8 to store characters that can't fit in one byte.</p> <p>UTF-8 breaks up characters with codes of 128 or higher into multiple bytes, like so:</p> <p>|   Character code   |   Size in bytes   | | --- | --- | |   0 - 0x7F   |   1   | |   0x80 - 0x7FF   |   2   | |   0x800 - 0xFFFF   |   3   | |   0x10000 - 0x10FFFF   |   4   |</p>"},{"location":"world/proc/GetScores/#_117","title":"GetScores","text":"<p>Text handling</p> <p>Importantly, BYOND's text procs are based on the byte position, not the character position which may be lower. In other words,</p> <p>length(\"abcd\u00e9fg\")</p> <p>is greater than 7; it's 8, because</p> <p>\u00e9</p> <p>takes up 2 bytes in UTF-8. That also means</p> <p>f</p> <p>is at position 7, not position 6.</p> <p>Why do the text procs work with byte position instead of character position? Because ultimately, it's faster. Going by character position would require counting every byte in a string (at least when it uses UTF-8) until the right character position was found. This would be detrimental to performance in most cases.</p> <p>For the most part, this distinction should be fairly invisible to you. Most code isn't going to encounter problems, but if you do a lot of text processing you should be aware of it.</p> <p>In particular,  text2ascii()   returns the Unicode value at a specific position, which may cover several bytes. If you loop through a string calling this proc for each character, you'll have to make adjustments for cases when multiple bytes have been read.</p> <p>The read-only</p> <p>[]</p> <p>index operator also uses byte positions.</p> <p>If you read a byte or cut text at an inappropriate point, any broken characters resulting from the cut will be turned into the Unicode replacement character \ufffd which is 0xFFFD.</p>"},{"location":"world/proc/GetScores/#_118","title":"GetScores","text":"<p>_char</p> <p>procs</p> <p>Most of the text handling procs have slower</p> <p>_char</p> <p>versions (e.g.,</p> <p>copytext_char</p> <p>) that use character positions instead of byte positions.</p> <p>These should be used sparingly if at all; whenever it's possible to use byte positions, you should. When you do use a</p> <p>_char</p> <p>version of a proc, prefer using</p> <p>-offset</p> <p>instead of</p> <p>length_char(text)-offset</p> <p>for positions near the end of the string. Most text procs allow negative position values that count backwards from the end, and counting a small number of characters backward is faster than counting a lot of characters going forward.</p>"},{"location":"world/proc/GetScores/#_119","title":"GetScores","text":"<p>Old code</p> <p>Code written in ANSI will be up-converted to UTF-8 by Dream Maker, based on your current locale when the code is loaded.</p>"},{"location":"world/proc/GetScores/#user-interface-skins_1","title":"User interface skins","text":"<p>See also: </p> <p>winset proc </p> <p>winget proc </p> <p>output proc </p> <p>winclone proc </p> <p>winexists proc </p> <p>winshow proc </p> <p>controls </p> <p>parameters </p> <p>macros (skin) </p> <p>commands </p> <p>BYOND games used to have very limited interface options, all effectively sharing the same layout. In BYOND 4.0, skins were introduced, allowing developers more control over the layout.</p> <p>A skin consists of  macro sets   for keyboard/gamepad input, menus, and windows and/or panes. All of these are considered  controls   that a game can interact with via  winset()   ,  winget()   ,  output()   , and a few other procs.</p> <p>About the simplest possible skin is a single window with a single  map control   , and a single macro set.</p>"},{"location":"world/proc/GetScores/#client-commands_1","title":"client commands","text":"<p>Several commands can be executed on the client that are not verbs, but raw instructions for Dream Seeker.</p> <p>.winset \"  [control.param=value;...]   \"</p> <p>Sets parameters in response to a menu or button command (or a manually typed command). You can set more than one by separating them with semicolons. This command has a more complex format for conditional instructions (see below).</p> <p>.output  control text </p> <p>Sends output to a control. The text does not need quotes, but backslashes, newlines, and tabs should be escaped with a backslash. This works similarly to the  output()   proc.</p> <p>.options</p> <p>Shows the Options &amp; Messages box.</p> <p>.reboot</p> <p>Reboots the world, when Dream Seeker is also acting as a server.</p> <p>.reconnect</p> <p>Reconnects to the same world.</p> <p>.host</p> <p>Opens hosting options box, when Dream Seeker is also acting as a server.</p> <p>.profile</p> <p>Opens the profiler. On a remote connection you may not have access to profile server procs, but you can look at the client and network profilers.</p> <p>.screenshot</p> <p>Saves a screenshot of the map. If there's more than one map control, the default map is used.</p> <p>.screenshot auto</p> <p>Saves a screenshot of the map, but does not prompt for a filename. The file will be saved in the client's user directory in BYOND/screenshots.</p> <p>.gamepad-mapping</p> <p>Opens the gamepad mapping dialog. Helpful if the user's gamepad is not supported or not configured to their liking.</p> <p>.command</p> <p>Prompts the user to enter a command, which can be one of these commands as well.</p> <p>.configure  option value </p> <p>Toggle certain Dream Seeker config options, such as</p> <p>.configure graphics-hwmode on</p> <p>. The only supported options you can use are</p> <p>graphics-hwmode</p> <p>,</p> <p>sound</p> <p>, and</p> <p>delay</p> <p>which is an old mechanism for dynamically adapting to network delay. (Usually the</p> <p>delay</p> <p>is reset to 0.)</p> <p>.quit</p> <p>Closes Dream Seeker.</p>"},{"location":"world/proc/GetScores/#_120","title":"GetScores","text":"<p>Conditional Winset</p> <p>The</p> <p>.winset</p> <p>command allows you to use conditional expressions, like so:</p> <pre><code>condition ? choice1 : choice2\n</code></pre> <p>The condition is the same as any other parameter you might use in</p> <p>.winset</p> <p>, but instead of setting the parameter, it checks to see if it's true. If so, then the parameters in</p> <p>choice1</p> <p>will be set. Otherwise, the parameters in</p> <p>choice2</p> <p>are set. This example makes the window background red if bigbutton is checked.</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#ff0000 : window.background-color=none\"\n</code></pre> <p>If you want to look for values that don't match instead of values that do, use</p> <p>!=</p> <p>instead of</p> <p>=</p> <p>in the condition.</p> <pre><code>.winset \"bigbutton.is-checked!=false ? window.background-color=#f00 : window.background-color=none\"\n</code></pre> <p>The</p> <p>choice2</p> <p>item is optional.</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#f00\"\n</code></pre> <p>Because it's often useful to do more than one thing at a time,</p> <p>choice1</p> <p>and</p> <p>choice2</p> <p>don't have to be just one parameter. You can use multiple parameters, but they are separated with a space instead of a semicolon. (A semicolon indicates the conditional expression is over.)</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.text-color=#fff window.background-color=#f00 : window.text-color=none window.background-color=none\"\n</code></pre>"},{"location":"world/proc/GetScores/#_121","title":"GetScores","text":"<p>Embedded Winget</p> <p>Commands that are initiated by the skin (like button.command, map.on-show, etc.) have a special syntax that allows you to include information that would normally require a winget call. By including</p> <p>[[  something   ]]</p> <p>in the command, the double-bracketed text will be replaced by the result of running a winget on that parameter.</p> <p>A value of</p> <p>[[id.parameter]]</p> <p>will run a winget on the control with the given ID. Just using</p> <p>[[parameter]]</p> <p>will run a winget for the control that initiated this command. You can also use</p> <p>parent</p> <p>in place of the ID to do something with the parent of the control, or</p> <p>parent.id</p> <p>for access to a sibling control. Position and size parameters can be further broken down by appending</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get at the numbers directly.</p> <p>Several commands already support some special cases like</p> <p>[[*]]</p> <p>or</p> <p>[[width]]</p> <p>or such, where the special-case values are relevant to the command. An example is that in</p> <p>on-size</p> <p>the value of</p> <p>[[*]]</p> <p>is a size value. The Any macro, gamepad macros, and mouse macros, also support this syntax; see  macros   for more info.</p> <p>You can choose how embedded wingets get formatted by following the value with</p> <p>as</p> <p>and a type, such as</p> <p>[[window.size as string]]</p> <p>. There are several types you can use, and different types of parameters get formatted differently:</p> <p>arg</p> <p>Value is formatted as if it's an argument on a command line. Numbers are left alone; booleans are 0 or 1; size and position have their X and Y values separated by a space; pretty much everything else is DM-escaped and enclosed in quotes.</p> <p>escaped</p> <p>DM-escape the value as if it's in a quoted string but do not include the quotes. Size and position values both use</p> <p>,</p> <p>to separate their X and Y values.</p> <p>string</p> <p>Value is formatted as a DM-escaped string with surrounding quotes.</p> <p>params</p> <p>Format value for a URL-encoded parameter list (see  list2params   ), escaping characters as needed.</p> <p>json</p> <p>JSON formatting. Numbers are left unchanged; size or position values are turned into objects with x and y items; boolean values are</p> <p>true</p> <p>or</p> <p>false</p> <p>.</p> <p>json-dm</p> <p>JSON formatting, but DM-escaped so it can be included in a quoted string. Quotes are not included.</p> <p>The</p> <p>arg</p> <p>type is the default, unless the</p> <p>[[</p> <p>... </p> <p>]]</p> <p>expression has double quotes on both sides, in which case</p> <p>escaped</p> <p>is the default.</p>"},{"location":"world/proc/GetScores/#controls-skin_1","title":"controls (skin)","text":"<p>Control types: </p> <p>Bar   : A progress bar or slider</p> <p>Browser   : A browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Parameters common to all controls: </p> <p>id </p> <p>is-disabled </p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>Positionable controls only (not Macro or Menu): </p> <p>anchor1, anchor2 </p> <p>background-color </p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p>"},{"location":"world/proc/GetScores/#_122","title":"GetScores","text":"<p>Creating/Destroying at runtime</p> <p>Controls can be created or deleted at runtime. (Only controls you created during runtime may be deleted.) To create a control, call  winset()   using the  id   of the new control, and the parameter list should include  type   ,  parent   , and probably also  pos   ,  size   , and any  anchors   .</p> <p>To delete the control again, set its</p> <p>parent</p> <p>to a blank value.</p> <p>Menu items and macros work similarly, except they have no positional info. For those, the  name   parameter is important when you create them, and you will either need  command   or (for macros)  map-to   to do anything with them.</p>"},{"location":"world/proc/GetScores/#bar-control-skin_1","title":"bar control (skin)","text":"<p>A progress bar or interactive slider. This can be made to use several different orientations. Its</p> <p>value</p> <p>can be read or set as a percentage from 0 to 100.</p> <p>Bar-specific parameters: </p> <p>angle1, angle2 </p> <p>bar-color </p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p>"},{"location":"world/proc/GetScores/#browser-control-skin_1","title":"browser control (skin)","text":"<p>A browser panel integrated into the skin.</p> <p>Browser-specific parameters: </p> <p>auto-format </p> <p>on-hide </p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>Browsers are capable of displaying HTML documents, and can also interact with the skin.</p>"},{"location":"world/proc/GetScores/#_123","title":"GetScores","text":"<p>Browsers and popups</p> <p>A longstanding behavior of BYOND is the ability to create a new browser window by sending an extra argument to the  browse()   proc. Since the advent of skins in BYOND 4.0, this behavior was kept. When you create a new browser popup, the window name you specify for the popup is used for the name of a new  window control   , and within that window there will be a new browser control simply called</p> <p>browser</p> <p>.</p> <p>If you want to interact with the new browser, its full \"decorated\"  id   is</p> <p>windowname   .browser</p> <p>.</p>"},{"location":"world/proc/GetScores/#_124","title":"GetScores","text":"<p>Running JavaScript from DM</p> <p>Sending  output()   to a browser will send a document to display there, but if you follow the browser's control name with a colon and a function name, you can call a JavaScript function in the document displayed within that browser.</p>"},{"location":"world/proc/GetScores/#_125","title":"GetScores","text":"<p>Example:</p> <p>var/list/info = list(\"name\"=\"fridge\", \"power\"=12) // send {\"name\":\"fridge\",\"power\":12} to a JavaScript function usr &lt;&lt; output(url_encode(json_encode(info)), \"mybrowser:myJSfunction\")</p> <p>The text that you send as output will be parsed like URL parameters, where mutliple arguments to the function are separated by</p> <p>&amp;</p> <p>or</p> <p>;</p> <p>, which is why  url_encode()   is wrapped around the  json_encode()   call in this example.</p>"},{"location":"world/proc/GetScores/#_126","title":"GetScores","text":"<p>Winset and Winget via JavaScript</p> <p>To allow better access to the skin via JavaScript, two new URL formats have been added. If</p> <p>window.location</p> <p>is set to these from JavaScript in a browser control, they can be used to interact directly.</p> <p>Winset URL: </p> <p>byond://winset?id=  [control ID]   &amp;  [property]   =  [value]   &amp;...</p> <p>This works like an ordinary  winset()   call from the server. If</p> <p>id</p> <p>is omitted, it's the same as a winset with a null ID. You can also leave the</p> <p>id</p> <p>blank if you use \"fully decorated\" property names such as</p> <p>mybutton.is-checked</p> <p>instead of just</p> <p>is-checked</p> <p>.</p> <p>Any text you use other than letters, numbers, hyphens, commas, and periods should be encoded via the</p> <p>encodeURIComponent()</p> <p>function in JavaScript.</p> <p>Winget URL: </p> <p>byond://winget?callback=  [callback function]   &amp;id=  [control ID/list]   &amp;property=  [property/list] </p> <p>In this winget, the IDs and properties you want can be separated by commas if you want to retrieve more than one. The winget operation works via a callback function you must define in JavaScript. The callback is given just one argument, a JavaScript object with all of the properties you requested. For example, this URL:</p> <pre><code>byond://winget?callback=wgcb&amp;id=button1&amp;property=is-checked,size,background-color\n</code></pre> <p>...might send this to the callback function wgcb:</p> <pre><code>{\n    \"is-checked\": true,\n    \"size\": {\n        \"x\": 60,\n        \"y\": 20\n    },\n    \"background-color\": {\n        \"value\": \"none\",\n        \"isDefault\": true,\n        \"red\": 236,\n        \"green\": 233,\n        \"blue\": 216,\n        \"alpha\": 255,\n        \"css\": \"#ece9d8\"\n    }\n}\n\n</code></pre> <p>The property names will be in the same format you would expect from  winget()   , so when you're looking at multiple elements' properties, you'll get the full names in</p> <p>id.property</p> <p>format. The values are always sent back in a convenient form for JavaScript to work with; in the case of size, position, and color these will always be objects.</p> <p>An optional</p> <p>control</p> <p>parameter for the winget call can be used if you want to send data to a callback in a different browser control.</p>"},{"location":"world/proc/GetScores/#button-control-skin_1","title":"button control (skin)","text":"<p>A button that can be pressed to run a  command   , or possibly toggled.</p> <p>Button-specific parameters: </p> <p>button-type </p> <p>command </p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p>"},{"location":"world/proc/GetScores/#child-control-skin_1","title":"child control (skin)","text":"<p>A container that can hold one or two  panes   . If it holds two panes, a splitter may appear between them. This control can therefore be used to subdivide a window or pane into smaller units.</p> <p>Child-specific parameters: </p> <p>is-vert </p> <p>left, top </p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p>"},{"location":"world/proc/GetScores/#grid-control-skin_1","title":"grid control (skin)","text":"<p>A grid that contains multiple cells that can show various kinds of output data.</p> <p>Grid-specific parameters: </p> <p>cell-span </p> <p>cells </p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>Sending output to a grid looks like this:</p>"},{"location":"world/proc/GetScores/#_127","title":"GetScores","text":"<p>Example:</p> <p>// output to column 3, row 2 winset(usr, \"thegrid\", \"current-cell=3,2\") usr &lt;&lt; output(\"Text\", \"thegrid\")</p> <p>// or even easier: usr &lt;&lt; output(\"Text\", \"thegrid:3,2\")</p> <p>// when is-list is true: usr &lt;&lt; output(\"5th item\", \"thegrid:5\")</p> <p>You can output an atom to the grid, which can be clicked, dragged, etc. However, you should make sure that atom is  not   temporary and will persist until you no longer need it, or else the server may recycle it and the object in the cell will either disappear or be impossible to interact with anymore.</p> <p>There are some limitations to output in grid controls:</p> <ul> <li>Only one character style (font, color, bold, etc.) may appear within a single cell.</li> <li>A cell is either a link, or not.</li> <li>One image is allowed per cell.</li> <li>A cell can hold an object (atom), sent to it via the  [output()</li> </ul> <p>proc](#/proc/output)   , which can be clicked, dragged, etc.; it will not act as a link. * The same margin is used all around the cell, not different margins for left, right, top, bottom. * There will always be a 1-pixel space for grid lines, whether they're shown or not.</p>"},{"location":"world/proc/GetScores/#info-control-skin_1","title":"info control (skin)","text":"<p>The classic BYOND statpanel, which contains both stat and verb tabs. This is technically a 3-column grid with a variable number of rows.</p> <p>Info-specific parameters: </p> <p>allow-html </p> <p>highlight-color </p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>Output to a statpanel is done via the  stat()   and  statpanel()   procs, during  mob/Stat()   .</p> <p>The same limitations that apply to  grid   output apply here.</p>"},{"location":"world/proc/GetScores/#input-control-skin_1","title":"input control (skin)","text":"<p>A text box into which the user can type. By default this is used for sending  commands   , but it can be used for other purposes as well.</p> <p>Input-specific parameters: </p> <p>command </p> <p>is-password </p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>Note that when in \"standard\" mode of accepting user commands, built-in verbs like</p> <p>.click</p> <p>, or local commands like</p> <p>.winset</p> <p>, are not accepted when typed in. This kind of command can still be entered manually through the Client menu of the Options &amp; Messages window.</p>"},{"location":"world/proc/GetScores/#label-control-skin_1","title":"label control (skin)","text":"<p>A text label that appears on the skin.</p> <p>Label-specific parameters: </p> <p>align </p> <p>allow-html </p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p>"},{"location":"world/proc/GetScores/#macro-control-skin_1","title":"macro control (skin)","text":"<p>A  keyboard/gamepad/mouse macro   , usually designed to run a  command   . The control is a means of interacting with the macro as an object, allowing some of its properties to be changed at runtime.</p> <p>Macro-specific parameters: </p> <p>command </p> <p>map-to </p> <p>name </p>"},{"location":"world/proc/GetScores/#main-control-skin_1","title":"main control (skin)","text":"<p>A container for other controls. The Main control takes two forms: a window or a pane.</p> <p>A window exists independently and can be moved around on the screen. A pane has to be used within another container control such as a  Child   or  Tab control   .</p> <p>Main-specific parameters: </p> <p>icon </p> <p>image </p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>Windows only: </p> <p>alpha </p> <p>can-close </p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>Panes only: </p> <p>can-scroll </p> <p>The font parameters have no impact on a window's statusbar or titlebar; those are drawn by the operating system.</p>"},{"location":"world/proc/GetScores/#map-control-skin_1","title":"map control (skin)","text":"<p>A map that will display icons from the game.</p> <p>Map-specific parameters: </p> <p>icon-size </p> <p>letterbox </p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p>"},{"location":"world/proc/GetScores/#menu-control-skin_1","title":"menu control (skin)","text":"<p>A menu item, that when activate will run a  command   .</p> <p>Menu-specific parameters: </p> <p>can-check </p> <p>command </p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p>"},{"location":"world/proc/GetScores/#output-control-skin_1","title":"output control (skin)","text":"<p>Displays text output.</p> <p>Output-specific parameters: </p> <p>enable-http-images </p> <p>image </p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p>"},{"location":"world/proc/GetScores/#tab-control-skin_1","title":"tab control (skin)","text":"<p>A tab control, where each tab holds a different  pane   .</p> <p>Tab-specific parameters: </p> <p>current-tab </p> <p>multi-line </p> <p>on-tab </p> <p>tabs </p>"},{"location":"world/proc/GetScores/#macros-skin_1","title":"macros (skin)","text":"<p>Macros are used to convert keyboard and gamepad events into actions. There are two ways this works: A macro can run a command, or in some cases (such as gamepad controls) it can be used to remap one control to another.</p> <p>A collection of macros is called a macro set, and the window currently in use defines which macro set will be used via its  macro   parameter.</p> <p>Macros can be changed at runtime. If a macro does not have an  id   , you can refer to it by its key combination (  name   ). If you have a macro set named</p> <p>macro1</p> <p>and have a</p> <p>Ctrl+E</p> <p>macro for instance, you could use  winset()   with</p> <p>\"macro1.Ctrl+E\"</p> <p>. See the  Macro control   for information on which parameters you can change with</p> <p>winset()</p> <p>.</p> <p>The</p> <p>name</p> <p>of the macro is actually the full key combination as it would appear in the macro editor, like</p> <p>CTRL+E</p> <p>,</p> <p>Space+REP</p> <p>, or</p> <p>Alt+Shift+F1</p> <p>. This is not case-specific and it doesn't matter where you put modifiers like</p> <p>CTRL+</p> <p>,</p> <p>SHIFT+</p> <p>, etc.</p>"},{"location":"world/proc/GetScores/#_128","title":"GetScores","text":"<p>The Any macro</p> <p>Oftentimes it's desirable to keep track of key presses yourself rather than have a hundred different macros defined. BYOND makes this possible via the</p> <p>Any</p> <p>and</p> <p>Any+UP</p> <p>macros, which respond to any key or gamepad button.</p> <p>UP</p> <p>is the only allowed modifier for this macro, since other modifier keys are handled by this same macro.</p> <p>Typically, you will want to use  set instant=1   on the verbs that will be tied to the Any macro, so that keyboard input doesn't queue up and lag behind.</p> <p>In the  command   that goes with this macro,</p> <p>[[*]]</p> <p>will be replaced with the name of the key or gamepad button that was pressed/released. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#_129","title":"GetScores","text":"<p>Mapping</p> <p>The  map-to   parameter is used by  mappings   , which are like macros but are used to convert gamepad inputs easily and quickly to keyboard inputs. E.g.,</p> <p>GamepadLeft</p> <p>can map to</p> <p>West</p> <p>which is the left arrow key. A set of default mappings will be added automatically at runtime if you don't include any gamepad mapping in your project.</p>"},{"location":"world/proc/GetScores/#_130","title":"GetScores","text":"<p>Gamepads</p> <p>BYOND will support up to four gamepads, and breaks up their input into the following categories:</p> <ul> <li>Buttons:   Buttons on the controller that are either pressed or not pressed.</li> <li>Directions:   Directions pressed on the D-pad, which act like buttons. Diagonals are also included.</li> <li>D-pad:   The D-pad itself, which can be used to read a  dir   number.</li> <li>Analog:   The analog sticks (BYOND supports left and right).</li> </ul> <p>See the list of available macros below for information on how to harness these inputs.</p> <p>To let a user configure their gamepad, you need to call the client-side</p> <p>.gamepad-mapping</p> <p>command   . Or, if they have access to the Options &amp; Messages window and Dream Seeker's default menus, they can reach it from there. However it's a good idea to make this easy for them to find. Several common gamepads are already known by BYOND.</p> <p>There is also the</p> <p>GamepadRaw</p> <p>macro, which is similar to</p> <p>Any</p> <p>in some ways and will avoid doing any processing (e.g. checking for dead zones on the analog sticks) so you can handle all input yourself.</p> <p>GamepadRaw</p> <p>does not rely on BYOND's controller configuration, so it will not, for instance, know that button 0 should be</p> <p>GamepadFace1</p> <p>. See below for more information on how to use this macro.</p>"},{"location":"world/proc/GetScores/#_131","title":"GetScores","text":"<p>Mouse macros</p> <p>You can add macros (not local player-defined ones) for any of the mouse input commands, thereby bypassing the normal mouse verbs. This can be helpful for designing custom setups where you don't want to have to parse the normal parameter string that provides most of the info, and instead want to provide data directly to the verb. You will want</p> <p>set instant=1</p> <p>on any such verb.</p> <p>Mouse macro commands use the</p> <p>[[...]]</p> <p>syntax to embed values, just like  embedded wingets   . These are the values you can include in a mouse macro:</p> <p>|   Embedded keyword   |   Meaning   | | --- | --- | |   action   |   Name of the mouse action (e.g. MouseDown, MouseMove, etc.).   | |   src   |   Object the mouse is touching, or dragging/dropping.   | |   loc   |   Turf or statpanel that</p> <p>src</p> <p>is over; in a drag-drop you should split this into</p> <p>src.loc</p> <p>and</p> <p>over.loc</p> <p>.   | |   button   |   Mouse button used for this action, if any:</p> <p>left</p> <p>,</p> <p>middle</p> <p>, or</p> <p>right</p> <p>.   | |   drag   |   Mouse button currently used for dragging.   | |   buttons   |   Mouse buttons currently down or involved in this action, separated by commas.   | |   keys   |   Modifier keys currently held (</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt</p> <p>), separated by commas.   | |   over   |   Object the mouse is over in a drag/drop operation.   | |   id   |   Control ID; in a drag-drop you should split this into</p> <p>src.id</p> <p>and</p> <p>over.id</p> <p>.   | |   icon   |   The icon offset (starting from 1,1 at the lower left) where the mouse action occurred.  *  | |   tile   |   The tile where the mouse action occurred, if relevant.  *  | |   vis   |   Pixel coordinates relative to the icon's position on screen (same as</p> <p>icon</p> <p>but without taking transform into account).  *  | |   screen_loc   |   The regular</p> <p>screen_loc</p> <p>cordinate string.  *  | |   screen   |   screen_loc</p> <p>coordinates but entirely in pixels starting at 0,0 from lower left.  *  | |   screen_tile   |   screen_loc</p> <p>coordinates but only the tile number starting at 1,1.  *  | |   screen_offset   |   screen_loc</p> <p>coordinates but only the pixel offset from the tile, starting at 0,0.  *  | |   delta   |   Wheel changes in a mouse wheel command.  *  | |   left</p> <p>,</p> <p>right</p> <p>,</p> <p>middle   |   1 if this button is down or involved in this action, 0 otherwise   | |   shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt   |   1 if this modifier key is held, 0 otherwise   | |   link   |   1 if the mouse is over a maptext link, 0 otherwise   | | *   Coordinate values are comma-separated, but you can follow them with</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get the individual X and Y numbers.   |</p> <p>An example mouse macro command might look like this:</p> <p><code>my-mousedown-verb [[src]] [[button]] \"keys=[[keys as params]];drag=[[drag as params]]\"</code></p> <p>In the example, the</p> <p>src</p> <p>value is a reference such as you would get with the  [ref()</p> <p>proc](#/proc/ref)   . It can be used as a verb argument directly and won't be enclosed by quotes by default. The</p> <p>button</p> <p>value is a string and the default formatting will put quotes around it. The</p> <p>keys</p> <p>and</p> <p>drag</p> <p>values were given the</p> <p>as params</p> <p>format specifier so they would behave as part of a  parameter list   .</p> <p>In drag/drop actions, you can precede any value with</p> <p>src</p> <p>or</p> <p>over</p> <p>if there may be different information for the dragged object and the mouseover object/location. This also applies to things like</p> <p>keys</p> <p>, which by default will be the currently held keys but you can use</p> <p>src.keys</p> <p>to refer to the values from when the drag began.</p>"},{"location":"world/proc/GetScores/#_132","title":"GetScores","text":"<p>Available macros</p> <p>This is a list of all keys and gamepad events that can be used in macros.</p> <p>| Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.   | |   Modifier   |   Meaning   | |   SHIFT+   |   This macro only counts if either Shift key is pressed.   | |   CTRL+   |   This macro only counts if either Ctrl key is pressed.   | |   ALT+   |   This macro only counts if either Alt key is pressed.   | |   +REP   |   If a key/button is held down, this macro repeats.   | |   +UP   |   This macro fires when the key/button is released.   | | Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)   | |   Key   |   Description   | |   A</p> <p>-</p> <p>Z   |   Letter key   | |   0</p> <p>-</p> <p>9   |   Number key   | |   Numpad0</p> <p>-</p> <p>Numpad9   |   Numpad numbers   | |   North   |   Up arrow   | |   South   |   Down arrow   | |   East   |   Right arrow   | |   West   |   Left arrow   | |   Northwest   |   Home key   | |   Southwest   |   End key   | |   Northeast   |   Page Up key   | |   Southeast   |   Page Down key   | |   Center   |   Center key (numpad)   | |   Return   |   Enter / Return key   | |   Escape   |   Esc key   | |   Tab   |   Tab key   | |   Space   |   Space bar   | |   Back   |   Backspace key   | |   Insert   |   Ins key   | |   Delete   |   Del key   | |   Pause   |   Pause key   | |   Snapshot   |   Snapshot / Print Screen key   | |   LWin   |   Left Windows key   | |   RWin   |   Right Windows key   | |   Apps   |   Apps key   | |   Multiply   |   Multiply key   | |   Add   |   Add key   | |   Subtract   |   Subtract key   | |   Divide   |   Divide / Slash key   | |   Separator   |   Separator / Backslash key   | |   Shift   |   Shift key (when not used as a modifier)   | |   Ctrl   |   Ctrl key (when not used as a modifier)   | |   Alt   |   Alt key (when not used as a modifier)   | |   VolumeMute   |   Mute key   | |   VolumeUp   |   Volume up key   | |   VolumeDown   |   Volume down key   | |   MediaPlayPause   |   Play/pause media key   | |   MediaStop   |   Stop media key   | |   MediaNext   |   Next track key   | |   MediaPrev   |   Previous track key   | | Special macros  | |  Any   |   A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  | |  GamepadRaw </p> <p>*  |   Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.   | |  *   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   | | Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.   | |   Button   |   Description   | |   GamepadFace1   |   A (Xbox), X (PS), bottom of diamond   | |   GamepadFace2   |   B (Xbox), Circle (PS), right of diamond   | |   GamepadFace3   |   X (Xbox), Square (PS), left of diamond   | |   GamepadFace4   |   Y (Xbox), Triangle (PS), top of diamond   | |   GamepadL1   |   Left top shoulder   | |   GamepadR1   |   Right top shoulder   | |   GamepadL2   |   Left bottom shoulder   | |   GamepadR2   |   Right bottom shoulder   | |   GamepadSelect   |   Select / Back   | |   GamepadStart   |   Start / Forward   | |   GamepadL3   |   Left analog click   | |   GamepadR3   |   Right analog click   | |   Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.   | |   GamepadUp   |   Up button   | |   GamepadDown   |   Down button   | |   GamepadLeft   |   Left button   | |   GamepadRight   |   Right button   | |   GamepadUpLeft   |   Up+left virtual button   | |   GamepadUpRight   |   Up+right virtual button   | |   GamepadDownLeft   |   Down+left virtual button   | |   GamepadDownRight   |   Down+right virtual button   | | Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.   | |   GamepadLeftAnalog   |   Left analog stick   | |   GamepadRightAnalog   |   Left analog stick   | | Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.   | |   GamepadDir   |   Dpad, converted to one of the eight standard directions.   | |   GamepadDir4   |   Dpad, converted to a cardinal direction.   | |  \u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   | | Mouse macros   can have commands but not be used as mapping targets.   | |   MouseDown   |   Mouse button pressed (replaces MouseDown verb)   | |   MouseUp   |   Mouse button released (replaces MouseUp verb)   | |   MouseOver   |   Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)   | |   MouseMove   |   Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)   | |   MouseDrag   |   Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)   | |   MouseDragMove   |   Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)   | |   MouseDrop   |   Mouse drag has been released over a target (replaces MouseDrop verb)   | | Mouse targets   can only be used as mapping targets for another macro.   | |   Mouse   |   The mouse cursor, mappable by a gamepad analog stick.   | |   MouseLeftButton   |   Left button, mappable by a gamepad button.   | |   MouseRightButton   |   Right button, mappable by a gamepad button.   | |   MouseMiddleButton   |   Middle button, mappable by a gamepad button.   |</p>"},{"location":"world/proc/GetScores/#parameters-skin_1","title":"parameters (skin)","text":"<p>Controls can be interacted with via  winset()   and  winget()   to change or read various parameters.</p> <p>Parameters come in a few different formats:</p> <ul> <li>Boolean:</li> </ul> <p>true</p> <p>or</p> <p>false * Numeric: any number, sometimes allowing decimal or negative numbers * String: text * Position:  x </p> <p>,</p> <p>y * Size:  width </p> <p>x</p> <p>height * Enumerated: one of several text choices, sometimes accepting numbers or true/false values as shortcuts</p> <p>The list of  all controls   which shows which parameters are universal, and each individual control type lists additional parameters that apply to that type specifically.</p> <p>Note: In any parameter's \"Applies to\" section, \"all\" refers to positionable controls only, not Macro or Menu controls. Macro and Menu will be listed separately if supported.</p>"},{"location":"world/proc/GetScores/#align-parameter-skin_1","title":"align parameter (skin)","text":"<p>See also: </p> <p>allow-html parameter </p> <p>Applies to: </p> <p>Label </p> <p>Possible values: </p> <p>center</p> <p>left</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>Default value: </p> <p>center</p> <p>Default alignment of text/image, both horizontal and vertical.</p> <p>A BYOND direction flag like</p> <p>WEST</p> <p>may be assigned to this parameter, or 0 for center alignment.</p>"},{"location":"world/proc/GetScores/#allow-html-parameter-skin_1","title":"allow-html parameter (skin)","text":"<p>Applies to: </p> <p>Label </p> <p>Info </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Info control: Allow HTML tags to be used in  stat()   info. The same limitations apply as to the  Grid control   .</p> <p>Label control: Currently, the label control will not actually use the HTML; it will simply strip it out. Full support may appear in a later version.</p>"},{"location":"world/proc/GetScores/#alpha-parameter-skin_1","title":"alpha parameter (skin)","text":"<p>See also: </p> <p>transparent-color parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>255</p> <p>Opacity of the window, from 0 (invisible) to 255 (opaque).</p>"},{"location":"world/proc/GetScores/#anchor1-anchor2-parameters-skin_1","title":"anchor1, anchor2 parameters (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>All   (except  Main   )</p> <p>Format: </p> <p>none</p> <p>x   ,  y </p> <p>Default value: </p> <p>none</p> <p>Anchors the control within the window or pane. If the anchor is not</p> <p>none</p> <p>, it is expressed as pecentages of the container's width and height. For example, an anchor of 100,100 means that the X and Y position are tied to the lower right of the container, and 50,0 is tied to the top center.</p> <p>Setting only</p> <p>anchor1</p> <p>will control the position of the control but won't affect its size.</p> <p>Setting</p> <p>anchor2</p> <p>as well will allow you to stretch the control as the container's size changes. You can think of this</p> <p>anchor1</p> <p>controlling the top left corner, and</p> <p>anchor2</p> <p>the bottom right corner.</p>"},{"location":"world/proc/GetScores/#angle1-angle2-parameters-skin_1","title":"angle1, angle2 parameters (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>width parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>angle1</p> <p>: 0</p> <p>angle2</p> <p>: 180</p> <p>The angle of the bar control's arc when its  dir   is</p> <p>clockwise</p> <p>or</p> <p>counterclockwise</p> <p>. Angles are measured clockwise from due north, so 0 is north, 90 is east, and so on.</p> <p>angle1</p> <p>is the beginning of the arc, and</p> <p>angle2</p> <p>is the end.</p>"},{"location":"world/proc/GetScores/#auto-format-parameter-skin_1","title":"auto-format parameter (skin)","text":"<p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false (was once true in old versions)</p> <p>When true, the browser control will inject conditional scripting into HTML documents to make them behave nicer in very old browsers. However, it is unlikely there are any systems left that need this.</p>"},{"location":"world/proc/GetScores/#background-color-parameter-skin_1","title":"background-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The control's background color. The exact way this applies depends on the control.</p>"},{"location":"world/proc/GetScores/#bar-color-parameter-skin_1","title":"bar-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>is-transparent parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The color of the bar or slider.</p>"},{"location":"world/proc/GetScores/#border-parameter-skin_1","title":"border parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Possible values: </p> <p>none</p> <p>line</p> <p>sunken</p> <p>Default value: </p> <p>none</p> <p>Border type around the control or window. May not work the same in all controls.</p>"},{"location":"world/proc/GetScores/#button-type-parameter-skin_1","title":"button-type parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Button </p> <p>Possible values: </p> <p>pushbutton: press once</p> <p>pushbox: press to toggle</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>Default value: </p> <p>pushbutton</p> <p>Changes the type of button.</p>"},{"location":"world/proc/GetScores/#can-check-parameter-skin_1","title":"can-check parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>If true, this menu item is toggled like a checkbox or radio button when clicked.</p>"},{"location":"world/proc/GetScores/#can-close-parameter-skin_1","title":"can-close parameter (skin)","text":"<p>See also: </p> <p>on-close parameter </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be closed, and also shows a system menu for the window.</p>"},{"location":"world/proc/GetScores/#can-minimize-parameter-skin_1","title":"can-minimize parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be minimized.</p>"},{"location":"world/proc/GetScores/#can-resize-parameter-skin_1","title":"can-resize parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>can-minimize parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Allow the window to be resized or maximized.</p>"},{"location":"world/proc/GetScores/#can-scroll-parameter-skin_1","title":"can-scroll parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (pane only)</p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Default value: </p> <p>none</p> <p>Allow this pane to retain its horizontal and/or vertical size and show scrollbars if necessary, instead of shrinking to fit the container.</p>"},{"location":"world/proc/GetScores/#command-parameter-skin_1","title":"command parameter (skin)","text":"<p>See also: </p> <p>Commands </p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is activated.</p> <p>For the Input control, whatever the user types in follows this command. If your command starts with an exclamation point</p> <p>!</p> <p>, everything after the</p> <p>!</p> <p>is shown as a default prompt that may be cleared by the user.</p>"},{"location":"world/proc/GetScores/#cell-span-parameter-skin_1","title":"cell-span parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>Default value: </p> <p>1x1</p> <p>The span of the current grid cell; it can be merged with cells to the right and down. If</p> <p>is-list</p> <p>is true, this setting is ignored. This setting is only available at runtime.</p>"},{"location":"world/proc/GetScores/#cells-parameter-skin_1","title":"cells parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>current-cell parameter </p> <p>is-list parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Default value: </p> <p>0x0</p> <p>The number of columns and rows in the grid. Using -1 for either columns or rows will leave that value unchanged.</p> <p>If  is-list   is true, this value can be set to a single number.</p>"},{"location":"world/proc/GetScores/#current-cell-parameter-skin_1","title":"current-cell parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>cells parameter </p> <p>is-list parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Default value: </p> <p>0x0</p> <p>The active cell. Any output sent to the grid, that is not sent to a specific cell, will go into this cell.</p> <p>If  is-list   is true, this value can be set to a single number.</p>"},{"location":"world/proc/GetScores/#current-tab-parameter-skin_1","title":"current-tab parameter (skin)","text":"<p>See also: </p> <p>on-tab parameter </p> <p>tabs parameter </p> <p>Applies to: </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>The name of the  pane   in the active/default tab. If set to a pane that is not currently in this tab control, the pane by that name will be added as another tab.</p>"},{"location":"world/proc/GetScores/#dir-parameter-skin_1","title":"dir parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>angle1, angle2 parameters </p> <p>width parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Possible values: </p> <p>north</p> <p>south</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>Default value: </p> <p>east</p> <p>The direction/orientation of the bar. As the  value   increases the bar will move further in this direction.</p> <p>Shorthand values like</p> <p>cw</p> <p>and</p> <p>ccw</p> <p>can be used, or also numerical BYOND directions.</p>"},{"location":"world/proc/GetScores/#drop-zone-parameter-skin_1","title":"drop-zone parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>for  Grid   ,  Info   ,  Map </p> <p>false</p> <p>for everything else</p> <p>True if dragged objects may be dropped here. Default is true for Map, Info, and Grid controls, false for others. When in use, this will be the value of the</p> <p>over_control</p> <p>argument in  MouseDrop()   if you drop an atom here.</p> <p>Grids can also add</p> <p>drag-cell</p> <p>and</p> <p>drop-cell</p> <p>to mouse proc parameters. The mouse procs'</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>arguments are in the form</p> <p>\"[column],[row]\"</p> <p>(or</p> <p>\"[item\"]</p> <p>if  is-list   is true) when dragging to/from a grid cell.</p> <p>In Info controls,</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>in mouse procs will be the name of the statpanel tab.</p>"},{"location":"world/proc/GetScores/#enable-http-images-parameter-skin_1","title":"enable-http-images parameter (skin)","text":"<p>See also: </p> <p>small-icons parameter </p> <p>style parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Allows images to be pulled from the Web when using the</p> <p></p> <p>tag; otherwise only locally stored images can be shown.</p>"},{"location":"world/proc/GetScores/#flash-parameter-skin_1","title":"flash parameter (skin)","text":"<p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Set to a positive number to make the window flash that many times, -1 to flash forever, and 0 to stop flashing.</p>"},{"location":"world/proc/GetScores/#focus-parameter-skin_1","title":"focus parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>winget proc </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>This parameter is true if this control currently has focus.</p> <p>This is also a special read-only global parameter. Calling  winget()   with no</p> <p>id</p> <p>and</p> <p>focus</p> <p>as the parameter will return the  id   of the currently focused control, if any.</p>"},{"location":"world/proc/GetScores/#font-family-parameter-skin_1","title":"font-family parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Leave blank to use the default font. This can be used for CSS-style fallback fonts, e.g. \"Arial,Helvetica\".</p> <p>You can include fonts in your resource file, making them available to the client, like so:</p> <p>var/list/extra_resources = list(\\  'myfont.ttf',  'myfont_bold.ttf')</p>"},{"location":"world/proc/GetScores/#font-size-parameter-skin_1","title":"font-size parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Point size of the font, or leave at 0 for the default size.</p> <p>The  Output control   behaves differently for legacy reasons, unless  legacy-size   is false.</p>"},{"location":"world/proc/GetScores/#font-style-parameter-skin_1","title":"font-style parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>All </p> <p>Possible values: </p> <p>bold</p> <p>italic</p> <p>underline</p> <p>strike</p> <p>Default value: </p> <p>empty </p> <p>Sets the font style. Any combination of the above values may be used, or none of them. Multiple values may be separated by spaces or commas.</p>"},{"location":"world/proc/GetScores/#group-parameter-skin_1","title":"group parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>is-checked parameter </p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Used for \"radio\" buttons and menu items, where only one of them in the same group may be checked at a time. This value is a text string, or may be left empty.</p> <p>Buttons in different windows/panes, or menu items in another menu/submenu, are always treated as a different group.</p>"},{"location":"world/proc/GetScores/#highlight-color-parameter-skin_1","title":"highlight-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>background-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#00ff00</p> <p>The color used to highlight moused-over statpanel items or verbs. In grids, this color is used when hovering over objects or links.</p>"},{"location":"world/proc/GetScores/#icon-parameter-skin_1","title":"icon parameter (skin)","text":"<p>See also: </p> <p>title parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>'  file   '</p> <p>Default value: </p> <p>empty </p> <p>Custom icon used for the window. If no icon is specified, the Dream Seeker icon is used by windows by default.</p> <p>If this control is a pane, its icon will appear on the tab if the pane is inside a tab control. Lack of an icon will mean no icon appears in the tab.</p> <p>Note: The Windows</p> <p>.ico</p> <p>format is not used. Only image formats BYOND can already use are supported.</p>"},{"location":"world/proc/GetScores/#icon-size-parameter-skin_1","title":"icon-size parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Size, in pixels, of icons on the map. A size of 0 stretches to fit available space.</p> <p>This parameter has been deprecated. Use  zoom   instead.</p>"},{"location":"world/proc/GetScores/#id-parameter-skin_1","title":"id parameter (skin)","text":"<p>See also: </p> <p>parent parameter </p> <p>type parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>The name of this control. Read-only.</p> <p>If this is a  Main control   , the name should always be unique. For others, it is usually still a good idea to use a unique name, but they can be referenced by  window   .  id   at runtime.</p> <p>You can use a colon in front of the  type   to refer to the default control of a certain type, if one exists, e.g.</p> <p>:map</p> <p>is the default map.</p>"},{"location":"world/proc/GetScores/#image-parameter-skin_1","title":"image parameter (skin)","text":"<p>See also: </p> <p>image-mode parameter </p> <p>keep-aspect parameter </p> <p>Applies to: </p> <p>Button </p> <p>Label </p> <p>Main </p> <p>Output </p> <p>Format: </p> <p>'  file   '</p> <p>A background image to show in this control.</p> <p>In the Output control this image is always tiled.</p> <p>Note: Icons displayed in the output control will not show the background image underneath their transparent parts, but will instead show the background color.</p> <p>For Label and Main, use  image-mode   to control how the image is displayed.</p>"},{"location":"world/proc/GetScores/#image-mode-parameter-skin_1","title":"image-mode parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>keep-aspect parameter </p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Possible values: </p> <p>center</p> <p>stretch</p> <p>tile</p> <p>Default value: </p> <p>center</p> <p>Determines how the background image is displayed.</p>"},{"location":"world/proc/GetScores/#index-parameter-skin_1","title":"index parameter (skin)","text":"<p>Applies to: </p> <p>Menu </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Moves the menu item to the  N   th position among its siblings. 0 or less is no change. Write-only.</p>"},{"location":"world/proc/GetScores/#inner-size-parameter-skin_1","title":"inner-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>outer-size parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>width   x  height </p> <p>Read-only.</p> <p>If the control is a window, this refers to its current interior size: i.e., not counting titlebar, statusbar, borders, etc. If it's maximized, this will be the true size of the window interior, as opposed to</p> <p>size</p> <p>which is the interior size once this window is no longer maximized.</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area not including the scrollbars.</p>"},{"location":"world/proc/GetScores/#is-checked-parameter-skin_1","title":"is-checked parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>group parameter </p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if the button or menu item is checked. Menu items can set this even if  can-check   is false.</p>"},{"location":"world/proc/GetScores/#is-default-parameter-skin_1","title":"is-default parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>type parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Specifies that this is a default control. This should be true for your main window, and for your primary map, info, output, input, and browser controls.</p> <p>The default control of a given type can be referenced in  winset()   and other skin-related procs by the name</p> <p>\":  type   \"</p> <p>, e.g.</p> <p>\":map\"</p> <p>.</p> <p>Changing this value at runtime should be avoided, especially for windows. Results may be unpredictable.</p>"},{"location":"world/proc/GetScores/#is-disabled-parameter-skin_1","title":"is-disabled parameter (skin)","text":"<p>See also: </p> <p>is-checked parameter </p> <p>is-visible parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Disables the control, menu item, or macro.</p>"},{"location":"world/proc/GetScores/#is-flat-parameter-skin_1","title":"is-flat parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>Applies to: </p> <p>Button </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Gives this button a flat appearance instead of pseudo-3D highlights.</p>"},{"location":"world/proc/GetScores/#is-list-parameter-skin_1","title":"is-list parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>current-cell parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if the grid is used for a flexible list of items; the number of columns and rows may change to fit them.</p>"},{"location":"world/proc/GetScores/#is-maximized-parameter-skin_1","title":"is-maximized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-minimized parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Maximize the window.</p>"},{"location":"world/proc/GetScores/#is-minimized-parameter-skin_1","title":"is-minimized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-maximized parameter </p> <p>size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Minimize the window.</p>"},{"location":"world/proc/GetScores/#is-pane-parameter-skin_1","title":"is-pane parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>Child control </p> <p>Tab control </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this is a pane that will be used in other container controls, instead of an independent window. Read-only.</p>"},{"location":"world/proc/GetScores/#is-password-parameter-skin_1","title":"is-password parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>multi-line parameter </p> <p>no-command parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Hide text with asterisks. Copy to clipboard is not available in this mode, but the  text   parameter can still read the control's contents.</p> <p>Note: For obvious reasons, you should never use the same password in a game that you would use anywhere else.</p>"},{"location":"world/proc/GetScores/#is-slider-parameter-skin_1","title":"is-slider parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Make this an adjustable slider capable of being changed by the user, instead of a progress bar.</p>"},{"location":"world/proc/GetScores/#is-transparent-parameter-skin_1","title":"is-transparent parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Make this control transparent.</p> <p>Transparency support is extremely limited. Only some controls can actually use it, and only when on top of certain other controls.</p> <p>Bars and labels handle transparency reasonably well, when not on top of other controls (or only on top of other conrols of these types).</p>"},{"location":"world/proc/GetScores/#is-vert-parameter-skin_1","title":"is-vert parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>The splitter between the two panes in this control is vertical.</p>"},{"location":"world/proc/GetScores/#is-visible-parameter-skin_1","title":"is-visible parameter (skin)","text":"<p>See also: </p> <p>is-disabled parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>True if this control can be seen. The main window should usually be made visible.</p>"},{"location":"world/proc/GetScores/#keep-aspect-parameter-skin_1","title":"keep-aspect parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>If stretching a background image, preserve its aspect ratio.</p>"},{"location":"world/proc/GetScores/#left-top-parameters-skin_1","title":"left, top parameters (skin)","text":"<p>See also: </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>string</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The  id   of the left/top pane in this control. The parameter names</p> <p>left</p> <p>and</p> <p>top</p> <p>can be used interchangeably.</p>"},{"location":"world/proc/GetScores/#legacy-size-parameter-skin_1","title":"legacy-size parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>Applies to: </p> <p>Output </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>When true, font sizes are scaled slightly larger for readability, which is legacy (and default) BYOND behavior. Set to false for exact font sizing.</p>"},{"location":"world/proc/GetScores/#letterbox-parameter-skin_1","title":"letterbox parameter (skin)","text":"<p>See also: </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>If map auto-scales its icons (  zoom   is 0), make sure the entire map fits, and fill excess space with the background color.</p> <p>If</p> <p>letterbox</p> <p>is not enabled, auto-zoom will fill all available space, and any excess will be cut off.</p>"},{"location":"world/proc/GetScores/#line-color-parameter-skin_1","title":"line-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>show-lines parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#c0c0c0</p> <p>The color of grid lines.</p>"},{"location":"world/proc/GetScores/#link-color-parameter-skin_1","title":"link-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>visited-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>The color used for links. In some controls  visited links   may have a different color.</p>"},{"location":"world/proc/GetScores/#lock-parameter-skin_1","title":"lock parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Possible values: </p> <p>left</p> <p>right</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Allows one pane to \"lock\" the splitter so if this Child control is resized, the splitter will stay put on that side.</p>"},{"location":"world/proc/GetScores/#macro-parameter-skin_1","title":"macro parameter (skin)","text":"<p>See also: </p> <p>Keyboard/gamepad macros </p> <p>menu parameter </p> <p>id parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>The  id   of the macro set this window will use, if any, when it's active.</p>"},{"location":"world/proc/GetScores/#map-to-parameter-skin_1","title":"map-to parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>command parameter </p> <p>id parameter </p> <p>name parameter </p> <p>Applies to: </p> <p>Macro </p> <p>Format: </p> <p>string</p> <p>The  macro name   (e.g., \"SOUTH\") of a key combo, Dpad, mouse button, etc. that this macro maps to.</p>"},{"location":"world/proc/GetScores/#max-lines-parameter-skin_1","title":"max-lines parameter (skin)","text":"<p>Applies to: </p> <p>Output </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Maximum number of lines before the control drops old text to make room for more. 0 is no limit.</p> <p>An overflow of 5% is allowed, to reduce flicker.</p>"},{"location":"world/proc/GetScores/#menu-parameter-skin_1","title":"menu parameter (skin)","text":"<p>See also: </p> <p>macro parameter </p> <p>id parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>The  id   of the menu this window will use, if any, when it's active.</p>"},{"location":"world/proc/GetScores/#multi-line-parameter-skin_1","title":"multi-line parameter (skin)","text":"<p>Applies to: </p> <p>Info </p> <p>Input </p> <p>Tab </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>: Input control</p> <p>true</p> <p>: Info and Tab controls</p> <p>Input control: Create a multi-line input control. Read-only for this control.</p> <p>Info and Tab controls: Show tabs in multiple rows if there are too many to fit in a single row.</p>"},{"location":"world/proc/GetScores/#name-parameter-skin_1","title":"name parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>id parameter </p> <p>Applies to: </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>Macro control: The key/gamepad combination such as</p> <p>R+REP</p> <p>,</p> <p>CTRL+Northwest</p> <p>,</p> <p>GamepadLeft</p> <p>.</p> <p>Menu control: This is the menu item label. A tab character can be used between the name and a keyboard shortcut, like \"Help\\tF1\". (Keyboard shortcuts must be implemented as macros in order to work. This is just a label.) A blank name shows just a separator.</p>"},{"location":"world/proc/GetScores/#no-command-parameter-skin_1","title":"no-command parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>is-password parameter </p> <p>multi-line parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this input control is for typing only; hitting Enter will not run a command.</p>"},{"location":"world/proc/GetScores/#on-blur-parameter-skin_1","title":"on-blur parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-focus parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>string</p> <p>Command   executed when the control loses focus.</p>"},{"location":"world/proc/GetScores/#on-close-parameter-skin_1","title":"on-close parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>on-size parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>string</p> <p>Command   executed when the window is closed.</p>"},{"location":"world/proc/GetScores/#on-change-parameter-skin_1","title":"on-change parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>string</p> <p>Command   executed when the  value   of the bar/slider is changed. If you drag the slider around, the command will not run until you let go.</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new</p> <p>value</p> <p>. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#on-focus-parameter-skin_1","title":"on-focus parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-blur parameter </p> <p>Applies to: </p> <p>Input </p> <p>Format: </p> <p>string</p> <p>Command   executed when the control gains focus.</p>"},{"location":"world/proc/GetScores/#on-hide-parameter-skin_1","title":"on-hide parameter (skin)","text":"<p>See also: </p> <p>on-show parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is hidden by the game. Must be the default control for the game to show/hide it.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#on-show-parameter-skin_1","title":"on-show parameter (skin)","text":"<p>See also: </p> <p>on-hide parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is shown by the game. Must be the default control for the game to show/hide it.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#on-size-parameter-skin_1","title":"on-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Command   executed when this control is resized. If you are dragging a window edge or splitter, the command won't run until you finish.</p> <p>No command will be sent in response to size or splitter changes made by  winset()   .</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new size. Likewise,</p> <p>[[width]]</p> <p>will be replaced with the width and</p> <p>[[height]]</p> <p>with the height. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#on-status-parameter-skin_1","title":"on-status parameter (skin)","text":"<p>See also: </p> <p>statusbar parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>string</p> <p>Command   executed when the text that would go in the statusbar is changed. This applies even if this control is a pane and not a window, or is a window without a statusbar. It applies to all panes and windows that directly or indirectly contain whatever control generated the statusbar text (e.g., a map).</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new text. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[from]]</p> <p>can be used to reference the control (if any) that generated the next text. You can also use expressions like</p> <p>[[from.type]]</p> <p>,</p> <p>[[from.parent.pos.x]]</p> <p>, etc.</p>"},{"location":"world/proc/GetScores/#on-tab-parameter-skin_1","title":"on-tab parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>tabs parameter </p> <p>Applies to: </p> <p>Info </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>Command   executed when the current tab is changed.</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new tab's  id   . (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p>"},{"location":"world/proc/GetScores/#outer-size-parameter-skin_1","title":"outer-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>inner-size parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>width   x  height </p> <p>Read-only.</p> <p>If the control is a window, this refers to its current exterior size  including   titlebar, statusbar, borders, etc.</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area including the scrollbars.</p>"},{"location":"world/proc/GetScores/#parent-parameter-skin_1","title":"parent parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>type parameter </p> <p>name parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>The  id   of this control's parent. Write-only, used when creating a new control at runtime or deleting a control that was created this way.</p>"},{"location":"world/proc/GetScores/#pos-parameter-skin_1","title":"pos parameter (skin)","text":"<p>See also: </p> <p>anchor1, anchor2 parameters </p> <p>size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>x   ,  y </p> <p>none</p> <p>Default value: </p> <p>x   ,  y </p> <p>none</p> <p>Position of this control's upper left corner, relative to its container. (Not applicable to panes.)</p>"},{"location":"world/proc/GetScores/#prefix-color-parameter-skin_1","title":"prefix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>suffix-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The color used for the prefix/header column of statpanel displays. No color means the default  text-color   will be used.</p> <p>In BYOND 3.0, this color was red.</p>"},{"location":"world/proc/GetScores/#right-bottom-parameters-skin_1","title":"right, bottom parameters (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>string</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The  id   of the right/bottom pane in this control. The parameter names</p> <p>top</p> <p>and</p> <p>bottom</p> <p>can be used interchangeably.</p>"},{"location":"world/proc/GetScores/#right-click-parameter-skin_1","title":"right-click parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>popup_menu setting (verb) </p> <p>drop-zone parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>True if this control should allow right-clicks to behave like any other click instead of opening up popup menus or similar special behavior.</p>"},{"location":"world/proc/GetScores/#saved-params-parameter-skin_1","title":"saved-params parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Format: </p> <p>string</p> <p>Default value: </p> <p>varies </p> <p>A semicolon-separated list of parameters that get saved with this control. This is often used for things a user might set, like zoom level for a map.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"world/proc/GetScores/#size-parameter-skin_1","title":"size parameter (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>anchor1, anchor2 parameters </p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>width   x  height </p> <p>The size of this control.</p> <p>Setting 0 for width or height uses up any available space right/downward.</p> <p>If the control is a window, this refers to its  interior size when not maximized or minimized   . That is, it does not count borders, titlebar, menu, or statusbar, and if the window is minimized/maximized, this refers to the window's normal size when it is restored. See the  inner-size   and  outer-size   params for comparison.</p> <p>If this control is a pane and  can-scroll   is true,</p> <p>size</p> <p>refers to the total scrollable size of the pane, NOT the smaller size displayed. In this case,</p> <p>outer-size</p> <p>and</p> <p>inner-size</p> <p>refer to the display area with and without scrollbars, respectively.</p>"},{"location":"world/proc/GetScores/#show-history-parameter-skin_1","title":"show-history parameter (skin)","text":"<p>See also: </p> <p>show-url parameter </p> <p>use-title parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Show forward/back navigation buttons.</p>"},{"location":"world/proc/GetScores/#show-lines-parameter-skin_1","title":"show-lines parameter (skin)","text":"<p>See also: </p> <p>line-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Default value: </p> <p>both</p> <p>Determines which grid lines to display.</p>"},{"location":"world/proc/GetScores/#show-names-parameter-skin_1","title":"show-names parameter (skin)","text":"<p>See also: </p> <p>name var (atom) </p> <p>small-icons parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>When atoms are output to the grid, show the atom's name next to its icon.</p> <p>If the atom has no icon and</p> <p>show-names</p> <p>is false, the grid cell will be blank.</p>"},{"location":"world/proc/GetScores/#show-splitter-parameter-skin_1","title":"show-splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Show a splitter if both the left and right (or top and bottom) panes are in use. The splitter can be dragged to resize the panes.</p>"},{"location":"world/proc/GetScores/#show-url-parameter-skin_1","title":"show-url parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>use-title parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Shows an address bar for this browser control.</p>"},{"location":"world/proc/GetScores/#small-icons-parameter-skin_1","title":"small-icons parameter (skin)","text":"<p>See also: </p> <p>show-names parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>When output(object,grid) is sent, show smaller icons in this control instead of larger ones.</p>"},{"location":"world/proc/GetScores/#splitter-parameter-skin_1","title":"splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>Applies to: </p> <p>Child </p> <p>Format: </p> <p>number (0 to 100)</p> <p>Default value: </p> <p>50</p> <p>Position of the splitter when two panes are in use, whether  show-splitter   is true or not. This value is a percentage. Specifically, it is the percentage of the available width/height that is given to the left/top pane.</p>"},{"location":"world/proc/GetScores/#suffix-color-parameter-skin_1","title":"suffix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>prefix-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>The color used for the suffix column of statpanel displays. No color means the default  text-color   will be used.</p> <p>In BYOND 3.0, this color was blue.</p>"},{"location":"world/proc/GetScores/#statusbar-parameter-skin_1","title":"statusbar parameter (skin)","text":"<p>See also: </p> <p>titlebar parameter </p> <p>on-status parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Shows a status bar at the bottom of the window. This will show the name of an atom when you hover over it with the mouse.</p>"},{"location":"world/proc/GetScores/#stretch-parameter-skin_1","title":"stretch parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>Applies to: </p> <p>Label </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Stretch the background image. Deprecated; use  image-mode   instead.</p>"},{"location":"world/proc/GetScores/#style-parameter-skin_1","title":"style parameter (skin)","text":"<p>Applies to: </p> <p>Grid </p> <p>Map </p> <p>Output </p> <p>Format: </p> <p>string</p> <p>Custom stylesheet used for the control. Changes made at runtime will usually not impact any existing text.</p> <p>For Map controls, this affects any  maptext   drawn, and changes to the style should appear on the next refresh.</p>"},{"location":"world/proc/GetScores/#tab-background-color-parameter-skin_1","title":"tab-background-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>tab-text-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Affects the background color for tabs. The regular  background-color   is used for the content area.</p>"},{"location":"world/proc/GetScores/#tab-font-family-tab-font-size-tab-font-style-parameters-skin_1","title":"tab-font-family, tab-font-size, tab-font-style parameters (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>Applies to: </p> <p>Info </p> <p>Affects the font for tabs. The regular versions of these without the</p> <p>tab-</p> <p>prefix are used for the content area.</p>"},{"location":"world/proc/GetScores/#tab-text-color-parameter-skin_1","title":"tab-text-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>Applies to: </p> <p>Info </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Affects the text color for tabs. The regular  text-color   is used for the content area.</p>"},{"location":"world/proc/GetScores/#tabs-parameter-skin_1","title":"tabs parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>id parameter </p> <p>multi-line parameter </p> <p>Applies to: </p> <p>Tab </p> <p>Format: </p> <p>string</p> <p>A comma-separated list of  id   values for the panes included as tabs in this control.</p> <p>When setting this value, you can put</p> <p>+</p> <p>in front of the list to add tabs to the existing control, without affecting current tabs. You can likewise use</p> <p>-</p> <p>in front of the list to remove tabs.</p> <p>Note: When using this with  winset()   , remember you will need to escape</p> <p>+</p> <p>as</p> <p>%2B</p> <p>via  url_encode()   or  list2params()   .</p>"},{"location":"world/proc/GetScores/#text-parameter-skin_1","title":"text parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Label </p> <p>Format: </p> <p>string</p> <p>Text shown in this control. For Input controls this setting is only available at runtime.</p>"},{"location":"world/proc/GetScores/#text-color-parameter-skin_1","title":"text-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>Applies to: </p> <p>All </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>The control's foreground text color.</p>"},{"location":"world/proc/GetScores/#text-mode-parameter-skin_1","title":"text-mode parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Show text mode even if icons are available. Text mode will be used if no icons are present, regardless of this setting.</p>"},{"location":"world/proc/GetScores/#text-wrap-parameter-skin_1","title":"text-wrap parameter (skin)","text":"<p>See also: </p> <p>text parameter </p> <p>Applies to: </p> <p>Label </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Wrap text that is too long for the width of the label.</p>"},{"location":"world/proc/GetScores/#title-parameter-skin_1","title":"title parameter (skin)","text":"<p>See also: </p> <p>name var (world) </p> <p>icon parameter </p> <p>Applies to: </p> <p>Main </p> <p>Format: </p> <p>string</p> <p>The title of this window or pane. For a window, the title will appear in the titlebar if present. For a pane, this will be displayed on the tab if this pane is in a  Tab control   .</p> <p>If this is the default window,  world.name   takes precedence over the window title.</p>"},{"location":"world/proc/GetScores/#titlebar-parameter-skin_1","title":"titlebar parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>can-minimize parameter </p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Show a titlebar for this window. This is also required for the close, minimize, and maximize buttons to appear.</p>"},{"location":"world/proc/GetScores/#transparent-color-parameter-skin_1","title":"transparent-color parameter (skin)","text":"<p>See also: </p> <p>alpha parameter </p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>none</p> <p>A color that will be turned into transparency wherever it appears in this window. Overall, this method of transparency comes with many limitations, so it is considered deprecated.</p>"},{"location":"world/proc/GetScores/#type-parameter-skin_1","title":"type parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Format: </p> <p>string</p> <p>The type of this control. Read-only.</p>"},{"location":"world/proc/GetScores/#use-title-parameter-skin_1","title":"use-title parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>show-url parameter </p> <p>title parameter </p> <p>titlebar parameter </p> <p>Applies to: </p> <p>Browser </p> <p>Format: </p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Use the browser's document title to override the title of the window or pane it appears in.</p>"},{"location":"world/proc/GetScores/#value-parameter-skin_1","title":"value parameter (skin)","text":"<p>See also: </p> <p>is-slider parameter </p> <p>dir parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>The \"fullness\" of this bar/slider, as a percentage.</p>"},{"location":"world/proc/GetScores/#view-size-parameter-skin_1","title":"view-size parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>Applies to: </p> <p>Map   (window only)</p> <p>Format: </p> <p>width   x  height </p> <p>The size, in pixels, of the map after</p> <p>zoom</p> <p>has been applied.</p> <p>For instance, if the client view has 10\u00d710 tiles (this includes any extended tiles caused by HUD objects) and</p> <p>world.icon_size</p> <p>is 32x32, the map has a native size of 320\u00d7320 pixels. If the map has a zoom level of 2, then</p> <p>view-size</p> <p>will be 640x640.</p> <p>With a</p> <p>zoom</p> <p>value of 0, which is the default for most projects, the actual zoom level is automatically determined by the size of the map control, the map's native pixel size as explained above, and the value of the  letterbox   parameter.</p>"},{"location":"world/proc/GetScores/#visited-color-parameter-skin_1","title":"visited-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>link-color parameter </p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>The color used for visited links.</p>"},{"location":"world/proc/GetScores/#width-parameter-skin_1","title":"width parameter (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>is-slider parameter </p> <p>Applies to: </p> <p>Bar </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>10</p> <p>Width, in pixels, of the bar or slider. A value of 0 uses all available width.</p>"},{"location":"world/proc/GetScores/#zoom-parameter-skin_1","title":"zoom parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom-mode parameter </p> <p>Applies to: </p> <p>Map </p> <p>Format: </p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Zoom factor for icons on the map. 1 means to show the icons at their original size, 2 is 200%, 0.5 is 50%, and so on. A value of 0 stretches to fit available space.</p>"},{"location":"world/proc/GetScores/#zoom-mode-parameter-skin_1","title":"zoom-mode parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>Applies to: </p> <p>Map </p> <p>Posisble values: </p> <p>normal</p> <p>distort</p> <p>blur</p> <p>Default value: </p> <p>normal</p> <p>Controls the way the map is upscaled.</p> <p>normal</p> <p>Preserves a pixelated look, but does some blending between adjacent pixels when the zoom factor is not an integer. This is equivalent to upscaling by the next highest integer, then downscaling.</p> <p>distort</p> <p>Uses nearest-neighbor sampling to upscale. This may look odd if the zoom factor is not an integer, since for instance some pixels might scale up to be 2 pixels wide, others 3 pixels wide. Some users prefer it anyway.</p> <p>blur</p> <p>Uses bilinear sampling to upscale. This will cause a blurry appearance if the zoom factor is high, but it may be desired in some cases.</p>"},{"location":"world/proc/GetScores/#appendix_1","title":"Appendix","text":"<p>This section contains miscellaneous information that may apply to multiple vars or procs.</p> <p>CSS attributes </p> <p>HTML colors </p> <p>Color space </p> <p>stddef.dm file </p>"},{"location":"world/proc/GetScores/#css-attributes_1","title":"CSS attributes","text":"<p>DM-CSS is a subset of CSS, and only supports some kinds of selectors and attributes.</p> <p>The following table lists all supported attributes, and whether they are supported in text output, maptext, and in other controls (labels/etc.) Other controls will often allow only one style for an entire unit of text. A checkbox in \"Other\" only indicates that  some   support exists in other controls, but it may vary by the type of control.</p> <p>|   Attribute   |   Output   |   Maptext   |   Other   |   Notes   | |   color   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Alpha colors may not be supported in some controls.   | |   background   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   In most cases, only applies to the entire text body.   | |   background-color   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   background-image   |   \u2714\ufe0f   |  |  |  | |   font   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-family   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-style   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-weight   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-size   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   text-decoration   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>underline</p> <p>,</p> <p>overline</p> <p>,</p> <p>line-through</p> <p>,</p> <p>blink</p> <p>, and</p> <p>none</p> <p>. Support for each of these may vary depending on where they are used.   | |   text-align   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   justify</p> <p>is supported in output and maptext.   | |   vertical-align   |  |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>top</p> <p>,</p> <p>middle</p> <p>, and</p> <p>bottom</p> <p>.   | |   text-indent   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   margin-left   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-right   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-top   |  |  |   \u2714\ufe0f   |  | |   margin-bottom   |  |  |   \u2714\ufe0f   |  | |   margin   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   width   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   line-height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Support in output control is limited; line heights less than 1 are not respected.</p> <p>Only unitless numbers, percentages, or em units are allowed.   | |   white-space   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   normal</p> <p>,</p> <p>nowrap</p> <p>,</p> <p>pre</p> <p>,</p> <p>pre-wrap</p> <p>,</p> <p>pre-line   | |   text-shadow   |  |   \u2714\ufe0f   |  |  | |   -dm-text-outline   |  |   \u2714\ufe0f   |  |   Custom attribute: Adds an outline to text. Values are in the form:</p> <p>width color style </p> <p>.</p> <p>The style is either blank, or any combination of the</p> <p>sharp</p> <p>and</p> <p>square</p> <p>keywords (see  Outline filter   ).   |</p> <p>These pseudo-classes are allowed in some contexts, but they can only change the text color.</p> <p>|   Psuedo-class   |   Output   |   Maptext   |   Other   |   Notes   | |   :link   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   :visited   |   \u2714\ufe0f   |  |  |  | |   :active   |  |  |  |   Currently not used, but future support is planned.   | |   :hover   |  |   \u2714\ufe0f   |  |  |</p>"},{"location":"world/proc/GetScores/#html-colors_1","title":"HTML colors","text":"<p>See also: </p> <p>rgb proc </p> <p>Text colors may be specified by name or RGB value. The RGB color format uses hexadecimal numbers, with 2 hex digits each for red, green, and blue. These range from 0 (00 in hex) to 255 (FF in hex). In certain situations BYOND will also honor a fourth pair of digits for alpha.</p> <pre><code>#rrggbb\n#rrggbbaa\n\n</code></pre> <p>It is also possible to use 4 bit values by using only one hex digit per color. The full 8 bit color is produced by repeating each digit. For example,  <code>#F00</code>   (red) is the same as  <code>#FF0000</code>   .</p> <p>The named colors supported by BYOND, and their corresponding RGB values, are listed in the following table:</p> <p>|   black   |   #000000   |  | |   silver   |   #C0C0C0   |  | |   gray  or   grey   |   #808080   |  | |   white   |   #FFFFFF   |  | |   maroon   |   #800000   |  | |   red   |   #FF0000   |  | |   purple   |   #800080   |  | |   fuchsia  or   magenta   |   #FF00FF   |  | |   green   |   #00C000   |  | |   lime   |   #00FF00   |  | |   olive  or   gold   |   #808000   |  | |   yellow   |   #FFFF00   |  | |   navy   |   #000080   |  | |   blue   |   #0000FF   |  | |   teal   |   #008080   |  | |   aqua  or   cyan   |   #00FFFF   |  |</p>"},{"location":"world/proc/GetScores/#color-space_1","title":"Color space","text":"<p>See also: </p> <p>rgb proc </p> <p>rgb2num proc </p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>There are different ways of interpreting color besides RGB. Several parts of BYOND are capable of using other color spaces.</p>"},{"location":"world/proc/GetScores/#_133","title":"GetScores","text":"<p>COLORSPACE_RGB</p> <p>The default color space is RGB, where each color is split into red, green, and blue components, as well as an optional alpha. All of these components range from 0 to 255.</p> <p>The color yellow for instance is</p> <p>rgb(255,255,0)</p> <p>which is red and green mixed together at their maximum brightness, but no blue component.</p>"},{"location":"world/proc/GetScores/#_134","title":"GetScores","text":"<p>COLORSPACE_HSV</p> <p>  Hue values on the color wheel</p> <p>HSV stands for hue, saturation, and value.</p> <ul> <li>Hue ranges from 0 to 360 on a color wheel, where 0 is red, 60 is yellow, 120 is green, and so on as seen in the image.</li> <li>Saturation is how colorful this color is; it ranges from 0 which means a shade of gray, to 100 which is fully colored.</li> <li>Value is the brightness of the biggest red, green, or blue component, and ranges from 0 to 100. A value of 0 is always black.</li> </ul> <p>All pure hues such as red (hue=0) have a saturation of 100 and a value of 100. As saturation decreases, the colors turns whiter. Lower values mean darker colors and darker shades of gray.</p> <p>In HSV, saturation is less meaningful as value gets closer to 0. Black of course always has a value of 0. With 10 as the value, saturation=100 gives you a very dark color whereas saturation=0 is a 10% shade of gray.</p>"},{"location":"world/proc/GetScores/#_135","title":"GetScores","text":"<p>COLORSPACE_HSL</p> <p>HSL is a little more intuitive than HSV. Here, the value is replaced by luminance, which again ranges from 0 to 100. Luminance is the average of the minimum and maximum values of the red, green, and blue components.</p> <p>Black has a luminance of 0; white has a luminance of 100. Pure hues all have a saturation of 100 and luminance of 50. As saturation decreases, the color will approach a grayscale shade of L%.</p> <p>Saturation is less meaningful the closer luminance is to 0 or 100. At a luminance of 100, the saturation is totally irrelevant. At 90, high saturation will get you a very light shade of the hue but that isn't very far off from a 90% shade of gray.</p>"},{"location":"world/proc/GetScores/#_136","title":"GetScores","text":"<p>COLORSPACE_HCY</p> <p>HCY stands for  hue   ,  chroma   , and the Y is for grayscale luminance. (Again chroma and Y range from 0 to 100.) This color space is based around the apparent brightness of each color according to a rough approximation of human vision.</p> <p>Chroma is similar to saturation in that it determines how far from grayscale the color is. As chroma decreases toward 0, the color approaches a grayscale shade of Y%. What's different about HCY color from HSV or HSL is that at chroma=0 and chroma=100 the colors should appear equally bright. Pure red, therefore, has a hue of 0, a chroma of 100, and a Y luminance of only 29.9\u2014roughly what red would look like in black &amp; white with all the color leached out.</p>"},{"location":"world/proc/GetScores/#stddefdm-file_1","title":"stddef.dm file","text":"<p>This is a special file that's included in all projects when you compile. It contains various constants, definitions of some built-in datums, and so on.</p> <p>You can see the contents of this file by creating a new file in Dream Maker called</p> <p>stddef.dm</p> <p>. It will automatically be filled with the standard definitions.</p> <p>The contents of</p> <p>stddef.dm</p> <p>may change with new BYOND versions. However an eye is always kept on backwards-compatibility.</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/Import/","title":"Import","text":""},{"location":"world/proc/Import/#import-proc-world","title":"Import proc (world)","text":"<p>See also: </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>See also: </p> <p>See also:</p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>Export proc (world)</p> <p>Import proc (client) </p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>Import proc (client)</p> <p>Topic proc (world) </p> <p>fcopy proc </p> <p>Topic proc (world)</p> <p>fcopy proc </p> <p>fcopy proc</p> <p>Format: </p> <p>Import()</p> <p>Format: </p> <p>Format:</p> <p>Import()</p> <p>Returns: </p> <p>The file sent by the remote server. The file will be downloaded to the  local server's resource cache. Note that this will cause the caller to  sleep while waiting for the necessary data to be transfered.</p> <p>Returns: </p> <p>Returns:</p> <p>The file sent by the remote server. The file will be downloaded to the  local server's resource cache. Note that this will cause the caller to  sleep while waiting for the necessary data to be transfered.</p> <p>When: </p> <p>Call this inside world.Topic() if you are expecting a file from the  remote server.</p> <p>When: </p> <p>When:</p> <p>Call this inside world.Topic() if you are expecting a file from the  remote server.</p>"},{"location":"world/proc/Import/#_1","title":"Import","text":"<p>Example:</p> <p>//sending the file mob/proc/Export(Addr)  var/savefile/F = new()  F.Write(src)  world.Export(Addr,F)</p> <p>//receiving the file world/Topic()  var/savefile/F = new(world.Import())  F.Read() //read the mob</p> <p>This example defines a mob proc called Export() which writes the mob to a savefile and sends it to another server (specified by Addr). The remote server opens it as a savefile and creates the mob (if the same mob type is defined on both servers and mob.Read() is compatible with the sending server's mob.Write()).</p> <p>Note that another method of transferring player mobs is to use the key savefile (accessed by client.Export() and client.Import()). Direct server to server communication on the other hand could transfer data (like non-players) without the need for player involvement at all.</p> <p>Savefiles are the most common type of file to transfer, but world.Import() simply returns a reference to an item in the world's .rsc file, which could be any type of file. This particular example demonstrates how to open such a file as a temporary savefile. (It gets dumped from the cache into a separate temporary file, which is then opened as a savefile.) Other types of files would be handled differently. For example, you could use fcopy() to dump the cached item to its own separate file.</p>"},{"location":"world/proc/IsBanned/","title":"IsBanned","text":""},{"location":"world/proc/IsBanned/#isbanned-proc-world","title":"IsBanned proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>params2list proc </p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>See also: </p> <p>See also:</p> <p>GetConfig proc (world) </p> <p>params2list proc </p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>GetConfig proc (world)</p> <p>params2list proc </p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>params2list proc</p> <p>address var (client) </p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>address var (client)</p> <p>computer_id var (client) </p> <p>connection var (client) </p> <p>hub var (world) </p> <p>computer_id var (client)</p> <p>connection var (client) </p> <p>hub var (world) </p> <p>connection var (client)</p> <p>hub var (world) </p> <p>hub var (world)</p> <p>Format: </p> <p>IsBanned(key,address,computer_id,type)</p> <p>Format: </p> <p>Format:</p> <p>IsBanned(key,address,computer_id,type)</p> <p>Returns: </p> <p>True value if user is banned from this world. This may be a list, in which case special meaning is attributed to certain list elements as described below.</p> <p>Returns: </p> <p>Returns:</p> <p>True value if user is banned from this world. This may be a list, in which case special meaning is attributed to certain list elements as described below.</p> <p>Args: </p> <p>key: BYOND key of the user.</p> <p>address: current IP address of the user.</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>Args: </p> <p>Args:</p> <p>key: BYOND key of the user.</p> <p>address: current IP address of the user.</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>address: current IP address of the user.</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>computer_id: current computer_id of the user if known.</p> <p>type: type of connection if known (see  client.connection   )</p> <p>type: type of connection if known (see  client.connection   )</p> <p>client.connection</p> <p>By default, this procedure checks the \"ban\" configuration file. If an entry is found for the current world (based on the value of world.hub), the parameter text is converted into a list (using params2list()), and the result is returned. Otherwise, null is returned.</p> <p>A ban that applies to all worlds on the host's computer will not call IsBanned(). The connection will simply be denied.</p> <p>This procedure is called internally whenever a new user connects (before client/New() is called). If the result is true, access is denied. If you want to ban a user but still allow them to log in (perhaps with reduced functionality), you can put \"Login=1\" in the parameter text. If you want to display an explanation to the user about why they are banned, you can also put \"message=X\" in the parameter text, where X is the message to display to the user. A reason for the ban can be added with a \"reason=X\" field. Of course, you can also override IsBanned() and insert these values directly into the list that is returned.</p>"},{"location":"world/proc/IsBanned/#example","title":"Example","text":"<p>world/IsBanned(key,address)  . = ..() //check the ban lists  if(istype(., /list))  .[\"Login\"] = 1 //allow banned user to login</p> <p>When you ban people from paging you, this also causes them to be added to the keyban list. Even if they are already connected, IsBanned() will be re-evaluated and acted upon at that time. When you remove pager ban, they are removed from keyban as well.</p> <p>Additional data elements may be added to the ban list in the future. The current definition includes just the following items:</p> <p>Login</p> <p>true if banned user should be allowed to log in</p> <p>reason</p> <p>text string describing the reason or origin of the ban. For example, when people are banned from the pager, they are added to the \"keyban\" list with reason = \"pager ban\". This text is internal information only and is not displayed to the banned user.</p> <p>message</p> <p>text string explaining to the user why they were banned and possibly what they should do to be forgiven.</p> <p>Login</p> <p>true if banned user should be allowed to log in</p> <p>reason</p> <p>text string describing the reason or origin of the ban. For example, when people are banned from the pager, they are added to the \"keyban\" list with reason = \"pager ban\". This text is internal information only and is not displayed to the banned user.</p> <p>message</p> <p>text string explaining to the user why they were banned and possibly what they should do to be forgiven.</p> <p>Since the data in the \"ban\" file is in  application/x-www-form-urlencoded   format, it is probably not desirable to edit the file by hand. No built-in facilities for editing the file have been provided (aside from automatic addition of pager bans), but an interface could be created, using  GetConfig   and  SetConfig   to read and write the data. Extra features could also be added such as automatic inference of key associations by IP address.</p> <p>application/x-www-form-urlencoded GetConfig SetConfig</p>"},{"location":"world/proc/IsSubscribed/","title":"IsSubscribed","text":""},{"location":"world/proc/IsSubscribed/#issubscribed-proc-world","title":"IsSubscribed proc (world)","text":"<p>Format: </p> <p>IsSubscribed(player)</p> <p>IsSubscribed(player, \"BYOND\") (to check BYOND Membership)</p> <p>Format: </p> <p>Format:</p> <p>IsSubscribed(player)</p> <p>IsSubscribed(player, \"BYOND\") (to check BYOND Membership)</p> <p>IsSubscribed(player, \"BYOND\") (to check BYOND Membership)</p> <p>Returns: </p> <p>Number of days left in subscription, -1 for a lifetime subscriber,  or   null if hub contact failed</p> <p>Returns: </p> <p>Returns:</p> <p>Number of days left in subscription, -1 for a lifetime subscriber,  or   null if hub contact failed</p> <p>or</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>Args: </p> <p>Args:</p> <p>player: a mob, client, key, or ckey</p> <p>Checks a player for their subscription status to this game. This is a simpler alternative to</p> <p>client.CheckPassport()</p> <p>, which is deprecated, and also allows you to check even when the player has gone offline.</p> <p>client.CheckPassport()</p> <p>This proc will return null if contacting the hub was required, but there was no way to reach the hub. Contacting the hub may take a few moments, so it is a good idea to use  spawn()   to avoid holding up the rest of the game.</p> <p>spawn()</p>"},{"location":"world/proc/IsSubscribed/#_1","title":"IsSubscribed","text":"<p>Example:</p> <p>mob/verb/JoinClub()  if(!world.IsSubscribed(src))  src &lt;&lt; \"Sorry, the club is only for subscribers.\"  else  // go to the turf with the tag \"clubhouse\"  loc = locate(\"clubhouse\")  src &lt;&lt; \"Welcome to the clubhouse!\"</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/New/","title":"New","text":""},{"location":"world/proc/New/#new-proc-world","title":"New proc (world)","text":"<p>Format: </p> <p>New()</p> <p>Format: </p> <p>Format:</p> <p>New()</p> <p>When: </p> <p>Called after the world is initially loaded. The only procs preceding  this one would be in the initialization of global variables and objects  on the map.</p> <p>When: </p> <p>When:</p> <p>Called after the world is initially loaded. The only procs preceding  this one would be in the initialization of global variables and objects  on the map.</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p>"},{"location":"world/proc/OpenPort/","title":"OpenPort","text":""},{"location":"world/proc/OpenPort/#openport-proc-world","title":"OpenPort proc (world)","text":"<p>See also: </p> <p>port var (world) </p> <p>visibility var (world) </p> <p>See also: </p> <p>See also:</p> <p>port var (world) </p> <p>visibility var (world) </p> <p>port var (world)</p> <p>visibility var (world) </p> <p>visibility var (world)</p> <p>See also: </p> <p>OpenPort(port=0)</p> <p>See also: </p> <p>See also:</p> <p>OpenPort(port=0)</p> <p>Args: </p> <p>port: the network port to open</p> <p>Args: </p> <p>Args:</p> <p>port: the network port to open</p> <p>Returns: </p> <p>1 on success; 0 on failure</p> <p>Returns: </p> <p>Returns:</p> <p>1 on success; 0 on failure</p> <p>This causes the world to be hosted on the specified network port. A value of 0 or \"any\" requests that any available port be used. The value \"none\" causes the port to be closed so that no new connections are possible.</p> <p>This proc may be overridden. If it is, calling ..() is necessary to open the port. If ..() is not called, it will not open.</p>"},{"location":"world/proc/OpenPort/#_1","title":"OpenPort","text":"<p>Example:</p> <p>world/OpenPort(port)  // only allow subscribers to host  if(host_is_subscribed)  return ..()</p> <p>The \"ports\" configuration option in cfg/byond.txt can be used to control what ports worlds may open. The -ports command-line option may also be used. See  startup   for the syntax.</p> <p>startup</p>"},{"location":"world/proc/PayCredits/","title":"PayCredits","text":""},{"location":"world/proc/PayCredits/#paycredits-proc-world","title":"PayCredits proc (world)","text":"<p>See also: </p> <p>AddCredits proc (world) </p> <p>GetCredits proc (world) </p> <p>See also: </p> <p>See also:</p> <p>AddCredits proc (world) </p> <p>GetCredits proc (world) </p> <p>AddCredits proc (world)</p> <p>GetCredits proc (world) </p> <p>GetCredits proc (world)</p> <p>Format: </p> <p>PayCredits(player, credits, note)</p> <p>Format: </p> <p>Format:</p> <p>PayCredits(player, credits, note)</p> <p>Returns: </p> <p>1 if the credits were spent successfully, 0 or null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the credits were spent successfully, 0 or null otherwise.</p> <p>Args: </p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to deduct from the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Args: </p> <p>Args:</p> <p>player: a mob, client, key, or ckey</p> <p>credits: A number of credits to deduct from the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>credits: A number of credits to deduct from the player's account</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>note: An optional note (for author purposes) for the credit change</p> <p>Removes credits from a player's account, if they have enough. The proc will return 1 if it is successful, or 0 if the attempt failed (usually because the player doesn't have enough credits). This feature is intended for games that make use of the credit system, and for security all such games must use a hub password.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is often a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/PayCredits/#_1","title":"PayCredits","text":"<p>Example:</p> <p>mob/proc/ItemShop()  var/items = list(\"Get credits!\", \"Magic sword\"=10, \"Skeleton key\"=50)  var/choices[0]  var/item,price  for(item in items)  price = items[item]  choices[\"[item]: [price] credit\\s\"] = item</p> <p>var/credits = world.GetCredits(key)  if(isnull(credits))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  return</p> <p>var/choice = input(src,\\  \"You have [credits] credit\\s. What would you like to purchase?\",\\  \"Item Shop\")\\  as null|anything in choices  if(!choice) return // cancel</p> <p>if(choice == \"Get credits\")  src &lt;&lt; link(\"http://www.byond.com/games/Author/MyGame/credits\")  return</p> <p>item = choices[choice]  price = items[item]  if(!price) return</p> <p>src &lt;&lt; \"Contacting item shop...\"  var/result = world.PayCredits(name, price, \"Item shop: [item]\")</p> <p>if(isnull(result))  src &lt;&lt; \"Sorry, the item shop isn't available right now.\"  else if(!result)  src &lt;&lt; \"You need [price-credits] more credit\\s to buy [item].\"  else  src &lt;&lt; \"You bought \\a [item]!\"</p> <p>// Now give the user the item and save their character  // These procs are for you to define  src.AddEquipment(item)  src.SaveCharacter()</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/Profile/","title":"Profile","text":""},{"location":"world/proc/Profile/#profile-proc-world","title":"Profile proc (world)","text":"<p>Format: </p> <p>Profile(command, format)</p> <p>Profile(command, type, format)</p> <p>Format: </p> <p>Format:</p> <p>Profile(command, format)</p> <p>Profile(command, type, format)</p> <p>Profile(command, type, format)</p> <p>Returns: </p> <p>Profilng data or null</p> <p>Returns: </p> <p>Returns:</p> <p>Profilng data or null</p> <p>Args: </p> <p>command: A numerical value that says whether to start, stop, refresh, etc.</p> <p>type: A type of profile to use, other than proc profiling.</p> <p>format: Optional format for output data</p> <p>Args: </p> <p>Args:</p> <p>command: A numerical value that says whether to start, stop, refresh, etc.</p> <p>type: A type of profile to use, other than proc profiling.</p> <p>format: Optional format for output data</p> <p>type: A type of profile to use, other than proc profiling.</p> <p>format: Optional format for output data</p> <p>format: Optional format for output data</p> <p>Interacts with the built-in server profiler without requiring the host to do so via Dream Daemon, or an authorized player via Dream Seeker.</p> <p>The</p> <p>command</p> <p>value is built from bitflags, so it can combine any of these three values via the</p> <p>|</p> <p>operator:</p> <p>command</p> <p>|</p> <p>PROFILE_STOP</p> <p>Stop profiling. Not using this flag will start/continue profiling.</p> <p>PROFILE_CLEAR</p> <p>Clear all profile data. This will also cause the proc to return null.</p> <p>PROFILE_AVERAGE</p> <p>Any output data should use average times instead of total times.</p> <p>PROFILE_STOP</p> <p>Stop profiling. Not using this flag will start/continue profiling.</p> <p>PROFILE_CLEAR</p> <p>Clear all profile data. This will also cause the proc to return null.</p> <p>PROFILE_AVERAGE</p> <p>Any output data should use average times instead of total times.</p> <p>These additional values are also defined for convenience:</p> <p>PROFILE_START</p> <p>Start/continue profiling but don't clear any existing data.</p> <p>PROFILE_REFRESH</p> <p>Currently this is the same as</p> <p>PROFILE_START</p> <p>.</p> <p>PROFILE_RESTART</p> <p>Start profiling and clear existing data.</p> <p>PROFILE_START</p> <p>Start/continue profiling but don't clear any existing data.</p> <p>PROFILE_REFRESH</p> <p>Currently this is the same as</p> <p>PROFILE_START</p> <p>.</p> <p>PROFILE_START</p> <p>PROFILE_RESTART</p> <p>Start profiling and clear existing data.</p>"},{"location":"world/proc/Profile/#_1","title":"Profile","text":"<p>Profiling procs</p> <p>By default, data will be returned as a list. The first six values are the column names:</p> <p>\"name\"</p> <p>,</p> <p>\"self\"</p> <p>,</p> <p>\"total\"</p> <p>,</p> <p>\"real\"</p> <p>,</p> <p>\"over\"</p> <p>, and</p> <p>\"calls\"</p> <p>, corresponding to the columns in the profiler. These are followed by the profile data for each proc, with the data being in the same column order. E.g. the next six items represent the first proc in the profile.</p> <p>\"name\"</p> <p>\"self\"</p> <p>\"total\"</p> <p>\"real\"</p> <p>\"over\"</p> <p>\"calls\"</p> <p>The optional</p> <p>format</p> <p>argument however can be used to return the data in other formats. Currently the only accepted value is</p> <p>\"json\"</p> <p>, which will output the same data in JSON format.</p> <p>format</p> <p>\"json\"</p>"},{"location":"world/proc/Profile/#_2","title":"Profile","text":"<p>SendMaps profile</p> <p>Using</p> <p>\"sendmaps\"</p> <p>in the</p> <p>type</p> <p>argument will profile the routines used to send map informaiton to players. Unlike the proc profiling this only has three data columns:</p> <p>\"name\"</p> <p>,</p> <p>\"value\"</p> <p>, and</p> <p>\"calls\"</p> <p>. The value column might be a time or number value, depending on what's being measured.</p> <p>\"sendmaps\"</p> <p>type</p> <p>\"name\"</p> <p>\"value\"</p> <p>\"calls\"</p> <p>The JSON format will include a</p> <p>unit</p> <p>property data that is not a raw number, such as a time value.</p> <p>unit</p>"},{"location":"world/proc/Reboot/","title":"Reboot","text":""},{"location":"world/proc/Reboot/#reboot-proc-world","title":"Reboot proc (world)","text":"<p>Format: </p> <p>Reboot(reason)</p> <p>Format: </p> <p>Format:</p> <p>Reboot(reason)</p> <p>Args: </p> <p>reason: the reason</p> <p>Reboot()</p> <p>was called:  * 0 or null: Called by game code * 1: By host (Ctrl+R in Dream Seeker) * 2: By  world.Topic() * 3: By SIGUSR1 in UNIX</p> <p>Args: </p> <p>Args:</p> <p>reason: the reason</p> <p>Reboot()</p> <p>was called:  * 0 or null: Called by game code * 1: By host (Ctrl+R in Dream Seeker) * 2: By  world.Topic() * 3: By SIGUSR1 in UNIX</p> <p>Reboot()</p> <ul> <li>0 or null: Called by game code</li> <li>1: By host (Ctrl+R in Dream Seeker)</li> <li>2: By  world.Topic()</li> <li> <p>3: By SIGUSR1 in UNIX</p> </li> <li> <p>0 or null: Called by game code</p> </li> <li> <p>1: By host (Ctrl+R in Dream Seeker)</p> </li> <li> <p>2: By  world.Topic()</p> </li> </ul> <p>world.Topic() - 3: By SIGUSR1 in UNIX</p> <p>Default action: </p> <p>Default action: </p> <p>Default action:</p> <p>Reload the world from scratch. Any connected players will automatically relogin. This would be useful if you needed to recompile the world after changing some code.</p> <p>In a UNIX environment, you can cause a running server to reboot by sending it the signal SIGUSR1.</p> <p>If you override this proc, you must call ..() if you want the reboot to complete normally.</p> <p>For reboots initiated by Dream Seeker, usr will be the mob belonging to the player who sent the command.</p>"},{"location":"world/proc/Repop/","title":"Repop","text":""},{"location":"world/proc/Repop/#repop-proc-world","title":"Repop proc (world)","text":"<p>Format: </p> <p>Repop()</p> <p>Format: </p> <p>Format:</p> <p>Repop()</p> <p>Default action: </p> <p>Reload the obj and mob instances defined in the world map. This  \"repopulates\" a world to its initial state. Only objects that were  destroyed will be recreated.</p> <p>Default action: </p> <p>Default action:</p> <p>Reload the obj and mob instances defined in the world map. This  \"repopulates\" a world to its initial state. Only objects that were  destroyed will be recreated.</p>"},{"location":"world/proc/SetConfig/","title":"SetConfig","text":""},{"location":"world/proc/SetConfig/#setconfig-proc-world","title":"SetConfig proc (world)","text":"<p>See also: </p> <p>GetConfig proc (world) </p> <p>See also: </p> <p>See also:</p> <p>GetConfig proc (world) </p> <p>GetConfig proc (world)</p> <p>Format: </p> <p>SetConfig(config_set,param,value)</p> <p>Format: </p> <p>Format:</p> <p>SetConfig(config_set,param,value)</p> <p>Args: </p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>value: data to store (or null to delete this entry)</p> <p>Args: </p> <p>Args:</p> <p>config_set: name of the configuration set (see below)</p> <p>param: name of the configuration parameter</p> <p>value: data to store (or null to delete this entry)</p> <p>param: name of the configuration parameter</p> <p>value: data to store (or null to delete this entry)</p> <p>value: data to store (or null to delete this entry)</p> <p>This command is for storing configuration information that is shared by applications installed on the same system. The configuration data is accessed by specifying the configuration \"set\" and the parameter within that set.</p> <p>For more information, see  GetConfig   .</p> <p>GetConfig</p>"},{"location":"world/proc/SetMedal/","title":"SetMedal","text":""},{"location":"world/proc/SetMedal/#setmedal-proc-world","title":"SetMedal proc (world)","text":"<p>See also: </p> <p>GetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>See also: </p> <p>See also:</p> <p>GetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>GetMedal proc (world)</p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>ClearMedal proc (world)</p> <p>GetScores proc (world) </p> <p>SetScores proc (world) </p> <p>GetScores proc (world)</p> <p>SetScores proc (world) </p> <p>SetScores proc (world)</p> <p>Format: </p> <p>SetMedal(medal, player)</p> <p>Format: </p> <p>Format:</p> <p>SetMedal(medal, player)</p> <p>Returns: </p> <p>1 if the medal was awarded successfully, 0 or null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>1 if the medal was awarded successfully, 0 or null otherwise.</p> <p>Args: </p> <p>medal: name of the medal being awarded</p> <p>player: a mob, client, key, or ckey</p> <p>Args: </p> <p>Args:</p> <p>medal: name of the medal being awarded</p> <p>player: a mob, client, key, or ckey</p> <p>player: a mob, client, key, or ckey</p> <p>Awards a medal to a player. The proc will return 1 if it is successful, or 0 if the medal was already awarded. If the world already knows this medal was earned before, the hub will not be contacted.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/SetMedal/#_1","title":"SetMedal","text":"<p>Example:</p> <p>mob/monster/dragon  Die(mob/killer) // assume Die() is a proc all mobs have  spawn()  if(ismob(killer) &amp;&amp; killer.key)  world.SetMedal(\"Dragon slayer\", killer)</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/SetScores/","title":"SetScores","text":""},{"location":"world/proc/SetScores/#setscores-proc-world","title":"SetScores proc (world)","text":"<p>See also: </p> <p>GetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>See also: </p> <p>See also:</p> <p>GetScores proc (world) </p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetScores proc (world)</p> <p>GetMedal proc (world) </p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>GetMedal proc (world)</p> <p>SetMedal proc (world) </p> <p>ClearMedal proc (world) </p> <p>SetMedal proc (world)</p> <p>ClearMedal proc (world) </p> <p>ClearMedal proc (world)</p> <p>Format: </p> <p>SetScores(key, fields)</p> <p>Format: </p> <p>Format:</p> <p>SetScores(key, fields)</p> <p>Returns: </p> <p>The key, if the scores were successfully updated; null otherwise.</p> <p>Returns: </p> <p>Returns:</p> <p>The key, if the scores were successfully updated; null otherwise.</p> <p>Args: </p> <p>key: the name of the player, character, etc. for which scores should be set</p> <p>fields: The data fields to set</p> <p>Args: </p> <p>Args:</p> <p>key: the name of the player, character, etc. for which scores should be set</p> <p>fields: The data fields to set</p> <p>fields: The data fields to set</p> <p>Updates scores that are kept on the BYOND hub.</p> <p>The key is an arbitrary text value. Usually a player's key is a good choice, but you can also use the name of their character, or anything else you like, as long as it is unique. The key is case-insensitive.</p> <p>Scores and stats use data fields, which might be things like \"Score\", \"Level\", \"Class\", etc. Use list2params() to set the fields that you want to change. Fields that you do not include in the list will not be changed. A field with a blank value will be deleted.</p> <p>Sending an empty text string for the fields will erase the scores for that key.</p> <p>This proc will return null if there was no way to reach the hub. Use isnull() to check for a null value. Contacting the hub may take a few moments, so it is a good idea to use spawn() to avoid holding up the rest of the game.</p>"},{"location":"world/proc/SetScores/#_1","title":"SetScores","text":"<p>Example:</p> <p>var/params</p> <p>// Change the Score and Pet fields params = list(\"Score\"=123, \"Pet\"=\"Dog\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete the Pet field params = list(\"Pet\"=\"\") world.SetScores(\"Tom\", list2params(params))</p> <p>// Delete Tom's scores entirely world.SetScores(\"Tom\", \"\")</p> <p>Note: You can specify a different hub path and hub_password by adding these as extra arguments, but this is not recommended for security reasons. If you use this feature, it should only be on games that cannot be downloaded by the public.</p>"},{"location":"world/proc/Tick/","title":"Tick","text":""},{"location":"world/proc/Tick/#tick-proc-world","title":"Tick proc (world)","text":"<p>See also: </p> <p>cpu var (world) </p> <p>map_cpu var (world) </p> <p>tick_usage var (world) </p> <p>See also: </p> <p>See also:</p> <p>cpu var (world) </p> <p>map_cpu var (world) </p> <p>tick_usage var (world) </p> <p>cpu var (world)</p> <p>map_cpu var (world) </p> <p>tick_usage var (world) </p> <p>map_cpu var (world)</p> <p>tick_usage var (world) </p> <p>tick_usage var (world)</p> <p>Format: </p> <p>Tick()</p> <p>Format: </p> <p>Format:</p> <p>Tick()</p> <p>When: </p> <p>Called during the server tick, after sleeping procs and queued commands, just before map information is sent to the clients.</p> <p>When: </p> <p>When:</p> <p>Called during the server tick, after sleeping procs and queued commands, just before map information is sent to the clients.</p> <p>Default action: </p> <p>None.</p> <p>Default action: </p> <p>Default action:</p> <p>None.</p> <p>This proc allows you to do any updates just before map info is sent out. One possible use for this is to run a movement loop, or sync up any user interface input that might have arrived and deal with it all at once.</p>"},{"location":"world/proc/Tick/#_1","title":"Tick","text":"<p>Example:</p> <p>world/Tick()  for(var/client/C)  if(C.mob?.move_dir)  try  step(C.mob, move_dir)  catch  // empty catch, just so a failed step won't break the loop</p> <p>Note: The tick will not wait if this proc sleeps. It effectively has  set waitfor=0   already built in. It's a good idea not to sleep in this proc or any of its callees at all, since it will keep getting called every tick.</p> <p>set waitfor=0</p>"},{"location":"world/proc/Topic/","title":"Topic","text":""},{"location":"world/proc/Topic/#topic-proc-world","title":"Topic proc (world)","text":"<p>See also: </p> <p>Del proc (world) </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>See also: </p> <p>See also:</p> <p>Del proc (world) </p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Del proc (world)</p> <p>Export proc (world) </p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Export proc (world)</p> <p>Import proc (client) </p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Import proc (client)</p> <p>Import proc (world) </p> <p>Reboot proc (world) </p> <p>Import proc (world)</p> <p>Reboot proc (world) </p> <p>Reboot proc (world)</p> <p>Format: </p> <p>Topic(T,Addr,Master,Keys)</p> <p>Format: </p> <p>Format:</p> <p>Topic(T,Addr,Master,Keys)</p> <p>When: </p> <p>Called when a message is received from another server by using  world.Export(). If a file is expected, world.Import() may be called to  get it. The return value of Topic() will be passed back to the remote  server.</p> <p>When: </p> <p>When:</p> <p>Called when a message is received from another server by using  world.Export(). If a file is expected, world.Import() may be called to  get it. The return value of Topic() will be passed back to the remote  server.</p> <p>Args: </p> <p>T: The topic text string specified by the remote server (everything following ? in the URL).</p> <p>Addr: The address of the remote server.</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Args: </p> <p>Args:</p> <p>T: The topic text string specified by the remote server (everything following ? in the URL).</p> <p>Addr: The address of the remote server.</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Addr: The address of the remote server.</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Master: 1 if remote server is the server which started this one.</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Keys: List of keys belonging to users who are logged in on the remote server</p> <p>Default action: </p> <p>The topic \"ping\" returns a true value (number of players plus one),  which may be useful for telling if a server is alive. The topics  \"Reboot\" and \"Del\" will call world.Reboot() and world.Del()  respectively if the message was sent by the master server.</p> <p>Default action: </p> <p>Default action:</p> <p>The topic \"ping\" returns a true value (number of players plus one),  which may be useful for telling if a server is alive. The topics  \"Reboot\" and \"Del\" will call world.Reboot() and world.Del()  respectively if the message was sent by the master server.</p>"},{"location":"world/proc/Topic/#_1","title":"Topic","text":"<p>Example:</p> <p>world/Topic(T)  if(findtext(T,\"shout:\") == 1)  world &lt;&lt; copytext(T,7)</p> <p>This example allows other servers to send this server topic text of the form \"shout:msg\" and will broadcast the message to all the players in this world.</p> <p>The Keys argument is either null, or a list of user keys. Any keys in the list are logged in to the remote server.</p> <p>Always validate the input in</p> <p>Topic()</p> <p>calls to make sure it's correct and the query you're recieving is legitimate.</p> <p>Topic()</p>"},{"location":"%7Bnotes%7D/BACKGROUND_LAYER/","title":"BACKGROUND LAYER","text":""},{"location":"%7Bnotes%7D/BACKGROUND_LAYER/#background_layer","title":"BACKGROUND_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>See also: </p> <p>See also:</p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>layer var (atom)</p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>plane var (atom)</p> <p>map_format var (world) </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>map_format var (world)</p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>TOPDOWN_LAYER</p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>stddef.dm file</p> <p>Understanding the renderer </p> <p>Understanding the renderer</p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>PLANE_MASTER</p> <p>BACKGROUND_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>BACKGROUND_LAYER</p> <p>The purpose of this value is to make an atom appear below any regular atoms, even if they share the same plane. In an isometric map for instance, HUD objects will always appear above the map, but makeing a HUD object appear behind the map was basically impossible without this feature until</p> <p>plane</p> <p>was implemented.</p> <p>plane</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>BACKGROUND_LAYER + OBJ_LAYER</p> <p>.</p> <p>BACKGROUND_LAYER + OBJ_LAYER</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>and</p> <p>EFFECTS_LAYER</p> <p>, but it will take precedence over both. Anything with</p> <p>BACKGROUND_LAYER</p> <p>will always appear below anything without it on the same plane.</p> <p>TOPDOWN_LAYER</p> <p>EFFECTS_LAYER</p> <p>BACKGROUND_LAYER</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p> <p>FLOAT_LAYER</p>"},{"location":"%7Bnotes%7D/EFFECTS_LAYER/","title":"EFFECTS LAYER","text":""},{"location":"%7Bnotes%7D/EFFECTS_LAYER/#effects_layer","title":"EFFECTS_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>See also: </p> <p>See also:</p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>layer var (atom)</p> <p>plane var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>plane var (atom)</p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>map_format var (world)</p> <p>BACKGROUND_LAYER </p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>BACKGROUND_LAYER</p> <p>TOPDOWN_LAYER </p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>TOPDOWN_LAYER</p> <p>stddef.dm file </p> <p>Understanding the renderer </p> <p>stddef.dm file</p> <p>Understanding the renderer </p> <p>Understanding the renderer</p> <p>This is mostly no longer needed. A negative value for plane is the preferred way to do show objects in the background. It can still be used however when you want to rearrange objects in the same plane when using  PLANE_MASTER   for visual effects.</p> <p>PLANE_MASTER</p> <p>EFFECTS_LAYER</p> <p>is a special high value that can be added to the regular layer of any atom.</p> <p>EFFECTS_LAYER</p> <p>The purpose of this value is to make an atom appear above any regular atoms. For instance, in an isometric map if you want to display a character's name below them, it does not make much sense to have nearer objects cover up that name, so you can tell the name overlay to use</p> <p>EFFECTS_LAYER + MOB_LAYER</p> <p>and it will show up on top of all the normal icons on the map. This has been somewhat obviated by</p> <p>plane</p> <p>but may still be useful in some cases.</p> <p>EFFECTS_LAYER + MOB_LAYER</p> <p>plane</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance an obj should have a layer of</p> <p>EFFECTS_LAYER + OBJ_LAYER</p> <p>.</p> <p>EFFECTS_LAYER + OBJ_LAYER</p> <p>This can be mixed with</p> <p>TOPDOWN_LAYER</p> <p>, in non-topdown map formats. Anything in</p> <p>TOPDOWN_LAYER</p> <p>will display on top of</p> <p>EFFECTS_LAYER</p> <p>, and</p> <p>TOPDOWN_LAYER + EFFECTS_LAYER</p> <p>will be above both.</p> <p>TOPDOWN_LAYER</p> <p>TOPDOWN_LAYER</p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER + EFFECTS_LAYER</p> <p>This can also be mixed with</p> <p>BACKGROUND_LAYER</p> <p>, which takes priority over everything else.</p> <p>BACKGROUND_LAYER</p> <p>Images or overlays with</p> <p>FLOAT_LAYER</p> <p>can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p> <p>FLOAT_LAYER</p>"},{"location":"%7Bnotes%7D/HUD/","title":"HUD","text":""},{"location":"%7Bnotes%7D/HUD/#hud-screen-objects","title":"HUD / screen objects","text":"<p>See also: </p> <p>screen_loc var (movable atoms) </p> <p>screen var (client) </p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>See also: </p> <p>See also:</p> <p>screen_loc var (movable atoms) </p> <p>screen var (client) </p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>screen_loc var (movable atoms)</p> <p>screen var (client) </p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>screen var (client)</p> <p>view var (client) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>view var (client)</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>layer var (atom) </p> <p>image objects </p> <p>icon_size var (world)</p> <p>layer var (atom) </p> <p>image objects </p> <p>layer var (atom)</p> <p>image objects </p> <p>image objects</p> <p>HUD stands for Heads-Up Display, and refers to any atoms that appear on the screen but don't move when the player moves. These are also called screen objects. Any movable atom can be added to the HUD by setting its</p> <p>screen_loc</p> <p>var, and adding it to</p> <p>client.screen</p> <p>for each user who is supposed to see it. This can be used to display a character's vital stats, scores, etc.</p> <p>screen_loc</p> <p>client.screen</p> <p>If you want to have something like a health meter or name attached to a moving atom, use overlays or</p> <p>/image</p> <p>objects instead. An</p> <p>/image</p> <p>object is similar to a screen object in that it can be shown to only certain players instead of being shown to everyone.</p> <p>/image</p> <p>/image</p> <p>The size of the screen depends on</p> <p>client.view</p> <p>(or</p> <p>world.view</p> <p>),</p> <p>world.map_format</p> <p>, and</p> <p>world.icon_size</p> <p>. In a normal topdown map format,</p> <p>client.view</p> <p>is the same as the screen size; in other map formats the screen might be a different size.</p> <p>client.view</p> <p>world.view</p> <p>world.map_format</p> <p>world.icon_size</p> <p>client.view</p> <p>The</p> <p>screen_loc</p> <p>var can be set to a value like</p> <p>\"1,1\"</p> <p>(the southwest tile of the screen),</p> <p>\"4,NORTH\"</p> <p>(fourth tile from the west, along the north side of the screen),</p> <p>\"SOUTHEAST\"</p> <p>, and so on. You can also include pixel offsets, percentages, and specify two corners to tile an icon repeatedly from one end to the other. See  screen_loc   for more details.</p> <p>screen_loc</p> <p>\"1,1\"</p> <p>\"4,NORTH\"</p> <p>\"SOUTHEAST\"</p> <p>screen_loc</p> <p>screen_loc</p> <p>can also be used to stretch the bounds of the HUD. A value of</p> <p>\"0,0\"</p> <p>will cause the atom to appear to the southwest of the southwest-most tile on the visible map, outside of the regular map bounds. Using HUDs in this way, you can provide a nice decorative \"frame\" for your map.</p> <p>screen_loc</p> <p>\"0,0\"</p> <p>More complex</p> <p>You can use HUDs in other map controls as well, by preceding screen_loc with the name of the map you will use followed by a colon. For instance,</p> <p>screen_loc=\"map2:1,1\"</p> <p>will show an icon in the southwest corner of the</p> <p>map2</p> <p>control. The actual size of a secondary HUD is based on how far out the icons in it extend in any direction. If you have one icon at</p> <p>\"map2:1,1\"</p> <p>and another at</p> <p>\"map2:4,3\"</p> <p>, then that HUD will be four tiles wide and three high.</p> <p>screen_loc=\"map2:1,1\"</p> <p>map2</p> <p>\"map2:1,1\"</p> <p>\"map2:4,3\"</p>"},{"location":"%7Bnotes%7D/TOPDOWN_LAYER/","title":"TOPDOWN LAYER","text":""},{"location":"%7Bnotes%7D/TOPDOWN_LAYER/#topdown_layer","title":"TOPDOWN_LAYER","text":"<p>See also: </p> <p>layer var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>layer var (atom) </p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>layer var (atom)</p> <p>map_format var (world) </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>map_format var (world)</p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>BACKGROUND_LAYER</p> <p>EFFECTS_LAYER </p> <p>stddef.dm file </p> <p>EFFECTS_LAYER</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>TOPDOWN_LAYER is a special high value that can be added to the regular layer of any atom. This is only available when using a non-topdown world.map_format, such as isometric mapping.</p> <p>The purpose of this value is to make an atom appear as if it belongs in a top-down map, when using a map_format other than TOPDOWN_MAP or TILED_ICON_MAP. This can be handy for title screens, or for special battle maps or the inside of a building in an RPG.</p> <p>When using this special layer, it should be added to the layer an atom normally uses. For instance a turf should have a layer of TOPDOWN_LAYER + TURF_LAYER. Usually you will want one part of the map to have TOPDOWN_LAYER, and for players to be unable to walk to there from the regular map. Mixing topdown icons and icons in the normal map_format in view of each other could look very strange. For safety's sake, the easiest thing to do is to keep them on separate z layers.</p> <p>This can be mixed with EFFECTS_LAYER. Anything in TOPDOWN_LAYER will display on top of EFFECTS_LAYER, and TOPDOWN_LAYER + EFFECTS_LAYER will be above both.</p> <p>This can also be mixed with BACKGROUND_LAYER, which takes priority over everything else.</p> <p>Images or overlays with FLOAT_LAYER can be left alone. They will automatically have the same layer as whatever atom they are attached to.</p>"},{"location":"%7Bnotes%7D/Unicode/","title":"Unicode","text":""},{"location":"%7Bnotes%7D/Unicode/#unicode","title":"Unicode","text":"<p>See also: </p> <p>text </p> <p>See also: </p> <p>See also:</p> <p>text </p> <p>text</p> <p>BYOND was originally written to handle 8-bit (\"ANSI\") characters only. However as time has marched on, Unicode has become ubiquitous for supporting multiple languages, special characters, and emojis. To adapt to this, BYOND now supports Unicode.</p> <p>When ANSI was king, every character was exactly one byte in width, because the only valid characters were between 1 and 255. (And technically, BYOND reserved 255 for its own use.) Now, BYOND uses an encoding called UTF-8 to store characters that can't fit in one byte.</p> <p>UTF-8 breaks up characters with codes of 128 or higher into multiple bytes, like so:</p> <p>|   Character code   |   Size in bytes   | | --- | --- | |   0 - 0x7F   |   1   | |   0x80 - 0x7FF   |   2   | |   0x800 - 0xFFFF   |   3   | |   0x10000 - 0x10FFFF   |   4   |</p> <p>|   Character code   |   Size in bytes   |</p> <p>Character code  |</p> <p>Size in bytes  | |   0 - 0x7F   |   1   |</p> <p>0 - 0x7F  |</p> <p>1  | |   0x80 - 0x7FF   |   2   |</p> <p>0x80 - 0x7FF  |</p> <p>2  | |   0x800 - 0xFFFF   |   3   |</p> <p>0x800 - 0xFFFF  |</p> <p>3  | |   0x10000 - 0x10FFFF   |   4   |</p> <p>0x10000 - 0x10FFFF  |</p> <p>4  |</p>"},{"location":"%7Bnotes%7D/Unicode/#_1","title":"Unicode","text":"<p>Text handling</p> <p>Importantly, BYOND's text procs are based on the byte position, not the character position which may be lower. In other words,</p> <p>length(\"abcd\u00e9fg\")</p> <p>is greater than 7; it's 8, because</p> <p>\u00e9</p> <p>takes up 2 bytes in UTF-8. That also means</p> <p>f</p> <p>is at position 7, not position 6.</p> <p>length(\"abcd\u00e9fg\")</p> <p>\u00e9</p> <p>f</p> <p>Why do the text procs work with byte position instead of character position? Because ultimately, it's faster. Going by character position would require counting every byte in a string (at least when it uses UTF-8) until the right character position was found. This would be detrimental to performance in most cases.</p> <p>For the most part, this distinction should be fairly invisible to you. Most code isn't going to encounter problems, but if you do a lot of text processing you should be aware of it.</p> <p>In particular,  text2ascii()   returns the Unicode value at a specific position, which may cover several bytes. If you loop through a string calling this proc for each character, you'll have to make adjustments for cases when multiple bytes have been read.</p> <p>text2ascii()</p> <p>The read-only</p> <p>[]</p> <p>index operator also uses byte positions.</p> <p>[]</p> <p>If you read a byte or cut text at an inappropriate point, any broken characters resulting from the cut will be turned into the Unicode replacement character \ufffd which is 0xFFFD.</p>"},{"location":"%7Bnotes%7D/Unicode/#_2","title":"Unicode","text":"<p>_char</p> <p>procs</p> <p>_char</p> <p>Most of the text handling procs have slower</p> <p>_char</p> <p>versions (e.g.,</p> <p>copytext_char</p> <p>) that use character positions instead of byte positions.</p> <p>_char</p> <p>copytext_char</p> <p>These should be used sparingly if at all; whenever it's possible to use byte positions, you should. When you do use a</p> <p>_char</p> <p>version of a proc, prefer using</p> <p>-offset</p> <p>instead of</p> <p>length_char(text)-offset</p> <p>for positions near the end of the string. Most text procs allow negative position values that count backwards from the end, and counting a small number of characters backward is faster than counting a lot of characters going forward.</p> <p>_char</p> <p>-offset</p> <p>length_char(text)-offset</p>"},{"location":"%7Bnotes%7D/Unicode/#_3","title":"Unicode","text":"<p>Old code</p> <p>Code written in ANSI will be up-converted to UTF-8 by Dream Maker, based on your current locale when the code is loaded.</p>"},{"location":"%7Bnotes%7D/big-icons/","title":"Big icons","text":""},{"location":"%7Bnotes%7D/big-icons/#big-icons","title":"Big icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>icon</p> <p>procs (icon) </p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>procs (icon)</p> <p>Blend proc (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Blend proc (icon)</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>icon_size var (world)</p> <p>Tiled icons </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Tiled icons</p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Isometric maps</p> <p>Side-view maps </p> <p>Side-view maps</p> <p>BYOND allows you to use icons that are not the same size as the tile size defined in world.icon_size. These icons can be manipulated with the /icon datum using their raw, native size, and shown on the map in full size. To use the old behavior where an atom can display only an icon of the normal tile size, use the TILED_ICON_MAP value for map_format instead.</p> <p>When you use an icon of non-standard size on an atom, the icon is \"anchored\" to the southwest corner of the atom. If you are using a top-down view (world.map_format=TOPDOWN_MAP), the icon will appear to spread out further to the east and north. In an isometric map (world.map_format=ISOMETRIC_MAP), the icon will cover additional tiles north and east as well. The \"footprint\" of an isometric icon--the actual map tiles it covers--is always square, so if your tile size is 64x64 and you use a 128x64 icon, the 128-pixel width means the icon will cover a 2x2 section of map tiles.</p> <p>It is important to remember that using a big icon is a visual effect  only   . It will not affect how the atom bumps into other atoms or vice-versa.</p> <p>only</p> <p>Big icons will affect layering--the order in which icons are drawn. In general, because a big icon is covering more than one tile of the map, it will try to draw above any other tiles in that space that are on the same layer. This way, you can set a turf to use a big icon without having to change the turfs to the north and east. If an atom has a big icon, any overlays and underlays attached to it will be pulled forward as well, so they will draw in front of anything on their same layer. In isometric mode this is about the same, except that the layer isn't that important--anything in the way will just be moved back behind the big icon.</p> <p>Note: Big overlays will not \"pull forward\" on their own. If the main atom uses a single-tile icon, a big overlay attached to it will not try to draw in front of other icons on the same layer. This is so that name labels, health bar overlays, etc. will not cause any odd behavior. To be safe, you should always specify a layer when adding an overlay.</p> <p>In isometric mode, layering is affected by the \"distance\" between the atom and the viewer, so putting a regular-sized icon and part of a big icon on the same tile could cause layering oddities. Tiles that are covered by a big icon will tend to be drawn behind the big icon as mentioned above. For this reason, any atoms whose icons cover more than one tile (the extra height of an isometric icon doesn't count) should always be dense, and you should block movement onto any tile covered by them.</p> <p>When manipulating icons with the /icon datum, you can still use Blend() to combine icons of different sizes. By default, the icons will be lined up at their southwest corners. You can change the position at which the second icon is blended.</p>"},{"location":"%7Bnotes%7D/color-gradient/","title":"Color gradient","text":""},{"location":"%7Bnotes%7D/color-gradient/#color-gradient","title":"Color gradient","text":"<p>See also: </p> <p>gradient proc </p> <p>color var (atom) </p> <p>Particle effects </p> <p>Color space </p> <p>See also: </p> <p>See also:</p> <p>gradient proc </p> <p>color var (atom) </p> <p>Particle effects </p> <p>Color space </p> <p>gradient proc</p> <p>color var (atom) </p> <p>Particle effects </p> <p>Color space </p> <p>color var (atom)</p> <p>Particle effects </p> <p>Color space </p> <p>Particle effects</p> <p>Color space </p> <p>Color space</p> <p>A color gradient is a special list that defines a range of colors that you can smoothly interpolate between. A simple example is a gradient from red to white:</p>"},{"location":"%7Bnotes%7D/color-gradient/#_1","title":"Color gradient","text":"<p>Example:</p> <p>list(\"red\", \"white\") // OR list(0, \"red\", 1, \"white\")</p> <p>Applying a number like 0.2 to this gradient would give you a color that's 20% of the way from red to white. More complex gradients however are also possible.</p> <p>The format of a gradient is a list that contains a number (the position along the gradient, from 0 to 1 unless you use values outside that range) followed by a color. You can have as complex a gradient as you like. If you reuse the same number twice in a row, the gradient will have a sudden color change at that point.</p> <p>It is also possible to skip numbers or colors, and they will be filled in automatically with the previous number or color. The exceptions are at the beginning and ends of the list; at the end of the gradient, the last color is assigned a number 1 by default, and the first is assigned 0. If you skip colors at the beginning, they will be filled in with the first color you use.</p> <p>Include \"loop\" anywhere in the list to make this a looped gradient. If you don't, any numbers outside the gradient's range will be clamped to that range. E.g., in a normal gradient ranging from 0 to 1, a number of 1.2 is interpreted as 1 without a loop and 0.2 with a loop.</p> <p>Here are some more examples:</p>"},{"location":"%7Bnotes%7D/color-gradient/#_2","title":"Color gradient","text":"<p>Example:</p> <p>// color wheel; ranges 0 to 6 and loops list(0, \"#f00\", 1, \"#ff0\", 2, \"#0f0\", 3, \"#0ff\", 4, \"#00f\", 5, \"#f0f\", 6, \"#f00\", \"loop\")</p> <p>// 10% each red, yellow, green, blue, with a 20% transition zone between each // notice no color follows 0.4 or 0.7, so the previous color is used list(0.1, \"#f00\", 0.3, \"#ff0\", 0.4, 0.6, \"#008000\", 0.7, 0.9, \"#00f\")</p> <p>// green and black stripes list(0.5, \"#008000\", 0.5, \"#000000\", \"loop\")</p> <p>You can also include \"space\" in the list, and give it an associated value that describes the color space this gradient uses to interpolate between colors. For instance,</p> <p>\"space\"=COLORSPACE_HSL</p> <p>will use HSL interpolation instead of the default RGB. See  Color space   for more information.</p> <p>\"space\"=COLORSPACE_HSL</p> <p>Color space</p>"},{"location":"%7Bnotes%7D/color-gradient/#_3","title":"Color gradient","text":"<p>Example:</p> <p>// color wheel with a different color space list(0, \"#f00\", 3, \"#0ff\", 6, \"#f00\", \"loop\", \"space\"=COLORSPACE_HSLA)</p> <p>Currently, color gradients are only used by particle effects and the  [gradient</p> <p>proc](#/proc/gradient)   . With particles, if you use a gradient the particle's color is given as a number, and that number is used to look up its real color from the gradient. The number can change over time, thus changing the particle's color.</p> <p>[gradient</p> <p>proc](#/proc/gradient)</p> <p>gradient</p>"},{"location":"%7Bnotes%7D/color-matrix/","title":"Color matrix","text":""},{"location":"%7Bnotes%7D/color-matrix/#color-matrix","title":"Color matrix","text":"<p>See also: </p> <p>color var (atom) </p> <p>color var (client) </p> <p>MapColors proc (icon) </p> <p>See also: </p> <p>See also:</p> <p>color var (atom) </p> <p>color var (client) </p> <p>MapColors proc (icon) </p> <p>color var (atom)</p> <p>color var (client) </p> <p>MapColors proc (icon) </p> <p>color var (client)</p> <p>MapColors proc (icon) </p> <p>MapColors proc (icon)</p> <p>A color matrix is used to transform colors, in the same way that a matrix represented by the</p> <p>/matrix</p> <p>datum is used to transform 2D coordinates. A transformation matrix is 3x3, of which only 6 values are needed because the last column is always the same. A color matrix, because it transforms four different numbers instead of two, is 5x5.</p> <p>/matrix</p> <pre><code>                |rr rg rb ra 0|\n                |gr gg gb ga 0|\n[r g b a 255] x |br bg bb ba 0| = [r' g' b' a' 255]\n                |ar ag ab aa 0|\n                |cr cg cb ca 1|\n\n</code></pre> <p>In easier-to-understand terms, this is how the result is calculated:</p> <p>new_red = red * rr + green * gr + blue * br + alpha * ar + 255 * cr new_green = red * rg + green * gg + blue * bg + alpha * ag + 255 * cg new_blue = red * rb + green * gb + blue * bb + alpha * ab + 255 * cb new_alpha = red * ra + green * ga + blue * ba + alpha * aa + 255 * ca</p> <p>It is helpful to think of each row in the matrix as what each component of the original color will become. The first row of the matrix is the rgba value you'll get for each unit of red; the second is what each green becomes, and so on.</p> <p>Because the fifth column of the matrix is always the same, only 20 of the values need to be provided. You can use a color matrix with atom.color or client.color in any of the following ways:</p> <p>RGB-only (9 to 12 values)</p> <p>list(rr,rg,rb, gr,gg,gb, br,bg,bb, cr,cg,cb)</p> <p>RGBA (16 to 20 values)</p> <p>list(rr,rg,rb,ra, gr,gg,gb,ga, br,bg,bb,ba, ar,ag,ab,aa, cr,cg,cb,ca)</p> <p>Row-by-row (3 to 5</p> <p>rgb()</p> <p>values, or null to use the default row)</p> <p>list(red_row, green_row, blue_row, alpha_row, constant_row)</p> <p>RGB-only (9 to 12 values)</p> <p>list(rr,rg,rb, gr,gg,gb, br,bg,bb, cr,cg,cb)</p> <p>RGBA (16 to 20 values)</p> <p>list(rr,rg,rb,ra, gr,gg,gb,ga, br,bg,bb,ba, ar,ag,ab,aa, cr,cg,cb,ca)</p> <p>Row-by-row (3 to 5</p> <p>rgb()</p> <p>values, or null to use the default row)</p> <p>rgb()</p> <p>list(red_row, green_row, blue_row, alpha_row, constant_row)</p> <p>Reading a color var that has been set to a matrix will return the full 20-item list, where every 4 items represent a row in the matrix (without the fifth column).</p> <p>In the</p> <p>MapColors()</p> <p>icon proc, the values are sent as arguments, not as a list.</p> <p>MapColors()</p>"},{"location":"%7Bnotes%7D/filters/","title":"Filters","text":""},{"location":"%7Bnotes%7D/filters/#filter-effects","title":"Filter effects","text":"<p>See also: </p> <p>filters var (atom) </p> <p>appearance_flags var (atom) </p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>See also: </p> <p>See also:</p> <p>filters var (atom) </p> <p>appearance_flags var (atom) </p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>filters var (atom)</p> <p>appearance_flags var (atom) </p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>appearance_flags var (atom)</p> <p>filter proc </p> <p>animate proc </p> <p>Understanding the renderer </p> <p>filter proc</p> <p>animate proc </p> <p>Understanding the renderer </p> <p>animate proc</p> <p>Understanding the renderer </p> <p>Understanding the renderer</p> <p>Filters are a way of adding special effects to an icon, or a group of icons (see</p> <p>KEEP_TOGETHER</p> <p>in  appearance_flags   ), by post-processing the image. A filter object describes a specific form of image processing, like for instance a blur or a drop shadow. Filters can be added or removed at will, and can even be animated.</p> <p>KEEP_TOGETHER</p> <p>appearance_flags</p> <p>A filter is created by using the  filter proc   like so:</p> <p>filter proc</p> <p>// halo effect mob.filters += filter(type=\"drop_shadow\", x=0, y=0,\\  size=5, offset=2, color=rgb(255,255,170))</p> <p>These are the filters currently supported:</p> <ul> <li>Alpha mask</li> <li>Angular blur</li> <li>Bloom</li> <li>Color matrix</li> <li>Displacement map</li> <li>Drop shadow</li> <li>Gaussian blur</li> <li>Layering (composite)</li> <li>Motion blur</li> <li>Outline</li> <li>Radial blur</li> <li>Rays</li> <li>Ripple</li> <li> <p>Wave</p> </li> <li> <p>Alpha mask</p> </li> </ul> <p>Alpha mask - Angular blur</p> <p>Angular blur - Bloom</p> <p>Bloom - Color matrix</p> <p>Color matrix - Displacement map</p> <p>Displacement map - Drop shadow</p> <p>Drop shadow - Gaussian blur</p> <p>Gaussian blur - Layering (composite)</p> <p>Layering (composite) - Motion blur</p> <p>Motion blur - Outline</p> <p>Outline - Radial blur</p> <p>Radial blur - Rays</p> <p>Rays - Ripple</p> <p>Ripple - Wave</p> <p>Wave</p>"},{"location":"%7Bnotes%7D/generators/","title":"Generators","text":""},{"location":"%7Bnotes%7D/generators/#generators","title":"Generators","text":"<p>See also: </p> <p>Particle effects </p> <p>generator proc </p> <p>color var (atom) </p> <p>Color matrix </p> <p>See also: </p> <p>See also:</p> <p>Particle effects </p> <p>generator proc </p> <p>color var (atom) </p> <p>Color matrix </p> <p>Particle effects</p> <p>generator proc </p> <p>color var (atom) </p> <p>Color matrix </p> <p>generator proc</p> <p>color var (atom) </p> <p>Color matrix </p> <p>color var (atom)</p> <p>Color matrix </p> <p>Color matrix</p> <p>A generator is an object that can produce a random number, vector (list of 3 numbers), color (as a text string), or color matrix (list of 20 numbers) in a specified range according to rules you set down. It is used primarily for particle effects, since it can run on the client.</p> <p>There are several types of generators:</p> <ul> <li>Numbers:   Generate a random real number.</li> <li>Vectors:   Generate a random vector.</li> <li>Shapes:   Generate a random vector within a specific shaped region.</li> <li> <p>Colors:   Generate a random color or color matrix.</p> </li> <li> <p>Numbers:   Generate a random real number.</p> </li> </ul> <p>Numbers: - Vectors:   Generate a random vector.</p> <p>Vectors: - Shapes:   Generate a random vector within a specific shaped region.</p> <p>Shapes: - Colors:   Generate a random color or color matrix.</p> <p>Colors:</p> <p>Generators can also be chained together with math operators and some procs. The second value can be a regular value instead of a generator, so for instance you can multiply a vector by 2, or by a matrix to transform it.</p> <p>|   Operators   |   Action   | | --- | --- | |   + - * /   |   Arithmetic operators. You can multiply a 3D vector by a color matrix (where red,green,blue in the matrix correspond to x,y,z) to do a 3D transform, or by a 2D matrix for a 2D transform.   | |   - (unary)   |   Negate the value, same as multiplying by -1.   | |   turn(), generator.Turn()   |   Rotate a vector clockwise in the XY plane.   |</p> <p>|   Operators   |   Action   |</p> <p>Operators  |</p> <p>Action  | |   + - * /   |   Arithmetic operators. You can multiply a 3D vector by a color matrix (where red,green,blue in the matrix correspond to x,y,z) to do a 3D transform, or by a 2D matrix for a 2D transform.   |</p> <ul> <li> <ul> <li>* /  |</li> </ul> </li> </ul> <p>Arithmetic operators. You can multiply a 3D vector by a color matrix (where red,green,blue in the matrix correspond to x,y,z) to do a 3D transform, or by a 2D matrix for a 2D transform.  | |   - (unary)   |   Negate the value, same as multiplying by -1.   |</p> <ul> <li>(unary)  |</li> </ul> <p>Negate the value, same as multiplying by -1.  | |   turn(), generator.Turn()   |   Rotate a vector clockwise in the XY plane.   |</p> <p>turn(), generator.Turn()  |</p> <p>Rotate a vector clockwise in the XY plane.  |</p>"},{"location":"%7Bnotes%7D/gliding/","title":"Gliding","text":""},{"location":"%7Bnotes%7D/gliding/#gliding","title":"Gliding","text":"<p>See also: </p> <p>Pixel movement </p> <p>animate_movement var (movable atom) </p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>See also: </p> <p>See also:</p> <p>Pixel movement </p> <p>animate_movement var (movable atom) </p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>Pixel movement</p> <p>animate_movement var (movable atom) </p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>animate_movement var (movable atom)</p> <p>appearance_flags var (atom) </p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>appearance_flags var (atom)</p> <p>glide_size var (movable atom) </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>glide_size var (movable atom)</p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>bound_x var (movable atom)</p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>bound_y var (movable atom)</p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>bound_width var (movable atom)</p> <p>bound_height var (movable atom) </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>bound_height var (movable atom)</p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>step_size var (movable atom)</p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>step_x var (movable atom)</p> <p>step_y var (movable atom) </p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>step_y var (movable atom)</p> <p>movement_mode var (world) </p> <p>fps var (client) </p> <p>movement_mode var (world)</p> <p>fps var (client) </p> <p>fps var (client)</p> <p>Gliding is a \"glitz\" effect applied by BYOND to cover up the visual sins of tile-based movement, by making objects and the map appear to move smoothly from one tile to another instead of immediately jumping. It is also available to smooth over small jumps in pixel movement that might occur, for instance if the client FPS is set higher than the server's.</p> <p>To control the gliding speed of an atom, set  <code>glide_size</code>   to the value of your choice. If this is not set, the client will attempt to adjust the speed manually.  <code>glide_size</code>   is measured in server ticks, so if  <code>client.fps</code>   is set to a value greater than  <code>world.fps</code>   , it will be scaled appropriately.</p> <p><code>glide_size</code> <code>glide_size</code> <code>client.fps</code> <code>world.fps</code></p> <p>Whether an object glides or jumps is based on how far it moves relative to its</p> <p>step_size</p> <p>value, which by default is a full tile width. If the movement goes too far past</p> <p>step_size</p> <p>in the X or Y directions, it's no longer a glide.</p> <p>step_size</p> <p>step_size</p> <p>The</p> <p>animate_movement</p> <p>var can be used to control the way in which an object glides, or suppress gliding altogether.</p> <p>animate_movement</p> <p>By using the</p> <p>LONG_GLIDE</p> <p>flag in</p> <p>appearance_flags</p> <p>, a diagonal glide will take just as long as a cardinal-direction glide by moving a fullt</p> <p>glide_size</p> <p>pixels in the dominant X or Y direction. Otherwise, gliding tries to move by that many pixels in strict Euclidean distance (a straight line) and diagonal glides take longer.</p> <p>LONG_GLIDE</p> <p>appearance_flags</p> <p>glide_size</p> <p>In  LEGACY_MOVEMENT_MODE   , gliding is turned off if you set any of the bound or step vars for an atom to a non-default value. The only gliding that occurs in this case is when client.fps is higher than world.fps. All other movement modes base gliding on an atom's</p> <p>glide_size</p> <p>value.</p> <p>LEGACY_MOVEMENT_MODE</p> <p>glide_size</p>"},{"location":"%7Bnotes%7D/isometric/","title":"Isometric","text":""},{"location":"%7Bnotes%7D/isometric/#isometric-maps","title":"Isometric maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>See also: </p> <p>See also:</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>icon_size var (world)</p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>dir var (client)</p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>pixel_w var (atom)</p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>pixel_z var (atom)</p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>screen_loc var (movable atoms)</p> <p>Big icons </p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Big icons</p> <p>Side-view maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Side-view maps</p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Topdown maps</p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>HUD</p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>BACKGROUND_LAYER</p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER </p> <p>TOPDOWN_LAYER</p> <p></p> <p></p> <p>Isometric projection is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions. If you look at a map top-down, each tile on the map is a square. The map is rotated 45\u00b0 clockwise and then tilted at an angle (30\u00b0) so that each square now looks like a foreshortened diamond from the viewer's perspective. What was once north now points to the northeast end of the viewer's screen; what was once east now points southeast to the viewer. Tiles that are more to the south or east are \"nearer\" to the viewer, and tiles that are north or west are \"farther\". The actual direction the map faces can be changed by using</p> <p>client.dir</p> <p>.</p> <p>client.dir</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>To use isometric mapping, set</p> <p>world.map_format</p> <p>to</p> <p>ISOMETRIC_MAP</p> <p>. You should set</p> <p>world.icon_size</p> <p>so the tile width is a multiple of 4 pixels. The width of the tile is highly important. The height of your tiles should be at least half that value. BYOND uses a 2:1 isometric format, meaning that the diamond base of each tile is half as high as its width. For example if you have a 64x64 tile size, every diamond in the map will be 64 pixels wide by 32 high, and you have an extra 32 pixels at the top of your icon for vertical projections like buildings. If you set the tile size to 64x80, the base is still a 64x32 diamond and you have 48 pixels left over for vertical structures.</p> <p>world.map_format</p> <p>ISOMETRIC_MAP</p> <p>world.icon_size</p> <p>In this mode</p> <p>pixel_x</p> <p>and</p> <p>pixel_y</p> <p>will offset icons along the \"ground\". To adjust horizontal and vertical positions, use the</p> <p>pixel_w</p> <p>and</p> <p>pixel_z</p> <p>vars.</p> <p>pixel_x</p> <p>pixel_y</p> <p>pixel_w</p> <p>pixel_z</p>"},{"location":"%7Bnotes%7D/isometric/#_1","title":"Isometric","text":"<p>Layers</p> <p>The</p> <p>layer</p> <p>var behaves differently in isometric mode. Because some tiles are nearer to the viewer than others, the tiles that are farther back need to be drawn first so they are behind any tiles that should go in front of them. So in isometric mode, the back row of tiles (a diagonal line of them) is drawn first, followed by the next row forward, and so on. The</p> <p>layer</p> <p>var only matters when icons overlap each other in the \"physical\" space, like an obj sitting on a turf.</p> <p>layer</p> <p>layer</p> <p>When pixel or step offsets, or gliding, place an object on multiple turfs, it is drawn on top of the nearer turf (assuming its layer is higher).</p> <p>Using icons wider than the regular tile size can have an impact on layering as well. See  Big icons   for more information.</p> <p>Big icons</p> <p>Because of the order in which icons are drawn, you may want to limit the ability of an atom to cut diagonally around corners. While moving northeast behind a dense wall, for instance, a mob might temporarily appear in front of the wall because its pixel offsets (from gliding) temporarily put it on the same tile as the wall. If you do not want to limit corner-cutting, a simple workaround for this case is to give the wall a higher layer than the mob.</p> <p>Screen objects (in</p> <p>client.screen</p> <p>) are always drawn on top of all isometric tiles, as is the case in other map modes as well.</p> <p>client.screen</p> <p>Since it may be desirable in some games to use a topdown map for some situations (like a special battle map), you can add</p> <p>TOPDOWN_LAYER</p> <p>to any atom's layer\u2014e.g.,</p> <p>TOPDOWN_LAYER+TURF_LAYER</p> <p>\u2014to make it appear in topdown mode. Topdown and isometric tiles really aren't meant to be mixed, but if they do mix you'll see topdown tiles always display above isometric tiles, just like screen objects do. The best way to use this is to apply</p> <p>TOPDOWN_LAYER</p> <p>to every tile in a certain part of the map that the players can't walk to.</p> <p>TOPDOWN_LAYER</p> <p>TOPDOWN_LAYER+TURF_LAYER</p> <p>TOPDOWN_LAYER</p> <p>If you want to use an overlay that should not be covered by other \"nearer\" icons on the map, such as a name or health meter, you can add</p> <p>EFFECTS_LAYER</p> <p>to the overlay's layer. Icons with</p> <p>EFFECTS_LAYER</p> <p>will draw above regular icons. Then objects with</p> <p>TOPDOWN_LAYER</p> <p>will draw on top of everything else. However, be aware that</p> <p>EFFECTS_LAYER</p> <p>has largely been superseded by the</p> <p>plane</p> <p>var.</p> <p>EFFECTS_LAYER</p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER</p> <p>EFFECTS_LAYER</p> <p>plane</p>"},{"location":"%7Bnotes%7D/isometric/#_2","title":"Isometric","text":"<p>Screen size</p> <p>In this mode,</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>is used to define the minimum number of map tiles you will see,  not   the screen/HUD size which is calculated from client.view. Extra map tiles are shown to fill out the screen size. HUD objects use screen coordinates, so 1,1 is still the lower left.</p> <p>world.view</p> <p>client.view</p> <p>not</p> <p>The actual HUD size is always a full number of tiles, whose size is defined by</p> <p>world.icon_size</p> <p>. If you have a tile size of</p> <p>64x64</p> <p>, and</p> <p>world.view=6</p> <p>(a 13x13 map), a full 13x13 diamond of map tiles will be shown. The width of this diamond is 13 tiles. The height is only half that, plus whatever vertical space is needed to show the icons in that area. Then everything is rounded up to a full tile size, so the result is a 13x7-tile screen. This is the formula you need if you want to calculate the screen size:</p> <p>world.icon_size</p> <p>64x64</p> <p>world.view=6</p> <p>pixel_width = round(icon_width * (view_width + view_height) / 2) pixel_height = round(icon_width * (view_width + view_height - 2) / 4) + icon_height</p> <p>screen_width = round((pixel_width + icon_width - 1) / icon_width) screen_height = round((pixel_height + icon_height - 1) / icon_height)</p> <p>If you use</p> <p>TOPDOWN_LAYER</p> <p>, any topdown sections of the map will be limited to this same view.</p> <p>TOPDOWN_LAYER</p>"},{"location":"%7Bnotes%7D/numbers/","title":"Numbers","text":""},{"location":"%7Bnotes%7D/numbers/#numbers","title":"Numbers","text":"<p>In DM, all numbers are stored in floating point format. Specifically, single-precision (32-bit) floating point. This is important to know if you think you will be working with large numbers or decimal values a lot, because the accuracy of the numbers is limited.</p> <p>32-bit floating point numbers can represent integers from -16777216 to 16777216 (2  24   ). Non-integer values can get about as small as 2  -126   and as large as 2  127   .</p> <p>24 -126 127</p> <p>Floating point numbers do not handle most decimal values precisely. For instance, 0.1 is not exactly 0.1, because floating point numbers are stored in a binary format and in binary, 1/10 is a fraction that repeats forever\u2014the same way 1/3 repeats as 0.33333... in decimal numbers. It ends up being rounded off, either a little higher or a littler lower than its true value. This means that the following loop won't work like you might expect:</p>"},{"location":"%7Bnotes%7D/numbers/#_1","title":"Numbers","text":"<p>Example:</p> <p>for(i = 0, i &lt; 100, i += 0.1)  world &lt;&lt; i</p> <p>You might expect that code to loop exactly 1000 times, with</p> <p>i</p> <p>going from 0 up to 99.9 before stopping. The truth is more complicated, because 0.1 stored in floating point is actually greater than the exact value of 0.1. Other values might be more or less than their exact numbers, and as you add these numbers together repeatedly you'll introduce more and more rounding error.</p> <p>i</p> <p>Even more insidious, if you add 0.1 a bunch of times starting from 0, and then subtract it out again the same number of times, the result you get may not be 0. This is counterintuitive, because you might expect rounding errors to reverse themselves in the same order they crept in. Unfortunately it doesn't work that way.</p> <p>You can correct for rounding error somewhat by using the  [round</p> <p>proc](#/proc/round)   to adjust the loop var each time, although for performance reasons it might be preferable to find another alternative.</p> <p>[round</p> <p>proc](#/proc/round)</p> <p>round</p> <p>for(i = 0, i &lt; 100, i = round(i + 0.1, 0.1))  world &lt;&lt; i</p> <p>Only fractions whose denominators are powers of 2 are immune to this rounding error, so 0.5 is in fact stored as an exact value.</p> <p>Another place floating point may lose accuracy is when you try to add numbers of very different sizes. For instance as stated above, the upper limit for accurate integers is 16777216. If you try to use a number such as 100 million it will only be approximate, so adding 1 to that number won't actually change it because the 1 is so much smaller, it will be gobbled up by rounding error.</p> <p>Also for the same reasons stated above, division will cost you accuracy. Again you can divide by powers of 2 easily enough, and you can divide an integer by any of its factors (like dividing 9 by 3) without a problem, but a fraction like 1/3 will repeat forever so it gets rounded to as much precision as floating point can manage.</p> <p>In decimal, floating point numbers have at least six decimal digits of precision. Since they're actually stored in binary, their true precision is exactly 24 bits.</p>"},{"location":"%7Bnotes%7D/particles/","title":"Particles","text":""},{"location":"%7Bnotes%7D/particles/#particle-effects","title":"Particle effects","text":"<p>See also: </p> <p>particles (movable atom var) </p> <p>Generators </p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>See also: </p> <p>See also:</p> <p>particles (movable atom var) </p> <p>Generators </p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>particles (movable atom var)</p> <p>Generators </p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>Generators</p> <p>generator proc </p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>generator proc</p> <p>Projection matrix </p> <p>stddef.dm file </p> <p>Projection matrix</p> <p>stddef.dm file </p> <p>stddef.dm file</p> <p>A particle set is a special effect, whose computations are handled entirely on the client, that spawns and tracks multiple pixels or icons with a temporary lifespan. Examples of this might be confetti, sparks, rocket exhaust, or rain or snow. Particles are rendered on a special surface and that gets attached to an obj or a mob like an overlay.</p> <p>Particles can exist in 3 dimensions instead of the usual 2, so a particle's position, velocity, and other values may have a z coordinate. To make use of this z coordinate, you can use a  projection matrix   . (The value of the z coordinate must be between -100 and 100 after projection. Otherwise it's not guaranteed the particle will be displayed.)</p> <p>projection matrix</p> <p>To create a particle set, use</p> <p>new</p> <p>to create a new</p> <p>/particles</p> <p>datum, and then you can set the datum's vars. The vars can be set to constant values, or generator functions that will allow the client to choose from a range of values when spawning those particles. (The easiest way to handle this is to create your own type that inherits from</p> <p>/particles</p> <p>, and set up the parameters you'll want at compile-time.)</p> <p>new</p> <p>/particles</p> <p>/particles</p> <p>After the datum is created, it can be assigned to an obj or mob using their</p> <p>particles</p> <p>var. The particles will appear on the map wherever that obj or mob appears.</p> <p>particles</p>"},{"location":"%7Bnotes%7D/particles/#_1","title":"Particles","text":"<p>Example:</p> <p>particles/snow  width = 500 // 500 x 500 image to cover a moderately sized map  height = 500  count = 2500 // 2500 particles  spawning = 12 // 12 new particles per 0.1s  bound1 = list(-1000, -300, -1000) // end particles at Y=-300  lifespan = 600 // live for 60s max  fade = 50 // fade out over the last 5s if still on screen  // spawn within a certain x,y,z space  position = generator(\"box\", list(-300,250,0), list(300,300,50))  // control how the snow falls  gravity = list(0, -1)  friction = 0.3 // shed 30% of velocity and drift every 0.1s  drift = generator(\"sphere\", 0, 2) obj/snow  screen_loc = \"CENTER\"  particles = new/particles/snow</p> <p>mob  proc/CreateSnow()  client?.screen += new/obj/snow</p> <p>These are the vars that can be used in a particle set. \"Tick\" refers to a BYOND standard tick of 0.1s.</p> <p>|   Particle vars that affect the entire set (generators are not allowed for these)   | | --- | |   Var   |   Type   |   Description   | |   width   |   num   |   Size of particle image in pixels   | |   height   | |   count   |   num   |   Maximum particle count   | |   spawning   |   num   |   Number of particles to spawn per tick (can be fractional)   | |   bound1   |   vector   |   Minimum particle position in x,y,z space; defaults to list(-1000,-1000,-1000)   | |   bound2   |   vector   |   Maximum particle position in x,y,z space; defaults to list(1000,1000,1000)   | |   gravity   |   vector   |   Constant acceleration applied to all particles in this set (pixels per squared tick)   | |   gradient   | color gradient  |   Color gradient used, if any   | |   transform   | matrix  |   Transform done to all particles, if any (can be higher than 2D)   | |   Vars that apply when a particle spawns   | |   lifespan   |   num   |   Maximum life of the particle, in ticks   | |   fade   |   num   |   Fade-out time at end of lifespan, in ticks   | |   fadein   |   num   |   Fade-in time, in ticks   | |   icon   |   icon   |   Icon to use, if any; no icon means this particle will be a dot</p> <p>Can be assigned a weighted list of icon files, to choose an icon at random   | |   icon_state   |   text   |   Icon state to use, if any</p> <p>Can be assigned a weighted list of strings, to choose an icon at random   | |   color   |   num or color   |   Particle color (not a color matrix); can be a number if a gradient is used   | |   color_change   |   num   |   Color change per tick; only applies if gradient is used   | |   position   |   num   |   x,y,z position, from center in pixels   | |   velocity   |   num   |   x,y,z velocity, in pixels   | |   scale   |   vector (2D)   |   Scale applied to icon, if used; defaults to list(1,1)   | |   grow   |   num   |   Change in scale per tick; defaults to list(0,0)   | |   rotation   |   num   |   Angle of rotation (clockwise); applies only if using an icon   | |   spin   |   num   |   Change in rotation per tick   | |   friction   |   num   |   Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift   | |   Vars that are evalulated every tick   | |   drift   |   vector   |   Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects   |</p> <p>|   Particle vars that affect the entire set (generators are not allowed for these)   |</p> <p>Particle vars that affect the entire set (generators are not allowed for these)  | |   Var   |   Type   |   Description   |</p> <p>Var  |</p> <p>Type  |</p> <p>Description  | |   width   |   num   |   Size of particle image in pixels   |</p> <p>width  |</p> <p>num  |</p> <p>Size of particle image in pixels  | |   height   |</p> <p>height  | |   count   |   num   |   Maximum particle count   |</p> <p>count  |</p> <p>num  |</p> <p>Maximum particle count  | |   spawning   |   num   |   Number of particles to spawn per tick (can be fractional)   |</p> <p>spawning  |</p> <p>num  |</p> <p>Number of particles to spawn per tick (can be fractional)  | |   bound1   |   vector   |   Minimum particle position in x,y,z space; defaults to list(-1000,-1000,-1000)   |</p> <p>bound1  |</p> <p>vector  |</p> <p>Minimum particle position in x,y,z space; defaults to list(-1000,-1000,-1000)  | |   bound2   |   vector   |   Maximum particle position in x,y,z space; defaults to list(1000,1000,1000)   |</p> <p>bound2  |</p> <p>vector  |</p> <p>Maximum particle position in x,y,z space; defaults to list(1000,1000,1000)  | |   gravity   |   vector   |   Constant acceleration applied to all particles in this set (pixels per squared tick)   |</p> <p>gravity  |</p> <p>vector  |</p> <p>Constant acceleration applied to all particles in this set (pixels per squared tick)  | |   gradient   | color gradient  |   Color gradient used, if any   |</p> <p>gradient  |  color gradient  | color gradient</p> <p>Color gradient used, if any  | |   transform   | matrix  |   Transform done to all particles, if any (can be higher than 2D)   |</p> <p>transform  |  matrix  | matrix</p> <p>Transform done to all particles, if any (can be higher than 2D)  | |   Vars that apply when a particle spawns   |</p> <p>Vars that apply when a particle spawns  | |   lifespan   |   num   |   Maximum life of the particle, in ticks   |</p> <p>lifespan  |</p> <p>num  |</p> <p>Maximum life of the particle, in ticks  | |   fade   |   num   |   Fade-out time at end of lifespan, in ticks   |</p> <p>fade  |</p> <p>num  |</p> <p>Fade-out time at end of lifespan, in ticks  | |   fadein   |   num   |   Fade-in time, in ticks   |</p> <p>fadein  |</p> <p>num  |</p> <p>Fade-in time, in ticks  | |   icon   |   icon   |   Icon to use, if any; no icon means this particle will be a dot</p> <p>Can be assigned a weighted list of icon files, to choose an icon at random   |</p> <p>icon  |</p> <p>icon  |</p> <p>Icon to use, if any; no icon means this particle will be a dot</p> <p>Can be assigned a weighted list of icon files, to choose an icon at random  |</p> <p>|   icon_state   |   text   |   Icon state to use, if any</p> <p>Can be assigned a weighted list of strings, to choose an icon at random   |</p> <p>icon_state  |</p> <p>text  |</p> <p>Icon state to use, if any</p> <p>Can be assigned a weighted list of strings, to choose an icon at random  |</p> <p>|   color   |   num or color   |   Particle color (not a color matrix); can be a number if a gradient is used   |</p> <p>color  |</p> <p>num or color  |</p> <p>Particle color (not a color matrix); can be a number if a gradient is used  | |   color_change   |   num   |   Color change per tick; only applies if gradient is used   |</p> <p>color_change  |</p> <p>num  |</p> <p>Color change per tick; only applies if gradient is used  | |   position   |   num   |   x,y,z position, from center in pixels   |</p> <p>position  |</p> <p>num  |</p> <p>x,y,z position, from center in pixels  | |   velocity   |   num   |   x,y,z velocity, in pixels   |</p> <p>velocity  |</p> <p>num  |</p> <p>x,y,z velocity, in pixels  | |   scale   |   vector (2D)   |   Scale applied to icon, if used; defaults to list(1,1)   |</p> <p>scale  |</p> <p>vector (2D)  |</p> <p>Scale applied to icon, if used; defaults to list(1,1)  | |   grow   |   num   |   Change in scale per tick; defaults to list(0,0)   |</p> <p>grow  |</p> <p>num  |</p> <p>Change in scale per tick; defaults to list(0,0)  | |   rotation   |   num   |   Angle of rotation (clockwise); applies only if using an icon   |</p> <p>rotation  |</p> <p>num  |</p> <p>Angle of rotation (clockwise); applies only if using an icon  | |   spin   |   num   |   Change in rotation per tick   |</p> <p>spin  |</p> <p>num  |</p> <p>Change in rotation per tick  | |   friction   |   num   |   Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift   |</p> <p>friction  |</p> <p>num  |</p> <p>Amount of velocity to shed (0 to 1) per tick, also applied to acceleration from drift  | |   Vars that are evalulated every tick   |</p> <p>Vars that are evalulated every tick  | |   drift   |   vector   |   Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects   |</p> <p>drift  |</p> <p>vector  |</p> <p>Added acceleration every tick; e.g. a circle or sphere generator can be applied to produce snow or ember effects  |</p> <p>The</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>values are special in that they can't be assigned a generator, but they can be assigned a constant icon or string, respectively, or a list of possible values to choose from like so:</p> <p>icon</p> <p>icon_state</p> <p>icon = list('confetti.dmi'=5, 'coin.dmi'=1)</p> <p>The list used can either be a simple list, or it can contain weights as shown above.</p> <p>Changing a var on a particle datum will make changes to future particles. For instance, you can set the datum's</p> <p>spawning</p> <p>var to 0 to make it stop creating new particles. (Note: If you are changing a vector or color matrix, such as</p> <p>gravity</p> <p>, you need to assign a new value. You can't for instance set</p> <p>particles.gravity[2] = 0</p> <p>because it won't do anything to update the particle stream.)</p> <p>spawning</p> <p>gravity</p> <p>particles.gravity[2] = 0</p> <p>The same particle datum can be assigned to more than one movable atom. However the particles displayed by each atom will be different.</p>"},{"location":"%7Bnotes%7D/pixel-movement/","title":"Pixel movement","text":""},{"location":"%7Bnotes%7D/pixel-movement/#pixel-movement","title":"Pixel movement","text":"<p>See also: </p> <p>Bounding boxes </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>See also: </p> <p>See also:</p> <p>Bounding boxes </p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Bounding boxes</p> <p>bound_x var (movable atom) </p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bound_x var (movable atom)</p> <p>bound_y var (movable atom) </p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bound_y var (movable atom)</p> <p>bound_width var (movable atom) </p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bound_width var (movable atom)</p> <p>bound_height var (movable atom) </p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bound_height var (movable atom)</p> <p>Speed and position </p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Speed and position</p> <p>step_size var (movable atom) </p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>step_size var (movable atom)</p> <p>step_x var (movable atom) </p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>step_x var (movable atom)</p> <p>step_y var (movable atom) </p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>step_y var (movable atom)</p> <p>locs list var (movable atom) </p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>locs list var (movable atom)</p> <p>contents list var (atom) </p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>contents list var (atom)</p> <p>fps var (world) </p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>fps var (world)</p> <p>Movement </p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Movement</p> <p>Move proc (movable atom) </p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Move proc (movable atom)</p> <p>Cross proc (atom) </p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Cross proc (atom)</p> <p>Crossed proc (atom) </p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Crossed proc (atom)</p> <p>Uncross proc (atom) </p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Uncross proc (atom)</p> <p>Uncrossed proc (atom) </p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Uncrossed proc (atom)</p> <p>movement_mode var (world) </p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>movement_mode var (world)</p> <p>appearance_flags var (atom) </p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>appearance_flags var (atom)</p> <p>Other topics </p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>Other topics</p> <p>bounds proc </p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bounds proc</p> <p>bounds_dist proc </p> <p>Gliding </p> <p>bounds_dist proc</p> <p>Gliding </p> <p>Gliding</p> <p>Pixel movement is a concept that allows atoms to escape the constraints of BYOND's historically tile-based movement, and move in smaller steps. In the past this had to be done with soft code, but that was sometimes inconvenient and it did not perform as well in projects with many objects moving.</p> <p>The key to understanding pixel movement is to use the bound and step vars. You use the bound family of vars to define a bounding box for a movable atom, instead of just making it one full tile in size. The step vars can give it a movement speed and offset it from the corner of the tile it's standing on.</p> <ul> <li>bound_x: The left edge of the bounding box</li> <li>bound_y: The bottom edge of the bounding box</li> <li>bound_width: Width of the bounding box</li> <li>bound_height: Height of the bounding box</li> <li>step_size: default movement speed</li> <li>step_x: x offset from the corner of loc</li> <li> <p>step_y: y offset from the corner of loc</p> </li> <li> <p>bound_x: The left edge of the bounding box</p> </li> <li> <p>bound_y: The bottom edge of the bounding box</p> </li> <li> <p>bound_width: Width of the bounding box</p> </li> <li> <p>bound_height: Height of the bounding box</p> </li> <li> <p>step_size: default movement speed</p> </li> <li> <p>step_x: x offset from the corner of loc</p> </li> <li> <p>step_y: y offset from the corner of loc</p> </li> </ul> <p>Those are for movable atoms only; they do not apply to turfs.</p> <p>If  world.movement_mode   is set to</p> <p>TILED_MOVEMENT_MODE</p> <p>, all movable atoms must be aligned to the tile grid: their step_x/y/size values must be multiples of the icon size, and their bounds must also land on tile boundaries although the atom can be bigger than one tile. In other movement modes you can specify that only specific atoms use this behavior, by giving them the  TILE_MOVER   appearance flag.</p> <p>world.movement_mode</p> <p>TILED_MOVEMENT_MODE</p> <p>TILE_MOVER</p>"},{"location":"%7Bnotes%7D/pixel-movement/#_1","title":"Pixel movement","text":"<p>Bounding boxes</p> <p></p> <p>Left:   The bounding box (blue) is the only part of the mob that actually collides with anything. By default, it would cover the whole turf (brown). Any turfs covered by the bounding box are in the mob's locs var.  Right:   The atom's true position (shaded) is offset from the turf by step_x and step_y.</p> <p></p> <p>Left:   The bounding box (blue) is the only part of the mob that actually collides with anything. By default, it would cover the whole turf (brown). Any turfs covered by the bounding box are in the mob's locs var.  Right:   The atom's true position (shaded) is offset from the turf by step_x and step_y.</p> <p>Left: Right:</p> <p>As an example, if your players' mobs have icons that only cover the center 24\u00d724 pixels of a regular 32\u00d732 icon, then you would set the mobs' bound_x and bound_y to 4--because there are 4 pixels unused to the left and bottom--and bound_width and bound_height to 24.</p> <p>The mob's physical location on the map depends on four things: Its loc, its step_x/y values, its bound_x/y values, and its bound_width/height. The lower left corner of the bounding box, relative to the turf the mob is actually standing on, begins at step_x+bound_x on the left and step_y+bound_y on the bottom.</p> <p>The physical position of the bounding box is  not affected   by the pixel_x/y/z vars. Those are still strictly visual offsets.</p> <p>not affected</p> <p>The turfs the mob is covering can be read from the read-only locs var. The mob will also appear in the contents of those turfs.</p> <p>Note: This means if an atom is in a turf's contents, its loc is  not necessarily   that turf. The contents list is made to include \"overhangers\" from another tile for ease of use.</p> <p>not necessarily</p>"},{"location":"%7Bnotes%7D/pixel-movement/#_2","title":"Pixel movement","text":"<p>Movement</p> <p>All of the step and walk procs have been upgraded to take an additional argument, which is the speed at which the atom should move. If that argument is left out, the atom's own step_size is used by default. The step_size determines how fast the step_x and step_y values will change when moving.</p> <p>Move() has two new arguments that handle the position change gracefully. These are the step_x and step_y values for the target location.</p> <p>Pixel movement changes the behavior of the Move() proc, because a lot of things are possible that were not possible when BYOND only supported moving one tile at a time. For starters, a Move() is either a \"slide\" or a \"jump\" depending on the distance. A slide is when the move can be stopped partway; a jump is strictly pass/fail. Anything greater than one tile  and   the mover's regular step_size is considered a jump. Changing z levels is also a jump, as is moving to/from a non-turf.</p> <p>and</p> <p>If step_x and step_y aren't within a good range, the new loc and the step_x/y values may be changed so that the southwest corner of the mover's bounding box is standing on its actual loc, or as close to it as possible.</p> <p>Enter() and Exit() can be called for several turfs and/or areas, not just one at a time. It is also possible for them not to be called at all, if the moving atom moves within a turf but doesn't cross a new turf boundary. Enter() and Exit() are only called when first attempting to enter or fully exit. The behavior of these procs depends on  world.movement_mode   ; in legacy mode, they look at some of the contents of the turfs as well as the turfs themselves, to preserve behavior found in older BYOND versions.</p> <p>world.movement_mode</p> <p>Cross() and Uncross() are the equivalent of Enter() and Exit() but apply to objects the mover will either overlap or stop overlapping. (For turfs, Enter() and Exit() call these procs by default, since the mover is both stepping  into   and  onto   a turf.) Likewise Crossed() and Uncrossed() are the equivalents of Entered() and Exited().</p> <p>into onto</p> <p>If an atom is sliding, its movement can be halted if it encounters an obstacle partway along its route. Bump() will still be called for any obstacles the atom runs into, but Move() will return the number of pixels moved (the most in any direction). When sliding at a speed so fast that the distance is bigger than the atom itself, the move will be split up into several smaller slides to avoid skipping over any obstacles.</p> <p>Gliding, which is used to show smooth movement between atoms in tile movement, is mostly not used in pixel movement. It only applies when the client uses a higher  fps   than the server.</p> <p>fps</p>"},{"location":"%7Bnotes%7D/pixel-movement/#_3","title":"Pixel movement","text":"<p>Pixel procs</p> <p>The bounds() and obounds() procs have been added to grab a list of atoms within a given bounding box. That box can be relative to an atom, or in absolute coordinates.</p> <p>bounds_dist() tells the distance between two atoms, in pixels. If it is positive, that is the minimum distance the atoms would have to traverse to be touching. At 0, they are touching but not in collision. A negative value means the two atoms are in collision.</p>"},{"location":"%7Bnotes%7D/projection-matrix/","title":"Projection matrix","text":""},{"location":"%7Bnotes%7D/projection-matrix/#projection-matrix","title":"Projection matrix","text":"<p>See also: </p> <p>Particle effects </p> <p>transform var (atom) </p> <p>matrix </p> <p>Color matrix </p> <p>See also: </p> <p>See also:</p> <p>Particle effects </p> <p>transform var (atom) </p> <p>matrix </p> <p>Color matrix </p> <p>Particle effects</p> <p>transform var (atom) </p> <p>matrix </p> <p>Color matrix </p> <p>transform var (atom)</p> <p>matrix </p> <p>Color matrix </p> <p>matrix</p> <p>Color matrix </p> <p>Color matrix</p> <p>Note: Currently this feature applies only to particle effects, using the</p> <p>transform</p> <p>var.</p> <p>transform</p> <p>Normally icons in BYOND can only be transformed in 2D, using a simple 3x3 matrix. This is represented by the</p> <p>/matrix</p> <p>object, which cuts off the last column because it isn't used. However particles can have coordinates in x, y, and z, and the whole particle set can be given a transformation matrix that handles all three dimensions.</p> <p>/matrix</p>"},{"location":"%7Bnotes%7D/projection-matrix/#_1","title":"Projection matrix","text":"<p>Simple 2D transforms</p> <p>The easiest transformation for particles is a simple 2D one, which you can do by setting the particle datum's</p> <p>transform</p> <p>var to a</p> <p>/matrix</p> <p>object.</p> <p>transform</p> <p>/matrix</p> <pre><code>          a d 0\nx y 1  *  b e 0  =  x' y' 1\n          c f 1\n</code></pre> <p>When an x,y point is multiplied by the matrix, it becomes the new point x',y'. This is equivalent to:</p> <pre><code>x' = a*x + b*y + c\ny' = d*x + e*y + f\n</code></pre> <p>This is called an  affine transform   because all the operations are \"linear\" in math terms. (That is, every term in the formula above has a single variable, not raised to a higher power than 1.)</p> <p>affine transform</p>"},{"location":"%7Bnotes%7D/projection-matrix/#_2","title":"Projection matrix","text":"<p>3x4 matrix (x,y,z with translation)</p> <p>3D affine transforms of this type are also affine transformations. There is no special object for this so a list is used (see below).</p> <pre><code>            xx xy xz 0\nx y z 1  *  yx yy yz 0  =  x' y' z' 1\n            zx zy zz 0\n            cx cy cz 1\n</code></pre> <p>The way to read the vars above is that the first letter says what input component is being transformed (x,y,z, or c for \"constant\"), and the second letter is the output component.</p> <pre><code>x' = xx*x + yx*y + zx*z + cx\ny' = xy*x + yy*y + zy*z + cy\nz' = xz*x + yz*y + zz*z + cz\n</code></pre> <p>To use this kind of matrix, you can cut off the 4th column and provide the values in a list form, in row-major order:</p> <p>list(xx,xy,xz, yx,yy,yz, zx,zy,zz, cx,cy,cz)</p> <p>Note the 4th row is also optional.</p>"},{"location":"%7Bnotes%7D/projection-matrix/#_3","title":"Projection matrix","text":"<p>4x4 matrix (x,y,z,w with projection)</p> <p>This is the most interesting matrix, since if you use all 4 columns you're actually altering an \"axis\" called w. This isn't a real axis, but is just a number that the resulting vector will be divided by.</p> <pre><code>            xx xy xz xw\nx y z 1  *  yx yy yz yw  =  x'w' y'w' z'w' w'\n            zx zy zz zw\n            wx wy wz ww\n\nw' = xw*x + yw*y + zw*z + ww\nx' = (xx*x + yx*y + zx*z + wx) / w'\ny' = (xy*x + yy*y + zy*z + wy) / w'\nz' = (xz*x + yz*y + zz*z + wz) / w'\n</code></pre> <p>In a regular affine transform, w always stays at 1. In projection you can think of w as a distance from the \"camera\". 1 is where objects are their \"normal\" size. If you make the z value affect w' by setting zw, you basically make an object look smaller at higher z values.</p> <p>This is a simple projection matrix where x,y,z are left untouched, but there's a projection effect. The \"D\" value is how far away the \"camera\" is from z=0, so a point at z=D looks like it's twice as far away.</p> <pre><code>1  0  0  0\n0  1  0  0\n0  0  1  1/D\n0  0  0  1\n\n</code></pre> <p>This 4x4 matrix is handled as a list just like the 3x4 affine matrix:</p> <p>list(xx,xy,xz,xw, yx,yy,yz,yw, zx,zy,zz,zw, wx,wy,wz,ww)</p>"},{"location":"%7Bnotes%7D/regex/","title":"Regex","text":""},{"location":"%7Bnotes%7D/regex/#regular-expressions","title":"Regular expressions","text":"<p>See also: </p> <p>regex datum </p> <p>regex proc </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>See also: </p> <p>See also:</p> <p>regex datum </p> <p>regex proc </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>regex datum</p> <p>regex proc </p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>regex proc</p> <p>findtext proc </p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>findtext proc</p> <p>replacetext proc </p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>replacetext proc</p> <p>splittext proc </p> <p>REGEX_QUOTE proc </p> <p>splittext proc</p> <p>REGEX_QUOTE proc </p> <p>REGEX_QUOTE proc</p> <p>Regular expressions are patterns that can be searched for within a text string, instead of searching for an exact match to a known piece of text. They are much more versatile for find and replace operations, and therefore useful for parsing, filtering, etc.</p> <p>Some example regular expressions are:</p> <p>|   Pattern   |   Code   |   Meaning   | | --- | --- | --- | |   B.*D   |   regex(\"B.*D\")   |   Find</p> <p>B</p> <p>, followed by any number of characters (including none), followed by a</p> <p>D</p> <p>.   | |   [0-3]   |   regex(@\"[0-3]\")   |   Find any digit from 0 to 3   | |   foo|bar   |   regex(\"foo|bar\",\"i\")   |   Find</p> <p>foo</p> <p>or</p> <p>bar</p> <p>, case-insensitive   | |   \\d+   |   regex(@\"\\d+\",\"g\")   |   Find all sequences of digits   |</p> <p>|   Pattern   |   Code   |   Meaning   |</p> <p>Pattern  |</p> <p>Code  |</p> <p>Meaning  | |   B.*D   |   regex(\"B.*D\")   |   Find</p> <p>B</p> <p>, followed by any number of characters (including none), followed by a</p> <p>D</p> <p>.   |</p> <p>B.*D  |</p> <p>regex(\"B.*D\")  |</p> <p>Find</p> <p>B</p> <p>, followed by any number of characters (including none), followed by a</p> <p>D</p> <p>.  |</p> <p>B</p> <p>D</p> <p>|   [0-3]   |   regex(@\"[0-3]\")   |   Find any digit from 0 to 3   |</p> <p>[0-3]  |</p> <p>regex(@\"[0-3]\")  |</p> <p>Find any digit from 0 to 3  | |   foo|bar   |   regex(\"foo|bar\",\"i\")   |   Find</p> <p>foo</p> <p>or</p> <p>bar</p> <p>, case-insensitive   |</p> foo bar regex(\"foo bar\",\"i\") <p>Find</p> <p>foo</p> <p>or</p> <p>bar</p> <p>, case-insensitive  |</p> <p>foo</p> <p>bar</p> <p>|   \\d+   |   regex(@\"\\d+\",\"g\")   |   Find all sequences of digits   |</p> <p>\\d+  |</p> <p>regex(@\"\\d+\",\"g\")  |</p> <p>Find all sequences of digits  |</p> <p>These are some of the patterns you can use. If you want to use any of the operators as an actual character, it must be escaped with a backslash.</p> <p>It is highly recommended that you use  raw strings   like  <code>@\"...\"</code>   for your regular expression patterns, because with a regular DM string you have to escape all backslash  <code>\\</code>   and open bracket  <code>[</code>   characters, which will make your regular expression much harder for you to read. It's easier to write  <code>@\"[\\d]\\n\"</code>   than  <code>\"\\[\\\\d]\\\\n\"</code>   .</p> <p>raw strings <code>@\"...\"</code> <code>\\</code> <code>[</code> <code>@\"[\\d]\\n\"</code> <code>\"\\[\\\\d]\\\\n\"</code></p> <p>|   Pattern   |   Matches   | | --- | --- | | a   |  b  | a   or  b  | |   .   |   Any character (except a line break)   | |   ^   |   Beginning of text; or line if</p> <p>m</p> <p>flag is used   | |   $   |   End of text; or line if</p> <p>m</p> <p>flag is used   | |   \\A   |   Beginning of text   | |   \\Z   |   End of text   | |   [  chars   ]   |   Any character between the brackets. Ranges can be specified with a hyphen, like 0-9. Character classes like</p> <p>\\d</p> <p>and</p> <p>\\s</p> <p>can also be used (see below).   | |   [^  chars   ]   |   Any character NOT matching the ones between the brackets.   | |   \\b   |   Word break   | |   \\B   |   Word non-break   | |   (  pattern   )   |   Capturing group: the pattern must match, and its contents will be captured in the group list.   | |   (?:  pattern   )   |   Non-capturing group: Match the pattern, but do not capture its contents.   | |   \\1  through   \\9   |   Backreference;</p> <p>\\  N </p> <p>is whatever was captured in the  N   th capturing group.   | |   Modifiers   | |   Modifiers are \"greedy\" by default, looking for the longest match possible. When following a word, they only apply to the last character.   | | a   *   |   Match  a   zero or more times   | | a   +   |   Match  a   one or more times   | | a   ?   |   Match  a   zero or one time   | | a   {  n   }   |   Match  a   , exactly  n   times   | | a   {  n   ,}   |   Match  a   ,  n   or more times   | | a   {  n   ,  m   }   |   Match  a   ,  n   to  m   times   | | modifier   ?   |   Make the previous modifier non-greedy (match as little as possible)   | |   Escape codes and character classes   | |   \\x  NN  |   Escape code for a single character, where  NN   is its hexadecimal ASCII value   | |   \\u  NNNN  |   Escape code for a single 16-bit Unicode character, where  NNNN   is its hexadecimal value   | |   \\U  NNNNNN  |   Escape code for a single 21-bit Unicode character, where  NNNNNN   is its hexadecimal value   | |   \\d   |   Any digit 0 through 9   | |   \\D   |   Any character except a digit or line break   | |   \\l   |   Any letter A through Z, case-insensitive   | |   \\L   |   Any character except a letter or line break   | |   \\w   |   Any identifier character: digits, letters, or underscore   | |   \\W   |   Any character except an identifier character or line break   | |   \\s   |   Any space character   | |   \\S   |   Any character except a space or line break   | |   Assertions   | |   (?=  pattern   )   |   Look-ahead: Require this pattern to come next, but don't include it in the match   | |   (?!  pattern   )   |   Look-ahead: Require this pattern NOT to come next   | |   (?&lt;=  pattern   )   |   Look-behind: Require this pattern to come before, but don't include it in the match (must be a fixed byte length)   | |   (?&lt;!  pattern   )   |   Look-behind: Require this pattern NOT to come before (must be a fixed byte length)   |</p> <p>|   Pattern   |   Matches   |</p> <p>Pattern  |</p> <p>Matches  | | a   |  b  | a   or  b  |</p> <p>a   |  b  | a b a   or  b  | a b |   .   |   Any character (except a line break)   |</p> <p>.  |</p> <p>Any character (except a line break)  | |   ^   |   Beginning of text; or line if</p> <p>m</p> <p>flag is used   |</p> <p>^  |</p> <p>Beginning of text; or line if</p> <p>m</p> <p>flag is used  |</p> <p>m</p> <p>|   $   |   End of text; or line if</p> <p>m</p> <p>flag is used   |</p> <p>$  |</p> <p>End of text; or line if</p> <p>m</p> <p>flag is used  |</p> <p>m</p> <p>|   \\A   |   Beginning of text   |</p> <p>\\A  |</p> <p>Beginning of text  | |   \\Z   |   End of text   |</p> <p>\\Z  |</p> <p>End of text  | |   [  chars   ]   |   Any character between the brackets. Ranges can be specified with a hyphen, like 0-9. Character classes like</p> <p>\\d</p> <p>and</p> <p>\\s</p> <p>can also be used (see below).   |</p> <p>[  chars   ]  | chars</p> <p>Any character between the brackets. Ranges can be specified with a hyphen, like 0-9. Character classes like</p> <p>\\d</p> <p>and</p> <p>\\s</p> <p>can also be used (see below).  |</p> <p>\\d</p> <p>\\s</p> <p>|   [^  chars   ]   |   Any character NOT matching the ones between the brackets.   |</p> <p>[^  chars   ]  | chars</p> <p>Any character NOT matching the ones between the brackets.  | |   \\b   |   Word break   |</p> <p>\\b  |</p> <p>Word break  | |   \\B   |   Word non-break   |</p> <p>\\B  |</p> <p>Word non-break  | |   (  pattern   )   |   Capturing group: the pattern must match, and its contents will be captured in the group list.   |</p> <p>(  pattern   )  | pattern</p> <p>Capturing group: the pattern must match, and its contents will be captured in the group list.  | |   (?:  pattern   )   |   Non-capturing group: Match the pattern, but do not capture its contents.   |</p> <p>(?:  pattern   )  | pattern</p> <p>Non-capturing group: Match the pattern, but do not capture its contents.  | |   \\1  through   \\9   |   Backreference;</p> <p>\\  N </p> <p>is whatever was captured in the  N   th capturing group.   |</p> <p>\\1  through   \\9  | through</p> <p>Backreference;</p> <p>\\  N </p> <p>is whatever was captured in the  N   th capturing group.  |</p> <p>\\  N </p> <p>N N |   Modifiers   |</p> <p>Modifiers  | |   Modifiers are \"greedy\" by default, looking for the longest match possible. When following a word, they only apply to the last character.   |</p> <p>Modifiers are \"greedy\" by default, looking for the longest match possible. When following a word, they only apply to the last character.  | | a   *   |   Match  a   zero or more times   |</p> <p>a   *  | a</p> <p>Match  a   zero or more times  | a | a   +   |   Match  a   one or more times   |</p> <p>a   +  | a</p> <p>Match  a   one or more times  | a | a   ?   |   Match  a   zero or one time   |</p> <p>a   ?  | a</p> <p>Match  a   zero or one time  | a | a   {  n   }   |   Match  a   , exactly  n   times   |</p> <p>a   {  n   }  | a n</p> <p>Match  a   , exactly  n   times  | a n | a   {  n   ,}   |   Match  a   ,  n   or more times   |</p> <p>a   {  n   ,}  | a n</p> <p>Match  a   ,  n   or more times  | a n | a   {  n   ,  m   }   |   Match  a   ,  n   to  m   times   |</p> <p>a   {  n   ,  m   }  | a n m</p> <p>Match  a   ,  n   to  m   times  | a n m | modifier   ?   |   Make the previous modifier non-greedy (match as little as possible)   |</p> <p>modifier   ?  | modifier</p> <p>Make the previous modifier non-greedy (match as little as possible)  | |   Escape codes and character classes   |</p> <p>Escape codes and character classes  | |   \\x  NN  |   Escape code for a single character, where  NN   is its hexadecimal ASCII value   |</p> <p>\\x  NN  | NN</p> <p>Escape code for a single character, where  NN   is its hexadecimal ASCII value  | NN |   \\u  NNNN  |   Escape code for a single 16-bit Unicode character, where  NNNN   is its hexadecimal value   |</p> <p>\\u  NNNN  | NNNN</p> <p>Escape code for a single 16-bit Unicode character, where  NNNN   is its hexadecimal value  | NNNN |   \\U  NNNNNN  |   Escape code for a single 21-bit Unicode character, where  NNNNNN   is its hexadecimal value   |</p> <p>\\U  NNNNNN  | NNNNNN</p> <p>Escape code for a single 21-bit Unicode character, where  NNNNNN   is its hexadecimal value  | NNNNNN |   \\d   |   Any digit 0 through 9   |</p> <p>\\d  |</p> <p>Any digit 0 through 9  | |   \\D   |   Any character except a digit or line break   |</p> <p>\\D  |</p> <p>Any character except a digit or line break  | |   \\l   |   Any letter A through Z, case-insensitive   |</p> <p>\\l  |</p> <p>Any letter A through Z, case-insensitive  | |   \\L   |   Any character except a letter or line break   |</p> <p>\\L  |</p> <p>Any character except a letter or line break  | |   \\w   |   Any identifier character: digits, letters, or underscore   |</p> <p>\\w  |</p> <p>Any identifier character: digits, letters, or underscore  | |   \\W   |   Any character except an identifier character or line break   |</p> <p>\\W  |</p> <p>Any character except an identifier character or line break  | |   \\s   |   Any space character   |</p> <p>\\s  |</p> <p>Any space character  | |   \\S   |   Any character except a space or line break   |</p> <p>\\S  |</p> <p>Any character except a space or line break  | |   Assertions   |</p> <p>Assertions  | |   (?=  pattern   )   |   Look-ahead: Require this pattern to come next, but don't include it in the match   |</p> <p>(?=  pattern   )  | pattern</p> <p>Look-ahead: Require this pattern to come next, but don't include it in the match  | |   (?!  pattern   )   |   Look-ahead: Require this pattern NOT to come next   |</p> <p>(?!  pattern   )  | pattern</p> <p>Look-ahead: Require this pattern NOT to come next  | |   (?&lt;=  pattern   )   |   Look-behind: Require this pattern to come before, but don't include it in the match (must be a fixed byte length)   |</p> <p>(?&lt;=  pattern   )  | pattern</p> <p>Look-behind: Require this pattern to come before, but don't include it in the match (must be a fixed byte length)  | |   (?&lt;!  pattern   )   |   Look-behind: Require this pattern NOT to come before (must be a fixed byte length)   |</p> <p>(?&lt;!  pattern   )  | pattern</p> <p>Look-behind: Require this pattern NOT to come before (must be a fixed byte length)  |</p> <p>The optional flags can be any combination of these:</p> <p>|   Flag   |   Meaning   | | --- | --- | |   i   |   Case-insensitive matching   | |   g   |   Global: In Find() subsequent calls will start where this left off, and in Replace() all matches are replaced.   | |   m   |   Multi-line: ^ and $ refer to the beginning and end of a line, respectively.   |</p> <p>|   Flag   |   Meaning   |</p> <p>Flag  |</p> <p>Meaning  | |   i   |   Case-insensitive matching   |</p> <p>i  |</p> <p>Case-insensitive matching  | |   g   |   Global: In Find() subsequent calls will start where this left off, and in Replace() all matches are replaced.   |</p> <p>g  |</p> <p>Global: In Find() subsequent calls will start where this left off, and in Replace() all matches are replaced.  | |   m   |   Multi-line: ^ and $ refer to the beginning and end of a line, respectively.   |</p> <p>m  |</p> <p>Multi-line: ^ and $ refer to the beginning and end of a line, respectively.  |</p> <p>After calling</p> <p>Find()</p> <p>on a</p> <p>/regex</p> <p>datum, the datum's</p> <p>group</p> <p>var will contain a list\u2014if applicable\u2014of any sub-patterns found with the</p> <p>()</p> <p>parentheses operator. For instance, searching the string</p> <p>\"123\"</p> <p>for</p> <p>1(\\d)(\\d)</p> <p>will match</p> <p>\"123\"</p> <p>, and the</p> <p>group</p> <p>var will be</p> <p>list(\"2\",\"3\")</p> <p>. Groups can also be used in replacement expressions; see the  Replace() proc   for more details.</p> <p>Find()</p> <p>/regex</p> <p>group</p> <p>()</p> <p>\"123\"</p> <p>1(\\d)(\\d)</p> <p>\"123\"</p> <p>group</p> <p>list(\"2\",\"3\")</p> <p>Replace() proc</p>"},{"location":"%7Bnotes%7D/renderer/","title":"Renderer","text":""},{"location":"%7Bnotes%7D/renderer/#understanding-the-renderer","title":"Understanding the renderer","text":"<p>.renderlist {position: relative; display: inline-block; margin-left: 3em; text-align: center;}  .renderlist-label, .renderlist-caption, .renderlist-note {display: block; margin: 3px 0; width: 100%;}  .renderlist-caption {font-size: 1.1em; font-weight: bold;}  .renderlist-note {font-size: 0.9em;}  .renderlist-box {background: #eee; border: 1px solid #333; padding: 3px 10px; margin: 3px 0; border-radius: 10px;}  body.dark .renderlist-box {color: white; background: #333; border-color: #aaa;}  .renderlist-box .renderlist-box {background: #ddd; width: 100%;}  body.dark .renderlist-box .renderlist-box {background: #444; width: 100%;}  .renderlist-box .renderlist-box .renderlist-box {background: #ccc;}  body.dark .renderlist-box .renderlist-box .renderlist-box {background: #555;}</p> <p>To get the most out of BYOND's visual effects, it helps to understand how the map is displayed.</p> <p>Every atom has an  appearance   that holds all of its visual info (and sometimes a little non-visual info). This appearance has to be turned into sprites in order to be rendered.</p> <p>appearance</p> <p>Although many atoms need little more than a simple  icon   and  icon_state   and produce only a single sprite, some are more complex with overlays, underlays, maptext, etc. Also there may be  image objects   and  visual contents   involved, although they're not part of the atom's appearance.</p> <p>icon icon_state image objects visual contents</p> <p>For a simple</p> <p>icon</p> <p>and</p> <p>icon_state</p> <p>, just one sprite is generated. The client looks up the icon it's given. Then it looks up an icon state, which may be influenced by whether the atom is moving or not since you can have moving and non-moving icon states. Then it determines which  direction   to draw and which frame of the icon's animation (if any) to use.</p> <p>icon</p> <p>icon_state</p> <p>direction</p> <p>So with several simple icons, and not worrying about layers for now, a list of sprites lays out like this:</p> <p>Atom #1</p> <p>Atom #2</p> <p>\u22ee</p> <p>Atom #N</p> <p>Atom #1</p> <p>Atom #2</p> <p>\u22ee</p> <p>Atom #N</p>"},{"location":"%7Bnotes%7D/renderer/#_1","title":"Renderer","text":"<p>Overlays and underlays</p> <p>Now let's consider what happens when an appearance has overlays.</p> <p>Underlay #1</p> <p>\u22ee</p> <p>Underlay #N</p> <p>Main icon</p> <p>Overlay #1</p> <p>\u22ee</p> <p>Overlay #N</p> <p>Underlay #1</p> <p>\u22ee</p> <p>Underlay #N</p> <p>Main icon</p> <p>Overlay #1</p> <p>\u22ee</p> <p>Overlay #N</p> <p>The  underlays   list is processed first, then  overlays   . These lists contain appearances themselves, rather than actual atoms. This means that overlays are recursive: an overlay can have overlays itself. To picture how that works, just replace one of the overlays above with another list.</p> <p>underlays overlays</p> <p>Underlay #1</p> <p>Underlay #2</p> <p>Main icon</p> <p>Underlays of overlay #1</p> <p>Overlay #1 icon</p> <p>Overlays of overlay #1</p> <p>Overlay #2</p> <p>Underlay #1</p> <p>Underlay #2</p> <p>Main icon</p> <p>Underlays of overlay #1</p> <p>Overlay #1 icon</p> <p>Overlays of overlay #1</p> <p>Overlay #2</p>"},{"location":"%7Bnotes%7D/renderer/#_2","title":"Renderer","text":"<p>Image objects and visual contents</p> <p>Any atom can have an  image object   attached, which can be shown to only specific players. Most atoms, and image objects, can have  visual contents   that display other atoms as if they're overlays.</p> <p>image object visual contents</p> <p>Underlays</p> <p>Main icon</p> <p>Overlays</p> <p>Image objects</p> <p>Visual contents</p> <p>Underlays</p> <p>Main icon</p> <p>Overlays</p> <p>Image objects</p> <p>Visual contents</p> <p>As you see this is very similar to overlays. Just like overlays, image objects and visual contents have appearances of their own (and may also have their own images or visual contents), so this may be recursive as they add new overlays, etc.</p> <p>A couple of things to keep in mind:</p> <ul> <li>If an image object uses the  override   var, it will replace the main appearance's icon and overlays, although it  won't replace other images or visual contents.</li> <li>An object in visual contents can use  vis_flags   to set</li> </ul> <p>VIS_UNDERLAY</p> <p>and move itself before the parent's underlays.</p> <ul> <li>If an image object uses the  override   var, it will replace the main appearance's icon and overlays, although it  won't replace other images or visual contents.</li> </ul> <p>override - An object in visual contents can use  vis_flags   to set</p> <p>VIS_UNDERLAY</p> <p>and move itself before the parent's underlays.</p> <p>vis_flags</p> <p>VIS_UNDERLAY</p>"},{"location":"%7Bnotes%7D/renderer/#_3","title":"Renderer","text":"<p>Maptext and particles</p> <p>Any appearance may have  maptext   attached. That maptext draws above the icon but is grouped with it. That grouping will be discussed further below.</p> <p>maptext</p> <p>Particle effects also get grouped with the main icon in a similar way to maptext.</p> <p>For simplicity, from this point forward the diagram will just treat underlays, overlays, image objects, and visual contents as overlays.</p> <p>Main icon</p> <p>Maptext</p> <p>Particles</p> <p>Overlays</p> <p>Main icon</p> <p>Maptext</p> <p>Particles</p> <p>Main icon</p> <p>Maptext</p> <p>Particles</p> <p>Overlays</p>"},{"location":"%7Bnotes%7D/renderer/#_4","title":"Renderer","text":"<p>Color, transform, and filters</p> <p>An appearance's  color   and  alpha   vars (from here forwarded they'll just be referred to by</p> <p>color</p> <p>) and  transform   are inherited by any overlays, which also includes images and visual contents. You can avoid that inheritance by giving those overlays special  appearance_flags   :</p> <p>RESET_COLOR</p> <p>,</p> <p>RESET_ALPHA</p> <p>, and</p> <p>RESET_TRANSFORM</p> <p>.</p> <p>color alpha</p> <p>color</p> <p>transform appearance_flags</p> <p>RESET_COLOR</p> <p>RESET_ALPHA</p> <p>RESET_TRANSFORM</p> <p>The appearance's filters are only applied to the main icon.</p> <p>Main icon</p> <p>Maptext</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Overlays</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited from Main</p> <p>filters</p> <p>are not inherited from Main</p> <p>Main icon</p> <p>Maptext</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Main icon</p> <p>Maptext</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>color</p> <p>transform</p> <p>filters</p> <p>Overlays</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited from Main</p> <p>filters</p> <p>are not inherited from Main</p> <p>Overlays</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited from Main</p> <p>filters</p> <p>are not inherited from Main</p> <p>color</p> <p>transform</p> <p>filters</p> <p>When</p> <p>color</p> <p>and</p> <p>transform</p> <p>are inherited, they \"stack\". The inherited color and transform values are applied after those of the overlays.</p> <p>color</p> <p>transform</p>"},{"location":"%7Bnotes%7D/renderer/#_5","title":"Renderer","text":"<p>KEEP_TOGETHER</p> <p>and</p> <p>KEEP_APART</p> <p>KEEP_TOGETHER</p> <p>KEEP_APART</p> <p>There are times it's desirable for an appearance and all its overlays to be treated as a single unit so any colors or filters can be applied all at once. One simple example is if the appearance has an</p> <p>alpha</p> <p>of 128 to make it translucent, you probably want to draw the whole atom faded instead of drawing each sprite faded, one on top of the other.</p> <p>alpha</p> <p>By using the</p> <p>KEEP_TOGETHER</p> <p>value in  appearance_flags   (called KT for short), an appearance will group all of its underlays and overlays together. If this is an atom with image objects and visual contents, those will be grouped with it as well.</p> <p>KEEP_TOGETHER</p> <p>appearance_flags</p> <p>KT group</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Main icon</p> <p>Maptext</p> <p>Overlays</p> <p>KT group</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>Main icon</p> <p>Maptext</p> <p>Overlays</p> <p>KT group</p> <p>Main</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>apply</p> <p>color</p> <p>transform</p> <p>filters</p> <p>Main icon</p> <p>Maptext</p> <p>Main icon</p> <p>Maptext</p> <p>Overlays</p> <p>With</p> <p>KEEP_TOGETHER</p> <p>all of these sprites are rendered to a temporary drawing surface, and then the main appearance's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>are all applied to the combined drawing. This comes with a trade-off, since you can no longer use flags such as</p> <p>RESET_COLOR</p> <p>to opt out of inheritance.</p> <p>KEEP_TOGETHER</p> <p>color</p> <p>transform</p> <p>filters</p> <p>RESET_COLOR</p> <p>If an overlay doesn't want to be part of a KT group, it can use the</p> <p>KEEP_APART</p> <p>flag (KA for short). If there are multiple nested KT groups, KA will only escape the innermost group.</p> <p>KEEP_APART</p> <p>If an overlay inside a KT group has a different  plane   than the group's owner, it will be separated as if it defined</p> <p>KEEP_APART</p> <p>, except it can escape multiple nested groups.</p> <p>plane</p> <p>KEEP_APART</p>"},{"location":"%7Bnotes%7D/renderer/#_6","title":"Renderer","text":"<p>Layers and planes</p> <p>Any appearance can have a  layer   or  plane   , and these influence how it gets sorted. (There's also a concept called a \"sub-plane\" that's influenced by whether an atom is a  HUD/screen object   or special layers like  BACKGROUND_LAYER   .)</p> <p>layer plane HUD/screen object BACKGROUND_LAYER</p> <p>If a sprite is created with</p> <p>FLOAT_LAYER</p> <p>(any negative value counts as a floating layer) its layer has to be resolved, or \"unfloated\". The main sprite for an atom can never float; it has to have a real layer. Its overlays and underlays with floating layers will reorder themselves in numerical order, then look for the next closest sprites in the rendering list that has a non-negative layer.</p> <p>FLOAT_LAYER</p> <p>A similar process happens with</p> <p>FLOAT_PLANE</p> <p>. Planes can have negative values but</p> <p>FLOAT_PLANE</p> <p>and the values close to it are special. Sprites with floating planes have to resolve those as well.</p> <p>FLOAT_PLANE</p> <p>FLOAT_PLANE</p> <p>Once all atoms that will appear on the map are assembled into a rendering list of sprites, the order in which they're rendered on the map is determined in this order:</p> <ol> <li>The</li> </ol> <p>plane</p> <p>var matters most. 2. Subplane is counted next. E.g., HUD objects render above non-HUD objects. 3. Depending on  world.map_format   ,</p> <p>layer</p> <p>or physical position determine the drawing order from here. 4. After everything else has been checked, the order the sprites were generated in is the final tie-breaker.</p> <ul> <li>The</li> </ul> <p>plane</p> <p>var matters most.</p> <p>plane</p> <ul> <li> <p>Subplane is counted next. E.g., HUD objects render above non-HUD objects.</p> </li> <li> <p>Depending on  world.map_format   ,</p> </li> </ul> <p>layer</p> <p>or physical position determine the drawing order from here.</p> <p>world.map_format</p> <p>layer</p> <ul> <li>After everything else has been checked, the order the sprites were generated in is the final tie-breaker.</li> </ul> <p>In a typical topdown map,</p> <p>layer</p> <p>is basically all that matters after the plane and subplane are taken into account. There is a legacy concept called micro-layers that helps break ties between sprites with the same layer; for instance if an atom is moving it's usually desirable to draw it above other atoms with the same layer; this applies only to topdown maps.</p> <p>layer</p>"},{"location":"%7Bnotes%7D/renderer/#_7","title":"Renderer","text":"<p>Plane masters</p> <p>Sometimes it's helpful to group multiple sprites on one plane as if the plane itself were a KT group. For this,  appearance_flags   has a value called</p> <p>PLANE_MASTER</p> <p>. An object with this flag will act as a \"parent\" for everything else on the plane. All other sprites on the plane will be grouped together and rendered on a temporary drawing surface, and then the plane master's</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>filters</p> <p>will be applied.</p> <p>appearance_flags</p> <p>PLANE_MASTER</p> <p>color</p> <p>transform</p> <p>filters</p> <p>A plane master does not, however, get an icon or maptext of its own; they're simply ignored. It can have overlays added to the group.</p>"},{"location":"%7Bnotes%7D/renderer/#_8","title":"Renderer","text":"<p>Advanced topics</p> <p>There are other topics not covered in this article, such as  render targets   and special map formats. Any details on how those features impact rendering are discussed in their own articles.</p> <p>render targets</p>"},{"location":"%7Bnotes%7D/side/","title":"Side","text":""},{"location":"%7Bnotes%7D/side/#side-view-maps","title":"Side-view maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>See also: </p> <p>See also:</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>icon_size var (world)</p> <p>dir var (client) </p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>dir var (client)</p> <p>pixel_w var (atom) </p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>pixel_w var (atom)</p> <p>pixel_z var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>pixel_z var (atom)</p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>screen_loc var (movable atoms)</p> <p>Big icons </p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Big icons</p> <p>Isometric maps </p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Isometric maps</p> <p>Topdown maps </p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>Topdown maps</p> <p>HUD </p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>HUD</p> <p>BACKGROUND_LAYER </p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>BACKGROUND_LAYER</p> <p>EFFECTS_LAYER </p> <p>TOPDOWN_LAYER </p> <p>EFFECTS_LAYER</p> <p>TOPDOWN_LAYER </p> <p>TOPDOWN_LAYER</p> <p>The side-view map format is used for 3/4 perspective, where the map is basically similar to a top-down view but is usually foreshortened. Just like with isometric projection, tiles that are closer to the bottom of the screen are considered to be closer to the viewer. This is a form of pseudo-3D in which the 2D icons used by BYOND can be arranged in a way to give the appearance of three dimensions.</p> <p>It is important to remember that this is an illusion of 3D, not real 3D.</p> <p>The</p> <p>layer</p> <p>var behaves much the same way it does in</p> <p>ISOMETRIC_MAP</p> <p>mode.See  isometric maps   for more information.</p> <p>layer</p> <p>ISOMETRIC_MAP</p> <p>isometric maps</p> <p>When using this mode you may want to use a foreshortened</p> <p>world.icon_size</p> <p>, like a 32x24 format instead of 32x32 for example, and use taller icons for any vertical structures like walls or buildings. If you set</p> <p>world.icon_size</p> <p>to use foreshortening, then</p> <p>pixel_y</p> <p>(or</p> <p>pixel_x</p> <p>, depending on the orientation of client.dir) will be adjusted for you; the same applies to</p> <p>step_x</p> <p>and</p> <p>step_y</p> <p>. For example, with</p> <p>world.icon_size</p> <p>set to</p> <p>\"64x32\"</p> <p>, the  physical   tile\u2014what you would see if you were to look at it straight down from above\u2014 is considered to be 64x64, so you would need</p> <p>pixel_y=64</p> <p>or</p> <p>step_y=64</p> <p>to offset by a whole tile. This adjustment does not apply to screen objects,</p> <p>pixel_w</p> <p>, or</p> <p>pixel_z</p> <p>.</p> <p>world.icon_size</p> <p>world.icon_size</p> <p>pixel_y</p> <p>pixel_x</p> <p>step_x</p> <p>step_y</p> <p>world.icon_size</p> <p>\"64x32\"</p> <p>physical</p> <p>pixel_y=64</p> <p>step_y=64</p> <p>pixel_w</p> <p>pixel_z</p>"},{"location":"%7Bnotes%7D/tiled-icons/","title":"Tiled icons","text":""},{"location":"%7Bnotes%7D/tiled-icons/#tiled-icons","title":"Tiled icons","text":"<p>See also: </p> <p>icon </p> <p>procs (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>See also: </p> <p>See also:</p> <p>icon </p> <p>procs (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>icon</p> <p>procs (icon) </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>procs (icon)</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>Big icons </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>Big icons </p> <p>icon_size var (world)</p> <p>Big icons </p> <p>Big icons</p> <p>In BYOND 3.0, any file like a large .bmp would be treated like a regular icon that had been broken up into several tile-sized icon states. All tiles then were 32x32 pixels. An image that was 100x100 would therefore take at least 4x4 tiles to display. The icon was padded to the right and the top with blank space to become an even multiple of 32x32, and then broken up into sections. The lower left section was given an icon_state of</p> <p>\"0,0\"</p> <p>, the next to the right was</p> <p>\"1,0\"</p> <p>, and so on, up to the upper right which was</p> <p>\"3,3\"</p> <p>. Another icon state, a 32x32 thumbnail of the big image, was also included.</p> <p>\"0,0\"</p> <p>\"1,0\"</p> <p>\"3,3\"</p> <p>BYOND 4.0 expanded on this concept by allowing icons to be defined that had individual graphics bigger than 32x32, and it would break each one up into tiles just like 3.0 did. If an icon had a state called</p> <p>\"open\"</p> <p>then it might break down into</p> <p>\"open 0,0\"</p> <p>,</p> <p>\"open 1,0\"</p> <p>, and so on, while the actual</p> <p>\"open\"</p> <p>state would be a thumbnail image. To show the whole image, you would have to have a separate atom or overlay for each individual tile.</p> <p>\"open\"</p> <p>\"open 0,0\"</p> <p>\"open 1,0\"</p> <p>\"open\"</p> <p>In newer versions, breaking big icons into tiles is no longer done by default. Instead, icons are shown and manipulated in their  native size   . To use the old method of breaking icons into tiles, set</p> <p>world.map_format</p> <p>to</p> <p>TILED_ICON_MAP</p> <p>. This is the default for all projects compiled before version 455.</p> <p>native size</p> <p>world.map_format</p> <p>TILED_ICON_MAP</p> <p>When using tiled icons, there are some important things to note:</p> <ul> <li>You need to use extra atoms or overlays to show any icon bigger than a  single tile, where each atom/overlay shows an individual tile-sized piece  of the big icon.</li> <li>The icon_state names of each tile are always the original name followed  by a space, followed by x,y tile coordinates such as 0,0 or 2,1, so the  northeast corner of</li> </ul> <p>\"flag\"</p> <p>might for instance be</p> <p>\"flag 3,2\"</p> <p>. If the original icon_state had no name, the space is  left out and only the x,y coordinates are used. * Every icon's size is a multiple of world.icon_size. If an icon of an  incompatible size is used, it will be padded to the nearest full tile  size. * Crop()</p> <p>and</p> <p>Scale()</p> <p>always pad their results to the  nearest full tile size. * icon.Insert()</p> <p>can insert a single-tile icon into a multi-tiled  big icon using the appropriate icon_state; e.g., inserting into</p> <p>\"door 0,0\"</p> <p>will replace the southwest corner of the</p> <p>\"door\"</p> <p>state. * Using the</p> <p>icon()</p> <p>proc, you can extract a single tile from a  multi-tiled big icon.</p> <ul> <li> <p>You need to use extra atoms or overlays to show any icon bigger than a  single tile, where each atom/overlay shows an individual tile-sized piece  of the big icon.</p> </li> <li> <p>The icon_state names of each tile are always the original name followed  by a space, followed by x,y tile coordinates such as 0,0 or 2,1, so the  northeast corner of</p> </li> </ul> <p>\"flag\"</p> <p>might for instance be</p> <p>\"flag 3,2\"</p> <p>. If the original icon_state had no name, the space is  left out and only the x,y coordinates are used.</p> <p>\"flag\"</p> <p>\"flag 3,2\"</p> <ul> <li> <p>Every icon's size is a multiple of world.icon_size. If an icon of an  incompatible size is used, it will be padded to the nearest full tile  size.</p> </li> <li> <p>Crop()</p> </li> </ul> <p>and</p> <p>Scale()</p> <p>always pad their results to the  nearest full tile size.</p> <p>Crop()</p> <p>Scale()</p> <ul> <li>icon.Insert()</li> </ul> <p>can insert a single-tile icon into a multi-tiled  big icon using the appropriate icon_state; e.g., inserting into</p> <p>\"door 0,0\"</p> <p>will replace the southwest corner of the</p> <p>\"door\"</p> <p>state.</p> <p>icon.Insert()</p> <p>\"door 0,0\"</p> <p>\"door\"</p> <ul> <li>Using the</li> </ul> <p>icon()</p> <p>proc, you can extract a single tile from a  multi-tiled big icon.</p> <p>icon()</p> <p>This example shows a big icon being applied to an atom in tiled mode, as overlays:</p>"},{"location":"%7Bnotes%7D/tiled-icons/#_1","title":"Tiled icons","text":"<p>Example:</p> <p>// icon is 3 tiles wide by 2 high icon_state = \"0,0\"</p> <p>// A temporary object used for the overlays var/obj/O = new O.icon = icon O.layer = FLOAT_LAYER</p> <p>for(var/tile_y=0, tile_y&lt;2, ++tile_y)  for(var/tile_x=0, tile_x&lt;3, ++tile_x)  if(tile_x &amp;&amp; tile_y)  O.pixel_x = tile_x * 32  O.pixel_y = tile_y * 32  O.icon_state = \"[tile_x],[tile_y]\"  overlays += O</p>"},{"location":"%7Bnotes%7D/topdown/","title":"Topdown","text":""},{"location":"%7Bnotes%7D/topdown/#topdown-maps","title":"Topdown maps","text":"<p>See also: </p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>See also: </p> <p>See also:</p> <p>map_format var (world) </p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>map_format var (world)</p> <p>icon_size var (world) </p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>icon_size var (world)</p> <p>dir var (client) </p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>dir var (client)</p> <p>layer var (atom) </p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>layer var (atom)</p> <p>plane var (atom) </p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>plane var (atom)</p> <p>screen_loc var (movable atoms) </p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>screen_loc var (movable atoms)</p> <p>Big icons </p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>Big icons</p> <p>HUD </p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>HUD</p> <p>Isometric maps </p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>Isometric maps</p> <p>Side-view maps </p> <p>Understanding the renderer </p> <p>Side-view maps</p> <p>Understanding the renderer </p> <p>Understanding the renderer</p> <p>By default, BYOND displays all maps in top-down format, so</p> <p>world.map_format</p> <p>is set to</p> <p>TOPDOWN_MAP</p> <p>unless you say otherwise. This view means players are looking down on the map, and \"north\" corresponds to the top of their screen. (This can be changed by setting</p> <p>client.dir</p> <p>.)</p> <p>world.map_format</p> <p>TOPDOWN_MAP</p> <p>client.dir</p> <p>A related map_format, used by older games, is</p> <p>TILED_ICON_MAP</p> <p>. This is also topdown but it handles icons differently.</p> <p>TILED_ICON_MAP</p> <p>In this form, the</p> <p>layer</p> <p>var behaves exactly as you would expect: Icons with a lower layer are drawn beneath icons with a higher layer. The only exception is when you use  big icons   , which will be drawn above any other icons on the same layer. Also an atom's underlays will be drawn behind it unless their layer is changed, and its overlays will draw in front of it unless otherwise stated.</p> <p>layer</p> <p>big icons</p> <p>Topdown mode also guarantees that</p> <p>world.view</p> <p>or</p> <p>client.view</p> <p>will set the exact screen size used by the HUD, except for HUD objects that appear outside of the normal bounds.</p> <p>world.view</p> <p>client.view</p> <p>Screen objects (also called the HUD) cannot be intermixed with topdown icons. They will appear on top of other icons, unless using a lower plane or a special layer like</p> <p>BACKGROUND_LAYER</p> <p>.</p> <p>BACKGROUND_LAYER</p>"},{"location":"%7Bnotes%7D/filters/alpha/","title":"Alpha","text":""},{"location":"%7Bnotes%7D/filters/alpha/#alpha-mask-filter","title":"Alpha mask filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>See also: </p> <p>See also:</p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>icon var (atom)</p> <p>render_target var (atom) </p> <p>render_target var (atom)</p> <p>Format:</p> <p>filter(type=\"alpha\", ...)</p> <p>Format:</p> <p>filter(type=\"alpha\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of mask (defaults to 0)</p> <p>y: Vertical offset of mask (defaults to 0)</p> <p>icon: Icon to use as a mask</p> <p>render_source:</p> <p>render_target</p> <p>to use as a mask</p> <p>flags: Defaults to 0; use see below for other flags</p> <p>Args:</p> <p>x: Horizontal offset of mask (defaults to 0)</p> <p>y: Vertical offset of mask (defaults to 0)</p> <p>icon: Icon to use as a mask</p> <p>render_source:</p> <p>render_target</p> <p>to use as a mask</p> <p>render_target</p> <p>flags: Defaults to 0; use see below for other flags</p> <p>Uses an icon or render target as a mask over this image. Every pixel that is transparent in either the image or the mask, is transparent in the result.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the mask is centered over the center of the image.</p> <p>x</p> <p>y</p> <p>The</p> <p>MASK_INVERSE</p> <p>flag will invert the alpha mask so that opaque areas in the mask become transparent, and vice-versa. There is also a</p> <p>MASK_SWAP</p> <p>flag which treats the source image as the mask and vice-versa, which might be useful for some effects.</p> <p>MASK_INVERSE</p> <p>MASK_SWAP</p> <p>Note: Unlike many other filters, this filter  is   taken into account for mouse-hit purposes.</p> <p>is</p>"},{"location":"%7Bnotes%7D/filters/angular_blur/","title":"Angular blur","text":""},{"location":"%7Bnotes%7D/filters/angular_blur/#angular-blur-filter","title":"Angular blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Radial blur (filters) </p> <p>Motion blur (filters) </p> <p>See also: </p> <p>See also:</p> <p>Gaussian blur (filters) </p> <p>Radial blur (filters) </p> <p>Motion blur (filters) </p> <p>Gaussian blur (filters)</p> <p>Radial blur (filters) </p> <p>Motion blur (filters) </p> <p>Radial blur (filters)</p> <p>Motion blur (filters) </p> <p>Motion blur (filters)</p> <p>Format:</p> <p>filter(type=\"angular_blur\", ...)</p> <p>Format:</p> <p>filter(type=\"angular_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur (defaults to 1)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount in a circular formation, as if the image is spinning. The size of the blur can roughly be thought of in \"degrees\" worth of blur. As the distance from the center increases, the blur becomes more noticeable since the same amount of angular motion has to travel farther along a circle.</p> <p>Typically this blur is used with an entire plane, but it could be used to give a sense of motion blur to a spinning object.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will appear where</p> <p>size</p> <p>\u00d7 distance is greater than about 300. You can increase accuracy by breaking up large sizes into multiple filter passes with differing sizes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p> <p>size</p> <p>2 2</p>"},{"location":"%7Bnotes%7D/filters/bloom/","title":"Bloom","text":""},{"location":"%7Bnotes%7D/filters/bloom/#bloom-filter","title":"Bloom filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Drop shadow (filters) </p> <p>See also: </p> <p>See also:</p> <p>Gaussian blur (filters) </p> <p>Drop shadow (filters) </p> <p>Gaussian blur (filters)</p> <p>Drop shadow (filters) </p> <p>Drop shadow (filters)</p> <p>Format:</p> <p>filter(type=\"bloom\", ...)</p> <p>Format:</p> <p>filter(type=\"bloom\", ...)</p> <p>Args:</p> <p>threshold: Color threshold for bloom</p> <p>size: Blur radius of bloom effect (see Gaussian blur)</p> <p>offset: Growth/outline radius of bloom effect before blur</p> <p>alpha: Opacity of effect (default is 255, max opacity)</p> <p>Args:</p> <p>threshold: Color threshold for bloom</p> <p>size: Blur radius of bloom effect (see Gaussian blur)</p> <p>offset: Growth/outline radius of bloom effect before blur</p> <p>alpha: Opacity of effect (default is 255, max opacity)</p> <p>Post-processing effect that makes bright colors look like they're a strong light source, spreading their light additively to other nearby pixels. This is a complex effect that involves multiple shader passes. For both performance and visual reasons, it is usually best applied to an entire plane rather than to individual objects.</p> <p>The color</p> <p>threshold</p> <p>determines which pixels this effect applies to. If any of the red, green, or blue components of the pixel are greater than the same component for the threshold, that pixel will bloom. The blooming pixels then have their colors spread outward to create a glow that gets added to the original image.</p> <p>threshold</p> <p>The</p> <p>offset</p> <p>and</p> <p>size</p> <p>parameters are used to control the glow effect. They work the same as they do in the drop shadow filter:</p> <p>offset</p> <p>causes the light to grow outwards, and a blur of</p> <p>size</p> <p>is then applied to soften it. Often just using a blur alone will produce a pleasing effect. By playing with these two values you can make the bloom effect appear differently.</p> <p>offset</p> <p>size</p> <p>offset</p> <p>size</p> <p>The</p> <p>alpha</p> <p>value is applied to any light contributions from bloomed pixels that get added to the original image, so values lower than 255 can make the effect less pronounced. This can be very useful if you choose to animate the filter.</p> <p>alpha</p>"},{"location":"%7Bnotes%7D/filters/blur/","title":"Blur","text":""},{"location":"%7Bnotes%7D/filters/blur/#gaussian-blur-filter","title":"Gaussian blur filter","text":"<p>See also: </p> <p>Motion blur (filters) </p> <p>Radial blur (filters) </p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>See also: </p> <p>See also:</p> <p>Motion blur (filters) </p> <p>Radial blur (filters) </p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>Motion blur (filters)</p> <p>Radial blur (filters) </p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>Radial blur (filters)</p> <p>Angular blur (filters) </p> <p>Drop shadow (filters) </p> <p>Angular blur (filters)</p> <p>Drop shadow (filters) </p> <p>Drop shadow (filters)</p> <p>Format:</p> <p>filter(type=\"blur\", ...)</p> <p>Format:</p> <p>filter(type=\"blur\", ...)</p> <p>Args:</p> <p>size: Amount of blur (defaults to 1)</p> <p>Args:</p> <p>size: Amount of blur (defaults to 1)</p> <p>Blurs the image by a certain amount. The size of the blur can roughly be thought of in \"pixels\" worth of blur.</p> <p>Note: Large blurs will result in reduced performance. The highest size that can be handled easily in this filter is 6. Higher sizes require multiple passes, although the filter will \"cheat\" and use low-quality passes for much higher sizes.</p>"},{"location":"%7Bnotes%7D/filters/color/","title":"Color","text":""},{"location":"%7Bnotes%7D/filters/color/#color-matrix-filter","title":"Color matrix filter","text":"<p>See also: </p> <p>color var (atom) </p> <p>Color matrix </p> <p>Color space </p> <p>See also: </p> <p>See also:</p> <p>color var (atom) </p> <p>Color matrix </p> <p>Color space </p> <p>color var (atom)</p> <p>Color matrix </p> <p>Color space </p> <p>Color matrix</p> <p>Color space </p> <p>Color space</p> <p>Format:</p> <p>filter(type=\"color\", ...)</p> <p>Format:</p> <p>filter(type=\"color\", ...)</p> <p>Args:</p> <p>color: A color matrix</p> <p>space: Value indicating color space: defaults to</p> <p>FILTER_COLOR_RGB</p> <p>Args:</p> <p>color: A color matrix</p> <p>space: Value indicating color space: defaults to</p> <p>FILTER_COLOR_RGB</p> <p>FILTER_COLOR_RGB</p> <p>Applies a color matrix to this image. Unlike with the atom.color var, you can apply color conversions other than the regular RGBA color space, depending on the value of</p> <p>space</p> <p>. See  Color space   for more information.</p> <p>space</p> <p>Color space</p>"},{"location":"%7Bnotes%7D/filters/displace/","title":"Displace","text":""},{"location":"%7Bnotes%7D/filters/displace/#displacement-map-filter","title":"Displacement map filter","text":"<p>See also: </p> <p>Alpha mask (filters) </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>See also: </p> <p>See also:</p> <p>Alpha mask (filters) </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>Alpha mask (filters)</p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>icon var (atom)</p> <p>render_target var (atom) </p> <p>render_target var (atom)</p> <p>Format:</p> <p>filter(type=\"displace\", ...)</p> <p>Format:</p> <p>filter(type=\"displace\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of map (defaults to 0)</p> <p>y: Vertical offset of map (defaults to 0)</p> <p>size: Maximum distortion, in pixels</p> <p>icon: Icon to use as a displacement map</p> <p>render_source:</p> <p>render_target</p> <p>to use as a displacement map</p> <p>Args:</p> <p>x: Horizontal offset of map (defaults to 0)</p> <p>y: Vertical offset of map (defaults to 0)</p> <p>size: Maximum distortion, in pixels</p> <p>icon: Icon to use as a displacement map</p> <p>render_source:</p> <p>render_target</p> <p>to use as a displacement map</p> <p>render_target</p> <p>Uses an icon or render target as a template for various warping effects on the main image.</p> <p>In the displacement map, pixels that have a higher red component will make the image appear to warp to the left, lower reds warp it to the right, and gray (r=128) will cause no horizontal warping. The green component affects the vertical: higher to warp upward, lower to warp downward. Transparent pixels in the displacement map will have no effect.</p> <p>This can be used for very complex distortion, unlike other distortion filters such as wave and ripple that are confined to specific equations.</p>"},{"location":"%7Bnotes%7D/filters/drop_shadow/","title":"Drop shadow","text":""},{"location":"%7Bnotes%7D/filters/drop_shadow/#drop-shadow-filter","title":"Drop shadow filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Outline (filters) </p> <p>See also: </p> <p>See also:</p> <p>Gaussian blur (filters) </p> <p>Outline (filters) </p> <p>Gaussian blur (filters)</p> <p>Outline (filters) </p> <p>Outline (filters)</p> <p>Format:</p> <p>filter(type=\"drop_shadow\", ...)</p> <p>Format:</p> <p>filter(type=\"drop_shadow\", ...)</p> <p>Args:</p> <p>x: Shadow horizontal offset (defaults to 1)</p> <p>y: Shadow horizontal offset (defaults to -1)</p> <p>size: Blur amount (defaults to 1; negative values create inset shadows)</p> <p>offset: Size increase before blur (defaults to 0)</p> <p>color: Shadow color (defaults to 50% transparent black)</p> <p>Args:</p> <p>x: Shadow horizontal offset (defaults to 1)</p> <p>y: Shadow horizontal offset (defaults to -1)</p> <p>size: Blur amount (defaults to 1; negative values create inset shadows)</p> <p>offset: Size increase before blur (defaults to 0)</p> <p>color: Shadow color (defaults to 50% transparent black)</p> <p>Applies a drop shadow to this image. This is a combination of multiple filters, since it will apply an outline if</p> <p>offset</p> <p>is included, a Gaussian blur to the shadow, and will underlay the shadow beneath the image.</p> <p>offset</p> <p>You can also think of this filter as an outer glow.</p> <p>If you use a</p> <p>size</p> <p>less than 0, the shadow will appear inside the image instead. This would be an inset shadow, or inner glow.</p> <p>size</p>"},{"location":"%7Bnotes%7D/filters/layer/","title":"Layer","text":""},{"location":"%7Bnotes%7D/filters/layer/#layering-composite-filter","title":"Layering (composite) filter","text":"<p>See also: </p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>See also: </p> <p>See also:</p> <p>icon var (atom) </p> <p>render_target var (atom) </p> <p>icon var (atom)</p> <p>render_target var (atom) </p> <p>render_target var (atom)</p> <p>Format:</p> <p>filter(type=\"layer\", ...)</p> <p>Format:</p> <p>filter(type=\"layer\", ...)</p> <p>Args:</p> <p>x: Horizontal offset of second image (defaults to 0)</p> <p>y: Vertical offset of second image (defaults to 0)</p> <p>icon: Icon to use as a second image</p> <p>render_source:</p> <p>render_target</p> <p>to use as a second image</p> <p>flags:</p> <p>FILTER_OVERLAY</p> <p>(default) or</p> <p>FILTER_UNDERLAY</p> <p>color:  Color   or color matrix to apply to second image</p> <p>transform:  Transform   to apply to second image</p> <p>blend_mode:  Blend mode   to apply to the top image</p> <p>Args:</p> <p>x: Horizontal offset of second image (defaults to 0)</p> <p>y: Vertical offset of second image (defaults to 0)</p> <p>icon: Icon to use as a second image</p> <p>render_source:</p> <p>render_target</p> <p>to use as a second image</p> <p>render_target</p> <p>flags:</p> <p>FILTER_OVERLAY</p> <p>(default) or</p> <p>FILTER_UNDERLAY</p> <p>FILTER_OVERLAY</p> <p>FILTER_UNDERLAY</p> <p>color:  Color   or color matrix to apply to second image</p> <p>Color</p> <p>transform:  Transform   to apply to second image</p> <p>Transform</p> <p>blend_mode:  Blend mode   to apply to the top image</p> <p>Blend mode</p> <p>Composites another image over or under this image. Using the</p> <p>FILTER_OVERLAY</p> <p>flag, which is the default, puts the second image on top of what's already here.</p> <p>FILTER_UNDERLAY</p> <p>puts it underneath.</p> <p>FILTER_OVERLAY</p> <p>FILTER_UNDERLAY</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>values can move the mask from its normal position. By default, the second image is centered over the center of the first.</p> <p>x</p> <p>y</p> <p>The</p> <p>color</p> <p>,</p> <p>transform</p> <p>, and</p> <p>blend_mode</p> <p>vars are available for convenience. Because the bottom image is drawn over a blank background,</p> <p>blend_mode</p> <p>is always applied to the top image. All of the other vars apply to the second image being drawn.</p> <p>color</p> <p>transform</p> <p>blend_mode</p> <p>blend_mode</p> <p>Note: Transforms use default bilinear scaling, since  PIXEL_SCALE   is not available here.</p> <p>PIXEL_SCALE</p> <p>Note: Like most other filters, this filter is  not   taken into account for mouse-hit purposes. Any layered icons will be strictly visual.</p> <p>not</p>"},{"location":"%7Bnotes%7D/filters/motion_blur/","title":"Motion blur","text":""},{"location":"%7Bnotes%7D/filters/motion_blur/#motion-blur-filter","title":"Motion blur filter","text":"<p>See also: </p> <p>filters var (atom) </p> <p>Gaussian blur (filters) </p> <p>See also: </p> <p>See also:</p> <p>filters var (atom) </p> <p>Gaussian blur (filters) </p> <p>filters var (atom)</p> <p>Gaussian blur (filters) </p> <p>Gaussian blur (filters)</p> <p>Format:</p> <p>filter(type=\"motion_blur\", ...)</p> <p>Format:</p> <p>filter(type=\"motion_blur\", ...)</p> <p>Args:</p> <p>x: Blur vector on the X axis (defaults to 0)</p> <p>y: Blur vector on the Y axis (defaults to 0)</p> <p>Args:</p> <p>x: Blur vector on the X axis (defaults to 0)</p> <p>y: Blur vector on the Y axis (defaults to 0)</p> <p>Applies Gaussian blur in one direction only. The amount and direction are both specified by</p> <p>x</p> <p>and</p> <p>y</p> <p>. The size of the blur is equal to</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>x</p> <p>y</p> <p>sqrt(x*x + y*y)</p> <p>See  Gaussian blur   for more information.</p> <p>Gaussian blur</p>"},{"location":"%7Bnotes%7D/filters/outline/","title":"Outline","text":""},{"location":"%7Bnotes%7D/filters/outline/#outline-filter","title":"Outline filter","text":"<p>See also: </p> <p>Drop shadow (filters) </p> <p>See also: </p> <p>See also:</p> <p>Drop shadow (filters) </p> <p>Drop shadow (filters)</p> <p>Format:</p> <p>filter(type=\"outline\", ...)</p> <p>Format:</p> <p>filter(type=\"outline\", ...)</p> <p>Args:</p> <p>size: Width in pixels (defaults to 1)</p> <p>color: Outline color (defaults to black)</p> <p>flags: Defaults to 0 (see below)</p> <p>Args:</p> <p>size: Width in pixels (defaults to 1)</p> <p>color: Outline color (defaults to black)</p> <p>flags: Defaults to 0 (see below)</p> <p>Applies an outline to this image.</p> <p>At larger sizes, the outline is less accurate and will take more passes to produce. Performance and appearance are best at sizes close to 1 or less.</p> <p>flags</p> <p>can be a combination of the following values:</p> <p>flags</p> <p>0</p> <p>Ordinary outline</p> <p>OUTLINE_SHARP</p> <p>Avoid antialiasing in the outline</p> <p>OUTLINE_SQUARE</p> <p>Extend the outline sharply from corner pixels; for a box this will maintain a box shape without rounded corners</p> <p>0</p> <p>Ordinary outline</p> <p>OUTLINE_SHARP</p> <p>Avoid antialiasing in the outline</p> <p>OUTLINE_SQUARE</p> <p>Extend the outline sharply from corner pixels; for a box this will maintain a box shape without rounded corners</p>"},{"location":"%7Bnotes%7D/filters/radial_blur/","title":"Radial blur","text":""},{"location":"%7Bnotes%7D/filters/radial_blur/#radial-blur-filter","title":"Radial blur filter","text":"<p>See also: </p> <p>Gaussian blur (filters) </p> <p>Angular blur (filters) </p> <p>Motion blur (filters) </p> <p>See also: </p> <p>See also:</p> <p>Gaussian blur (filters) </p> <p>Angular blur (filters) </p> <p>Motion blur (filters) </p> <p>Gaussian blur (filters)</p> <p>Angular blur (filters) </p> <p>Motion blur (filters) </p> <p>Angular blur (filters)</p> <p>Motion blur (filters) </p> <p>Motion blur (filters)</p> <p>Format:</p> <p>filter(type=\"radial_blur\", ...)</p> <p>Format:</p> <p>filter(type=\"radial_blur\", ...)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur per pixel of distance (defaults to 0.01)</p> <p>Args:</p> <p>x: Horizontal center of effect, in pixels, relative to image center</p> <p>y: Vertical center of effect, in pixels, relative to image center</p> <p>size: Amount of blur per pixel of distance (defaults to 0.01)</p> <p>Blurs the image by a certain amount outward from the center, as if the image is zooming in or out. As the distance from the center increases, the amount of blurring increases, and near the center the blur is hardly visible at all. The</p> <p>size</p> <p>value is smaller by default for this filter than it is for other filters, since it's typically used with an entire plane where the distance from the center can easily be several hundred pixels.</p> <p>size</p> <p>Typically this blur is used with an entire plane.</p> <p>Note: Large blurs will look worse toward the edges due to limited sampling. Loss of accuracy will begin when</p> <p>size</p> <p>\u00d7 distance is greather than 6. You can increase accuracy by breaking up large sizes into multiple filter passes. The blur used is Gaussian, so combining blur sizes A and B will give a total size of sqrt(A  2   +B  2   ).</p> <p>size</p> <p>2 2</p>"},{"location":"%7Bnotes%7D/filters/rays/","title":"Rays","text":""},{"location":"%7Bnotes%7D/filters/rays/#rays-filter","title":"Rays filter","text":"<p>Format:</p> <p>filter(type=\"rays\", ...)</p> <p>Format:</p> <p>filter(type=\"rays\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ray center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ray center, relative to image center (defaults to 0)</p> <p>size: Maximum length of rays (defaults to 1/2 tile width)</p> <p>color: Ray color (defaults to white)</p> <p>offset: \"Time\" offset of rays (defaults to 0, repeats after 1000)</p> <p>density: Higher values mean more, narrower rays (defaults to 10, must be whole number)</p> <p>threshold: Low-end cutoff for ray strength (defaults to 0.5, can be 0 to 1)</p> <p>factor: How much ray strength is related to ray length (defaults to 0, can be 0 to 1)</p> <p>flags: Defaults to</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>(see below)</p> <p>Args:</p> <p>x: Horiztonal position of ray center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ray center, relative to image center (defaults to 0)</p> <p>size: Maximum length of rays (defaults to 1/2 tile width)</p> <p>color: Ray color (defaults to white)</p> <p>offset: \"Time\" offset of rays (defaults to 0, repeats after 1000)</p> <p>density: Higher values mean more, narrower rays (defaults to 10, must be whole number)</p> <p>threshold: Low-end cutoff for ray strength (defaults to 0.5, can be 0 to 1)</p> <p>factor: How much ray strength is related to ray length (defaults to 0, can be 0 to 1)</p> <p>flags: Defaults to</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>(see below)</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>Draws random rays that radiate outward from a center point. (That point may be outside of the image.) As they move outward, their alpha value diminishes linearly. These are meant to be animated. The</p> <p>offset</p> <p>value determines the \"time\", where every jump of +1 can be a very different set of rays, and every 1000 units this filter will repeat.</p> <p>offset</p> <p>The</p> <p>threshold</p> <p>value can be thought of as a way of culling lower-strength rays. Ray strength is anywhere from 0 to 1 at any given angle, but values below</p> <p>threshold</p> <p>may as well be 0. Values above that are re-scaled into a range of 0 to 1.</p> <p>threshold</p> <p>threshold</p> <p>The</p> <p>factor</p> <p>parameter allows you to tie the ray's length to its strength. At 0, the length of every ray is the same. At 1, the length ranges from 0 to</p> <p>size</p> <p>. Generally speaking, the higher</p> <p>factor</p> <p>is, the more the rays will appear to move outward as they strengthen and inward as they weaken.</p> <p>factor</p> <p>size</p> <p>factor</p> <p>Ray</p> <p>color</p> <p>can be provided as a matrix. Only the diagonal values of the color matrix will be used, but using a matrix will allow you to set values outside of the normal color range.</p> <p>color</p> <p>flags</p> <p>can have the following values:</p> <p>flags</p> <p>0</p> <p>The rays are drawn alone, erasing the existing image (useful for some effects).</p> <p>FILTER_OVERLAY</p> <p>The rays are overlaid on top of the existing image.</p> <p>FILTER_UNDERLAY</p> <p>The rays are drawn underneath the existing image.</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>Default. For plane masters, this will use the</p> <p>FILTER_OVERLAY</p> <p>behavior and draw the rays over the plane, and for all other images it will default to</p> <p>FILTER_UNDERLAY</p> <p>to draw the rays beneath them.</p> <p>0</p> <p>The rays are drawn alone, erasing the existing image (useful for some effects).</p> <p>FILTER_OVERLAY</p> <p>The rays are overlaid on top of the existing image.</p> <p>FILTER_UNDERLAY</p> <p>The rays are drawn underneath the existing image.</p> <p>FILTER_OVERLAY | FILTER_UNDERLAY</p> <p>Default. For plane masters, this will use the</p> <p>FILTER_OVERLAY</p> <p>behavior and draw the rays over the plane, and for all other images it will default to</p> <p>FILTER_UNDERLAY</p> <p>to draw the rays beneath them.</p> <p>FILTER_OVERLAY</p> <p>FILTER_UNDERLAY</p>"},{"location":"%7Bnotes%7D/filters/ripple/","title":"Ripple","text":""},{"location":"%7Bnotes%7D/filters/ripple/#ripple-filter","title":"Ripple filter","text":"<p>See also: </p> <p>Wave (filters) </p> <p>See also: </p> <p>See also:</p> <p>Wave (filters) </p> <p>Wave (filters)</p> <p>Format:</p> <p>filter(type=\"ripple\", ...)</p> <p>Format:</p> <p>filter(type=\"ripple\", ...)</p> <p>Args:</p> <p>x: Horiztonal position of ripple center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ripple center, relative to image center (defaults to 0)</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>repeat: Wave period, in pixels (defaults to 2)</p> <p>radius: Outer radius of ripple, in pixels (defaults to 0)</p> <p>falloff: How quickly ripples lose strength away from the outer edge (defaults to 1)</p> <p>flags: Defaults to 0; use</p> <p>WAVE_BOUNDED</p> <p>to keep distortion within the image</p> <p>Args:</p> <p>x: Horiztonal position of ripple center, relative to image center (defaults to 0)</p> <p>y: Vertical position of ripple center, relative to image center (defaults to 0)</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>repeat: Wave period, in pixels (defaults to 2)</p> <p>radius: Outer radius of ripple, in pixels (defaults to 0)</p> <p>falloff: How quickly ripples lose strength away from the outer edge (defaults to 1)</p> <p>flags: Defaults to 0; use</p> <p>WAVE_BOUNDED</p> <p>to keep distortion within the image</p> <p>WAVE_BOUNDED</p> <p>Applies a ripple distortion effect to this image.</p> <p>This filter is meant to be animated. A good animation will typically start at a</p> <p>radius</p> <p>of 0 and animate to a larger value, with</p> <p>size</p> <p>decreasing to 0.</p> <p>radius</p> <p>size</p> <p>The</p> <p>falloff</p> <p>parameter can be tweaked to your liking. A value of 1 should look reasonably like ripples in water, with the inner ripples losing strength. A value of 0 will cause no reduction in strength.</p> <p>falloff</p> <p>The equation governing the ripple distortion is size \u00d7 sin(2\u03c0r') \u00f7 (2.5 \u00d7 falloff \u00d7 r'  2   + 1), where r' = (radius - distance) \u00f7 repeat.</p> <p>2</p> <p>Up to 10 ripples can be stacked together in a single pass of the filter, as long as they have the same</p> <p>repeat</p> <p>,</p> <p>falloff</p> <p>, and</p> <p>flags</p> <p>values. (See the wave filter for the</p> <p>WAVE_BOUNDED</p> <p>flag.)</p> <p>repeat</p> <p>falloff</p> <p>flags</p> <p>WAVE_BOUNDED</p>"},{"location":"%7Bnotes%7D/filters/wave/","title":"Wave","text":""},{"location":"%7Bnotes%7D/filters/wave/#wave-filter","title":"Wave filter","text":"<p>See also: </p> <p>Ripple (filters) </p> <p>See also: </p> <p>See also:</p> <p>Ripple (filters) </p> <p>Ripple (filters)</p> <p>Format:</p> <p>filter(type=\"wave\", ...)</p> <p>Format:</p> <p>filter(type=\"wave\", ...)</p> <p>Args:</p> <p>x: Horiztonal direction and period of wave</p> <p>y: Vertical direction and period of wave</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>offset: Phase of wave, in periods (e.g., 0 to 1)</p> <p>flags: Defaults to 0; see below for other flags</p> <p>Args:</p> <p>x: Horiztonal direction and period of wave</p> <p>y: Vertical direction and period of wave</p> <p>size: Maximum distortion in pixels (defaults to 1)</p> <p>offset: Phase of wave, in periods (e.g., 0 to 1)</p> <p>flags: Defaults to 0; see below for other flags</p> <p>Applies a wave distortion effect to this image.</p> <p>The</p> <p>x</p> <p>and</p> <p>y</p> <p>parameters specify both the direction and period of the wave; the period is</p> <p>sqrt(x*x + y*y)</p> <p>.</p> <p>x</p> <p>y</p> <p>sqrt(x*x + y*y)</p> <p>This filter is meant to be animated, from whatever</p> <p>offset</p> <p>you want to</p> <p>offset+1</p> <p>, and then repeating. With multiple waves, you can produce a very convincing water effect.</p> <p>offset</p> <p>offset+1</p>"},{"location":"%7Bnotes%7D/filters/wave/#_1","title":"Wave","text":"<p>Example</p> <p>#define WAVE_COUNT 7 atom/proc/WaterEffect()  var/start = filters.len  var/X,Y,rsq,i,f  for(i=1, i&lt;=WAVE_COUNT, ++i)  // choose a wave with a random direction and a period between 10 and 30 pixels  do  X = 60*rand() - 30  Y = 60*rand() - 30  rsq = X*X + Y*Y  while(rsq&lt;100 || rsq&gt;900) // keep trying if we don't like the numbers  // keep distortion (size) small, from 0.5 to 3 pixels  // choose a random phase (offset)  filters += filter(type=\"wave\", x=X, y=Y, size=rand()*2.5+0.5, offset=rand())  for(i=1, i&lt;=WAVE_COUNT, ++i)  // animate phase of each wave from its original phase to phase-1 and then reset;  // this moves the wave forward in the X,Y direction  f = filters[start+i]  animate(f, offset=f:offset, time=0, loop=-1, flags=ANIMATION_PARALLEL)  animate(offset=f:offset-1, time=rand()*20+10)</p> <p>The equation governing the wave distortion is size \u00d7 sin(2\u03c0(d - offset)), where d is the number of wave periods' distance from the center along the x, y direction.</p> <p>The</p> <p>WAVE_SIDEWAYS</p> <p>flag will cause the distortion to be transverse (perpendicular) to the wave instead of in the same direction as the wave. The</p> <p>WAVE_BOUNDED</p> <p>flag limits the distortion to the confines of this image, instead of lettings its pixels spill out a little further from the distortion (and likewise, transparent pixels spill inward).</p> <p>WAVE_SIDEWAYS</p> <p>WAVE_BOUNDED</p> <p>Up to 10 waves can be stacked together in a single pass of the filter, as long as they have the same</p> <p>WAVE_BOUNDED</p> <p>flags.</p> <p>WAVE_BOUNDED</p>"},{"location":"%7Bskin%7D/commands/","title":"Commands","text":""},{"location":"%7Bskin%7D/commands/#client-commands","title":"client commands","text":"<p>Several commands can be executed on the client that are not verbs, but raw instructions for Dream Seeker.</p> <p>.winset \"  [control.param=value;...]   \"</p> <p>Sets parameters in response to a menu or button command (or a manually typed command). You can set more than one by separating them with semicolons. This command has a more complex format for conditional instructions (see below).</p> <p>.output  control text </p> <p>Sends output to a control. The text does not need quotes, but backslashes, newlines, and tabs should be escaped with a backslash. This works similarly to the  output()   proc.</p> <p>.options</p> <p>Shows the Options &amp; Messages box.</p> <p>.reboot</p> <p>Reboots the world, when Dream Seeker is also acting as a server.</p> <p>.reconnect</p> <p>Reconnects to the same world.</p> <p>.host</p> <p>Opens hosting options box, when Dream Seeker is also acting as a server.</p> <p>.profile</p> <p>Opens the profiler. On a remote connection you may not have access to profile server procs, but you can look at the client and network profilers.</p> <p>.screenshot</p> <p>Saves a screenshot of the map. If there's more than one map control, the default map is used.</p> <p>.screenshot auto</p> <p>Saves a screenshot of the map, but does not prompt for a filename. The file will be saved in the client's user directory in BYOND/screenshots.</p> <p>.gamepad-mapping</p> <p>Opens the gamepad mapping dialog. Helpful if the user's gamepad is not supported or not configured to their liking.</p> <p>.command</p> <p>Prompts the user to enter a command, which can be one of these commands as well.</p> <p>.configure  option value </p> <p>Toggle certain Dream Seeker config options, such as</p> <p>.configure graphics-hwmode on</p> <p>. The only supported options you can use are</p> <p>graphics-hwmode</p> <p>,</p> <p>sound</p> <p>, and</p> <p>delay</p> <p>which is an old mechanism for dynamically adapting to network delay. (Usually the</p> <p>delay</p> <p>is reset to 0.)</p> <p>.quit</p> <p>Closes Dream Seeker.</p> <p>.winset \"  [control.param=value;...]   \"</p> <p>[control.param=value;...]</p> <p>Sets parameters in response to a menu or button command (or a manually typed command). You can set more than one by separating them with semicolons. This command has a more complex format for conditional instructions (see below).</p> <p>.output  control text </p> <p>control text</p> <p>Sends output to a control. The text does not need quotes, but backslashes, newlines, and tabs should be escaped with a backslash. This works similarly to the  output()   proc.</p> <p>output()</p> <p>.options</p> <p>Shows the Options &amp; Messages box.</p> <p>.reboot</p> <p>Reboots the world, when Dream Seeker is also acting as a server.</p> <p>.reconnect</p> <p>Reconnects to the same world.</p> <p>.host</p> <p>Opens hosting options box, when Dream Seeker is also acting as a server.</p> <p>.profile</p> <p>Opens the profiler. On a remote connection you may not have access to profile server procs, but you can look at the client and network profilers.</p> <p>.screenshot</p> <p>Saves a screenshot of the map. If there's more than one map control, the default map is used.</p> <p>.screenshot auto</p> <p>Saves a screenshot of the map, but does not prompt for a filename. The file will be saved in the client's user directory in BYOND/screenshots.</p> <p>.gamepad-mapping</p> <p>Opens the gamepad mapping dialog. Helpful if the user's gamepad is not supported or not configured to their liking.</p> <p>.command</p> <p>Prompts the user to enter a command, which can be one of these commands as well.</p> <p>.configure  option value </p> <p>option value</p> <p>Toggle certain Dream Seeker config options, such as</p> <p>.configure graphics-hwmode on</p> <p>. The only supported options you can use are</p> <p>graphics-hwmode</p> <p>,</p> <p>sound</p> <p>, and</p> <p>delay</p> <p>which is an old mechanism for dynamically adapting to network delay. (Usually the</p> <p>delay</p> <p>is reset to 0.)</p> <p>.configure graphics-hwmode on</p> <p>graphics-hwmode</p> <p>sound</p> <p>delay</p> <p>delay</p> <p>.quit</p> <p>Closes Dream Seeker.</p>"},{"location":"%7Bskin%7D/commands/#_1","title":"Commands","text":"<p>Conditional Winset</p> <p>The</p> <p>.winset</p> <p>command allows you to use conditional expressions, like so:</p> <p>.winset</p> <pre><code>condition ? choice1 : choice2\n</code></pre> <p>The condition is the same as any other parameter you might use in</p> <p>.winset</p> <p>, but instead of setting the parameter, it checks to see if it's true. If so, then the parameters in</p> <p>choice1</p> <p>will be set. Otherwise, the parameters in</p> <p>choice2</p> <p>are set. This example makes the window background red if bigbutton is checked.</p> <p>.winset</p> <p>choice1</p> <p>choice2</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#ff0000 : window.background-color=none\"\n</code></pre> <p>If you want to look for values that don't match instead of values that do, use</p> <p>!=</p> <p>instead of</p> <p>=</p> <p>in the condition.</p> <p>!=</p> <p>=</p> <pre><code>.winset \"bigbutton.is-checked!=false ? window.background-color=#f00 : window.background-color=none\"\n</code></pre> <p>The</p> <p>choice2</p> <p>item is optional.</p> <p>choice2</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.background-color=#f00\"\n</code></pre> <p>Because it's often useful to do more than one thing at a time,</p> <p>choice1</p> <p>and</p> <p>choice2</p> <p>don't have to be just one parameter. You can use multiple parameters, but they are separated with a space instead of a semicolon. (A semicolon indicates the conditional expression is over.)</p> <p>choice1</p> <p>choice2</p> <pre><code>.winset \"bigbutton.is-checked=true ? window.text-color=#fff window.background-color=#f00 : window.text-color=none window.background-color=none\"\n</code></pre>"},{"location":"%7Bskin%7D/commands/#_2","title":"Commands","text":"<p>Embedded Winget</p> <p>Commands that are initiated by the skin (like button.command, map.on-show, etc.) have a special syntax that allows you to include information that would normally require a winget call. By including</p> <p>[[  something   ]]</p> <p>in the command, the double-bracketed text will be replaced by the result of running a winget on that parameter.</p> <p>[[  something   ]]</p> <p>something</p> <p>A value of</p> <p>[[id.parameter]]</p> <p>will run a winget on the control with the given ID. Just using</p> <p>[[parameter]]</p> <p>will run a winget for the control that initiated this command. You can also use</p> <p>parent</p> <p>in place of the ID to do something with the parent of the control, or</p> <p>parent.id</p> <p>for access to a sibling control. Position and size parameters can be further broken down by appending</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get at the numbers directly.</p> <p>[[id.parameter]]</p> <p>[[parameter]]</p> <p>parent</p> <p>parent.id</p> <p>.x</p> <p>.y</p> <p>Several commands already support some special cases like</p> <p>[[*]]</p> <p>or</p> <p>[[width]]</p> <p>or such, where the special-case values are relevant to the command. An example is that in</p> <p>on-size</p> <p>the value of</p> <p>[[*]]</p> <p>is a size value. The Any macro, gamepad macros, and mouse macros, also support this syntax; see  macros   for more info.</p> <p>[[*]]</p> <p>[[width]]</p> <p>on-size</p> <p>[[*]]</p> <p>macros</p> <p>You can choose how embedded wingets get formatted by following the value with</p> <p>as</p> <p>and a type, such as</p> <p>[[window.size as string]]</p> <p>. There are several types you can use, and different types of parameters get formatted differently:</p> <p>as</p> <p>[[window.size as string]]</p> <p>arg</p> <p>Value is formatted as if it's an argument on a command line. Numbers are left alone; booleans are 0 or 1; size and position have their X and Y values separated by a space; pretty much everything else is DM-escaped and enclosed in quotes.</p> <p>escaped</p> <p>DM-escape the value as if it's in a quoted string but do not include the quotes. Size and position values both use</p> <p>,</p> <p>to separate their X and Y values.</p> <p>string</p> <p>Value is formatted as a DM-escaped string with surrounding quotes.</p> <p>params</p> <p>Format value for a URL-encoded parameter list (see  list2params   ), escaping characters as needed.</p> <p>json</p> <p>JSON formatting. Numbers are left unchanged; size or position values are turned into objects with x and y items; boolean values are</p> <p>true</p> <p>or</p> <p>false</p> <p>.</p> <p>json-dm</p> <p>JSON formatting, but DM-escaped so it can be included in a quoted string. Quotes are not included.</p> <p>arg</p> <p>Value is formatted as if it's an argument on a command line. Numbers are left alone; booleans are 0 or 1; size and position have their X and Y values separated by a space; pretty much everything else is DM-escaped and enclosed in quotes.</p> <p>escaped</p> <p>DM-escape the value as if it's in a quoted string but do not include the quotes. Size and position values both use</p> <p>,</p> <p>to separate their X and Y values.</p> <p>,</p> <p>string</p> <p>Value is formatted as a DM-escaped string with surrounding quotes.</p> <p>params</p> <p>Format value for a URL-encoded parameter list (see  list2params   ), escaping characters as needed.</p> <p>list2params</p> <p>json</p> <p>JSON formatting. Numbers are left unchanged; size or position values are turned into objects with x and y items; boolean values are</p> <p>true</p> <p>or</p> <p>false</p> <p>.</p> <p>true</p> <p>false</p> <p>json-dm</p> <p>JSON formatting, but DM-escaped so it can be included in a quoted string. Quotes are not included.</p> <p>The</p> <p>arg</p> <p>type is the default, unless the</p> <p>[[</p> <p>... </p> <p>]]</p> <p>expression has double quotes on both sides, in which case</p> <p>escaped</p> <p>is the default.</p> <p>arg</p> <p>[[</p> <p>...</p> <p>]]</p> <p>escaped</p>"},{"location":"%7Bskin%7D/control/","title":"Control","text":""},{"location":"%7Bskin%7D/control/#controls-skin","title":"controls (skin)","text":"<p>Control types: </p> <p>Bar   : A progress bar or slider</p> <p>Browser   : A browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Control types: </p> <p>Control types:</p> <p>Bar   : A progress bar or slider</p> <p>Browser   : A browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Bar</p> <p>Browser   : A browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Browser</p> <p>Button   : A pushbutton or toggle button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Button</p> <p>Child   : A container holding one or two panes, with a movable splitter</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Child</p> <p>Grid   : For table-like or list-like output</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Grid</p> <p>Info   : Classic BYOND statpanel</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Info</p> <p>Input   : Command input or other user-entered text</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Input</p> <p>Label   : Non-interactive text label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Label</p> <p>Main   : A window or pane that holds other controls</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Main</p> <p>Macro   : A  keyboard/gamepad/mouse macro </p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Macro keyboard/gamepad/mouse macro</p> <p>Map   : The game map display</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Map</p> <p>Menu   : An item in a drop-down menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Menu</p> <p>Output   : Text output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Output</p> <p>Tab   : A tab control holding multiple panes, showing one at a time</p> <p>Tab</p> <p>Parameters common to all controls: </p> <p>id </p> <p>is-disabled </p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>Positionable controls only (not Macro or Menu): </p> <p>anchor1, anchor2 </p> <p>background-color </p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>Parameters common to all controls: </p> <p>Parameters common to all controls:</p> <p>id </p> <p>is-disabled </p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>id</p> <p>is-disabled </p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>is-disabled</p> <p>parent </p> <p>saved-params </p> <p>type </p> <p>parent</p> <p>saved-params </p> <p>type </p> <p>saved-params</p> <p>type </p> <p>type</p> <p>Positionable controls only (not Macro or Menu): </p> <p>Positionable controls only (not Macro or Menu):</p> <p>anchor1, anchor2 </p> <p>background-color </p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>anchor1, anchor2</p> <p>background-color </p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>background-color</p> <p>border </p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>border</p> <p>drop-zone </p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>drop-zone</p> <p>flash </p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>flash</p> <p>focus </p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>focus</p> <p>font-family </p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>font-family</p> <p>font-size </p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>font-size</p> <p>font-style </p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>font-style</p> <p>is-visible </p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>is-visible</p> <p>is-transparent </p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>is-transparent</p> <p>on-size </p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>on-size</p> <p>pos </p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>pos</p> <p>right-click </p> <p>size </p> <p>text-color </p> <p>right-click</p> <p>size </p> <p>text-color </p> <p>size</p> <p>text-color </p> <p>text-color</p>"},{"location":"%7Bskin%7D/control/#_1","title":"Control","text":"<p>Creating/Destroying at runtime</p> <p>Controls can be created or deleted at runtime. (Only controls you created during runtime may be deleted.) To create a control, call  winset()   using the  id   of the new control, and the parameter list should include  type   ,  parent   , and probably also  pos   ,  size   , and any  anchors   .</p> <p>winset() id type parent pos size anchors</p> <p>To delete the control again, set its</p> <p>parent</p> <p>to a blank value.</p> <p>parent</p> <p>Menu items and macros work similarly, except they have no positional info. For those, the  name   parameter is important when you create them, and you will either need  command   or (for macros)  map-to   to do anything with them.</p> <p>name command map-to</p>"},{"location":"%7Bskin%7D/macros/","title":"Macros","text":""},{"location":"%7Bskin%7D/macros/#macros-skin","title":"macros (skin)","text":"<p>Macros are used to convert keyboard and gamepad events into actions. There are two ways this works: A macro can run a command, or in some cases (such as gamepad controls) it can be used to remap one control to another.</p> <p>A collection of macros is called a macro set, and the window currently in use defines which macro set will be used via its  macro   parameter.</p> <p>macro</p> <p>Macros can be changed at runtime. If a macro does not have an  id   , you can refer to it by its key combination (  name   ). If you have a macro set named</p> <p>macro1</p> <p>and have a</p> <p>Ctrl+E</p> <p>macro for instance, you could use  winset()   with</p> <p>\"macro1.Ctrl+E\"</p> <p>. See the  Macro control   for information on which parameters you can change with</p> <p>winset()</p> <p>.</p> <p>id name</p> <p>macro1</p> <p>Ctrl+E</p> <p>winset()</p> <p>\"macro1.Ctrl+E\"</p> <p>Macro control</p> <p>winset()</p> <p>The</p> <p>name</p> <p>of the macro is actually the full key combination as it would appear in the macro editor, like</p> <p>CTRL+E</p> <p>,</p> <p>Space+REP</p> <p>, or</p> <p>Alt+Shift+F1</p> <p>. This is not case-specific and it doesn't matter where you put modifiers like</p> <p>CTRL+</p> <p>,</p> <p>SHIFT+</p> <p>, etc.</p> <p>name</p> <p>CTRL+E</p> <p>Space+REP</p> <p>Alt+Shift+F1</p> <p>CTRL+</p> <p>SHIFT+</p>"},{"location":"%7Bskin%7D/macros/#_1","title":"Macros","text":"<p>The Any macro</p> <p>Oftentimes it's desirable to keep track of key presses yourself rather than have a hundred different macros defined. BYOND makes this possible via the</p> <p>Any</p> <p>and</p> <p>Any+UP</p> <p>macros, which respond to any key or gamepad button.</p> <p>UP</p> <p>is the only allowed modifier for this macro, since other modifier keys are handled by this same macro.</p> <p>Any</p> <p>Any+UP</p> <p>UP</p> <p>Typically, you will want to use  set instant=1   on the verbs that will be tied to the Any macro, so that keyboard input doesn't queue up and lag behind.</p> <p>set instant=1</p> <p>In the  command   that goes with this macro,</p> <p>[[*]]</p> <p>will be replaced with the name of the key or gamepad button that was pressed/released. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>command</p> <p>[[*]]</p> <p>client commands</p> <p>[[...]]</p>"},{"location":"%7Bskin%7D/macros/#_2","title":"Macros","text":"<p>Mapping</p> <p>The  map-to   parameter is used by  mappings   , which are like macros but are used to convert gamepad inputs easily and quickly to keyboard inputs. E.g.,</p> <p>GamepadLeft</p> <p>can map to</p> <p>West</p> <p>which is the left arrow key. A set of default mappings will be added automatically at runtime if you don't include any gamepad mapping in your project.</p> <p>map-to mappings</p> <p>GamepadLeft</p> <p>West</p>"},{"location":"%7Bskin%7D/macros/#_3","title":"Macros","text":"<p>Gamepads</p> <p>BYOND will support up to four gamepads, and breaks up their input into the following categories:</p> <ul> <li>Buttons:   Buttons on the controller that are either pressed or not pressed.</li> <li>Directions:   Directions pressed on the D-pad, which act like buttons. Diagonals are also included.</li> <li>D-pad:   The D-pad itself, which can be used to read a  dir   number.</li> <li> <p>Analog:   The analog sticks (BYOND supports left and right).</p> </li> <li> <p>Buttons:   Buttons on the controller that are either pressed or not pressed.</p> </li> </ul> <p>Buttons: - Directions:   Directions pressed on the D-pad, which act like buttons. Diagonals are also included.</p> <p>Directions: - D-pad:   The D-pad itself, which can be used to read a  dir   number.</p> <p>D-pad: dir - Analog:   The analog sticks (BYOND supports left and right).</p> <p>Analog:</p> <p>See the list of available macros below for information on how to harness these inputs.</p> <p>To let a user configure their gamepad, you need to call the client-side</p> <p>.gamepad-mapping</p> <p>command   . Or, if they have access to the Options &amp; Messages window and Dream Seeker's default menus, they can reach it from there. However it's a good idea to make this easy for them to find. Several common gamepads are already known by BYOND.</p> <p>.gamepad-mapping</p> <p>command</p> <p>There is also the</p> <p>GamepadRaw</p> <p>macro, which is similar to</p> <p>Any</p> <p>in some ways and will avoid doing any processing (e.g. checking for dead zones on the analog sticks) so you can handle all input yourself.</p> <p>GamepadRaw</p> <p>does not rely on BYOND's controller configuration, so it will not, for instance, know that button 0 should be</p> <p>GamepadFace1</p> <p>. See below for more information on how to use this macro.</p> <p>GamepadRaw</p> <p>Any</p> <p>GamepadRaw</p> <p>GamepadFace1</p>"},{"location":"%7Bskin%7D/macros/#_4","title":"Macros","text":"<p>Mouse macros</p> <p>You can add macros (not local player-defined ones) for any of the mouse input commands, thereby bypassing the normal mouse verbs. This can be helpful for designing custom setups where you don't want to have to parse the normal parameter string that provides most of the info, and instead want to provide data directly to the verb. You will want</p> <p>set instant=1</p> <p>on any such verb.</p> <p>set instant=1</p> <p>Mouse macro commands use the</p> <p>[[...]]</p> <p>syntax to embed values, just like  embedded wingets   . These are the values you can include in a mouse macro:</p> <p>[[...]]</p> <p>embedded wingets</p> <p>|   Embedded keyword   |   Meaning   | | --- | --- | |   action   |   Name of the mouse action (e.g. MouseDown, MouseMove, etc.).   | |   src   |   Object the mouse is touching, or dragging/dropping.   | |   loc   |   Turf or statpanel that</p> <p>src</p> <p>is over; in a drag-drop you should split this into</p> <p>src.loc</p> <p>and</p> <p>over.loc</p> <p>.   | |   button   |   Mouse button used for this action, if any:</p> <p>left</p> <p>,</p> <p>middle</p> <p>, or</p> <p>right</p> <p>.   | |   drag   |   Mouse button currently used for dragging.   | |   buttons   |   Mouse buttons currently down or involved in this action, separated by commas.   | |   keys   |   Modifier keys currently held (</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt</p> <p>), separated by commas.   | |   over   |   Object the mouse is over in a drag/drop operation.   | |   id   |   Control ID; in a drag-drop you should split this into</p> <p>src.id</p> <p>and</p> <p>over.id</p> <p>.   | |   icon   |   The icon offset (starting from 1,1 at the lower left) where the mouse action occurred.  *  | |   tile   |   The tile where the mouse action occurred, if relevant.  *  | |   vis   |   Pixel coordinates relative to the icon's position on screen (same as</p> <p>icon</p> <p>but without taking transform into account).  *  | |   screen_loc   |   The regular</p> <p>screen_loc</p> <p>cordinate string.  *  | |   screen   |   screen_loc</p> <p>coordinates but entirely in pixels starting at 0,0 from lower left.  *  | |   screen_tile   |   screen_loc</p> <p>coordinates but only the tile number starting at 1,1.  *  | |   screen_offset   |   screen_loc</p> <p>coordinates but only the pixel offset from the tile, starting at 0,0.  *  | |   delta   |   Wheel changes in a mouse wheel command.  *  | |   left</p> <p>,</p> <p>right</p> <p>,</p> <p>middle   |   1 if this button is down or involved in this action, 0 otherwise   | |   shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt   |   1 if this modifier key is held, 0 otherwise   | |   link   |   1 if the mouse is over a maptext link, 0 otherwise   | | *   Coordinate values are comma-separated, but you can follow them with</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get the individual X and Y numbers.   |</p> <p>|   Embedded keyword   |   Meaning   |</p> <p>Embedded keyword  |</p> <p>Meaning  | |   action   |   Name of the mouse action (e.g. MouseDown, MouseMove, etc.).   |</p> <p>action   |</p> <p>action</p> <p>Name of the mouse action (e.g. MouseDown, MouseMove, etc.).  | |   src   |   Object the mouse is touching, or dragging/dropping.   |</p> <p>src   |</p> <p>src</p> <p>Object the mouse is touching, or dragging/dropping.  | |   loc   |   Turf or statpanel that</p> <p>src</p> <p>is over; in a drag-drop you should split this into</p> <p>src.loc</p> <p>and</p> <p>over.loc</p> <p>.   |</p> <p>loc   |</p> <p>loc</p> <p>Turf or statpanel that</p> <p>src</p> <p>is over; in a drag-drop you should split this into</p> <p>src.loc</p> <p>and</p> <p>over.loc</p> <p>.  |</p> <p>src</p> <p>src.loc</p> <p>over.loc</p> <p>|   button   |   Mouse button used for this action, if any:</p> <p>left</p> <p>,</p> <p>middle</p> <p>, or</p> <p>right</p> <p>.   |</p> <p>button   |</p> <p>button</p> <p>Mouse button used for this action, if any:</p> <p>left</p> <p>,</p> <p>middle</p> <p>, or</p> <p>right</p> <p>.  |</p> <p>left</p> <p>middle</p> <p>right</p> <p>|   drag   |   Mouse button currently used for dragging.   |</p> <p>drag   |</p> <p>drag</p> <p>Mouse button currently used for dragging.  | |   buttons   |   Mouse buttons currently down or involved in this action, separated by commas.   |</p> <p>buttons   |</p> <p>buttons</p> <p>Mouse buttons currently down or involved in this action, separated by commas.  | |   keys   |   Modifier keys currently held (</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt</p> <p>), separated by commas.   |</p> <p>keys   |</p> <p>keys</p> <p>Modifier keys currently held (</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt</p> <p>), separated by commas.  |</p> <p>shift</p> <p>ctrl</p> <p>alt</p> <p>|   over   |   Object the mouse is over in a drag/drop operation.   |</p> <p>over   |</p> <p>over</p> <p>Object the mouse is over in a drag/drop operation.  | |   id   |   Control ID; in a drag-drop you should split this into</p> <p>src.id</p> <p>and</p> <p>over.id</p> <p>.   |</p> <p>id   |</p> <p>id</p> <p>Control ID; in a drag-drop you should split this into</p> <p>src.id</p> <p>and</p> <p>over.id</p> <p>.  |</p> <p>src.id</p> <p>over.id</p> <p>|   icon   |   The icon offset (starting from 1,1 at the lower left) where the mouse action occurred.  *  |</p> <p>icon   |</p> <p>icon</p> <p>The icon offset (starting from 1,1 at the lower left) where the mouse action occurred.  *  | * |   tile   |   The tile where the mouse action occurred, if relevant.  *  |</p> <p>tile   |</p> <p>tile</p> <p>The tile where the mouse action occurred, if relevant.  *  | * |   vis   |   Pixel coordinates relative to the icon's position on screen (same as</p> <p>icon</p> <p>but without taking transform into account).  *  |</p> <p>vis   |</p> <p>vis</p> <p>Pixel coordinates relative to the icon's position on screen (same as</p> <p>icon</p> <p>but without taking transform into account).  *  |</p> <p>icon</p> <p>* |   screen_loc   |   The regular</p> <p>screen_loc</p> <p>cordinate string.  *  |</p> <p>screen_loc   |</p> <p>screen_loc</p> <p>The regular</p> <p>screen_loc</p> <p>cordinate string.  *  |</p> <p>screen_loc</p> <p>* |   screen   |   screen_loc</p> <p>coordinates but entirely in pixels starting at 0,0 from lower left.  *  |</p> <p>screen   |</p> <p>screen</p> <p>screen_loc</p> <p>coordinates but entirely in pixels starting at 0,0 from lower left.  *  |</p> <p>screen_loc</p> <p>* |   screen_tile   |   screen_loc</p> <p>coordinates but only the tile number starting at 1,1.  *  |</p> <p>screen_tile   |</p> <p>screen_tile</p> <p>screen_loc</p> <p>coordinates but only the tile number starting at 1,1.  *  |</p> <p>screen_loc</p> <p>* |   screen_offset   |   screen_loc</p> <p>coordinates but only the pixel offset from the tile, starting at 0,0.  *  |</p> <p>screen_offset   |</p> <p>screen_offset</p> <p>screen_loc</p> <p>coordinates but only the pixel offset from the tile, starting at 0,0.  *  |</p> <p>screen_loc</p> <p>* |   delta   |   Wheel changes in a mouse wheel command.  *  |</p> <p>delta   |</p> <p>delta</p> <p>Wheel changes in a mouse wheel command.  *  | * |   left</p> <p>,</p> <p>right</p> <p>,</p> <p>middle   |   1 if this button is down or involved in this action, 0 otherwise   |</p> <p>left</p> <p>,</p> <p>right</p> <p>,</p> <p>middle   |</p> <p>left</p> <p>right</p> <p>middle</p> <p>1 if this button is down or involved in this action, 0 otherwise  | |   shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt   |   1 if this modifier key is held, 0 otherwise   |</p> <p>shift</p> <p>,</p> <p>ctrl</p> <p>,</p> <p>alt   |</p> <p>shift</p> <p>ctrl</p> <p>alt</p> <p>1 if this modifier key is held, 0 otherwise  | |   link   |   1 if the mouse is over a maptext link, 0 otherwise   |</p> <p>link   |</p> <p>link</p> <p>1 if the mouse is over a maptext link, 0 otherwise  | | *   Coordinate values are comma-separated, but you can follow them with</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get the individual X and Y numbers.   |</p> <p>*   Coordinate values are comma-separated, but you can follow them with</p> <p>.x</p> <p>or</p> <p>.y</p> <p>to get the individual X and Y numbers.  | *</p> <p>.x</p> <p>.y</p> <p>An example mouse macro command might look like this:</p> <p><code>my-mousedown-verb [[src]] [[button]] \"keys=[[keys as params]];drag=[[drag as params]]\"</code></p> <pre><code>my-mousedown-verb [[src]] [[button]] \"keys=[[keys as params]];drag=[[drag as params]]\"\n</code></pre> <p>In the example, the</p> <p>src</p> <p>value is a reference such as you would get with the  [ref()</p> <p>proc](#/proc/ref)   . It can be used as a verb argument directly and won't be enclosed by quotes by default. The</p> <p>button</p> <p>value is a string and the default formatting will put quotes around it. The</p> <p>keys</p> <p>and</p> <p>drag</p> <p>values were given the</p> <p>as params</p> <p>format specifier so they would behave as part of a  parameter list   .</p> <p>src</p> <p>[ref()</p> <p>proc](#/proc/ref)</p> <p>ref()</p> <p>button</p> <p>keys</p> <p>drag</p> <p>as params</p> <p>parameter list</p> <p>In drag/drop actions, you can precede any value with</p> <p>src</p> <p>or</p> <p>over</p> <p>if there may be different information for the dragged object and the mouseover object/location. This also applies to things like</p> <p>keys</p> <p>, which by default will be the currently held keys but you can use</p> <p>src.keys</p> <p>to refer to the values from when the drag began.</p> <p>src</p> <p>over</p> <p>keys</p> <p>src.keys</p>"},{"location":"%7Bskin%7D/macros/#_5","title":"Macros","text":"<p>Available macros</p> <p>This is a list of all keys and gamepad events that can be used in macros.</p> <p>| Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.   | |   Modifier   |   Meaning   | |   SHIFT+   |   This macro only counts if either Shift key is pressed.   | |   CTRL+   |   This macro only counts if either Ctrl key is pressed.   | |   ALT+   |   This macro only counts if either Alt key is pressed.   | |   +REP   |   If a key/button is held down, this macro repeats.   | |   +UP   |   This macro fires when the key/button is released.   | | Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)   | |   Key   |   Description   | |   A</p> <p>-</p> <p>Z   |   Letter key   | |   0</p> <p>-</p> <p>9   |   Number key   | |   Numpad0</p> <p>-</p> <p>Numpad9   |   Numpad numbers   | |   North   |   Up arrow   | |   South   |   Down arrow   | |   East   |   Right arrow   | |   West   |   Left arrow   | |   Northwest   |   Home key   | |   Southwest   |   End key   | |   Northeast   |   Page Up key   | |   Southeast   |   Page Down key   | |   Center   |   Center key (numpad)   | |   Return   |   Enter / Return key   | |   Escape   |   Esc key   | |   Tab   |   Tab key   | |   Space   |   Space bar   | |   Back   |   Backspace key   | |   Insert   |   Ins key   | |   Delete   |   Del key   | |   Pause   |   Pause key   | |   Snapshot   |   Snapshot / Print Screen key   | |   LWin   |   Left Windows key   | |   RWin   |   Right Windows key   | |   Apps   |   Apps key   | |   Multiply   |   Multiply key   | |   Add   |   Add key   | |   Subtract   |   Subtract key   | |   Divide   |   Divide / Slash key   | |   Separator   |   Separator / Backslash key   | |   Shift   |   Shift key (when not used as a modifier)   | |   Ctrl   |   Ctrl key (when not used as a modifier)   | |   Alt   |   Alt key (when not used as a modifier)   | |   VolumeMute   |   Mute key   | |   VolumeUp   |   Volume up key   | |   VolumeDown   |   Volume down key   | |   MediaPlayPause   |   Play/pause media key   | |   MediaStop   |   Stop media key   | |   MediaNext   |   Next track key   | |   MediaPrev   |   Previous track key   | | Special macros  | |  Any   |   A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  | |  GamepadRaw </p> <p>*  |   Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.   | |  *   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   | | Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.   | |   Button   |   Description   | |   GamepadFace1   |   A (Xbox), X (PS), bottom of diamond   | |   GamepadFace2   |   B (Xbox), Circle (PS), right of diamond   | |   GamepadFace3   |   X (Xbox), Square (PS), left of diamond   | |   GamepadFace4   |   Y (Xbox), Triangle (PS), top of diamond   | |   GamepadL1   |   Left top shoulder   | |   GamepadR1   |   Right top shoulder   | |   GamepadL2   |   Left bottom shoulder   | |   GamepadR2   |   Right bottom shoulder   | |   GamepadSelect   |   Select / Back   | |   GamepadStart   |   Start / Forward   | |   GamepadL3   |   Left analog click   | |   GamepadR3   |   Right analog click   | |   Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.   | |   GamepadUp   |   Up button   | |   GamepadDown   |   Down button   | |   GamepadLeft   |   Left button   | |   GamepadRight   |   Right button   | |   GamepadUpLeft   |   Up+left virtual button   | |   GamepadUpRight   |   Up+right virtual button   | |   GamepadDownLeft   |   Down+left virtual button   | |   GamepadDownRight   |   Down+right virtual button   | | Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.   | |   GamepadLeftAnalog   |   Left analog stick   | |   GamepadRightAnalog   |   Left analog stick   | | Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.   | |   GamepadDir   |   Dpad, converted to one of the eight standard directions.   | |   GamepadDir4   |   Dpad, converted to a cardinal direction.   | |  \u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   | | Mouse macros   can have commands but not be used as mapping targets.   | |   MouseDown   |   Mouse button pressed (replaces MouseDown verb)   | |   MouseUp   |   Mouse button released (replaces MouseUp verb)   | |   MouseOver   |   Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)   | |   MouseMove   |   Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)   | |   MouseDrag   |   Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)   | |   MouseDragMove   |   Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)   | |   MouseDrop   |   Mouse drag has been released over a target (replaces MouseDrop verb)   | | Mouse targets   can only be used as mapping targets for another macro.   | |   Mouse   |   The mouse cursor, mappable by a gamepad analog stick.   | |   MouseLeftButton   |   Left button, mappable by a gamepad button.   | |   MouseRightButton   |   Right button, mappable by a gamepad button.   | |   MouseMiddleButton   |   Middle button, mappable by a gamepad button.   |</p> <p>| Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.   | |   Modifier   |   Meaning   |</p> <p>| Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.   |</p> <p>Macro modifiers   are part of the macro name, and control the conditions in which the macro will fire.  | Macro modifiers |   Modifier   |   Meaning   |</p> <p>Modifier  |</p> <p>Meaning  | |   SHIFT+   |   This macro only counts if either Shift key is pressed.   | |   CTRL+   |   This macro only counts if either Ctrl key is pressed.   | |   ALT+   |   This macro only counts if either Alt key is pressed.   | |   +REP   |   If a key/button is held down, this macro repeats.   | |   +UP   |   This macro fires when the key/button is released.   |</p> <p>|   SHIFT+   |   This macro only counts if either Shift key is pressed.   |</p> <p>SHIFT+   |</p> <p>SHIFT+</p> <p>This macro only counts if either Shift key is pressed.  | |   CTRL+   |   This macro only counts if either Ctrl key is pressed.   |</p> <p>CTRL+   |</p> <p>CTRL+</p> <p>This macro only counts if either Ctrl key is pressed.  | |   ALT+   |   This macro only counts if either Alt key is pressed.   |</p> <p>ALT+   |</p> <p>ALT+</p> <p>This macro only counts if either Alt key is pressed.  | |   +REP   |   If a key/button is held down, this macro repeats.   |</p> <p>+REP   |</p> <p>+REP</p> <p>If a key/button is held down, this macro repeats.  | |   +UP   |   This macro fires when the key/button is released.   |</p> <p>+UP   |</p> <p>+UP</p> <p>This macro fires when the key/button is released.  | | Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)   | |   Key   |   Description   |</p> <p>| Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)   |</p> <p>Keyboard keys   are the garden-variety macros. (This list is abridged to exclude keys probably no one has.)  | Keyboard keys |   Key   |   Description   |</p> <p>Key  |</p> <p>Description  | |   A</p> <p>-</p> <p>Z   |   Letter key   | |   0</p> <p>-</p> <p>9   |   Number key   | |   Numpad0</p> <p>-</p> <p>Numpad9   |   Numpad numbers   | |   North   |   Up arrow   | |   South   |   Down arrow   | |   East   |   Right arrow   | |   West   |   Left arrow   | |   Northwest   |   Home key   | |   Southwest   |   End key   | |   Northeast   |   Page Up key   | |   Southeast   |   Page Down key   | |   Center   |   Center key (numpad)   | |   Return   |   Enter / Return key   | |   Escape   |   Esc key   | |   Tab   |   Tab key   | |   Space   |   Space bar   | |   Back   |   Backspace key   | |   Insert   |   Ins key   | |   Delete   |   Del key   | |   Pause   |   Pause key   | |   Snapshot   |   Snapshot / Print Screen key   | |   LWin   |   Left Windows key   | |   RWin   |   Right Windows key   | |   Apps   |   Apps key   | |   Multiply   |   Multiply key   | |   Add   |   Add key   | |   Subtract   |   Subtract key   | |   Divide   |   Divide / Slash key   | |   Separator   |   Separator / Backslash key   | |   Shift   |   Shift key (when not used as a modifier)   | |   Ctrl   |   Ctrl key (when not used as a modifier)   | |   Alt   |   Alt key (when not used as a modifier)   | |   VolumeMute   |   Mute key   | |   VolumeUp   |   Volume up key   | |   VolumeDown   |   Volume down key   | |   MediaPlayPause   |   Play/pause media key   | |   MediaStop   |   Stop media key   | |   MediaNext   |   Next track key   | |   MediaPrev   |   Previous track key   |</p> <p>|   A</p> <p>-</p> <p>Z   |   Letter key   |</p> <p>A</p> <p>-</p> <p>Z   |</p> <p>A</p> <p>Z</p> <p>Letter key  | |   0</p> <p>-</p> <p>9   |   Number key   |</p> <p>0</p> <p>-</p> <p>9   |</p> <p>0</p> <p>9</p> <p>Number key  | |   Numpad0</p> <p>-</p> <p>Numpad9   |   Numpad numbers   |</p> <p>Numpad0</p> <p>-</p> <p>Numpad9   |</p> <p>Numpad0</p> <p>Numpad9</p> <p>Numpad numbers  | |   North   |   Up arrow   |</p> <p>North   |</p> <p>North</p> <p>Up arrow  | |   South   |   Down arrow   |</p> <p>South   |</p> <p>South</p> <p>Down arrow  | |   East   |   Right arrow   |</p> <p>East   |</p> <p>East</p> <p>Right arrow  | |   West   |   Left arrow   |</p> <p>West   |</p> <p>West</p> <p>Left arrow  | |   Northwest   |   Home key   |</p> <p>Northwest   |</p> <p>Northwest</p> <p>Home key  | |   Southwest   |   End key   |</p> <p>Southwest   |</p> <p>Southwest</p> <p>End key  | |   Northeast   |   Page Up key   |</p> <p>Northeast   |</p> <p>Northeast</p> <p>Page Up key  | |   Southeast   |   Page Down key   |</p> <p>Southeast   |</p> <p>Southeast</p> <p>Page Down key  | |   Center   |   Center key (numpad)   |</p> <p>Center   |</p> <p>Center</p> <p>Center key (numpad)  | |   Return   |   Enter / Return key   |</p> <p>Return   |</p> <p>Return</p> <p>Enter / Return key  | |   Escape   |   Esc key   |</p> <p>Escape   |</p> <p>Escape</p> <p>Esc key  | |   Tab   |   Tab key   |</p> <p>Tab   |</p> <p>Tab</p> <p>Tab key  | |   Space   |   Space bar   |</p> <p>Space   |</p> <p>Space</p> <p>Space bar  | |   Back   |   Backspace key   |</p> <p>Back   |</p> <p>Back</p> <p>Backspace key  | |   Insert   |   Ins key   |</p> <p>Insert   |</p> <p>Insert</p> <p>Ins key  | |   Delete   |   Del key   |</p> <p>Delete   |</p> <p>Delete</p> <p>Del key  | |   Pause   |   Pause key   |</p> <p>Pause   |</p> <p>Pause</p> <p>Pause key  | |   Snapshot   |   Snapshot / Print Screen key   |</p> <p>Snapshot   |</p> <p>Snapshot</p> <p>Snapshot / Print Screen key  | |   LWin   |   Left Windows key   |</p> <p>LWin   |</p> <p>LWin</p> <p>Left Windows key  | |   RWin   |   Right Windows key   |</p> <p>RWin   |</p> <p>RWin</p> <p>Right Windows key  | |   Apps   |   Apps key   |</p> <p>Apps   |</p> <p>Apps</p> <p>Apps key  | |   Multiply   |   Multiply key   |</p> <p>Multiply   |</p> <p>Multiply</p> <p>Multiply key  | |   Add   |   Add key   |</p> <p>Add   |</p> <p>Add</p> <p>Add key  | |   Subtract   |   Subtract key   |</p> <p>Subtract   |</p> <p>Subtract</p> <p>Subtract key  | |   Divide   |   Divide / Slash key   |</p> <p>Divide   |</p> <p>Divide</p> <p>Divide / Slash key  | |   Separator   |   Separator / Backslash key   |</p> <p>Separator   |</p> <p>Separator</p> <p>Separator / Backslash key  | |   Shift   |   Shift key (when not used as a modifier)   |</p> <p>Shift   |</p> <p>Shift</p> <p>Shift key (when not used as a modifier)  | |   Ctrl   |   Ctrl key (when not used as a modifier)   |</p> <p>Ctrl   |</p> <p>Ctrl</p> <p>Ctrl key (when not used as a modifier)  | |   Alt   |   Alt key (when not used as a modifier)   |</p> <p>Alt   |</p> <p>Alt</p> <p>Alt key (when not used as a modifier)  | |   VolumeMute   |   Mute key   |</p> <p>VolumeMute   |</p> <p>VolumeMute</p> <p>Mute key  | |   VolumeUp   |   Volume up key   |</p> <p>VolumeUp   |</p> <p>VolumeUp</p> <p>Volume up key  | |   VolumeDown   |   Volume down key   |</p> <p>VolumeDown   |</p> <p>VolumeDown</p> <p>Volume down key  | |   MediaPlayPause   |   Play/pause media key   |</p> <p>MediaPlayPause   |</p> <p>MediaPlayPause</p> <p>Play/pause media key  | |   MediaStop   |   Stop media key   |</p> <p>MediaStop   |</p> <p>MediaStop</p> <p>Stop media key  | |   MediaNext   |   Next track key   |</p> <p>MediaNext   |</p> <p>MediaNext</p> <p>Next track key  | |   MediaPrev   |   Previous track key   |</p> <p>MediaPrev   |</p> <p>MediaPrev</p> <p>Previous track key  | | Special macros  |</p> <p>| Special macros  |</p> <p>Special macros  | Special macros |  Any   |   A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  | |  GamepadRaw </p> <p>*  |   Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.   | |  *   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   |</p> <p>|  Any   |   A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  |</p> <p>Any   |</p> <p>Any </p> <p>Any</p> <p>A special macro that can run a command on press/release of any key or gamepad button.</p> <p>UP</p> <p>is the only modifier allowed. In the command,</p> <p>[[*]]</p> <p>is replaced with the key/button name.  *  |</p> <p>UP</p> <p>[[*]]</p> <p>* |  GamepadRaw </p> <p>*  |   Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.   |</p> <p>GamepadRaw </p> <p>*  |</p> <p>GamepadRaw </p> <p>GamepadRaw *</p> <p>Captures raw input from a gamepad, without regard to the adjustments done by the Gamepad Setup dialog. In the command,</p> <p>[[id]]</p> <p>is replaced by the name of the button or axis changed (\"Button0\" through \"Button15\" and \"Axis0\" through \"Axis11\"),</p> <p>[[value]]</p> <p>is replaced with the value of the button or axis, and</p> <p>[[*]]</p> <p>is equivalent to</p> <p>[[id]] [[value]]</p> <p>.  |</p> <p>[[id]]</p> <p>[[value]]</p> <p>[[*]]</p> <p>[[id]] [[value]]</p> <p>|  *   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   |</p> <p>*   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.   |</p> <p>*   If no gamepad mappings are included in a game's interface, the default mappings are used instead, which will map the Dpad buttons to the arrow keys. This will cause the Any macro to register both a gamepad directional button and the mapped key on the same press. If you plan on using macros to capture gamepad input, you may wish instead to map any one of the directional buttons to \"None\", which will override the default gamepad mappings completely.</p> <p>* | Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.   | |   Button   |   Description   |</p> <p>| Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.   |</p> <p>Gamepad buttons  \u2020   can use another gamepad button as a modifier (but not CTRL, SHIFT, ALT), and can be mapped to one or two keyboard keys or mouse buttons.  | Gamepad buttons \u2020 |   Button   |   Description   |</p> <p>Button  |</p> <p>Description  | |   GamepadFace1   |   A (Xbox), X (PS), bottom of diamond   | |   GamepadFace2   |   B (Xbox), Circle (PS), right of diamond   | |   GamepadFace3   |   X (Xbox), Square (PS), left of diamond   | |   GamepadFace4   |   Y (Xbox), Triangle (PS), top of diamond   | |   GamepadL1   |   Left top shoulder   | |   GamepadR1   |   Right top shoulder   | |   GamepadL2   |   Left bottom shoulder   | |   GamepadR2   |   Right bottom shoulder   | |   GamepadSelect   |   Select / Back   | |   GamepadStart   |   Start / Forward   | |   GamepadL3   |   Left analog click   | |   GamepadR3   |   Right analog click   | |   Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.   | |   GamepadUp   |   Up button   | |   GamepadDown   |   Down button   | |   GamepadLeft   |   Left button   | |   GamepadRight   |   Right button   | |   GamepadUpLeft   |   Up+left virtual button   | |   GamepadUpRight   |   Up+right virtual button   | |   GamepadDownLeft   |   Down+left virtual button   | |   GamepadDownRight   |   Down+right virtual button   |</p> <p>|   GamepadFace1   |   A (Xbox), X (PS), bottom of diamond   |</p> <p>GamepadFace1   |</p> <p>GamepadFace1</p> <p>A (Xbox), X (PS), bottom of diamond  | |   GamepadFace2   |   B (Xbox), Circle (PS), right of diamond   |</p> <p>GamepadFace2   |</p> <p>GamepadFace2</p> <p>B (Xbox), Circle (PS), right of diamond  | |   GamepadFace3   |   X (Xbox), Square (PS), left of diamond   |</p> <p>GamepadFace3   |</p> <p>GamepadFace3</p> <p>X (Xbox), Square (PS), left of diamond  | |   GamepadFace4   |   Y (Xbox), Triangle (PS), top of diamond   |</p> <p>GamepadFace4   |</p> <p>GamepadFace4</p> <p>Y (Xbox), Triangle (PS), top of diamond  | |   GamepadL1   |   Left top shoulder   |</p> <p>GamepadL1   |</p> <p>GamepadL1</p> <p>Left top shoulder  | |   GamepadR1   |   Right top shoulder   |</p> <p>GamepadR1   |</p> <p>GamepadR1</p> <p>Right top shoulder  | |   GamepadL2   |   Left bottom shoulder   |</p> <p>GamepadL2   |</p> <p>GamepadL2</p> <p>Left bottom shoulder  | |   GamepadR2   |   Right bottom shoulder   |</p> <p>GamepadR2   |</p> <p>GamepadR2</p> <p>Right bottom shoulder  | |   GamepadSelect   |   Select / Back   |</p> <p>GamepadSelect   |</p> <p>GamepadSelect</p> <p>Select / Back  | |   GamepadStart   |   Start / Forward   |</p> <p>GamepadStart   |</p> <p>GamepadStart</p> <p>Start / Forward  | |   GamepadL3   |   Left analog click   |</p> <p>GamepadL3   |</p> <p>GamepadL3</p> <p>Left analog click  | |   GamepadR3   |   Right analog click   |</p> <p>GamepadR3   |</p> <p>GamepadR3</p> <p>Right analog click  | |   Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.   |</p> <p>Directional buttons: only one can pressed at a time, and the diagonal buttons are virtual.  | |   GamepadUp   |   Up button   |</p> <p>GamepadUp   |</p> <p>GamepadUp</p> <p>Up button  | |   GamepadDown   |   Down button   |</p> <p>GamepadDown   |</p> <p>GamepadDown</p> <p>Down button  | |   GamepadLeft   |   Left button   |</p> <p>GamepadLeft   |</p> <p>GamepadLeft</p> <p>Left button  | |   GamepadRight   |   Right button   |</p> <p>GamepadRight   |</p> <p>GamepadRight</p> <p>Right button  | |   GamepadUpLeft   |   Up+left virtual button   |</p> <p>GamepadUpLeft   |</p> <p>GamepadUpLeft</p> <p>Up+left virtual button  | |   GamepadUpRight   |   Up+right virtual button   |</p> <p>GamepadUpRight   |</p> <p>GamepadUpRight</p> <p>Up+right virtual button  | |   GamepadDownLeft   |   Down+left virtual button   |</p> <p>GamepadDownLeft   |</p> <p>GamepadDownLeft</p> <p>Down+left virtual button  | |   GamepadDownRight   |   Down+right virtual button   |</p> <p>GamepadDownRight   |</p> <p>GamepadDownRight</p> <p>Down+right virtual button  | | Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.   |</p> <p>| Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.   |</p> <p>Gamepad analog sticks  \u2020   can have commands and/or map to</p> <p>GamepadDir</p> <p>,</p> <p>GamepadDir4</p> <p>, or</p> <p>Mouse</p> <p>. They can use a gamepad button as a modifier. In a command,</p> <p>[[x]]</p> <p>and</p> <p>[[y]]</p> <p>are replaced by coordinates, and</p> <p>[[*]]</p> <p>is replaced by both with a comma for separation.  | Gamepad analog sticks \u2020</p> <p>GamepadDir</p> <p>GamepadDir4</p> <p>Mouse</p> <p>[[x]]</p> <p>[[y]]</p> <p>[[*]]</p> <p>|   GamepadLeftAnalog   |   Left analog stick   | |   GamepadRightAnalog   |   Left analog stick   |</p> <p>|   GamepadLeftAnalog   |   Left analog stick   |</p> <p>GamepadLeftAnalog   |</p> <p>GamepadLeftAnalog</p> <p>Left analog stick  | |   GamepadRightAnalog   |   Left analog stick   |</p> <p>GamepadRightAnalog   |</p> <p>GamepadRightAnalog</p> <p>Left analog stick  | | Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.   |</p> <p>| Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.   |</p> <p>Gamepad Dpads  \u2020\u2021   can have commands or are used as mapping targets for analog sticks. A gamepad button can be used as a modifier. In a command,</p> <p>[[*]]</p> <p>is replaced by a direction number, which can be 0.  | Gamepad Dpads \u2020\u2021</p> <p>[[*]]</p> <p>|   GamepadDir   |   Dpad, converted to one of the eight standard directions.   | |   GamepadDir4   |   Dpad, converted to a cardinal direction.   | |  \u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   |</p> <p>|   GamepadDir   |   Dpad, converted to one of the eight standard directions.   |</p> <p>GamepadDir   |</p> <p>GamepadDir</p> <p>Dpad, converted to one of the eight standard directions.  | |   GamepadDir4   |   Dpad, converted to a cardinal direction.   |</p> <p>GamepadDir4   |</p> <p>GamepadDir4</p> <p>Dpad, converted to a cardinal direction.  | |  \u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   |</p> <p>\u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.   |</p> <p>\u2020   All of the gamepad macros defined above apply to the first gamepad. BYOND can now support up to four gamepads, and you can replace Gamepad in the names above with Gamepad2, Gamepad3, or Gamepad4 to access them. Each gamepad also has its own raw macro (i.e., Gamepad2Raw).</p> <p>\u2020</p> <p>\u2021   If you use a Dpad macro like GamepadDir as a</p> <p>map-to</p> <p>target, you don't have to specify gamepad 2-4 in map-to; the mapping will automatically know that when Gamepad2LeftAnalog is mapped to GamepadDir, it means Gamepad2Dir.</p> <p>\u2021</p> <p>map-to</p> <p>| Mouse macros   can have commands but not be used as mapping targets.   |</p> <p>| Mouse macros   can have commands but not be used as mapping targets.   |</p> <p>Mouse macros   can have commands but not be used as mapping targets.  | Mouse macros |   MouseDown   |   Mouse button pressed (replaces MouseDown verb)   | |   MouseUp   |   Mouse button released (replaces MouseUp verb)   | |   MouseOver   |   Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)   | |   MouseMove   |   Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)   | |   MouseDrag   |   Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)   | |   MouseDragMove   |   Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)   | |   MouseDrop   |   Mouse drag has been released over a target (replaces MouseDrop verb)   |</p> <p>|   MouseDown   |   Mouse button pressed (replaces MouseDown verb)   |</p> <p>MouseDown   |</p> <p>MouseDown</p> <p>Mouse button pressed (replaces MouseDown verb)  | |   MouseUp   |   Mouse button released (replaces MouseUp verb)   |</p> <p>MouseUp   |</p> <p>MouseUp</p> <p>Mouse button released (replaces MouseUp verb)  | |   MouseOver   |   Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)   |</p> <p>MouseOver   |</p> <p>MouseOver</p> <p>Mouse has moved over a new icon or entered/exited a control (replaces MouseEntered and MouseExited verbs)  | |   MouseMove   |   Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)   |</p> <p>MouseMove   |</p> <p>MouseMove</p> <p>Mouse has moved to a new pixel of the same icon (replaces MouseMove verb)  | |   MouseDrag   |   Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)   |</p> <p>MouseDrag   |</p> <p>MouseDrag</p> <p>Mouse has begin dragging or is over a new drop target (replaces MouseDrag verb)  | |   MouseDragMove   |   Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)   |</p> <p>MouseDragMove   |</p> <p>MouseDragMove</p> <p>Mouse is dragging and is over a new pixel of the same drop target (replaces MouseDrag verb in situations where MouseMove would apply)  | |   MouseDrop   |   Mouse drag has been released over a target (replaces MouseDrop verb)   |</p> <p>MouseDrop   |</p> <p>MouseDrop</p> <p>Mouse drag has been released over a target (replaces MouseDrop verb)  | | Mouse targets   can only be used as mapping targets for another macro.   |</p> <p>| Mouse targets   can only be used as mapping targets for another macro.   |</p> <p>Mouse targets   can only be used as mapping targets for another macro.  | Mouse targets |   Mouse   |   The mouse cursor, mappable by a gamepad analog stick.   | |   MouseLeftButton   |   Left button, mappable by a gamepad button.   | |   MouseRightButton   |   Right button, mappable by a gamepad button.   | |   MouseMiddleButton   |   Middle button, mappable by a gamepad button.   |</p> <p>|   Mouse   |   The mouse cursor, mappable by a gamepad analog stick.   |</p> <p>Mouse   |</p> <p>Mouse</p> <p>The mouse cursor, mappable by a gamepad analog stick.  | |   MouseLeftButton   |   Left button, mappable by a gamepad button.   |</p> <p>MouseLeftButton   |</p> <p>MouseLeftButton</p> <p>Left button, mappable by a gamepad button.  | |   MouseRightButton   |   Right button, mappable by a gamepad button.   |</p> <p>MouseRightButton   |</p> <p>MouseRightButton</p> <p>Right button, mappable by a gamepad button.  | |   MouseMiddleButton   |   Middle button, mappable by a gamepad button.   |</p> <p>MouseMiddleButton   |</p> <p>MouseMiddleButton</p> <p>Middle button, mappable by a gamepad button.  |</p>"},{"location":"%7Bskin%7D/param/","title":"Param","text":""},{"location":"%7Bskin%7D/param/#parameters-skin","title":"parameters (skin)","text":"<p>Controls can be interacted with via  winset()   and  winget()   to change or read various parameters.</p> <p>winset() winget()</p> <p>Parameters come in a few different formats:</p> <ul> <li>Boolean:</li> </ul> <p>true</p> <p>or</p> <p>false * Numeric: any number, sometimes allowing decimal or negative numbers * String: text * Position:  x </p> <p>,</p> <p>y * Size:  width </p> <p>x</p> <p>height * Enumerated: one of several text choices, sometimes accepting numbers or true/false values as shortcuts</p> <ul> <li>Boolean:</li> </ul> <p>true</p> <p>or</p> <p>false</p> <p>true</p> <p>false</p> <ul> <li> <p>Numeric: any number, sometimes allowing decimal or negative numbers</p> </li> <li> <p>String: text</p> </li> <li> <p>Position:  x </p> </li> </ul> <p>,</p> <p>y</p> <p>x</p> <p>,</p> <p>y - Size:  width </p> <p>x</p> <p>height</p> <p>width</p> <p>x</p> <p>height - Enumerated: one of several text choices, sometimes accepting numbers or true/false values as shortcuts</p> <p>The list of  all controls   which shows which parameters are universal, and each individual control type lists additional parameters that apply to that type specifically.</p> <p>all controls</p> <p>Note: In any parameter's \"Applies to\" section, \"all\" refers to positionable controls only, not Macro or Menu controls. Macro and Menu will be listed separately if supported.</p>"},{"location":"%7Bskin%7D/control/bar/","title":"Bar","text":""},{"location":"%7Bskin%7D/control/bar/#bar-control-skin","title":"bar control (skin)","text":"<p>A progress bar or interactive slider. This can be made to use several different orientations. Its</p> <p>value</p> <p>can be read or set as a percentage from 0 to 100.</p> <p>value</p> <p>Bar-specific parameters: </p> <p>angle1, angle2 </p> <p>bar-color </p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p> <p>Bar-specific parameters: </p> <p>Bar-specific parameters:</p> <p>angle1, angle2 </p> <p>bar-color </p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p> <p>angle1, angle2</p> <p>bar-color </p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p> <p>bar-color</p> <p>dir </p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p> <p>dir</p> <p>is-slider </p> <p>on-change </p> <p>value </p> <p>width </p> <p>is-slider</p> <p>on-change </p> <p>value </p> <p>width </p> <p>on-change</p> <p>value </p> <p>width </p> <p>value</p> <p>width </p> <p>width</p>"},{"location":"%7Bskin%7D/control/browser/","title":"Browser","text":""},{"location":"%7Bskin%7D/control/browser/#browser-control-skin","title":"browser control (skin)","text":"<p>A browser panel integrated into the skin.</p> <p>Browser-specific parameters: </p> <p>auto-format </p> <p>on-hide </p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>Browser-specific parameters: </p> <p>Browser-specific parameters:</p> <p>auto-format </p> <p>on-hide </p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>auto-format</p> <p>on-hide </p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>on-hide</p> <p>on-show </p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>on-show</p> <p>show-history </p> <p>show-url </p> <p>use-title </p> <p>show-history</p> <p>show-url </p> <p>use-title </p> <p>show-url</p> <p>use-title </p> <p>use-title</p> <p>Browsers are capable of displaying HTML documents, and can also interact with the skin.</p>"},{"location":"%7Bskin%7D/control/browser/#_1","title":"Browser","text":"<p>Browsers and popups</p> <p>A longstanding behavior of BYOND is the ability to create a new browser window by sending an extra argument to the  browse()   proc. Since the advent of skins in BYOND 4.0, this behavior was kept. When you create a new browser popup, the window name you specify for the popup is used for the name of a new  window control   , and within that window there will be a new browser control simply called</p> <p>browser</p> <p>.</p> <p>browse() window control</p> <p>browser</p> <p>If you want to interact with the new browser, its full \"decorated\"  id   is</p> <p>windowname   .browser</p> <p>.</p> <p>id</p> <p>windowname   .browser</p> <p>windowname</p>"},{"location":"%7Bskin%7D/control/browser/#_2","title":"Browser","text":"<p>Running JavaScript from DM</p> <p>Sending  output()   to a browser will send a document to display there, but if you follow the browser's control name with a colon and a function name, you can call a JavaScript function in the document displayed within that browser.</p> <p>output()</p>"},{"location":"%7Bskin%7D/control/browser/#_3","title":"Browser","text":"<p>Example:</p> <p>var/list/info = list(\"name\"=\"fridge\", \"power\"=12) // send {\"name\":\"fridge\",\"power\":12} to a JavaScript function usr &lt;&lt; output(url_encode(json_encode(info)), \"mybrowser:myJSfunction\")</p> <p>The text that you send as output will be parsed like URL parameters, where mutliple arguments to the function are separated by</p> <p>&amp;</p> <p>or</p> <p>;</p> <p>, which is why  url_encode()   is wrapped around the  json_encode()   call in this example.</p> <p>&amp;</p> <p>;</p> <p>url_encode() json_encode()</p>"},{"location":"%7Bskin%7D/control/browser/#_4","title":"Browser","text":"<p>Winset and Winget via JavaScript</p> <p>To allow better access to the skin via JavaScript, two new URL formats have been added. If</p> <p>window.location</p> <p>is set to these from JavaScript in a browser control, they can be used to interact directly.</p> <p>window.location</p> <p>Winset URL: </p> <p>byond://winset?id=  [control ID]   &amp;  [property]   =  [value]   &amp;...</p> <p>Winset URL:</p> <p>byond://winset?id=  [control ID]   &amp;  [property]   =  [value]   &amp;...</p> <p>[control ID] [property] [value]</p> <p>This works like an ordinary  winset()   call from the server. If</p> <p>id</p> <p>is omitted, it's the same as a winset with a null ID. You can also leave the</p> <p>id</p> <p>blank if you use \"fully decorated\" property names such as</p> <p>mybutton.is-checked</p> <p>instead of just</p> <p>is-checked</p> <p>.</p> <p>winset()</p> <p>id</p> <p>id</p> <p>mybutton.is-checked</p> <p>is-checked</p> <p>Any text you use other than letters, numbers, hyphens, commas, and periods should be encoded via the</p> <p>encodeURIComponent()</p> <p>function in JavaScript.</p> <p>encodeURIComponent()</p> <p>Winget URL: </p> <p>byond://winget?callback=  [callback function]   &amp;id=  [control ID/list]   &amp;property=  [property/list] </p> <p>Winget URL:</p> <p>byond://winget?callback=  [callback function]   &amp;id=  [control ID/list]   &amp;property=  [property/list] </p> <p>[callback function] [control ID/list] [property/list]</p> <p>In this winget, the IDs and properties you want can be separated by commas if you want to retrieve more than one. The winget operation works via a callback function you must define in JavaScript. The callback is given just one argument, a JavaScript object with all of the properties you requested. For example, this URL:</p> <pre><code>byond://winget?callback=wgcb&amp;id=button1&amp;property=is-checked,size,background-color\n</code></pre> <p>...might send this to the callback function wgcb:</p> <pre><code>{\n    \"is-checked\": true,\n    \"size\": {\n        \"x\": 60,\n        \"y\": 20\n    },\n    \"background-color\": {\n        \"value\": \"none\",\n        \"isDefault\": true,\n        \"red\": 236,\n        \"green\": 233,\n        \"blue\": 216,\n        \"alpha\": 255,\n        \"css\": \"#ece9d8\"\n    }\n}\n\n</code></pre> <p>The property names will be in the same format you would expect from  winget()   , so when you're looking at multiple elements' properties, you'll get the full names in</p> <p>id.property</p> <p>format. The values are always sent back in a convenient form for JavaScript to work with; in the case of size, position, and color these will always be objects.</p> <p>winget()</p> <p>id.property</p> <p>An optional</p> <p>control</p> <p>parameter for the winget call can be used if you want to send data to a callback in a different browser control.</p> <p>control</p>"},{"location":"%7Bskin%7D/control/button/","title":"Button","text":""},{"location":"%7Bskin%7D/control/button/#button-control-skin","title":"button control (skin)","text":"<p>A button that can be pressed to run a  command   , or possibly toggled.</p> <p>command</p> <p>Button-specific parameters: </p> <p>button-type </p> <p>command </p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>Button-specific parameters: </p> <p>Button-specific parameters:</p> <p>button-type </p> <p>command </p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>button-type</p> <p>command </p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>command</p> <p>group </p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>group</p> <p>image </p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>image</p> <p>is-checked </p> <p>is-flat </p> <p>text </p> <p>is-checked</p> <p>is-flat </p> <p>text </p> <p>is-flat</p> <p>text </p> <p>text</p>"},{"location":"%7Bskin%7D/control/child/","title":"Child","text":""},{"location":"%7Bskin%7D/control/child/#child-control-skin","title":"child control (skin)","text":"<p>A container that can hold one or two  panes   . If it holds two panes, a splitter may appear between them. This control can therefore be used to subdivide a window or pane into smaller units.</p> <p>panes</p> <p>Child-specific parameters: </p> <p>is-vert </p> <p>left, top </p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p> <p>Child-specific parameters: </p> <p>Child-specific parameters:</p> <p>is-vert </p> <p>left, top </p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p> <p>is-vert</p> <p>left, top </p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p> <p>left, top</p> <p>lock </p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p> <p>lock</p> <p>right, bottom </p> <p>show-splitter </p> <p>splitter </p> <p>right, bottom</p> <p>show-splitter </p> <p>splitter </p> <p>show-splitter</p> <p>splitter </p> <p>splitter</p>"},{"location":"%7Bskin%7D/control/grid/","title":"Grid","text":""},{"location":"%7Bskin%7D/control/grid/#grid-control-skin","title":"grid control (skin)","text":"<p>A grid that contains multiple cells that can show various kinds of output data.</p> <p>Grid-specific parameters: </p> <p>cell-span </p> <p>cells </p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>Grid-specific parameters: </p> <p>Grid-specific parameters:</p> <p>cell-span </p> <p>cells </p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>cell-span</p> <p>cells </p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>cells</p> <p>current-cell </p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>current-cell</p> <p>enable-http-images </p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>enable-http-images</p> <p>highlight-color </p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>highlight-color</p> <p>is-list </p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>is-list</p> <p>line-color </p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>line-color</p> <p>link-color </p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>link-color</p> <p>show-lines </p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>show-lines</p> <p>show-names </p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>show-names</p> <p>small-icons </p> <p>style </p> <p>visited-color </p> <p>small-icons</p> <p>style </p> <p>visited-color </p> <p>style</p> <p>visited-color </p> <p>visited-color</p> <p>Sending output to a grid looks like this:</p>"},{"location":"%7Bskin%7D/control/grid/#_1","title":"Grid","text":"<p>Example:</p> <p>// output to column 3, row 2 winset(usr, \"thegrid\", \"current-cell=3,2\") usr &lt;&lt; output(\"Text\", \"thegrid\")</p> <p>// or even easier: usr &lt;&lt; output(\"Text\", \"thegrid:3,2\")</p> <p>// when is-list is true: usr &lt;&lt; output(\"5th item\", \"thegrid:5\")</p> <p>You can output an atom to the grid, which can be clicked, dragged, etc. However, you should make sure that atom is  not   temporary and will persist until you no longer need it, or else the server may recycle it and the object in the cell will either disappear or be impossible to interact with anymore.</p> <p>not</p> <p>There are some limitations to output in grid controls:</p> <ul> <li>Only one character style (font, color, bold, etc.) may appear within a single cell.</li> <li>A cell is either a link, or not.</li> <li>One image is allowed per cell.</li> <li>A cell can hold an object (atom), sent to it via the  [output()</li> </ul> <p>proc](#/proc/output)   , which can be clicked, dragged, etc.; it will not act as a link. * The same margin is used all around the cell, not different margins for left, right, top, bottom. * There will always be a 1-pixel space for grid lines, whether they're shown or not.</p> <ul> <li> <p>Only one character style (font, color, bold, etc.) may appear within a single cell.</p> </li> <li> <p>A cell is either a link, or not.</p> </li> <li> <p>One image is allowed per cell.</p> </li> <li> <p>A cell can hold an object (atom), sent to it via the  [output()</p> </li> </ul> <p>proc](#/proc/output)   , which can be clicked, dragged, etc.; it will not act as a link.</p> <p>[output()</p> <p>proc](#/proc/output)</p> <p>output()</p> <ul> <li> <p>The same margin is used all around the cell, not different margins for left, right, top, bottom.</p> </li> <li> <p>There will always be a 1-pixel space for grid lines, whether they're shown or not.</p> </li> </ul>"},{"location":"%7Bskin%7D/control/info/","title":"Info","text":""},{"location":"%7Bskin%7D/control/info/#info-control-skin","title":"info control (skin)","text":"<p>The classic BYOND statpanel, which contains both stat and verb tabs. This is technically a 3-column grid with a variable number of rows.</p> <p>Info-specific parameters: </p> <p>allow-html </p> <p>highlight-color </p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>Info-specific parameters: </p> <p>Info-specific parameters:</p> <p>allow-html </p> <p>highlight-color </p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>allow-html</p> <p>highlight-color </p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>highlight-color</p> <p>multi-line </p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>multi-line</p> <p>on-hide </p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>on-hide</p> <p>on-show </p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>on-show</p> <p>on-tab </p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>on-tab</p> <p>prefix-color </p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>prefix-color</p> <p>suffix-color </p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>suffix-color</p> <p>tab-background-color </p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>tab-background-color</p> <p>tab-font-family, tab-font-size, tab-font-style </p> <p>tab-text-color </p> <p>tab-font-family, tab-font-size, tab-font-style</p> <p>tab-text-color </p> <p>tab-text-color</p> <p>Output to a statpanel is done via the  stat()   and  statpanel()   procs, during  mob/Stat()   .</p> <p>stat() statpanel() mob/Stat()</p> <p>The same limitations that apply to  grid   output apply here.</p> <p>grid</p>"},{"location":"%7Bskin%7D/control/input/","title":"Input","text":""},{"location":"%7Bskin%7D/control/input/#input-control-skin","title":"input control (skin)","text":"<p>A text box into which the user can type. By default this is used for sending  commands   , but it can be used for other purposes as well.</p> <p>commands</p> <p>Input-specific parameters: </p> <p>command </p> <p>is-password </p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>Input-specific parameters: </p> <p>Input-specific parameters:</p> <p>command </p> <p>is-password </p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>command</p> <p>is-password </p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>is-password</p> <p>multi-line </p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>multi-line</p> <p>no-command </p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>no-command</p> <p>on-blur </p> <p>on-focus </p> <p>text </p> <p>on-blur</p> <p>on-focus </p> <p>text </p> <p>on-focus</p> <p>text </p> <p>text</p> <p>Note that when in \"standard\" mode of accepting user commands, built-in verbs like</p> <p>.click</p> <p>, or local commands like</p> <p>.winset</p> <p>, are not accepted when typed in. This kind of command can still be entered manually through the Client menu of the Options &amp; Messages window.</p> <p>.click</p> <p>.winset</p>"},{"location":"%7Bskin%7D/control/label/","title":"Label","text":""},{"location":"%7Bskin%7D/control/label/#label-control-skin","title":"label control (skin)","text":"<p>A text label that appears on the skin.</p> <p>Label-specific parameters: </p> <p>align </p> <p>allow-html </p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>Label-specific parameters: </p> <p>Label-specific parameters:</p> <p>align </p> <p>allow-html </p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>align</p> <p>allow-html </p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>allow-html</p> <p>image </p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>image</p> <p>image-mode </p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>image-mode</p> <p>keep-aspect </p> <p>text </p> <p>text-wrap </p> <p>keep-aspect</p> <p>text </p> <p>text-wrap </p> <p>text</p> <p>text-wrap </p> <p>text-wrap</p>"},{"location":"%7Bskin%7D/control/macro/","title":"Macro","text":""},{"location":"%7Bskin%7D/control/macro/#macro-control-skin","title":"macro control (skin)","text":"<p>A  keyboard/gamepad/mouse macro   , usually designed to run a  command   . The control is a means of interacting with the macro as an object, allowing some of its properties to be changed at runtime.</p> <p>keyboard/gamepad/mouse macro command</p> <p>Macro-specific parameters: </p> <p>command </p> <p>map-to </p> <p>name </p> <p>Macro-specific parameters: </p> <p>Macro-specific parameters:</p> <p>command </p> <p>map-to </p> <p>name </p> <p>command</p> <p>map-to </p> <p>name </p> <p>map-to</p> <p>name </p> <p>name</p>"},{"location":"%7Bskin%7D/control/main/","title":"Main","text":""},{"location":"%7Bskin%7D/control/main/#main-control-skin","title":"main control (skin)","text":"<p>A container for other controls. The Main control takes two forms: a window or a pane.</p> <p>A window exists independently and can be moved around on the screen. A pane has to be used within another container control such as a  Child   or  Tab control   .</p> <p>Child Tab control</p> <p>Main-specific parameters: </p> <p>icon </p> <p>image </p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>Windows only: </p> <p>alpha </p> <p>can-close </p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>Panes only: </p> <p>can-scroll </p> <p>Main-specific parameters: </p> <p>Main-specific parameters:</p> <p>icon </p> <p>image </p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>icon</p> <p>image </p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>image</p> <p>image-mode </p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>image-mode</p> <p>inner-size </p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>inner-size</p> <p>is-pane </p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>is-pane</p> <p>keep-aspect </p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>keep-aspect</p> <p>outer-size </p> <p>title </p> <p>on-status </p> <p>outer-size</p> <p>title </p> <p>on-status </p> <p>title</p> <p>on-status </p> <p>on-status</p> <p>Windows only: </p> <p>Windows only:</p> <p>alpha </p> <p>can-close </p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>alpha</p> <p>can-close </p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>can-close</p> <p>can-minimize </p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>can-minimize</p> <p>can-resize </p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>can-resize</p> <p>is-maximized </p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>is-maximized</p> <p>is-minimized </p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>is-minimized</p> <p>macro </p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>macro</p> <p>menu </p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>menu</p> <p>on-close </p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>on-close</p> <p>statusbar </p> <p>titlebar </p> <p>transparent-color </p> <p>statusbar</p> <p>titlebar </p> <p>transparent-color </p> <p>titlebar</p> <p>transparent-color </p> <p>transparent-color</p> <p>Panes only: </p> <p>Panes only:</p> <p>can-scroll </p> <p>can-scroll</p> <p>The font parameters have no impact on a window's statusbar or titlebar; those are drawn by the operating system.</p>"},{"location":"%7Bskin%7D/control/map/","title":"Map","text":""},{"location":"%7Bskin%7D/control/map/#map-control-skin","title":"map control (skin)","text":"<p>A map that will display icons from the game.</p> <p>Map-specific parameters: </p> <p>icon-size </p> <p>letterbox </p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>Map-specific parameters: </p> <p>Map-specific parameters:</p> <p>icon-size </p> <p>letterbox </p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>icon-size</p> <p>letterbox </p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>letterbox</p> <p>on-hide </p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>on-hide</p> <p>on-show </p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>on-show</p> <p>style </p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>style</p> <p>text-mode </p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>text-mode</p> <p>view-size </p> <p>zoom </p> <p>zoom-mode </p> <p>view-size</p> <p>zoom </p> <p>zoom-mode </p> <p>zoom</p> <p>zoom-mode </p> <p>zoom-mode</p>"},{"location":"%7Bskin%7D/control/menu/","title":"Menu","text":""},{"location":"%7Bskin%7D/control/menu/#menu-control-skin","title":"menu control (skin)","text":"<p>A menu item, that when activate will run a  command   .</p> <p>command</p> <p>Menu-specific parameters: </p> <p>can-check </p> <p>command </p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p> <p>Menu-specific parameters: </p> <p>Menu-specific parameters:</p> <p>can-check </p> <p>command </p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p> <p>can-check</p> <p>command </p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p> <p>command</p> <p>group </p> <p>index </p> <p>is-checked </p> <p>name </p> <p>group</p> <p>index </p> <p>is-checked </p> <p>name </p> <p>index</p> <p>is-checked </p> <p>name </p> <p>is-checked</p> <p>name </p> <p>name</p>"},{"location":"%7Bskin%7D/control/output/","title":"Output","text":""},{"location":"%7Bskin%7D/control/output/#output-control-skin","title":"output control (skin)","text":"<p>Displays text output.</p> <p>Output-specific parameters: </p> <p>enable-http-images </p> <p>image </p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>Output-specific parameters: </p> <p>Output-specific parameters:</p> <p>enable-http-images </p> <p>image </p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>enable-http-images</p> <p>image </p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>image</p> <p>legacy-size </p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>legacy-size</p> <p>link-color </p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>link-color</p> <p>max-lines </p> <p>style </p> <p>visited-color </p> <p>max-lines</p> <p>style </p> <p>visited-color </p> <p>style</p> <p>visited-color </p> <p>visited-color</p>"},{"location":"%7Bskin%7D/control/tab/","title":"Tab","text":""},{"location":"%7Bskin%7D/control/tab/#tab-control-skin","title":"tab control (skin)","text":"<p>A tab control, where each tab holds a different  pane   .</p> <p>pane</p> <p>Tab-specific parameters: </p> <p>current-tab </p> <p>multi-line </p> <p>on-tab </p> <p>tabs </p> <p>Tab-specific parameters: </p> <p>Tab-specific parameters:</p> <p>current-tab </p> <p>multi-line </p> <p>on-tab </p> <p>tabs </p> <p>current-tab</p> <p>multi-line </p> <p>on-tab </p> <p>tabs </p> <p>multi-line</p> <p>on-tab </p> <p>tabs </p> <p>on-tab</p> <p>tabs </p> <p>tabs</p>"},{"location":"%7Bskin%7D/param/","title":"Index","text":""},{"location":"%7Bskin%7D/param/#index-parameter-skin","title":"index parameter (skin)","text":"<p>Applies to: </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Default value: </p> <p>Default value:</p> <p>1000</p> <p>Moves the menu item to the  N   th position among its siblings. 0 or less is no change. Write-only.</p> <p>N</p>"},{"location":"%7Bskin%7D/param/align/","title":"Align","text":""},{"location":"%7Bskin%7D/param/align/#align-parameter-skin","title":"align parameter (skin)","text":"<p>See also: </p> <p>allow-html parameter </p> <p>See also: </p> <p>See also:</p> <p>allow-html parameter </p> <p>allow-html parameter</p> <p>Applies to: </p> <p>Label </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Label</p> <p>Possible values: </p> <p>center</p> <p>left</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>Possible values: </p> <p>Possible values:</p> <p>center</p> <p>left</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>left</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>top</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>bottom</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>top-left</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>top-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>bottom-left</p> <p>bottom-right</p> <p>bottom-right</p> <p>Default value: </p> <p>center</p> <p>Default value: </p> <p>Default value:</p> <p>center</p> <p>Default alignment of text/image, both horizontal and vertical.</p> <p>A BYOND direction flag like</p> <p>WEST</p> <p>may be assigned to this parameter, or 0 for center alignment.</p> <p>WEST</p>"},{"location":"%7Bskin%7D/param/allow-html/","title":"Allow html","text":""},{"location":"%7Bskin%7D/param/allow-html/#allow-html-parameter-skin","title":"allow-html parameter (skin)","text":"<p>Applies to: </p> <p>Label </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Info </p> <p>Label</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Info control: Allow HTML tags to be used in  stat()   info. The same limitations apply as to the  Grid control   .</p> <p>stat() Grid control</p> <p>Label control: Currently, the label control will not actually use the HTML; it will simply strip it out. Full support may appear in a later version.</p>"},{"location":"%7Bskin%7D/param/alpha/","title":"Alpha","text":""},{"location":"%7Bskin%7D/param/alpha/#alpha-parameter-skin","title":"alpha parameter (skin)","text":"<p>See also: </p> <p>transparent-color parameter </p> <p>See also: </p> <p>See also:</p> <p>transparent-color parameter </p> <p>transparent-color parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>255</p> <p>Default value: </p> <p>Default value:</p> <p>255</p> <p>Opacity of the window, from 0 (invisible) to 255 (opaque).</p>"},{"location":"%7Bskin%7D/param/anchor/","title":"Anchor","text":""},{"location":"%7Bskin%7D/param/anchor/#anchor1-anchor2-parameters-skin","title":"anchor1, anchor2 parameters (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>pos parameter </p> <p>size parameter </p> <p>pos parameter</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>All   (except  Main   )</p> <p>Applies to: </p> <p>Applies to:</p> <p>All   (except  Main   )</p> <p>All Main</p> <p>Format: </p> <p>none</p> <p>x   ,  y </p> <p>Format: </p> <p>Format:</p> <p>none</p> <p>x   ,  y </p> <p>x   ,  y </p> <p>x y</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Anchors the control within the window or pane. If the anchor is not</p> <p>none</p> <p>, it is expressed as pecentages of the container's width and height. For example, an anchor of 100,100 means that the X and Y position are tied to the lower right of the container, and 50,0 is tied to the top center.</p> <p>none</p> <p>Setting only</p> <p>anchor1</p> <p>will control the position of the control but won't affect its size.</p> <p>anchor1</p> <p>Setting</p> <p>anchor2</p> <p>as well will allow you to stretch the control as the container's size changes. You can think of this</p> <p>anchor1</p> <p>controlling the top left corner, and</p> <p>anchor2</p> <p>the bottom right corner.</p> <p>anchor2</p> <p>anchor1</p> <p>anchor2</p>"},{"location":"%7Bskin%7D/param/angle/","title":"Angle","text":""},{"location":"%7Bskin%7D/param/angle/#angle1-angle2-parameters-skin","title":"angle1, angle2 parameters (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>width parameter </p> <p>See also: </p> <p>See also:</p> <p>dir parameter </p> <p>width parameter </p> <p>dir parameter</p> <p>width parameter </p> <p>width parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>angle1</p> <p>: 0</p> <p>angle2</p> <p>: 180</p> <p>Default value: </p> <p>Default value:</p> <p>angle1</p> <p>: 0</p> <p>angle2</p> <p>: 180</p> <p>angle1</p> <p>angle2</p> <p>: 180</p> <p>angle2</p> <p>The angle of the bar control's arc when its  dir   is</p> <p>clockwise</p> <p>or</p> <p>counterclockwise</p> <p>. Angles are measured clockwise from due north, so 0 is north, 90 is east, and so on.</p> <p>angle1</p> <p>is the beginning of the arc, and</p> <p>angle2</p> <p>is the end.</p> <p>dir</p> <p>clockwise</p> <p>counterclockwise</p> <p>angle1</p> <p>angle2</p>"},{"location":"%7Bskin%7D/param/auto-format/","title":"Auto format","text":""},{"location":"%7Bskin%7D/param/auto-format/#auto-format-parameter-skin","title":"auto-format parameter (skin)","text":"<p>Applies to: </p> <p>Browser </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Browser</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false (was once true in old versions)</p> <p>Default value: </p> <p>Default value:</p> <p>false (was once true in old versions)</p> <p>When true, the browser control will inject conditional scripting into HTML documents to make them behave nicer in very old browsers. However, it is unlikely there are any systems left that need this.</p>"},{"location":"%7Bskin%7D/param/background-color/","title":"Background color","text":""},{"location":"%7Bskin%7D/param/background-color/#background-color-parameter-skin","title":"background-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>text-color parameter</p> <p>tab-background-color parameter </p> <p>tab-background-color parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>The control's background color. The exact way this applies depends on the control.</p>"},{"location":"%7Bskin%7D/param/bar-color/","title":"Bar color","text":""},{"location":"%7Bskin%7D/param/bar-color/#bar-color-parameter-skin","title":"bar-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>is-transparent parameter </p> <p>See also: </p> <p>See also:</p> <p>background-color parameter </p> <p>is-transparent parameter </p> <p>background-color parameter</p> <p>is-transparent parameter </p> <p>is-transparent parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>The color of the bar or slider.</p>"},{"location":"%7Bskin%7D/param/border/","title":"Border","text":""},{"location":"%7Bskin%7D/param/border/#border-parameter-skin","title":"border parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Possible values: </p> <p>none</p> <p>line</p> <p>sunken</p> <p>Possible values: </p> <p>Possible values:</p> <p>none</p> <p>line</p> <p>sunken</p> <p>line</p> <p>sunken</p> <p>sunken</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Border type around the control or window. May not work the same in all controls.</p>"},{"location":"%7Bskin%7D/param/button-type/","title":"Button type","text":""},{"location":"%7Bskin%7D/param/button-type/#button-type-parameter-skin","title":"button-type parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>See also: </p> <p>See also:</p> <p>group parameter </p> <p>is-checked parameter </p> <p>group parameter</p> <p>is-checked parameter </p> <p>is-checked parameter</p> <p>Applies to: </p> <p>Button </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Button</p> <p>Possible values: </p> <p>pushbutton: press once</p> <p>pushbox: press to toggle</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>Possible values: </p> <p>Possible values:</p> <p>pushbutton: press once</p> <p>pushbox: press to toggle</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>pushbox: press to toggle</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>checkbox: press to toggle, and displays a checkmark if checked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>radio: press to check, and other buttons with the same</p> <p>group</p> <p>will be unchecked</p> <p>group</p> <p>Default value: </p> <p>pushbutton</p> <p>Default value: </p> <p>Default value:</p> <p>pushbutton</p> <p>Changes the type of button.</p>"},{"location":"%7Bskin%7D/param/can-check/","title":"Can check","text":""},{"location":"%7Bskin%7D/param/can-check/#can-check-parameter-skin","title":"can-check parameter (skin)","text":"<p>See also: </p> <p>group parameter </p> <p>is-checked parameter </p> <p>See also: </p> <p>See also:</p> <p>group parameter </p> <p>is-checked parameter </p> <p>group parameter</p> <p>is-checked parameter </p> <p>is-checked parameter</p> <p>Applies to: </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>If true, this menu item is toggled like a checkbox or radio button when clicked.</p>"},{"location":"%7Bskin%7D/param/can-close/","title":"Can close","text":""},{"location":"%7Bskin%7D/param/can-close/#can-close-parameter-skin","title":"can-close parameter (skin)","text":"<p>See also: </p> <p>on-close parameter </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>See also: </p> <p>See also:</p> <p>on-close parameter </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>on-close parameter</p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>can-resize parameter</p> <p>titlebar parameter </p> <p>titlebar parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Allow the window to be closed, and also shows a system menu for the window.</p>"},{"location":"%7Bskin%7D/param/can-minimize/","title":"Can minimize","text":""},{"location":"%7Bskin%7D/param/can-minimize/#can-minimize-parameter-skin","title":"can-minimize parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>See also: </p> <p>See also:</p> <p>can-resize parameter </p> <p>titlebar parameter </p> <p>can-resize parameter</p> <p>titlebar parameter </p> <p>titlebar parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Allow the window to be minimized.</p>"},{"location":"%7Bskin%7D/param/can-resize/","title":"Can resize","text":""},{"location":"%7Bskin%7D/param/can-resize/#can-resize-parameter-skin","title":"can-resize parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>can-minimize parameter </p> <p>titlebar parameter </p> <p>See also: </p> <p>See also:</p> <p>on-size parameter </p> <p>can-minimize parameter </p> <p>titlebar parameter </p> <p>on-size parameter</p> <p>can-minimize parameter </p> <p>titlebar parameter </p> <p>can-minimize parameter</p> <p>titlebar parameter </p> <p>titlebar parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Allow the window to be resized or maximized.</p>"},{"location":"%7Bskin%7D/param/can-scroll/","title":"Can scroll","text":""},{"location":"%7Bskin%7D/param/can-scroll/#can-scroll-parameter-skin","title":"can-scroll parameter (skin)","text":"<p>See also: </p> <p>on-size parameter </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>on-size parameter </p> <p>size parameter </p> <p>on-size parameter</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>Main   (pane only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (pane only)</p> <p>Main</p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Possible values: </p> <p>Possible values:</p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>vertical</p> <p>both</p> <p>both</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Allow this pane to retain its horizontal and/or vertical size and show scrollbars if necessary, instead of shrinking to fit the container.</p>"},{"location":"%7Bskin%7D/param/cell-span/","title":"Cell span","text":""},{"location":"%7Bskin%7D/param/cell-span/#cell-span-parameter-skin","title":"cell-span parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>See also: </p> <p>See also:</p> <p>cells parameter </p> <p>cells parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>columns   ,  rows </p> <p>Format: </p> <p>Format:</p> <p>columns   ,  rows </p> <p>columns rows</p> <p>Default value: </p> <p>1x1</p> <p>Default value: </p> <p>Default value:</p> <p>1x1</p> <p>The span of the current grid cell; it can be merged with cells to the right and down. If</p> <p>is-list</p> <p>is true, this setting is ignored. This setting is only available at runtime.</p> <p>is-list</p>"},{"location":"%7Bskin%7D/param/cells/","title":"Cells","text":""},{"location":"%7Bskin%7D/param/cells/#cells-parameter-skin","title":"cells parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>current-cell parameter </p> <p>is-list parameter </p> <p>See also: </p> <p>See also:</p> <p>cell-span parameter </p> <p>current-cell parameter </p> <p>is-list parameter </p> <p>cell-span parameter</p> <p>current-cell parameter </p> <p>is-list parameter </p> <p>current-cell parameter</p> <p>is-list parameter </p> <p>is-list parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Format: </p> <p>Format:</p> <p>columns   ,  rows </p> <p>items </p> <p>columns rows</p> <p>items </p> <p>items</p> <p>Default value: </p> <p>0x0</p> <p>Default value: </p> <p>Default value:</p> <p>0x0</p> <p>The number of columns and rows in the grid. Using -1 for either columns or rows will leave that value unchanged.</p> <p>If  is-list   is true, this value can be set to a single number.</p> <p>is-list</p>"},{"location":"%7Bskin%7D/param/command/","title":"Command","text":""},{"location":"%7Bskin%7D/param/command/#command-parameter-skin","title":"command parameter (skin)","text":"<p>See also: </p> <p>Commands </p> <p>See also: </p> <p>See also:</p> <p>Commands </p> <p>Commands</p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Macro </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Input </p> <p>Macro </p> <p>Menu </p> <p>Button</p> <p>Input </p> <p>Macro </p> <p>Menu </p> <p>Input</p> <p>Macro </p> <p>Menu </p> <p>Macro</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when this control is activated.</p> <p>Command</p> <p>For the Input control, whatever the user types in follows this command. If your command starts with an exclamation point</p> <p>!</p> <p>, everything after the</p> <p>!</p> <p>is shown as a default prompt that may be cleared by the user.</p> <p>!</p> <p>!</p>"},{"location":"%7Bskin%7D/param/current-cell/","title":"Current cell","text":""},{"location":"%7Bskin%7D/param/current-cell/#current-cell-parameter-skin","title":"current-cell parameter (skin)","text":"<p>See also: </p> <p>cell-span parameter </p> <p>cells parameter </p> <p>is-list parameter </p> <p>See also: </p> <p>See also:</p> <p>cell-span parameter </p> <p>cells parameter </p> <p>is-list parameter </p> <p>cell-span parameter</p> <p>cells parameter </p> <p>is-list parameter </p> <p>cells parameter</p> <p>is-list parameter </p> <p>is-list parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>columns   ,  rows </p> <p>items </p> <p>Format: </p> <p>Format:</p> <p>columns   ,  rows </p> <p>items </p> <p>columns rows</p> <p>items </p> <p>items</p> <p>Default value: </p> <p>0x0</p> <p>Default value: </p> <p>Default value:</p> <p>0x0</p> <p>The active cell. Any output sent to the grid, that is not sent to a specific cell, will go into this cell.</p> <p>If  is-list   is true, this value can be set to a single number.</p> <p>is-list</p>"},{"location":"%7Bskin%7D/param/current-tab/","title":"Current tab","text":""},{"location":"%7Bskin%7D/param/current-tab/#current-tab-parameter-skin","title":"current-tab parameter (skin)","text":"<p>See also: </p> <p>on-tab parameter </p> <p>tabs parameter </p> <p>See also: </p> <p>See also:</p> <p>on-tab parameter </p> <p>tabs parameter </p> <p>on-tab parameter</p> <p>tabs parameter </p> <p>tabs parameter</p> <p>Applies to: </p> <p>Tab </p> <p>Applies to: </p> <p>Applies to:</p> <p>Tab </p> <p>Tab</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The name of the  pane   in the active/default tab. If set to a pane that is not currently in this tab control, the pane by that name will be added as another tab.</p> <p>pane</p>"},{"location":"%7Bskin%7D/param/dir/","title":"Dir","text":""},{"location":"%7Bskin%7D/param/dir/#dir-parameter-skin","title":"dir parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>angle1, angle2 parameters </p> <p>width parameter </p> <p>See also: </p> <p>See also:</p> <p>value parameter </p> <p>angle1, angle2 parameters </p> <p>width parameter </p> <p>value parameter</p> <p>angle1, angle2 parameters </p> <p>width parameter </p> <p>angle1, angle2 parameters</p> <p>width parameter </p> <p>width parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Possible values: </p> <p>north</p> <p>south</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>Possible values: </p> <p>Possible values:</p> <p>north</p> <p>south</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>south</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>east</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>west</p> <p>clockwise</p> <p>counterclockwise</p> <p>clockwise</p> <p>counterclockwise</p> <p>counterclockwise</p> <p>Default value: </p> <p>east</p> <p>Default value: </p> <p>Default value:</p> <p>east</p> <p>The direction/orientation of the bar. As the  value   increases the bar will move further in this direction.</p> <p>value</p> <p>Shorthand values like</p> <p>cw</p> <p>and</p> <p>ccw</p> <p>can be used, or also numerical BYOND directions.</p> <p>cw</p> <p>ccw</p>"},{"location":"%7Bskin%7D/param/drop-zone/","title":"Drop zone","text":""},{"location":"%7Bskin%7D/param/drop-zone/#drop-zone-parameter-skin","title":"drop-zone parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>See also: </p> <p>See also:</p> <p>mouse handling </p> <p>mouse handling</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>for  Grid   ,  Info   ,  Map </p> <p>false</p> <p>for everything else</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>for  Grid   ,  Info   ,  Map </p> <p>false</p> <p>for everything else</p> <p>true</p> <p>Grid Info Map</p> <p>false</p> <p>for everything else</p> <p>false</p> <p>True if dragged objects may be dropped here. Default is true for Map, Info, and Grid controls, false for others. When in use, this will be the value of the</p> <p>over_control</p> <p>argument in  MouseDrop()   if you drop an atom here.</p> <p>over_control</p> <p>MouseDrop()</p> <p>Grids can also add</p> <p>drag-cell</p> <p>and</p> <p>drop-cell</p> <p>to mouse proc parameters. The mouse procs'</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>arguments are in the form</p> <p>\"[column],[row]\"</p> <p>(or</p> <p>\"[item\"]</p> <p>if  is-list   is true) when dragging to/from a grid cell.</p> <p>drag-cell</p> <p>drop-cell</p> <p>src_location</p> <p>over_location</p> <p>\"[column],[row]\"</p> <p>\"[item\"]</p> <p>is-list</p> <p>In Info controls,</p> <p>src_location</p> <p>and</p> <p>over_location</p> <p>in mouse procs will be the name of the statpanel tab.</p> <p>src_location</p> <p>over_location</p>"},{"location":"%7Bskin%7D/param/enable-http-images/","title":"Enable http images","text":""},{"location":"%7Bskin%7D/param/enable-http-images/#enable-http-images-parameter-skin","title":"enable-http-images parameter (skin)","text":"<p>See also: </p> <p>small-icons parameter </p> <p>style parameter </p> <p>See also: </p> <p>See also:</p> <p>small-icons parameter </p> <p>style parameter </p> <p>small-icons parameter</p> <p>style parameter </p> <p>style parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Output </p> <p>Grid</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Allows images to be pulled from the Web when using the</p> <p></p> <p>tag; otherwise only locally stored images can be shown.</p> <p></p>"},{"location":"%7Bskin%7D/param/flash/","title":"Flash","text":""},{"location":"%7Bskin%7D/param/flash/#flash-parameter-skin","title":"flash parameter (skin)","text":"<p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>Set to a positive number to make the window flash that many times, -1 to flash forever, and 0 to stop flashing.</p>"},{"location":"%7Bskin%7D/param/focus/","title":"Focus","text":""},{"location":"%7Bskin%7D/param/focus/#focus-parameter-skin","title":"focus parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>winget proc </p> <p>See also: </p> <p>See also:</p> <p>id parameter </p> <p>winget proc </p> <p>id parameter</p> <p>winget proc </p> <p>winget proc</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>This parameter is true if this control currently has focus.</p> <p>This is also a special read-only global parameter. Calling  winget()   with no</p> <p>id</p> <p>and</p> <p>focus</p> <p>as the parameter will return the  id   of the currently focused control, if any.</p> <p>winget()</p> <p>id</p> <p>focus</p> <p>id</p>"},{"location":"%7Bskin%7D/param/font-family/","title":"Font family","text":""},{"location":"%7Bskin%7D/param/font-family/#font-family-parameter-skin","title":"font-family parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>See also: </p> <p>See also:</p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-size parameter</p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-style parameter</p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-font-family, tab-font-size, tab-font-style parameters</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Leave blank to use the default font. This can be used for CSS-style fallback fonts, e.g. \"Arial,Helvetica\".</p> <p>You can include fonts in your resource file, making them available to the client, like so:</p> <p>var/list/extra_resources = list(\\  'myfont.ttf',  'myfont_bold.ttf')</p>"},{"location":"%7Bskin%7D/param/font-size/","title":"Font size","text":""},{"location":"%7Bskin%7D/param/font-size/#font-size-parameter-skin","title":"font-size parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>See also: </p> <p>See also:</p> <p>font-family parameter </p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-family parameter</p> <p>font-style parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-style parameter</p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-font-family, tab-font-size, tab-font-style parameters</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>Point size of the font, or leave at 0 for the default size.</p> <p>The  Output control   behaves differently for legacy reasons, unless  legacy-size   is false.</p> <p>Output control legacy-size</p>"},{"location":"%7Bskin%7D/param/font-style/","title":"Font style","text":""},{"location":"%7Bskin%7D/param/font-style/#font-style-parameter-skin","title":"font-style parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>See also: </p> <p>See also:</p> <p>font-family parameter </p> <p>font-size parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-family parameter</p> <p>font-size parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>font-size parameter</p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-font-family, tab-font-size, tab-font-style parameters</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Possible values: </p> <p>bold</p> <p>italic</p> <p>underline</p> <p>strike</p> <p>Possible values: </p> <p>Possible values:</p> <p>bold</p> <p>italic</p> <p>underline</p> <p>strike</p> <p>italic</p> <p>underline</p> <p>strike</p> <p>underline</p> <p>strike</p> <p>strike</p> <p>Default value: </p> <p>empty </p> <p>Default value: </p> <p>Default value:</p> <p>empty </p> <p>empty</p> <p>Sets the font style. Any combination of the above values may be used, or none of them. Multiple values may be separated by spaces or commas.</p>"},{"location":"%7Bskin%7D/param/group/","title":"Group","text":""},{"location":"%7Bskin%7D/param/group/#group-parameter-skin","title":"group parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>is-checked parameter </p> <p>See also: </p> <p>See also:</p> <p>button-type parameter </p> <p>can-check parameter </p> <p>is-checked parameter </p> <p>button-type parameter</p> <p>can-check parameter </p> <p>is-checked parameter </p> <p>can-check parameter</p> <p>is-checked parameter </p> <p>is-checked parameter</p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Menu </p> <p>Button</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Used for \"radio\" buttons and menu items, where only one of them in the same group may be checked at a time. This value is a text string, or may be left empty.</p> <p>Buttons in different windows/panes, or menu items in another menu/submenu, are always treated as a different group.</p>"},{"location":"%7Bskin%7D/param/highlight-color/","title":"Highlight color","text":""},{"location":"%7Bskin%7D/param/highlight-color/#highlight-color-parameter-skin","title":"highlight-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>background-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>background-color parameter </p> <p>text-color parameter</p> <p>background-color parameter </p> <p>background-color parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Info </p> <p>Grid</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>#00ff00</p> <p>Default value: </p> <p>Default value:</p> <p>#00ff00</p> <p>The color used to highlight moused-over statpanel items or verbs. In grids, this color is used when hovering over objects or links.</p>"},{"location":"%7Bskin%7D/param/icon-size/","title":"Icon size","text":""},{"location":"%7Bskin%7D/param/icon-size/#icon-size-parameter-skin","title":"icon-size parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>zoom parameter</p> <p>zoom-mode parameter </p> <p>zoom-mode parameter</p> <p>Applies to: </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>Size, in pixels, of icons on the map. A size of 0 stretches to fit available space.</p> <p>This parameter has been deprecated. Use  zoom   instead.</p> <p>zoom</p>"},{"location":"%7Bskin%7D/param/icon/","title":"Icon","text":""},{"location":"%7Bskin%7D/param/icon/#icon-parameter-skin","title":"icon parameter (skin)","text":"<p>See also: </p> <p>title parameter </p> <p>titlebar parameter </p> <p>See also: </p> <p>See also:</p> <p>title parameter </p> <p>titlebar parameter </p> <p>title parameter</p> <p>titlebar parameter </p> <p>titlebar parameter</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>'  file   '</p> <p>Format: </p> <p>Format:</p> <p>'  file   '</p> <p>file</p> <p>Default value: </p> <p>empty </p> <p>Default value: </p> <p>Default value:</p> <p>empty </p> <p>empty</p> <p>Custom icon used for the window. If no icon is specified, the Dream Seeker icon is used by windows by default.</p> <p>If this control is a pane, its icon will appear on the tab if the pane is inside a tab control. Lack of an icon will mean no icon appears in the tab.</p> <p>Note: The Windows</p> <p>.ico</p> <p>format is not used. Only image formats BYOND can already use are supported.</p> <p>.ico</p>"},{"location":"%7Bskin%7D/param/id/","title":"Id","text":""},{"location":"%7Bskin%7D/param/id/#id-parameter-skin","title":"id parameter (skin)","text":"<p>See also: </p> <p>parent parameter </p> <p>type parameter </p> <p>See also: </p> <p>See also:</p> <p>parent parameter </p> <p>type parameter </p> <p>parent parameter</p> <p>type parameter </p> <p>type parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The name of this control. Read-only.</p> <p>If this is a  Main control   , the name should always be unique. For others, it is usually still a good idea to use a unique name, but they can be referenced by  window   .  id   at runtime.</p> <p>Main control window id</p> <p>You can use a colon in front of the  type   to refer to the default control of a certain type, if one exists, e.g.</p> <p>:map</p> <p>is the default map.</p> <p>type</p> <p>:map</p>"},{"location":"%7Bskin%7D/param/image-mode/","title":"Image mode","text":""},{"location":"%7Bskin%7D/param/image-mode/#image-mode-parameter-skin","title":"image-mode parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>keep-aspect parameter </p> <p>See also: </p> <p>See also:</p> <p>image parameter </p> <p>keep-aspect parameter </p> <p>image parameter</p> <p>keep-aspect parameter </p> <p>keep-aspect parameter</p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Main </p> <p>Label</p> <p>Main </p> <p>Main</p> <p>Possible values: </p> <p>center</p> <p>stretch</p> <p>tile</p> <p>Possible values: </p> <p>Possible values:</p> <p>center</p> <p>stretch</p> <p>tile</p> <p>stretch</p> <p>tile</p> <p>tile</p> <p>Default value: </p> <p>center</p> <p>Default value: </p> <p>Default value:</p> <p>center</p> <p>Determines how the background image is displayed.</p>"},{"location":"%7Bskin%7D/param/image/","title":"Image","text":""},{"location":"%7Bskin%7D/param/image/#image-parameter-skin","title":"image parameter (skin)","text":"<p>See also: </p> <p>image-mode parameter </p> <p>keep-aspect parameter </p> <p>See also: </p> <p>See also:</p> <p>image-mode parameter </p> <p>keep-aspect parameter </p> <p>image-mode parameter</p> <p>keep-aspect parameter </p> <p>keep-aspect parameter</p> <p>Applies to: </p> <p>Button </p> <p>Label </p> <p>Main </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Label </p> <p>Main </p> <p>Output </p> <p>Button</p> <p>Label </p> <p>Main </p> <p>Output </p> <p>Label</p> <p>Main </p> <p>Output </p> <p>Main</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>'  file   '</p> <p>Format: </p> <p>Format:</p> <p>'  file   '</p> <p>file</p> <p>A background image to show in this control.</p> <p>In the Output control this image is always tiled.</p> <p>Note: Icons displayed in the output control will not show the background image underneath their transparent parts, but will instead show the background color.</p> <p>For Label and Main, use  image-mode   to control how the image is displayed.</p> <p>image-mode</p>"},{"location":"%7Bskin%7D/param/inner-size/","title":"Inner size","text":""},{"location":"%7Bskin%7D/param/inner-size/#inner-size-parameter-skin","title":"inner-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>outer-size parameter </p> <p>See also: </p> <p>See also:</p> <p>size parameter </p> <p>outer-size parameter </p> <p>size parameter</p> <p>outer-size parameter </p> <p>outer-size parameter</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>width   x  height </p> <p>Format: </p> <p>Format:</p> <p>width   x  height </p> <p>width height</p> <p>Read-only.</p> <p>If the control is a window, this refers to its current interior size: i.e., not counting titlebar, statusbar, borders, etc. If it's maximized, this will be the true size of the window interior, as opposed to</p> <p>size</p> <p>which is the interior size once this window is no longer maximized.</p> <p>size</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area not including the scrollbars.</p> <p>can-scroll</p>"},{"location":"%7Bskin%7D/param/is-checked/","title":"Is checked","text":""},{"location":"%7Bskin%7D/param/is-checked/#is-checked-parameter-skin","title":"is-checked parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>can-check parameter </p> <p>group parameter </p> <p>See also: </p> <p>See also:</p> <p>button-type parameter </p> <p>can-check parameter </p> <p>group parameter </p> <p>button-type parameter</p> <p>can-check parameter </p> <p>group parameter </p> <p>can-check parameter</p> <p>group parameter </p> <p>group parameter</p> <p>Applies to: </p> <p>Button </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Menu </p> <p>Button</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>True if the button or menu item is checked. Menu items can set this even if  can-check   is false.</p> <p>can-check</p>"},{"location":"%7Bskin%7D/param/is-default/","title":"Is default","text":""},{"location":"%7Bskin%7D/param/is-default/#is-default-parameter-skin","title":"is-default parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>type parameter </p> <p>See also: </p> <p>See also:</p> <p>id parameter </p> <p>parent parameter </p> <p>type parameter </p> <p>id parameter</p> <p>parent parameter </p> <p>type parameter </p> <p>parent parameter</p> <p>type parameter </p> <p>type parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Specifies that this is a default control. This should be true for your main window, and for your primary map, info, output, input, and browser controls.</p> <p>The default control of a given type can be referenced in  winset()   and other skin-related procs by the name</p> <p>\":  type   \"</p> <p>, e.g.</p> <p>\":map\"</p> <p>.</p> <p>winset()</p> <p>\":  type   \"</p> <p>type</p> <p>\":map\"</p> <p>Changing this value at runtime should be avoided, especially for windows. Results may be unpredictable.</p>"},{"location":"%7Bskin%7D/param/is-disabled/","title":"Is disabled","text":""},{"location":"%7Bskin%7D/param/is-disabled/#is-disabled-parameter-skin","title":"is-disabled parameter (skin)","text":"<p>See also: </p> <p>is-checked parameter </p> <p>is-visible parameter </p> <p>See also: </p> <p>See also:</p> <p>is-checked parameter </p> <p>is-visible parameter </p> <p>is-checked parameter</p> <p>is-visible parameter </p> <p>is-visible parameter</p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>All</p> <p>Macro </p> <p>Menu </p> <p>Macro</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Disables the control, menu item, or macro.</p>"},{"location":"%7Bskin%7D/param/is-flat/","title":"Is flat","text":""},{"location":"%7Bskin%7D/param/is-flat/#is-flat-parameter-skin","title":"is-flat parameter (skin)","text":"<p>See also: </p> <p>button-type parameter </p> <p>See also: </p> <p>See also:</p> <p>button-type parameter </p> <p>button-type parameter</p> <p>Applies to: </p> <p>Button </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Button</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Gives this button a flat appearance instead of pseudo-3D highlights.</p>"},{"location":"%7Bskin%7D/param/is-list/","title":"Is list","text":""},{"location":"%7Bskin%7D/param/is-list/#is-list-parameter-skin","title":"is-list parameter (skin)","text":"<p>See also: </p> <p>cells parameter </p> <p>current-cell parameter </p> <p>See also: </p> <p>See also:</p> <p>cells parameter </p> <p>current-cell parameter </p> <p>cells parameter</p> <p>current-cell parameter </p> <p>current-cell parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>True if the grid is used for a flexible list of items; the number of columns and rows may change to fit them.</p>"},{"location":"%7Bskin%7D/param/is-maximized/","title":"Is maximized","text":""},{"location":"%7Bskin%7D/param/is-maximized/#is-maximized-parameter-skin","title":"is-maximized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-minimized parameter </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>can-resize parameter </p> <p>is-minimized parameter </p> <p>size parameter </p> <p>can-resize parameter</p> <p>is-minimized parameter </p> <p>size parameter </p> <p>is-minimized parameter</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Maximize the window.</p>"},{"location":"%7Bskin%7D/param/is-minimized/","title":"Is minimized","text":""},{"location":"%7Bskin%7D/param/is-minimized/#is-minimized-parameter-skin","title":"is-minimized parameter (skin)","text":"<p>See also: </p> <p>can-resize parameter </p> <p>is-maximized parameter </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>can-resize parameter </p> <p>is-maximized parameter </p> <p>size parameter </p> <p>can-resize parameter</p> <p>is-maximized parameter </p> <p>size parameter </p> <p>is-maximized parameter</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Minimize the window.</p>"},{"location":"%7Bskin%7D/param/is-pane/","title":"Is pane","text":""},{"location":"%7Bskin%7D/param/is-pane/#is-pane-parameter-skin","title":"is-pane parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>Child control </p> <p>Tab control </p> <p>See also: </p> <p>See also:</p> <p>id parameter </p> <p>Child control </p> <p>Tab control </p> <p>id parameter</p> <p>Child control </p> <p>Tab control </p> <p>Child control</p> <p>Tab control </p> <p>Tab control</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>True if this is a pane that will be used in other container controls, instead of an independent window. Read-only.</p>"},{"location":"%7Bskin%7D/param/is-password/","title":"Is password","text":""},{"location":"%7Bskin%7D/param/is-password/#is-password-parameter-skin","title":"is-password parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>multi-line parameter </p> <p>no-command parameter </p> <p>See also: </p> <p>See also:</p> <p>command parameter </p> <p>multi-line parameter </p> <p>no-command parameter </p> <p>command parameter</p> <p>multi-line parameter </p> <p>no-command parameter </p> <p>multi-line parameter</p> <p>no-command parameter </p> <p>no-command parameter</p> <p>Applies to: </p> <p>Input </p> <p>Applies to: </p> <p>Applies to:</p> <p>Input </p> <p>Input</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Hide text with asterisks. Copy to clipboard is not available in this mode, but the  text   parameter can still read the control's contents.</p> <p>text</p> <p>Note: For obvious reasons, you should never use the same password in a game that you would use anywhere else.</p>"},{"location":"%7Bskin%7D/param/is-slider/","title":"Is slider","text":""},{"location":"%7Bskin%7D/param/is-slider/#is-slider-parameter-skin","title":"is-slider parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>See also: </p> <p>See also:</p> <p>value parameter </p> <p>value parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Make this an adjustable slider capable of being changed by the user, instead of a progress bar.</p>"},{"location":"%7Bskin%7D/param/is-transparent/","title":"Is transparent","text":""},{"location":"%7Bskin%7D/param/is-transparent/#is-transparent-parameter-skin","title":"is-transparent parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Make this control transparent.</p> <p>Transparency support is extremely limited. Only some controls can actually use it, and only when on top of certain other controls.</p> <p>Bars and labels handle transparency reasonably well, when not on top of other controls (or only on top of other conrols of these types).</p>"},{"location":"%7Bskin%7D/param/is-vert/","title":"Is vert","text":""},{"location":"%7Bskin%7D/param/is-vert/#is-vert-parameter-skin","title":"is-vert parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>left parameter </p> <p>right parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>left parameter</p> <p>right parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>right parameter</p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>show-splitter parameter</p> <p>splitter parameter </p> <p>splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>The splitter between the two panes in this control is vertical.</p>"},{"location":"%7Bskin%7D/param/is-visible/","title":"Is visible","text":""},{"location":"%7Bskin%7D/param/is-visible/#is-visible-parameter-skin","title":"is-visible parameter (skin)","text":"<p>See also: </p> <p>is-disabled parameter </p> <p>See also: </p> <p>See also:</p> <p>is-disabled parameter </p> <p>is-disabled parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>True if this control can be seen. The main window should usually be made visible.</p>"},{"location":"%7Bskin%7D/param/keep-aspect/","title":"Keep aspect","text":""},{"location":"%7Bskin%7D/param/keep-aspect/#keep-aspect-parameter-skin","title":"keep-aspect parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>image parameter </p> <p>image-mode parameter </p> <p>image parameter</p> <p>image-mode parameter </p> <p>image-mode parameter</p> <p>Applies to: </p> <p>Label </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Main </p> <p>Label</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>If stretching a background image, preserve its aspect ratio.</p>"},{"location":"%7Bskin%7D/param/left/","title":"Left","text":""},{"location":"%7Bskin%7D/param/left/#left-top-parameters-skin","title":"left, top parameters (skin)","text":"<p>See also: </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>right parameter</p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>is-vert parameter</p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>show-splitter parameter</p> <p>splitter parameter </p> <p>splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Format: </p> <p>string</p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>none</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>The  id   of the left/top pane in this control. The parameter names</p> <p>left</p> <p>and</p> <p>top</p> <p>can be used interchangeably.</p> <p>id</p> <p>left</p> <p>top</p>"},{"location":"%7Bskin%7D/param/legacy-size/","title":"Legacy size","text":""},{"location":"%7Bskin%7D/param/legacy-size/#legacy-size-parameter-skin","title":"legacy-size parameter (skin)","text":"<p>See also: </p> <p>font-size parameter </p> <p>See also: </p> <p>See also:</p> <p>font-size parameter </p> <p>font-size parameter</p> <p>Applies to: </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>When true, font sizes are scaled slightly larger for readability, which is legacy (and default) BYOND behavior. Set to false for exact font sizing.</p>"},{"location":"%7Bskin%7D/param/letterbox/","title":"Letterbox","text":""},{"location":"%7Bskin%7D/param/letterbox/#letterbox-parameter-skin","title":"letterbox parameter (skin)","text":"<p>See also: </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>view-size parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>view-size parameter</p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>zoom parameter</p> <p>zoom-mode parameter </p> <p>zoom-mode parameter</p> <p>Applies to: </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>If map auto-scales its icons (  zoom   is 0), make sure the entire map fits, and fill excess space with the background color.</p> <p>zoom</p> <p>If</p> <p>letterbox</p> <p>is not enabled, auto-zoom will fill all available space, and any excess will be cut off.</p> <p>letterbox</p>"},{"location":"%7Bskin%7D/param/line-color/","title":"Line color","text":""},{"location":"%7Bskin%7D/param/line-color/#line-color-parameter-skin","title":"line-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>show-lines parameter </p> <p>See also: </p> <p>See also:</p> <p>background-color parameter </p> <p>show-lines parameter </p> <p>background-color parameter</p> <p>show-lines parameter </p> <p>show-lines parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>#c0c0c0</p> <p>Default value: </p> <p>Default value:</p> <p>#c0c0c0</p> <p>The color of grid lines.</p>"},{"location":"%7Bskin%7D/param/link-color/","title":"Link color","text":""},{"location":"%7Bskin%7D/param/link-color/#link-color-parameter-skin","title":"link-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>visited-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>visited-color parameter </p> <p>text-color parameter</p> <p>visited-color parameter </p> <p>visited-color parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Output </p> <p>Grid</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>Default value: </p> <p>Default value:</p> <p>#0000ff</p> <p>The color used for links. In some controls  visited links   may have a different color.</p> <p>visited links</p>"},{"location":"%7Bskin%7D/param/lock/","title":"Lock","text":""},{"location":"%7Bskin%7D/param/lock/#lock-parameter-skin","title":"lock parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>left parameter</p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>right parameter</p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>is-vert parameter</p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>show-splitter parameter</p> <p>splitter parameter </p> <p>splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Possible values: </p> <p>left</p> <p>right</p> <p>none</p> <p>Possible values: </p> <p>Possible values:</p> <p>left</p> <p>right</p> <p>none</p> <p>right</p> <p>none</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Allows one pane to \"lock\" the splitter so if this Child control is resized, the splitter will stay put on that side.</p>"},{"location":"%7Bskin%7D/param/macro/","title":"Macro","text":""},{"location":"%7Bskin%7D/param/macro/#macro-parameter-skin","title":"macro parameter (skin)","text":"<p>See also: </p> <p>Keyboard/gamepad macros </p> <p>menu parameter </p> <p>id parameter </p> <p>See also: </p> <p>See also:</p> <p>Keyboard/gamepad macros </p> <p>menu parameter </p> <p>id parameter </p> <p>Keyboard/gamepad macros</p> <p>menu parameter </p> <p>id parameter </p> <p>menu parameter</p> <p>id parameter </p> <p>id parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The  id   of the macro set this window will use, if any, when it's active.</p> <p>id</p>"},{"location":"%7Bskin%7D/param/map-to/","title":"Map to","text":""},{"location":"%7Bskin%7D/param/map-to/#map-to-parameter-skin","title":"map-to parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>command parameter </p> <p>id parameter </p> <p>name parameter </p> <p>See also: </p> <p>See also:</p> <p>macros (skin) </p> <p>command parameter </p> <p>id parameter </p> <p>name parameter </p> <p>macros (skin)</p> <p>command parameter </p> <p>id parameter </p> <p>name parameter </p> <p>command parameter</p> <p>id parameter </p> <p>name parameter </p> <p>id parameter</p> <p>name parameter </p> <p>name parameter</p> <p>Applies to: </p> <p>Macro </p> <p>Applies to: </p> <p>Applies to:</p> <p>Macro </p> <p>Macro</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The  macro name   (e.g., \"SOUTH\") of a key combo, Dpad, mouse button, etc. that this macro maps to.</p> <p>macro name</p>"},{"location":"%7Bskin%7D/param/max-lines/","title":"Max lines","text":""},{"location":"%7Bskin%7D/param/max-lines/#max-lines-parameter-skin","title":"max-lines parameter (skin)","text":"<p>Applies to: </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>1000</p> <p>Default value: </p> <p>Default value:</p> <p>1000</p> <p>Maximum number of lines before the control drops old text to make room for more. 0 is no limit.</p> <p>An overflow of 5% is allowed, to reduce flicker.</p>"},{"location":"%7Bskin%7D/param/menu/","title":"Menu","text":""},{"location":"%7Bskin%7D/param/menu/#menu-parameter-skin","title":"menu parameter (skin)","text":"<p>See also: </p> <p>macro parameter </p> <p>id parameter </p> <p>See also: </p> <p>See also:</p> <p>macro parameter </p> <p>id parameter </p> <p>macro parameter</p> <p>id parameter </p> <p>id parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The  id   of the menu this window will use, if any, when it's active.</p> <p>id</p>"},{"location":"%7Bskin%7D/param/multi-line/","title":"Multi line","text":""},{"location":"%7Bskin%7D/param/multi-line/#multi-line-parameter-skin","title":"multi-line parameter (skin)","text":"<p>Applies to: </p> <p>Info </p> <p>Input </p> <p>Tab </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Input </p> <p>Tab </p> <p>Info</p> <p>Input </p> <p>Tab </p> <p>Input</p> <p>Tab </p> <p>Tab</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>: Input control</p> <p>true</p> <p>: Info and Tab controls</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>: Input control</p> <p>true</p> <p>: Info and Tab controls</p> <p>false</p> <p>true</p> <p>: Info and Tab controls</p> <p>true</p> <p>Input control: Create a multi-line input control. Read-only for this control.</p> <p>Info and Tab controls: Show tabs in multiple rows if there are too many to fit in a single row.</p>"},{"location":"%7Bskin%7D/param/name/","title":"Name","text":""},{"location":"%7Bskin%7D/param/name/#name-parameter-skin","title":"name parameter (skin)","text":"<p>See also: </p> <p>macros (skin) </p> <p>id parameter </p> <p>See also: </p> <p>See also:</p> <p>macros (skin) </p> <p>id parameter </p> <p>macros (skin)</p> <p>id parameter </p> <p>id parameter</p> <p>Applies to: </p> <p>Macro </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>Macro </p> <p>Menu </p> <p>Macro</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Macro control: The key/gamepad combination such as</p> <p>R+REP</p> <p>,</p> <p>CTRL+Northwest</p> <p>,</p> <p>GamepadLeft</p> <p>.</p> <p>R+REP</p> <p>CTRL+Northwest</p> <p>GamepadLeft</p> <p>Menu control: This is the menu item label. A tab character can be used between the name and a keyboard shortcut, like \"Help\\tF1\". (Keyboard shortcuts must be implemented as macros in order to work. This is just a label.) A blank name shows just a separator.</p>"},{"location":"%7Bskin%7D/param/no-command/","title":"No command","text":""},{"location":"%7Bskin%7D/param/no-command/#no-command-parameter-skin","title":"no-command parameter (skin)","text":"<p>See also: </p> <p>command parameter </p> <p>is-password parameter </p> <p>multi-line parameter </p> <p>See also: </p> <p>See also:</p> <p>command parameter </p> <p>is-password parameter </p> <p>multi-line parameter </p> <p>command parameter</p> <p>is-password parameter </p> <p>multi-line parameter </p> <p>is-password parameter</p> <p>multi-line parameter </p> <p>multi-line parameter</p> <p>Applies to: </p> <p>Input </p> <p>Applies to: </p> <p>Applies to:</p> <p>Input </p> <p>Input</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>True if this input control is for typing only; hitting Enter will not run a command.</p>"},{"location":"%7Bskin%7D/param/on-blur/","title":"On blur","text":""},{"location":"%7Bskin%7D/param/on-blur/#on-blur-parameter-skin","title":"on-blur parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-focus parameter </p> <p>See also: </p> <p>See also:</p> <p>focus parameter </p> <p>on-focus parameter </p> <p>focus parameter</p> <p>on-focus parameter </p> <p>on-focus parameter</p> <p>Applies to: </p> <p>Input </p> <p>Applies to: </p> <p>Applies to:</p> <p>Input </p> <p>Input</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the control loses focus.</p> <p>Command</p>"},{"location":"%7Bskin%7D/param/on-change/","title":"On change","text":""},{"location":"%7Bskin%7D/param/on-change/#on-change-parameter-skin","title":"on-change parameter (skin)","text":"<p>See also: </p> <p>value parameter </p> <p>See also: </p> <p>See also:</p> <p>value parameter </p> <p>value parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the  value   of the bar/slider is changed. If you drag the slider around, the command will not run until you let go.</p> <p>Command value</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new</p> <p>value</p> <p>. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[*]]</p> <p>value</p> <p>client commands</p> <p>[[...]]</p>"},{"location":"%7Bskin%7D/param/on-close/","title":"On close","text":""},{"location":"%7Bskin%7D/param/on-close/#on-close-parameter-skin","title":"on-close parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>on-size parameter </p> <p>See also: </p> <p>See also:</p> <p>can-close parameter </p> <p>on-size parameter </p> <p>can-close parameter</p> <p>on-size parameter </p> <p>on-size parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the window is closed.</p> <p>Command</p>"},{"location":"%7Bskin%7D/param/on-focus/","title":"On focus","text":""},{"location":"%7Bskin%7D/param/on-focus/#on-focus-parameter-skin","title":"on-focus parameter (skin)","text":"<p>See also: </p> <p>focus parameter </p> <p>on-blur parameter </p> <p>See also: </p> <p>See also:</p> <p>focus parameter </p> <p>on-blur parameter </p> <p>focus parameter</p> <p>on-blur parameter </p> <p>on-blur parameter</p> <p>Applies to: </p> <p>Input </p> <p>Applies to: </p> <p>Applies to:</p> <p>Input </p> <p>Input</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the control gains focus.</p> <p>Command</p>"},{"location":"%7Bskin%7D/param/on-hide/","title":"On hide","text":""},{"location":"%7Bskin%7D/param/on-hide/#on-hide-parameter-skin","title":"on-hide parameter (skin)","text":"<p>See also: </p> <p>on-show parameter </p> <p>See also: </p> <p>See also:</p> <p>on-show parameter </p> <p>on-show parameter</p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Browser</p> <p>Info </p> <p>Map </p> <p>Info</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when this control is hidden by the game. Must be the default control for the game to show/hide it.</p> <p>Command</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"%7Bskin%7D/param/on-show/","title":"On show","text":""},{"location":"%7Bskin%7D/param/on-show/#on-show-parameter-skin","title":"on-show parameter (skin)","text":"<p>See also: </p> <p>on-hide parameter </p> <p>See also: </p> <p>See also:</p> <p>on-hide parameter </p> <p>on-hide parameter</p> <p>Applies to: </p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Info </p> <p>Map </p> <p>Browser</p> <p>Info </p> <p>Map </p> <p>Info</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when this control is shown by the game. Must be the default control for the game to show/hide it.</p> <p>Command</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"%7Bskin%7D/param/on-size/","title":"On size","text":""},{"location":"%7Bskin%7D/param/on-size/#on-size-parameter-skin","title":"on-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when this control is resized. If you are dragging a window edge or splitter, the command won't run until you finish.</p> <p>Command</p> <p>No command will be sent in response to size or splitter changes made by  winset()   .</p> <p>winset()</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the control's new size. Likewise,</p> <p>[[width]]</p> <p>will be replaced with the width and</p> <p>[[height]]</p> <p>with the height. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[*]]</p> <p>[[width]]</p> <p>[[height]]</p> <p>client commands</p> <p>[[...]]</p>"},{"location":"%7Bskin%7D/param/on-status/","title":"On status","text":""},{"location":"%7Bskin%7D/param/on-status/#on-status-parameter-skin","title":"on-status parameter (skin)","text":"<p>See also: </p> <p>statusbar parameter </p> <p>See also: </p> <p>See also:</p> <p>statusbar parameter </p> <p>statusbar parameter</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the text that would go in the statusbar is changed. This applies even if this control is a pane and not a window, or is a window without a statusbar. It applies to all panes and windows that directly or indirectly contain whatever control generated the statusbar text (e.g., a map).</p> <p>Command</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new text. (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[*]]</p> <p>client commands</p> <p>[[...]]</p> <p>[[from]]</p> <p>can be used to reference the control (if any) that generated the next text. You can also use expressions like</p> <p>[[from.type]]</p> <p>,</p> <p>[[from.parent.pos.x]]</p> <p>, etc.</p> <p>[[from]]</p> <p>[[from.type]]</p> <p>[[from.parent.pos.x]]</p>"},{"location":"%7Bskin%7D/param/on-tab/","title":"On tab","text":""},{"location":"%7Bskin%7D/param/on-tab/#on-tab-parameter-skin","title":"on-tab parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>tabs parameter </p> <p>See also: </p> <p>See also:</p> <p>current-tab parameter </p> <p>tabs parameter </p> <p>current-tab parameter</p> <p>tabs parameter </p> <p>tabs parameter</p> <p>Applies to: </p> <p>Info </p> <p>Tab </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Tab </p> <p>Info</p> <p>Tab </p> <p>Tab</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Command   executed when the current tab is changed.</p> <p>Command</p> <p>If you include</p> <p>[[*]]</p> <p>in the command, it will be replaced by the new tab's  id   . (See \"Embedded Winget\" in  client commands   for more details on the</p> <p>[[...]]</p> <p>format.)</p> <p>[[*]]</p> <p>id client commands</p> <p>[[...]]</p>"},{"location":"%7Bskin%7D/param/outer-size/","title":"Outer size","text":""},{"location":"%7Bskin%7D/param/outer-size/#outer-size-parameter-skin","title":"outer-size parameter (skin)","text":"<p>See also: </p> <p>size parameter </p> <p>inner-size parameter </p> <p>See also: </p> <p>See also:</p> <p>size parameter </p> <p>inner-size parameter </p> <p>size parameter</p> <p>inner-size parameter </p> <p>inner-size parameter</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>width   x  height </p> <p>Format: </p> <p>Format:</p> <p>width   x  height </p> <p>width height</p> <p>Read-only.</p> <p>If the control is a window, this refers to its current exterior size  including   titlebar, statusbar, borders, etc.</p> <p>including</p> <p>If this control is a pane and  can-scroll   is true, this is the size of the display area including the scrollbars.</p> <p>can-scroll</p>"},{"location":"%7Bskin%7D/param/parent/","title":"Parent","text":""},{"location":"%7Bskin%7D/param/parent/#parent-parameter-skin","title":"parent parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>type parameter </p> <p>name parameter </p> <p>See also: </p> <p>See also:</p> <p>id parameter </p> <p>type parameter </p> <p>name parameter </p> <p>id parameter</p> <p>type parameter </p> <p>name parameter </p> <p>type parameter</p> <p>name parameter </p> <p>name parameter</p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>All</p> <p>Macro </p> <p>Menu </p> <p>Macro</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The  id   of this control's parent. Write-only, used when creating a new control at runtime or deleting a control that was created this way.</p> <p>id</p>"},{"location":"%7Bskin%7D/param/pos/","title":"Pos","text":""},{"location":"%7Bskin%7D/param/pos/#pos-parameter-skin","title":"pos parameter (skin)","text":"<p>See also: </p> <p>anchor1, anchor2 parameters </p> <p>size parameter </p> <p>See also: </p> <p>See also:</p> <p>anchor1, anchor2 parameters </p> <p>size parameter </p> <p>anchor1, anchor2 parameters</p> <p>size parameter </p> <p>size parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>x   ,  y </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>x   ,  y </p> <p>none</p> <p>x y</p> <p>none</p> <p>Default value: </p> <p>x   ,  y </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>x   ,  y </p> <p>none</p> <p>x y</p> <p>none</p> <p>Position of this control's upper left corner, relative to its container. (Not applicable to panes.)</p>"},{"location":"%7Bskin%7D/param/prefix-color/","title":"Prefix color","text":""},{"location":"%7Bskin%7D/param/prefix-color/#prefix-color-parameter-skin","title":"prefix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>suffix-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>suffix-color parameter </p> <p>text-color parameter</p> <p>suffix-color parameter </p> <p>suffix-color parameter</p> <p>Applies to: </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>The color used for the prefix/header column of statpanel displays. No color means the default  text-color   will be used.</p> <p>text-color</p> <p>In BYOND 3.0, this color was red.</p>"},{"location":"%7Bskin%7D/param/right-click/","title":"Right click","text":""},{"location":"%7Bskin%7D/param/right-click/#right-click-parameter-skin","title":"right-click parameter (skin)","text":"<p>See also: </p> <p>mouse handling </p> <p>popup_menu setting (verb) </p> <p>drop-zone parameter </p> <p>See also: </p> <p>See also:</p> <p>mouse handling </p> <p>popup_menu setting (verb) </p> <p>drop-zone parameter </p> <p>mouse handling</p> <p>popup_menu setting (verb) </p> <p>drop-zone parameter </p> <p>popup_menu setting (verb)</p> <p>drop-zone parameter </p> <p>drop-zone parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>True if this control should allow right-clicks to behave like any other click instead of opening up popup menus or similar special behavior.</p>"},{"location":"%7Bskin%7D/param/right/","title":"Right","text":""},{"location":"%7Bskin%7D/param/right/#right-bottom-parameters-skin","title":"right, bottom parameters (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>left parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>left parameter</p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>is-vert parameter</p> <p>show-splitter parameter </p> <p>splitter parameter </p> <p>show-splitter parameter</p> <p>splitter parameter </p> <p>splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Format: </p> <p>string</p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>none</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>The  id   of the right/bottom pane in this control. The parameter names</p> <p>top</p> <p>and</p> <p>bottom</p> <p>can be used interchangeably.</p> <p>id</p> <p>top</p> <p>bottom</p>"},{"location":"%7Bskin%7D/param/saved-params/","title":"Saved params","text":""},{"location":"%7Bskin%7D/param/saved-params/#saved-params-parameter-skin","title":"saved-params parameter (skin)","text":"<p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Default value: </p> <p>varies </p> <p>Default value: </p> <p>Default value:</p> <p>varies </p> <p>varies</p> <p>A semicolon-separated list of parameters that get saved with this control. This is often used for things a user might set, like zoom level for a map.</p> <p>Currently not editable in Dream Maker.</p>"},{"location":"%7Bskin%7D/param/show-history/","title":"Show history","text":""},{"location":"%7Bskin%7D/param/show-history/#show-history-parameter-skin","title":"show-history parameter (skin)","text":"<p>See also: </p> <p>show-url parameter </p> <p>use-title parameter </p> <p>See also: </p> <p>See also:</p> <p>show-url parameter </p> <p>use-title parameter </p> <p>show-url parameter</p> <p>use-title parameter </p> <p>use-title parameter</p> <p>Applies to: </p> <p>Browser </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Browser</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Show forward/back navigation buttons.</p>"},{"location":"%7Bskin%7D/param/show-lines/","title":"Show lines","text":""},{"location":"%7Bskin%7D/param/show-lines/#show-lines-parameter-skin","title":"show-lines parameter (skin)","text":"<p>See also: </p> <p>line-color parameter </p> <p>See also: </p> <p>See also:</p> <p>line-color parameter </p> <p>line-color parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Possible values: </p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>Possible values: </p> <p>Possible values:</p> <p>none</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>horizontal</p> <p>vertical</p> <p>both</p> <p>vertical</p> <p>both</p> <p>both</p> <p>Default value: </p> <p>both</p> <p>Default value: </p> <p>Default value:</p> <p>both</p> <p>Determines which grid lines to display.</p>"},{"location":"%7Bskin%7D/param/show-names/","title":"Show names","text":""},{"location":"%7Bskin%7D/param/show-names/#show-names-parameter-skin","title":"show-names parameter (skin)","text":"<p>See also: </p> <p>name var (atom) </p> <p>small-icons parameter </p> <p>See also: </p> <p>See also:</p> <p>name var (atom) </p> <p>small-icons parameter </p> <p>name var (atom)</p> <p>small-icons parameter </p> <p>small-icons parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>When atoms are output to the grid, show the atom's name next to its icon.</p> <p>If the atom has no icon and</p> <p>show-names</p> <p>is false, the grid cell will be blank.</p> <p>show-names</p>"},{"location":"%7Bskin%7D/param/show-splitter/","title":"Show splitter","text":""},{"location":"%7Bskin%7D/param/show-splitter/#show-splitter-parameter-skin","title":"show-splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>left parameter</p> <p>right parameter </p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>right parameter</p> <p>is-vert parameter </p> <p>splitter parameter </p> <p>is-vert parameter</p> <p>splitter parameter </p> <p>splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Show a splitter if both the left and right (or top and bottom) panes are in use. The splitter can be dragged to resize the panes.</p>"},{"location":"%7Bskin%7D/param/show-url/","title":"Show url","text":""},{"location":"%7Bskin%7D/param/show-url/#show-url-parameter-skin","title":"show-url parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>use-title parameter </p> <p>See also: </p> <p>See also:</p> <p>show-history parameter </p> <p>use-title parameter </p> <p>show-history parameter</p> <p>use-title parameter </p> <p>use-title parameter</p> <p>Applies to: </p> <p>Browser </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Browser</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Shows an address bar for this browser control.</p>"},{"location":"%7Bskin%7D/param/size/","title":"Size","text":""},{"location":"%7Bskin%7D/param/size/#size-parameter-skin","title":"size parameter (skin)","text":"<p>See also: </p> <p>pos parameter </p> <p>anchor1, anchor2 parameters </p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>See also: </p> <p>See also:</p> <p>pos parameter </p> <p>anchor1, anchor2 parameters </p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>pos parameter</p> <p>anchor1, anchor2 parameters </p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>anchor1, anchor2 parameters</p> <p>on-size parameter </p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>on-size parameter</p> <p>inner-size parameter </p> <p>outer-size parameter </p> <p>inner-size parameter</p> <p>outer-size parameter </p> <p>outer-size parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>width   x  height </p> <p>Format: </p> <p>Format:</p> <p>width   x  height </p> <p>width height</p> <p>The size of this control.</p> <p>Setting 0 for width or height uses up any available space right/downward.</p> <p>If the control is a window, this refers to its  interior size when not maximized or minimized   . That is, it does not count borders, titlebar, menu, or statusbar, and if the window is minimized/maximized, this refers to the window's normal size when it is restored. See the  inner-size   and  outer-size   params for comparison.</p> <p>interior size when not maximized or minimized inner-size outer-size</p> <p>If this control is a pane and  can-scroll   is true,</p> <p>size</p> <p>refers to the total scrollable size of the pane, NOT the smaller size displayed. In this case,</p> <p>outer-size</p> <p>and</p> <p>inner-size</p> <p>refer to the display area with and without scrollbars, respectively.</p> <p>can-scroll</p> <p>size</p> <p>outer-size</p> <p>inner-size</p>"},{"location":"%7Bskin%7D/param/small-icons/","title":"Small icons","text":""},{"location":"%7Bskin%7D/param/small-icons/#small-icons-parameter-skin","title":"small-icons parameter (skin)","text":"<p>See also: </p> <p>show-names parameter </p> <p>See also: </p> <p>See also:</p> <p>show-names parameter </p> <p>show-names parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Grid</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>When output(object,grid) is sent, show smaller icons in this control instead of larger ones.</p>"},{"location":"%7Bskin%7D/param/splitter/","title":"Splitter","text":""},{"location":"%7Bskin%7D/param/splitter/#splitter-parameter-skin","title":"splitter parameter (skin)","text":"<p>See also: </p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>See also: </p> <p>See also:</p> <p>left parameter </p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>left parameter</p> <p>right parameter </p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>right parameter</p> <p>is-vert parameter </p> <p>show-splitter parameter </p> <p>is-vert parameter</p> <p>show-splitter parameter </p> <p>show-splitter parameter</p> <p>Applies to: </p> <p>Child </p> <p>Applies to: </p> <p>Applies to:</p> <p>Child </p> <p>Child</p> <p>Format: </p> <p>number (0 to 100)</p> <p>Format: </p> <p>Format:</p> <p>number (0 to 100)</p> <p>Default value: </p> <p>50</p> <p>Default value: </p> <p>Default value:</p> <p>50</p> <p>Position of the splitter when two panes are in use, whether  show-splitter   is true or not. This value is a percentage. Specifically, it is the percentage of the available width/height that is given to the left/top pane.</p> <p>show-splitter</p>"},{"location":"%7Bskin%7D/param/statusbar/","title":"Statusbar","text":""},{"location":"%7Bskin%7D/param/statusbar/#statusbar-parameter-skin","title":"statusbar parameter (skin)","text":"<p>See also: </p> <p>titlebar parameter </p> <p>on-status parameter </p> <p>See also: </p> <p>See also:</p> <p>titlebar parameter </p> <p>on-status parameter </p> <p>titlebar parameter</p> <p>on-status parameter </p> <p>on-status parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Shows a status bar at the bottom of the window. This will show the name of an atom when you hover over it with the mouse.</p>"},{"location":"%7Bskin%7D/param/stretch/","title":"Stretch","text":""},{"location":"%7Bskin%7D/param/stretch/#stretch-parameter-skin","title":"stretch parameter (skin)","text":"<p>See also: </p> <p>image parameter </p> <p>image-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>image parameter </p> <p>image-mode parameter </p> <p>image parameter</p> <p>image-mode parameter </p> <p>image-mode parameter</p> <p>Applies to: </p> <p>Label </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Label</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Stretch the background image. Deprecated; use  image-mode   instead.</p> <p>image-mode</p>"},{"location":"%7Bskin%7D/param/style/","title":"Style","text":""},{"location":"%7Bskin%7D/param/style/#style-parameter-skin","title":"style parameter (skin)","text":"<p>Applies to: </p> <p>Grid </p> <p>Map </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Map </p> <p>Output </p> <p>Grid</p> <p>Map </p> <p>Output </p> <p>Map</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Custom stylesheet used for the control. Changes made at runtime will usually not impact any existing text.</p> <p>For Map controls, this affects any  maptext   drawn, and changes to the style should appear on the next refresh.</p> <p>maptext</p>"},{"location":"%7Bskin%7D/param/suffix-color/","title":"Suffix color","text":""},{"location":"%7Bskin%7D/param/suffix-color/#suffix-color-parameter-skin","title":"suffix-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>prefix-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>prefix-color parameter </p> <p>text-color parameter</p> <p>prefix-color parameter </p> <p>prefix-color parameter</p> <p>Applies to: </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>The color used for the suffix column of statpanel displays. No color means the default  text-color   will be used.</p> <p>text-color</p> <p>In BYOND 3.0, this color was blue.</p>"},{"location":"%7Bskin%7D/param/tab-background-color/","title":"Tab background color","text":""},{"location":"%7Bskin%7D/param/tab-background-color/#tab-background-color-parameter-skin","title":"tab-background-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>tab-text-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>See also: </p> <p>See also:</p> <p>background-color parameter </p> <p>tab-text-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>background-color parameter</p> <p>tab-text-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-text-color parameter</p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-font-family, tab-font-size, tab-font-style parameters</p> <p>Applies to: </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Affects the background color for tabs. The regular  background-color   is used for the content area.</p> <p>background-color</p>"},{"location":"%7Bskin%7D/param/tab-font/","title":"Tab font","text":""},{"location":"%7Bskin%7D/param/tab-font/#tab-font-family-tab-font-size-tab-font-style-parameters-skin","title":"tab-font-family, tab-font-size, tab-font-style parameters (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>See also: </p> <p>See also:</p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>font-family parameter</p> <p>font-size parameter </p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>font-size parameter</p> <p>font-style parameter </p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>font-style parameter</p> <p>tab-text-color parameter </p> <p>tab-background-color parameter </p> <p>tab-text-color parameter</p> <p>tab-background-color parameter </p> <p>tab-background-color parameter</p> <p>Applies to: </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Info</p> <p>Affects the font for tabs. The regular versions of these without the</p> <p>tab-</p> <p>prefix are used for the content area.</p> <p>tab-</p>"},{"location":"%7Bskin%7D/param/tab-text-color/","title":"Tab text color","text":""},{"location":"%7Bskin%7D/param/tab-text-color/#tab-text-color-parameter-skin","title":"tab-text-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>tab-background-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>text-color parameter</p> <p>tab-background-color parameter </p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-background-color parameter</p> <p>tab-font-family, tab-font-size, tab-font-style parameters </p> <p>tab-font-family, tab-font-size, tab-font-style parameters</p> <p>Applies to: </p> <p>Info </p> <p>Applies to: </p> <p>Applies to:</p> <p>Info </p> <p>Info</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>Affects the text color for tabs. The regular  text-color   is used for the content area.</p> <p>text-color</p>"},{"location":"%7Bskin%7D/param/tabs/","title":"Tabs","text":""},{"location":"%7Bskin%7D/param/tabs/#tabs-parameter-skin","title":"tabs parameter (skin)","text":"<p>See also: </p> <p>current-tab parameter </p> <p>id parameter </p> <p>multi-line parameter </p> <p>See also: </p> <p>See also:</p> <p>current-tab parameter </p> <p>id parameter </p> <p>multi-line parameter </p> <p>current-tab parameter</p> <p>id parameter </p> <p>multi-line parameter </p> <p>id parameter</p> <p>multi-line parameter </p> <p>multi-line parameter</p> <p>Applies to: </p> <p>Tab </p> <p>Applies to: </p> <p>Applies to:</p> <p>Tab </p> <p>Tab</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>A comma-separated list of  id   values for the panes included as tabs in this control.</p> <p>id</p> <p>When setting this value, you can put</p> <p>+</p> <p>in front of the list to add tabs to the existing control, without affecting current tabs. You can likewise use</p> <p>-</p> <p>in front of the list to remove tabs.</p> <p>+</p> <p>-</p> <p>Note: When using this with  winset()   , remember you will need to escape</p> <p>+</p> <p>as</p> <p>%2B</p> <p>via  url_encode()   or  list2params()   .</p> <p>winset()</p> <p>+</p> <p>%2B</p> <p>url_encode() list2params()</p>"},{"location":"%7Bskin%7D/param/text-color/","title":"Text color","text":""},{"location":"%7Bskin%7D/param/text-color/#text-color-parameter-skin","title":"text-color parameter (skin)","text":"<p>See also: </p> <p>background-color parameter </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>See also: </p> <p>See also:</p> <p>background-color parameter </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>background-color parameter</p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>font-family parameter</p> <p>font-size parameter </p> <p>font-style parameter </p> <p>font-size parameter</p> <p>font-style parameter </p> <p>font-style parameter</p> <p>Applies to: </p> <p>All </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>All</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>The control's foreground text color.</p>"},{"location":"%7Bskin%7D/param/text-mode/","title":"Text mode","text":""},{"location":"%7Bskin%7D/param/text-mode/#text-mode-parameter-skin","title":"text-mode parameter (skin)","text":"<p>See also: </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>zoom parameter</p> <p>zoom-mode parameter </p> <p>zoom-mode parameter</p> <p>Applies to: </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Show text mode even if icons are available. Text mode will be used if no icons are present, regardless of this setting.</p>"},{"location":"%7Bskin%7D/param/text-wrap/","title":"Text wrap","text":""},{"location":"%7Bskin%7D/param/text-wrap/#text-wrap-parameter-skin","title":"text-wrap parameter (skin)","text":"<p>See also: </p> <p>text parameter </p> <p>See also: </p> <p>See also:</p> <p>text parameter </p> <p>text parameter</p> <p>Applies to: </p> <p>Label </p> <p>Applies to: </p> <p>Applies to:</p> <p>Label </p> <p>Label</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Wrap text that is too long for the width of the label.</p>"},{"location":"%7Bskin%7D/param/text/","title":"Text","text":""},{"location":"%7Bskin%7D/param/text/#text-parameter-skin","title":"text parameter (skin)","text":"<p>See also: </p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>See also: </p> <p>See also:</p> <p>font-family parameter </p> <p>font-size parameter </p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>font-family parameter</p> <p>font-size parameter </p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>font-size parameter</p> <p>font-style parameter </p> <p>text-wrap parameter </p> <p>font-style parameter</p> <p>text-wrap parameter </p> <p>text-wrap parameter</p> <p>Applies to: </p> <p>Button </p> <p>Input </p> <p>Label </p> <p>Applies to: </p> <p>Applies to:</p> <p>Button </p> <p>Input </p> <p>Label </p> <p>Button</p> <p>Input </p> <p>Label </p> <p>Input</p> <p>Label </p> <p>Label</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>Text shown in this control. For Input controls this setting is only available at runtime.</p>"},{"location":"%7Bskin%7D/param/title/","title":"Title","text":""},{"location":"%7Bskin%7D/param/title/#title-parameter-skin","title":"title parameter (skin)","text":"<p>See also: </p> <p>name var (world) </p> <p>icon parameter </p> <p>See also: </p> <p>See also:</p> <p>name var (world) </p> <p>icon parameter </p> <p>name var (world)</p> <p>icon parameter </p> <p>icon parameter</p> <p>Applies to: </p> <p>Main </p> <p>Applies to: </p> <p>Applies to:</p> <p>Main </p> <p>Main</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The title of this window or pane. For a window, the title will appear in the titlebar if present. For a pane, this will be displayed on the tab if this pane is in a  Tab control   .</p> <p>Tab control</p> <p>If this is the default window,  world.name   takes precedence over the window title.</p> <p>world.name</p>"},{"location":"%7Bskin%7D/param/titlebar/","title":"Titlebar","text":""},{"location":"%7Bskin%7D/param/titlebar/#titlebar-parameter-skin","title":"titlebar parameter (skin)","text":"<p>See also: </p> <p>can-close parameter </p> <p>can-minimize parameter </p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>See also: </p> <p>See also:</p> <p>can-close parameter </p> <p>can-minimize parameter </p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>can-close parameter</p> <p>can-minimize parameter </p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>can-minimize parameter</p> <p>can-resize parameter </p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>can-resize parameter</p> <p>icon parameter </p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>icon parameter</p> <p>title parameter </p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>title parameter</p> <p>use-title parameter </p> <p>statusbar parameter </p> <p>name var (world) </p> <p>use-title parameter</p> <p>statusbar parameter </p> <p>name var (world) </p> <p>statusbar parameter</p> <p>name var (world) </p> <p>name var (world)</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>true</p> <p>Default value: </p> <p>Default value:</p> <p>true</p> <p>Show a titlebar for this window. This is also required for the close, minimize, and maximize buttons to appear.</p>"},{"location":"%7Bskin%7D/param/transparent-color/","title":"Transparent color","text":""},{"location":"%7Bskin%7D/param/transparent-color/#transparent-color-parameter-skin","title":"transparent-color parameter (skin)","text":"<p>See also: </p> <p>alpha parameter </p> <p>See also: </p> <p>See also:</p> <p>alpha parameter </p> <p>alpha parameter</p> <p>Applies to: </p> <p>Main   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Main   (window only)</p> <p>Main</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>none</p> <p>Default value: </p> <p>Default value:</p> <p>none</p> <p>A color that will be turned into transparency wherever it appears in this window. Overall, this method of transparency comes with many limitations, so it is considered deprecated.</p>"},{"location":"%7Bskin%7D/param/type/","title":"Type","text":""},{"location":"%7Bskin%7D/param/type/#type-parameter-skin","title":"type parameter (skin)","text":"<p>See also: </p> <p>id parameter </p> <p>parent parameter </p> <p>See also: </p> <p>See also:</p> <p>id parameter </p> <p>parent parameter </p> <p>id parameter</p> <p>parent parameter </p> <p>parent parameter</p> <p>Applies to: </p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>Applies to: </p> <p>Applies to:</p> <p>All </p> <p>Macro </p> <p>Menu </p> <p>All</p> <p>Macro </p> <p>Menu </p> <p>Macro</p> <p>Menu </p> <p>Menu</p> <p>Format: </p> <p>string</p> <p>Format: </p> <p>Format:</p> <p>string</p> <p>The type of this control. Read-only.</p>"},{"location":"%7Bskin%7D/param/use-title/","title":"Use title","text":""},{"location":"%7Bskin%7D/param/use-title/#use-title-parameter-skin","title":"use-title parameter (skin)","text":"<p>See also: </p> <p>show-history parameter </p> <p>show-url parameter </p> <p>title parameter </p> <p>titlebar parameter </p> <p>See also: </p> <p>See also:</p> <p>show-history parameter </p> <p>show-url parameter </p> <p>title parameter </p> <p>titlebar parameter </p> <p>show-history parameter</p> <p>show-url parameter </p> <p>title parameter </p> <p>titlebar parameter </p> <p>show-url parameter</p> <p>title parameter </p> <p>titlebar parameter </p> <p>title parameter</p> <p>titlebar parameter </p> <p>titlebar parameter</p> <p>Applies to: </p> <p>Browser </p> <p>Applies to: </p> <p>Applies to:</p> <p>Browser </p> <p>Browser</p> <p>Format: </p> <p>true/false</p> <p>Format: </p> <p>Format:</p> <p>true/false</p> <p>Default value: </p> <p>false</p> <p>Default value: </p> <p>Default value:</p> <p>false</p> <p>Use the browser's document title to override the title of the window or pane it appears in.</p>"},{"location":"%7Bskin%7D/param/value/","title":"Value","text":""},{"location":"%7Bskin%7D/param/value/#value-parameter-skin","title":"value parameter (skin)","text":"<p>See also: </p> <p>is-slider parameter </p> <p>dir parameter </p> <p>See also: </p> <p>See also:</p> <p>is-slider parameter </p> <p>dir parameter </p> <p>is-slider parameter</p> <p>dir parameter </p> <p>dir parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>The \"fullness\" of this bar/slider, as a percentage.</p>"},{"location":"%7Bskin%7D/param/view-size/","title":"View size","text":""},{"location":"%7Bskin%7D/param/view-size/#view-size-parameter-skin","title":"view-size parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>See also: </p> <p>See also:</p> <p>letterbox parameter </p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>letterbox parameter</p> <p>zoom parameter </p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>zoom parameter</p> <p>zoom-mode parameter </p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>zoom-mode parameter</p> <p>icon_size var (world) </p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>icon_size var (world)</p> <p>view var (world) </p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>view var (world)</p> <p>view var (client) </p> <p>HUD / screen objects </p> <p>view var (client)</p> <p>HUD / screen objects </p> <p>HUD / screen objects</p> <p>Applies to: </p> <p>Map   (window only)</p> <p>Applies to: </p> <p>Applies to:</p> <p>Map   (window only)</p> <p>Map</p> <p>Format: </p> <p>width   x  height </p> <p>Format: </p> <p>Format:</p> <p>width   x  height </p> <p>width height</p> <p>The size, in pixels, of the map after</p> <p>zoom</p> <p>has been applied.</p> <p>zoom</p> <p>For instance, if the client view has 10\u00d710 tiles (this includes any extended tiles caused by HUD objects) and</p> <p>world.icon_size</p> <p>is 32x32, the map has a native size of 320\u00d7320 pixels. If the map has a zoom level of 2, then</p> <p>view-size</p> <p>will be 640x640.</p> <p>world.icon_size</p> <p>view-size</p> <p>With a</p> <p>zoom</p> <p>value of 0, which is the default for most projects, the actual zoom level is automatically determined by the size of the map control, the map's native pixel size as explained above, and the value of the  letterbox   parameter.</p> <p>zoom</p> <p>letterbox</p>"},{"location":"%7Bskin%7D/param/visited-color/","title":"Visited color","text":""},{"location":"%7Bskin%7D/param/visited-color/#visited-color-parameter-skin","title":"visited-color parameter (skin)","text":"<p>See also: </p> <p>text-color parameter </p> <p>link-color parameter </p> <p>See also: </p> <p>See also:</p> <p>text-color parameter </p> <p>link-color parameter </p> <p>text-color parameter</p> <p>link-color parameter </p> <p>link-color parameter</p> <p>Applies to: </p> <p>Grid </p> <p>Output </p> <p>Applies to: </p> <p>Applies to:</p> <p>Grid </p> <p>Output </p> <p>Grid</p> <p>Output </p> <p>Output</p> <p>Format: </p> <p>#rrggbb </p> <p>none</p> <p>Format: </p> <p>Format:</p> <p>#rrggbb </p> <p>none</p> <p>#rrggbb</p> <p>none</p> <p>Default value: </p> <p>#0000ff</p> <p>Default value: </p> <p>Default value:</p> <p>#0000ff</p> <p>The color used for visited links.</p>"},{"location":"%7Bskin%7D/param/width/","title":"Width","text":""},{"location":"%7Bskin%7D/param/width/#width-parameter-skin","title":"width parameter (skin)","text":"<p>See also: </p> <p>dir parameter </p> <p>is-slider parameter </p> <p>See also: </p> <p>See also:</p> <p>dir parameter </p> <p>is-slider parameter </p> <p>dir parameter</p> <p>is-slider parameter </p> <p>is-slider parameter</p> <p>Applies to: </p> <p>Bar </p> <p>Applies to: </p> <p>Applies to:</p> <p>Bar </p> <p>Bar</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>10</p> <p>Default value: </p> <p>Default value:</p> <p>10</p> <p>Width, in pixels, of the bar or slider. A value of 0 uses all available width.</p>"},{"location":"%7Bskin%7D/param/zoom-mode/","title":"Zoom mode","text":""},{"location":"%7Bskin%7D/param/zoom-mode/#zoom-mode-parameter-skin","title":"zoom-mode parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>See also: </p> <p>See also:</p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom parameter </p> <p>letterbox parameter</p> <p>view-size parameter </p> <p>zoom parameter </p> <p>view-size parameter</p> <p>zoom parameter </p> <p>zoom parameter</p> <p>Applies to: </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Map </p> <p>Map</p> <p>Posisble values: </p> <p>normal</p> <p>distort</p> <p>blur</p> <p>Posisble values: </p> <p>Posisble values:</p> <p>normal</p> <p>distort</p> <p>blur</p> <p>distort</p> <p>blur</p> <p>blur</p> <p>Default value: </p> <p>normal</p> <p>Default value: </p> <p>Default value:</p> <p>normal</p> <p>Controls the way the map is upscaled.</p> <p>normal</p> <p>normal</p> <p>Preserves a pixelated look, but does some blending between adjacent pixels when the zoom factor is not an integer. This is equivalent to upscaling by the next highest integer, then downscaling.</p> <p>distort</p> <p>Uses nearest-neighbor sampling to upscale. This may look odd if the zoom factor is not an integer, since for instance some pixels might scale up to be 2 pixels wide, others 3 pixels wide. Some users prefer it anyway.</p> <p>blur</p> <p>Uses bilinear sampling to upscale. This will cause a blurry appearance if the zoom factor is high, but it may be desired in some cases.</p>"},{"location":"%7Bskin%7D/param/zoom/","title":"Zoom","text":""},{"location":"%7Bskin%7D/param/zoom/#zoom-parameter-skin","title":"zoom parameter (skin)","text":"<p>See also: </p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom-mode parameter </p> <p>See also: </p> <p>See also:</p> <p>letterbox parameter </p> <p>view-size parameter </p> <p>zoom-mode parameter </p> <p>letterbox parameter</p> <p>view-size parameter </p> <p>zoom-mode parameter </p> <p>view-size parameter</p> <p>zoom-mode parameter </p> <p>zoom-mode parameter</p> <p>Applies to: </p> <p>Map </p> <p>Applies to: </p> <p>Applies to:</p> <p>Map </p> <p>Map</p> <p>Format: </p> <p>number</p> <p>Format: </p> <p>Format:</p> <p>number</p> <p>Default value: </p> <p>0</p> <p>Default value: </p> <p>Default value:</p> <p>0</p> <p>Zoom factor for icons on the map. 1 means to show the icons at their original size, 2 is 200%, 0.5 is 50%, and so on. A value of 0 stretches to fit available space.</p>"},{"location":"%7B%7Bappendix%7D%7D/color-space/","title":"Color space","text":""},{"location":"%7B%7Bappendix%7D%7D/color-space/#color-space","title":"Color space","text":"<p>See also: </p> <p>rgb proc </p> <p>rgb2num proc </p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>See also: </p> <p>See also:</p> <p>rgb proc </p> <p>rgb2num proc </p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>rgb proc</p> <p>rgb2num proc </p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>rgb2num proc</p> <p>gradient proc </p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>gradient proc</p> <p>animate proc </p> <p>Color gradient </p> <p>Color matrix filter </p> <p>animate proc</p> <p>Color gradient </p> <p>Color matrix filter </p> <p>Color gradient</p> <p>Color matrix filter </p> <p>Color matrix filter</p> <p>There are different ways of interpreting color besides RGB. Several parts of BYOND are capable of using other color spaces.</p>"},{"location":"%7B%7Bappendix%7D%7D/color-space/#_1","title":"Color space","text":"<p>COLORSPACE_RGB</p> <p>The default color space is RGB, where each color is split into red, green, and blue components, as well as an optional alpha. All of these components range from 0 to 255.</p> <p>The color yellow for instance is</p> <p>rgb(255,255,0)</p> <p>which is red and green mixed together at their maximum brightness, but no blue component.</p> <p>rgb(255,255,0)</p>"},{"location":"%7B%7Bappendix%7D%7D/color-space/#_2","title":"Color space","text":"<p>COLORSPACE_HSV</p> <p>  Hue values on the color wheel</p> <p></p> <p>HSV stands for hue, saturation, and value.</p> <ul> <li>Hue ranges from 0 to 360 on a color wheel, where 0 is red, 60 is yellow, 120 is green, and so on as seen in the image.</li> <li>Saturation is how colorful this color is; it ranges from 0 which means a shade of gray, to 100 which is fully colored.</li> <li> <p>Value is the brightness of the biggest red, green, or blue component, and ranges from 0 to 100. A value of 0 is always black.</p> </li> <li> <p>Hue ranges from 0 to 360 on a color wheel, where 0 is red, 60 is yellow, 120 is green, and so on as seen in the image.</p> </li> <li> <p>Saturation is how colorful this color is; it ranges from 0 which means a shade of gray, to 100 which is fully colored.</p> </li> <li> <p>Value is the brightness of the biggest red, green, or blue component, and ranges from 0 to 100. A value of 0 is always black.</p> </li> </ul> <p>All pure hues such as red (hue=0) have a saturation of 100 and a value of 100. As saturation decreases, the colors turns whiter. Lower values mean darker colors and darker shades of gray.</p> <p>In HSV, saturation is less meaningful as value gets closer to 0. Black of course always has a value of 0. With 10 as the value, saturation=100 gives you a very dark color whereas saturation=0 is a 10% shade of gray.</p>"},{"location":"%7B%7Bappendix%7D%7D/color-space/#_3","title":"Color space","text":"<p>COLORSPACE_HSL</p> <p>HSL is a little more intuitive than HSV. Here, the value is replaced by luminance, which again ranges from 0 to 100. Luminance is the average of the minimum and maximum values of the red, green, and blue components.</p> <p>Black has a luminance of 0; white has a luminance of 100. Pure hues all have a saturation of 100 and luminance of 50. As saturation decreases, the color will approach a grayscale shade of L%.</p> <p>Saturation is less meaningful the closer luminance is to 0 or 100. At a luminance of 100, the saturation is totally irrelevant. At 90, high saturation will get you a very light shade of the hue but that isn't very far off from a 90% shade of gray.</p>"},{"location":"%7B%7Bappendix%7D%7D/color-space/#_4","title":"Color space","text":"<p>COLORSPACE_HCY</p> <p>HCY stands for  hue   ,  chroma   , and the Y is for grayscale luminance. (Again chroma and Y range from 0 to 100.) This color space is based around the apparent brightness of each color according to a rough approximation of human vision.</p> <p>hue chroma</p> <p>Chroma is similar to saturation in that it determines how far from grayscale the color is. As chroma decreases toward 0, the color approaches a grayscale shade of Y%. What's different about HCY color from HSV or HSL is that at chroma=0 and chroma=100 the colors should appear equally bright. Pure red, therefore, has a hue of 0, a chroma of 100, and a Y luminance of only 29.9\u2014roughly what red would look like in black &amp; white with all the color leached out.</p>"},{"location":"%7B%7Bappendix%7D%7D/css/","title":"Css","text":""},{"location":"%7B%7Bappendix%7D%7D/css/#css-attributes","title":"CSS attributes","text":"<p>DM-CSS is a subset of CSS, and only supports some kinds of selectors and attributes.</p> <p>The following table lists all supported attributes, and whether they are supported in text output, maptext, and in other controls (labels/etc.) Other controls will often allow only one style for an entire unit of text. A checkbox in \"Other\" only indicates that  some   support exists in other controls, but it may vary by the type of control.</p> <p>some</p> <p>|   Attribute   |   Output   |   Maptext   |   Other   |   Notes   | |   color   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Alpha colors may not be supported in some controls.   | |   background   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   In most cases, only applies to the entire text body.   | |   background-color   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   background-image   |   \u2714\ufe0f   |  |  |  | |   font   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-family   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-style   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-weight   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   font-size   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   text-decoration   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>underline</p> <p>,</p> <p>overline</p> <p>,</p> <p>line-through</p> <p>,</p> <p>blink</p> <p>, and</p> <p>none</p> <p>. Support for each of these may vary depending on where they are used.   | |   text-align   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   justify</p> <p>is supported in output and maptext.   | |   vertical-align   |  |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>top</p> <p>,</p> <p>middle</p> <p>, and</p> <p>bottom</p> <p>.   | |   text-indent   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  | |   margin-left   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-right   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   margin-top   |  |  |   \u2714\ufe0f   |  | |   margin-bottom   |  |  |   \u2714\ufe0f   |  | |   margin   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   width   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   | |   line-height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Support in output control is limited; line heights less than 1 are not respected.</p> <p>Only unitless numbers, percentages, or em units are allowed.   | |   white-space   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   normal</p> <p>,</p> <p>nowrap</p> <p>,</p> <p>pre</p> <p>,</p> <p>pre-wrap</p> <p>,</p> <p>pre-line   | |   text-shadow   |  |   \u2714\ufe0f   |  |  | |   -dm-text-outline   |  |   \u2714\ufe0f   |  |   Custom attribute: Adds an outline to text. Values are in the form:</p> <p>width color style </p> <p>.</p> <p>The style is either blank, or any combination of the</p> <p>sharp</p> <p>and</p> <p>square</p> <p>keywords (see  Outline filter   ).   |</p> <p>|   Attribute   |   Output   |   Maptext   |   Other   |   Notes   |</p> <p>Attribute  |</p> <p>Output  |</p> <p>Maptext  |</p> <p>Other  |</p> <p>Notes  | |   color   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Alpha colors may not be supported in some controls.   |</p> <p>color  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>Alpha colors may not be supported in some controls.  | |   background   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   In most cases, only applies to the entire text body.   |</p> <p>background  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>In most cases, only applies to the entire text body.  | |   background-color   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  |</p> <p>background-color  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |   | |   background-image   |   \u2714\ufe0f   |  |  |  |</p> <p>background-image  |</p> <p>\u2714\ufe0f  |   |   |   | |   font   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>font  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   font-family   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>font-family  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   font-style   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>font-style  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   font-weight   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>font-weight  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   font-size   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>font-size  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   text-decoration   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>underline</p> <p>,</p> <p>overline</p> <p>,</p> <p>line-through</p> <p>,</p> <p>blink</p> <p>, and</p> <p>none</p> <p>. Support for each of these may vary depending on where they are used.   |</p> <p>text-decoration  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>Limited to</p> <p>underline</p> <p>,</p> <p>overline</p> <p>,</p> <p>line-through</p> <p>,</p> <p>blink</p> <p>, and</p> <p>none</p> <p>. Support for each of these may vary depending on where they are used.  |</p> <p>underline</p> <p>overline</p> <p>line-through</p> <p>blink</p> <p>none</p> <p>|   text-align   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |   justify</p> <p>is supported in output and maptext.   |</p> <p>text-align  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>justify</p> <p>is supported in output and maptext.  |</p> <p>justify</p> <p>|   vertical-align   |  |   \u2714\ufe0f   |   \u2714\ufe0f   |   Limited to</p> <p>top</p> <p>,</p> <p>middle</p> <p>, and</p> <p>bottom</p> <p>.   |</p> <p>vertical-align  |   |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>Limited to</p> <p>top</p> <p>,</p> <p>middle</p> <p>, and</p> <p>bottom</p> <p>.  |</p> <p>top</p> <p>middle</p> <p>bottom</p> <p>|   text-indent   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |  |</p> <p>text-indent  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |   | |   margin-left   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>margin-left  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   margin-right   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>margin-right  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   margin-top   |  |  |   \u2714\ufe0f   |  |</p> <p>margin-top  |   |   |</p> <p>\u2714\ufe0f  |   | |   margin-bottom   |  |  |   \u2714\ufe0f   |  |</p> <p>margin-bottom  |   |   |</p> <p>\u2714\ufe0f  |   | |   margin   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>margin  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   width   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   |</p> <p>width  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |</p> <p>Applies only to some elements such as images.  | |   height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Applies only to some elements such as images.   |</p> <p>height  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |</p> <p>Applies only to some elements such as images.  | |   line-height   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   Support in output control is limited; line heights less than 1 are not respected.</p> <p>Only unitless numbers, percentages, or em units are allowed.   |</p> <p>line-height  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |</p> <p>Support in output control is limited; line heights less than 1 are not respected.</p> <p>Only unitless numbers, percentages, or em units are allowed.  |</p> <p>|   white-space   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |   normal</p> <p>,</p> <p>nowrap</p> <p>,</p> <p>pre</p> <p>,</p> <p>pre-wrap</p> <p>,</p> <p>pre-line   |</p> <p>white-space  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   |</p> <p>normal</p> <p>,</p> <p>nowrap</p> <p>,</p> <p>pre</p> <p>,</p> <p>pre-wrap</p> <p>,</p> <p>pre-line   |</p> <p>normal</p> <p>nowrap</p> <p>pre</p> <p>pre-wrap</p> <p>pre-line</p> <p>|   text-shadow   |  |   \u2714\ufe0f   |  |  |</p> <p>text-shadow  |   |</p> <p>\u2714\ufe0f  |   |   | |   -dm-text-outline   |  |   \u2714\ufe0f   |  |   Custom attribute: Adds an outline to text. Values are in the form:</p> <p>width color style </p> <p>.</p> <p>The style is either blank, or any combination of the</p> <p>sharp</p> <p>and</p> <p>square</p> <p>keywords (see  Outline filter   ).   |</p> <p>-dm-text-outline  |   |</p> <p>\u2714\ufe0f  |   |</p> <p>Custom attribute: Adds an outline to text. Values are in the form:</p> <p>width color style </p> <p>.</p> <p>The style is either blank, or any combination of the</p> <p>sharp</p> <p>and</p> <p>square</p> <p>keywords (see  Outline filter   ).  |</p> <p>width color style </p> <p>width color style</p> <p>sharp</p> <p>square</p> <p>Outline filter</p> <p>These pseudo-classes are allowed in some contexts, but they can only change the text color.</p> <p>|   Psuedo-class   |   Output   |   Maptext   |   Other   |   Notes   | |   :link   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  | |   :visited   |   \u2714\ufe0f   |  |  |  | |   :active   |  |  |  |   Currently not used, but future support is planned.   | |   :hover   |  |   \u2714\ufe0f   |  |  |</p> <p>|   Psuedo-class   |   Output   |   Maptext   |   Other   |   Notes   |</p> <p>Psuedo-class  |</p> <p>Output  |</p> <p>Maptext  |</p> <p>Other  |</p> <p>Notes  | |   :link   |   \u2714\ufe0f   |   \u2714\ufe0f   |   \u2714\ufe0f   |  |</p> <p>:link  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |</p> <p>\u2714\ufe0f  |   | |   :visited   |   \u2714\ufe0f   |  |  |  |</p> <p>:visited  |</p> <p>\u2714\ufe0f  |   |   |   | |   :active   |  |  |  |   Currently not used, but future support is planned.   |</p> <p>:active  |   |   |   |</p> <p>Currently not used, but future support is planned.  | |   :hover   |  |   \u2714\ufe0f   |  |  |</p> <p>:hover  |   |</p> <p>\u2714\ufe0f  |   |   |</p>"},{"location":"%7B%7Bappendix%7D%7D/html-colors/","title":"Html colors","text":""},{"location":"%7B%7Bappendix%7D%7D/html-colors/#html-colors","title":"HTML colors","text":"<p>See also: </p> <p>rgb proc </p> <p>See also: </p> <p>See also:</p> <p>rgb proc </p> <p>rgb proc</p> <p>Text colors may be specified by name or RGB value. The RGB color format uses hexadecimal numbers, with 2 hex digits each for red, green, and blue. These range from 0 (00 in hex) to 255 (FF in hex). In certain situations BYOND will also honor a fourth pair of digits for alpha.</p> <pre><code>#rrggbb\n#rrggbbaa\n\n</code></pre> <p>rr</p> <p>gg</p> <p>bb</p> <p>rr</p> <p>gg</p> <p>bb</p> <p>aa</p> <p>It is also possible to use 4 bit values by using only one hex digit per color. The full 8 bit color is produced by repeating each digit. For example,  <code>#F00</code>   (red) is the same as  <code>#FF0000</code>   .</p> <p><code>#F00</code> <code>#FF0000</code></p> <p>The named colors supported by BYOND, and their corresponding RGB values, are listed in the following table:</p> <p>|   black   |   #000000   |  | |   silver   |   #C0C0C0   |  | |   gray  or   grey   |   #808080   |  | |   white   |   #FFFFFF   |  | |   maroon   |   #800000   |  | |   red   |   #FF0000   |  | |   purple   |   #800080   |  | |   fuchsia  or   magenta   |   #FF00FF   |  | |   green   |   #00C000   |  | |   lime   |   #00FF00   |  | |   olive  or   gold   |   #808000   |  | |   yellow   |   #FFFF00   |  | |   navy   |   #000080   |  | |   blue   |   #0000FF   |  | |   teal   |   #008080   |  | |   aqua  or   cyan   |   #00FFFF   |  |</p> <p>|   black   |   #000000   |  |</p> <p>black  |</p> <p>#000000  |   | |   silver   |   #C0C0C0   |  |</p> <p>silver  |</p> <p>#C0C0C0  |   | |   gray  or   grey   |   #808080   |  |</p> <p>gray  or   grey  | or</p> <p>#808080  |   | |   white   |   #FFFFFF   |  |</p> <p>white  |</p> <p>#FFFFFF  |   | |   maroon   |   #800000   |  |</p> <p>maroon  |</p> <p>#800000  |   | |   red   |   #FF0000   |  |</p> <p>red  |</p> <p>#FF0000  |   | |   purple   |   #800080   |  |</p> <p>purple  |</p> <p>#800080  |   | |   fuchsia  or   magenta   |   #FF00FF   |  |</p> <p>fuchsia  or   magenta  | or</p> <p>#FF00FF  |   | |   green   |   #00C000   |  |</p> <p>green  |</p> <p>#00C000  |   | |   lime   |   #00FF00   |  |</p> <p>lime  |</p> <p>#00FF00  |   | |   olive  or   gold   |   #808000   |  |</p> <p>olive  or   gold  | or</p> <p>#808000  |   | |   yellow   |   #FFFF00   |  |</p> <p>yellow  |</p> <p>#FFFF00  |   | |   navy   |   #000080   |  |</p> <p>navy  |</p> <p>#000080  |   | |   blue   |   #0000FF   |  |</p> <p>blue  |</p> <p>#0000FF  |   | |   teal   |   #008080   |  |</p> <p>teal  |</p> <p>#008080  |   | |   aqua  or   cyan   |   #00FFFF   |  |</p> <p>aqua  or   cyan  | or</p> <p>#00FFFF  |   |</p>"},{"location":"%7B%7Bappendix%7D%7D/stddef%252edm/","title":"Stddef%2edm","text":""},{"location":"%7B%7Bappendix%7D%7D/stddef%252edm/#stddefdm-file","title":"stddef.dm file","text":"<p>This is a special file that's included in all projects when you compile. It contains various constants, definitions of some built-in datums, and so on.</p> <p>You can see the contents of this file by creating a new file in Dream Maker called</p> <p>stddef.dm</p> <p>. It will automatically be filled with the standard definitions.</p> <p>stddef.dm</p> <p>The contents of</p> <p>stddef.dm</p> <p>may change with new BYOND versions. However an eye is always kept on backwards-compatibility.</p> <p>stddef.dm</p>"}]}